
F411_APP_NSEMI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08008000  08008000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d8d4  080081a0  080081a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bfc  08015a78  08015a78  0000ea78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016674  08016674  000102ec  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08016674  08016674  0000f674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801667c  0801667c  000102ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801667c  0801667c  0000f67c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08016680  08016680  0000f680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002ec  20000000  08016684  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f6c  200002ec  08016970  000102ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001258  08016970  00011258  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000102ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cf5f  00000000  00000000  0001031c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000049c4  00000000  00000000  0002d27b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019a0  00000000  00000000  00031c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013c7  00000000  00000000  000335e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006ffb  00000000  00000000  000349a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022b63  00000000  00000000  0003b9a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a3f4a  00000000  00000000  0005e505  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010244f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007c5c  00000000  00000000  00102494  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0010a0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080081a0 <__do_global_dtors_aux>:
 80081a0:	b510      	push	{r4, lr}
 80081a2:	4c05      	ldr	r4, [pc, #20]	@ (80081b8 <__do_global_dtors_aux+0x18>)
 80081a4:	7823      	ldrb	r3, [r4, #0]
 80081a6:	b933      	cbnz	r3, 80081b6 <__do_global_dtors_aux+0x16>
 80081a8:	4b04      	ldr	r3, [pc, #16]	@ (80081bc <__do_global_dtors_aux+0x1c>)
 80081aa:	b113      	cbz	r3, 80081b2 <__do_global_dtors_aux+0x12>
 80081ac:	4804      	ldr	r0, [pc, #16]	@ (80081c0 <__do_global_dtors_aux+0x20>)
 80081ae:	f3af 8000 	nop.w
 80081b2:	2301      	movs	r3, #1
 80081b4:	7023      	strb	r3, [r4, #0]
 80081b6:	bd10      	pop	{r4, pc}
 80081b8:	200002ec 	.word	0x200002ec
 80081bc:	00000000 	.word	0x00000000
 80081c0:	08015a5c 	.word	0x08015a5c

080081c4 <frame_dummy>:
 80081c4:	b508      	push	{r3, lr}
 80081c6:	4b03      	ldr	r3, [pc, #12]	@ (80081d4 <frame_dummy+0x10>)
 80081c8:	b11b      	cbz	r3, 80081d2 <frame_dummy+0xe>
 80081ca:	4903      	ldr	r1, [pc, #12]	@ (80081d8 <frame_dummy+0x14>)
 80081cc:	4803      	ldr	r0, [pc, #12]	@ (80081dc <frame_dummy+0x18>)
 80081ce:	f3af 8000 	nop.w
 80081d2:	bd08      	pop	{r3, pc}
 80081d4:	00000000 	.word	0x00000000
 80081d8:	200002f0 	.word	0x200002f0
 80081dc:	08015a5c 	.word	0x08015a5c

080081e0 <memchr>:
 80081e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80081e4:	2a10      	cmp	r2, #16
 80081e6:	db2b      	blt.n	8008240 <memchr+0x60>
 80081e8:	f010 0f07 	tst.w	r0, #7
 80081ec:	d008      	beq.n	8008200 <memchr+0x20>
 80081ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80081f2:	3a01      	subs	r2, #1
 80081f4:	428b      	cmp	r3, r1
 80081f6:	d02d      	beq.n	8008254 <memchr+0x74>
 80081f8:	f010 0f07 	tst.w	r0, #7
 80081fc:	b342      	cbz	r2, 8008250 <memchr+0x70>
 80081fe:	d1f6      	bne.n	80081ee <memchr+0xe>
 8008200:	b4f0      	push	{r4, r5, r6, r7}
 8008202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800820a:	f022 0407 	bic.w	r4, r2, #7
 800820e:	f07f 0700 	mvns.w	r7, #0
 8008212:	2300      	movs	r3, #0
 8008214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008218:	3c08      	subs	r4, #8
 800821a:	ea85 0501 	eor.w	r5, r5, r1
 800821e:	ea86 0601 	eor.w	r6, r6, r1
 8008222:	fa85 f547 	uadd8	r5, r5, r7
 8008226:	faa3 f587 	sel	r5, r3, r7
 800822a:	fa86 f647 	uadd8	r6, r6, r7
 800822e:	faa5 f687 	sel	r6, r5, r7
 8008232:	b98e      	cbnz	r6, 8008258 <memchr+0x78>
 8008234:	d1ee      	bne.n	8008214 <memchr+0x34>
 8008236:	bcf0      	pop	{r4, r5, r6, r7}
 8008238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800823c:	f002 0207 	and.w	r2, r2, #7
 8008240:	b132      	cbz	r2, 8008250 <memchr+0x70>
 8008242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008246:	3a01      	subs	r2, #1
 8008248:	ea83 0301 	eor.w	r3, r3, r1
 800824c:	b113      	cbz	r3, 8008254 <memchr+0x74>
 800824e:	d1f8      	bne.n	8008242 <memchr+0x62>
 8008250:	2000      	movs	r0, #0
 8008252:	4770      	bx	lr
 8008254:	3801      	subs	r0, #1
 8008256:	4770      	bx	lr
 8008258:	2d00      	cmp	r5, #0
 800825a:	bf06      	itte	eq
 800825c:	4635      	moveq	r5, r6
 800825e:	3803      	subeq	r0, #3
 8008260:	3807      	subne	r0, #7
 8008262:	f015 0f01 	tst.w	r5, #1
 8008266:	d107      	bne.n	8008278 <memchr+0x98>
 8008268:	3001      	adds	r0, #1
 800826a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800826e:	bf02      	ittt	eq
 8008270:	3001      	addeq	r0, #1
 8008272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8008276:	3001      	addeq	r0, #1
 8008278:	bcf0      	pop	{r4, r5, r6, r7}
 800827a:	3801      	subs	r0, #1
 800827c:	4770      	bx	lr
 800827e:	bf00      	nop

08008280 <strlen>:
 8008280:	4603      	mov	r3, r0
 8008282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008286:	2a00      	cmp	r2, #0
 8008288:	d1fb      	bne.n	8008282 <strlen+0x2>
 800828a:	1a18      	subs	r0, r3, r0
 800828c:	3801      	subs	r0, #1
 800828e:	4770      	bx	lr

08008290 <__aeabi_drsub>:
 8008290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8008294:	e002      	b.n	800829c <__adddf3>
 8008296:	bf00      	nop

08008298 <__aeabi_dsub>:
 8008298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800829c <__adddf3>:
 800829c:	b530      	push	{r4, r5, lr}
 800829e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80082a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80082a6:	ea94 0f05 	teq	r4, r5
 80082aa:	bf08      	it	eq
 80082ac:	ea90 0f02 	teqeq	r0, r2
 80082b0:	bf1f      	itttt	ne
 80082b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80082b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80082ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80082be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80082c2:	f000 80e2 	beq.w	800848a <__adddf3+0x1ee>
 80082c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80082ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80082ce:	bfb8      	it	lt
 80082d0:	426d      	neglt	r5, r5
 80082d2:	dd0c      	ble.n	80082ee <__adddf3+0x52>
 80082d4:	442c      	add	r4, r5
 80082d6:	ea80 0202 	eor.w	r2, r0, r2
 80082da:	ea81 0303 	eor.w	r3, r1, r3
 80082de:	ea82 0000 	eor.w	r0, r2, r0
 80082e2:	ea83 0101 	eor.w	r1, r3, r1
 80082e6:	ea80 0202 	eor.w	r2, r0, r2
 80082ea:	ea81 0303 	eor.w	r3, r1, r3
 80082ee:	2d36      	cmp	r5, #54	@ 0x36
 80082f0:	bf88      	it	hi
 80082f2:	bd30      	pophi	{r4, r5, pc}
 80082f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80082f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80082fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8008300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008304:	d002      	beq.n	800830c <__adddf3+0x70>
 8008306:	4240      	negs	r0, r0
 8008308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800830c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8008310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008318:	d002      	beq.n	8008320 <__adddf3+0x84>
 800831a:	4252      	negs	r2, r2
 800831c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008320:	ea94 0f05 	teq	r4, r5
 8008324:	f000 80a7 	beq.w	8008476 <__adddf3+0x1da>
 8008328:	f1a4 0401 	sub.w	r4, r4, #1
 800832c:	f1d5 0e20 	rsbs	lr, r5, #32
 8008330:	db0d      	blt.n	800834e <__adddf3+0xb2>
 8008332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008336:	fa22 f205 	lsr.w	r2, r2, r5
 800833a:	1880      	adds	r0, r0, r2
 800833c:	f141 0100 	adc.w	r1, r1, #0
 8008340:	fa03 f20e 	lsl.w	r2, r3, lr
 8008344:	1880      	adds	r0, r0, r2
 8008346:	fa43 f305 	asr.w	r3, r3, r5
 800834a:	4159      	adcs	r1, r3
 800834c:	e00e      	b.n	800836c <__adddf3+0xd0>
 800834e:	f1a5 0520 	sub.w	r5, r5, #32
 8008352:	f10e 0e20 	add.w	lr, lr, #32
 8008356:	2a01      	cmp	r2, #1
 8008358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800835c:	bf28      	it	cs
 800835e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8008362:	fa43 f305 	asr.w	r3, r3, r5
 8008366:	18c0      	adds	r0, r0, r3
 8008368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800836c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8008370:	d507      	bpl.n	8008382 <__adddf3+0xe6>
 8008372:	f04f 0e00 	mov.w	lr, #0
 8008376:	f1dc 0c00 	rsbs	ip, ip, #0
 800837a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800837e:	eb6e 0101 	sbc.w	r1, lr, r1
 8008382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8008386:	d31b      	bcc.n	80083c0 <__adddf3+0x124>
 8008388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800838c:	d30c      	bcc.n	80083a8 <__adddf3+0x10c>
 800838e:	0849      	lsrs	r1, r1, #1
 8008390:	ea5f 0030 	movs.w	r0, r0, rrx
 8008394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8008398:	f104 0401 	add.w	r4, r4, #1
 800839c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80083a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80083a4:	f080 809a 	bcs.w	80084dc <__adddf3+0x240>
 80083a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80083ac:	bf08      	it	eq
 80083ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80083b2:	f150 0000 	adcs.w	r0, r0, #0
 80083b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80083ba:	ea41 0105 	orr.w	r1, r1, r5
 80083be:	bd30      	pop	{r4, r5, pc}
 80083c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80083c4:	4140      	adcs	r0, r0
 80083c6:	eb41 0101 	adc.w	r1, r1, r1
 80083ca:	3c01      	subs	r4, #1
 80083cc:	bf28      	it	cs
 80083ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80083d2:	d2e9      	bcs.n	80083a8 <__adddf3+0x10c>
 80083d4:	f091 0f00 	teq	r1, #0
 80083d8:	bf04      	itt	eq
 80083da:	4601      	moveq	r1, r0
 80083dc:	2000      	moveq	r0, #0
 80083de:	fab1 f381 	clz	r3, r1
 80083e2:	bf08      	it	eq
 80083e4:	3320      	addeq	r3, #32
 80083e6:	f1a3 030b 	sub.w	r3, r3, #11
 80083ea:	f1b3 0220 	subs.w	r2, r3, #32
 80083ee:	da0c      	bge.n	800840a <__adddf3+0x16e>
 80083f0:	320c      	adds	r2, #12
 80083f2:	dd08      	ble.n	8008406 <__adddf3+0x16a>
 80083f4:	f102 0c14 	add.w	ip, r2, #20
 80083f8:	f1c2 020c 	rsb	r2, r2, #12
 80083fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8008400:	fa21 f102 	lsr.w	r1, r1, r2
 8008404:	e00c      	b.n	8008420 <__adddf3+0x184>
 8008406:	f102 0214 	add.w	r2, r2, #20
 800840a:	bfd8      	it	le
 800840c:	f1c2 0c20 	rsble	ip, r2, #32
 8008410:	fa01 f102 	lsl.w	r1, r1, r2
 8008414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008418:	bfdc      	itt	le
 800841a:	ea41 010c 	orrle.w	r1, r1, ip
 800841e:	4090      	lslle	r0, r2
 8008420:	1ae4      	subs	r4, r4, r3
 8008422:	bfa2      	ittt	ge
 8008424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008428:	4329      	orrge	r1, r5
 800842a:	bd30      	popge	{r4, r5, pc}
 800842c:	ea6f 0404 	mvn.w	r4, r4
 8008430:	3c1f      	subs	r4, #31
 8008432:	da1c      	bge.n	800846e <__adddf3+0x1d2>
 8008434:	340c      	adds	r4, #12
 8008436:	dc0e      	bgt.n	8008456 <__adddf3+0x1ba>
 8008438:	f104 0414 	add.w	r4, r4, #20
 800843c:	f1c4 0220 	rsb	r2, r4, #32
 8008440:	fa20 f004 	lsr.w	r0, r0, r4
 8008444:	fa01 f302 	lsl.w	r3, r1, r2
 8008448:	ea40 0003 	orr.w	r0, r0, r3
 800844c:	fa21 f304 	lsr.w	r3, r1, r4
 8008450:	ea45 0103 	orr.w	r1, r5, r3
 8008454:	bd30      	pop	{r4, r5, pc}
 8008456:	f1c4 040c 	rsb	r4, r4, #12
 800845a:	f1c4 0220 	rsb	r2, r4, #32
 800845e:	fa20 f002 	lsr.w	r0, r0, r2
 8008462:	fa01 f304 	lsl.w	r3, r1, r4
 8008466:	ea40 0003 	orr.w	r0, r0, r3
 800846a:	4629      	mov	r1, r5
 800846c:	bd30      	pop	{r4, r5, pc}
 800846e:	fa21 f004 	lsr.w	r0, r1, r4
 8008472:	4629      	mov	r1, r5
 8008474:	bd30      	pop	{r4, r5, pc}
 8008476:	f094 0f00 	teq	r4, #0
 800847a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800847e:	bf06      	itte	eq
 8008480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8008484:	3401      	addeq	r4, #1
 8008486:	3d01      	subne	r5, #1
 8008488:	e74e      	b.n	8008328 <__adddf3+0x8c>
 800848a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800848e:	bf18      	it	ne
 8008490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008494:	d029      	beq.n	80084ea <__adddf3+0x24e>
 8008496:	ea94 0f05 	teq	r4, r5
 800849a:	bf08      	it	eq
 800849c:	ea90 0f02 	teqeq	r0, r2
 80084a0:	d005      	beq.n	80084ae <__adddf3+0x212>
 80084a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80084a6:	bf04      	itt	eq
 80084a8:	4619      	moveq	r1, r3
 80084aa:	4610      	moveq	r0, r2
 80084ac:	bd30      	pop	{r4, r5, pc}
 80084ae:	ea91 0f03 	teq	r1, r3
 80084b2:	bf1e      	ittt	ne
 80084b4:	2100      	movne	r1, #0
 80084b6:	2000      	movne	r0, #0
 80084b8:	bd30      	popne	{r4, r5, pc}
 80084ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80084be:	d105      	bne.n	80084cc <__adddf3+0x230>
 80084c0:	0040      	lsls	r0, r0, #1
 80084c2:	4149      	adcs	r1, r1
 80084c4:	bf28      	it	cs
 80084c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80084ca:	bd30      	pop	{r4, r5, pc}
 80084cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80084d0:	bf3c      	itt	cc
 80084d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80084d6:	bd30      	popcc	{r4, r5, pc}
 80084d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80084dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80084e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80084e4:	f04f 0000 	mov.w	r0, #0
 80084e8:	bd30      	pop	{r4, r5, pc}
 80084ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80084ee:	bf1a      	itte	ne
 80084f0:	4619      	movne	r1, r3
 80084f2:	4610      	movne	r0, r2
 80084f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80084f8:	bf1c      	itt	ne
 80084fa:	460b      	movne	r3, r1
 80084fc:	4602      	movne	r2, r0
 80084fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008502:	bf06      	itte	eq
 8008504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008508:	ea91 0f03 	teqeq	r1, r3
 800850c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8008510:	bd30      	pop	{r4, r5, pc}
 8008512:	bf00      	nop

08008514 <__aeabi_ui2d>:
 8008514:	f090 0f00 	teq	r0, #0
 8008518:	bf04      	itt	eq
 800851a:	2100      	moveq	r1, #0
 800851c:	4770      	bxeq	lr
 800851e:	b530      	push	{r4, r5, lr}
 8008520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8008524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8008528:	f04f 0500 	mov.w	r5, #0
 800852c:	f04f 0100 	mov.w	r1, #0
 8008530:	e750      	b.n	80083d4 <__adddf3+0x138>
 8008532:	bf00      	nop

08008534 <__aeabi_i2d>:
 8008534:	f090 0f00 	teq	r0, #0
 8008538:	bf04      	itt	eq
 800853a:	2100      	moveq	r1, #0
 800853c:	4770      	bxeq	lr
 800853e:	b530      	push	{r4, r5, lr}
 8008540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8008544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8008548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800854c:	bf48      	it	mi
 800854e:	4240      	negmi	r0, r0
 8008550:	f04f 0100 	mov.w	r1, #0
 8008554:	e73e      	b.n	80083d4 <__adddf3+0x138>
 8008556:	bf00      	nop

08008558 <__aeabi_f2d>:
 8008558:	0042      	lsls	r2, r0, #1
 800855a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800855e:	ea4f 0131 	mov.w	r1, r1, rrx
 8008562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8008566:	bf1f      	itttt	ne
 8008568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800856c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8008570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8008574:	4770      	bxne	lr
 8008576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800857a:	bf08      	it	eq
 800857c:	4770      	bxeq	lr
 800857e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8008582:	bf04      	itt	eq
 8008584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8008588:	4770      	bxeq	lr
 800858a:	b530      	push	{r4, r5, lr}
 800858c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8008590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8008594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8008598:	e71c      	b.n	80083d4 <__adddf3+0x138>
 800859a:	bf00      	nop

0800859c <__aeabi_ul2d>:
 800859c:	ea50 0201 	orrs.w	r2, r0, r1
 80085a0:	bf08      	it	eq
 80085a2:	4770      	bxeq	lr
 80085a4:	b530      	push	{r4, r5, lr}
 80085a6:	f04f 0500 	mov.w	r5, #0
 80085aa:	e00a      	b.n	80085c2 <__aeabi_l2d+0x16>

080085ac <__aeabi_l2d>:
 80085ac:	ea50 0201 	orrs.w	r2, r0, r1
 80085b0:	bf08      	it	eq
 80085b2:	4770      	bxeq	lr
 80085b4:	b530      	push	{r4, r5, lr}
 80085b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80085ba:	d502      	bpl.n	80085c2 <__aeabi_l2d+0x16>
 80085bc:	4240      	negs	r0, r0
 80085be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80085c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80085c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80085ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80085ce:	f43f aed8 	beq.w	8008382 <__adddf3+0xe6>
 80085d2:	f04f 0203 	mov.w	r2, #3
 80085d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80085da:	bf18      	it	ne
 80085dc:	3203      	addne	r2, #3
 80085de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80085e2:	bf18      	it	ne
 80085e4:	3203      	addne	r2, #3
 80085e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80085ea:	f1c2 0320 	rsb	r3, r2, #32
 80085ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80085f2:	fa20 f002 	lsr.w	r0, r0, r2
 80085f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80085fa:	ea40 000e 	orr.w	r0, r0, lr
 80085fe:	fa21 f102 	lsr.w	r1, r1, r2
 8008602:	4414      	add	r4, r2
 8008604:	e6bd      	b.n	8008382 <__adddf3+0xe6>
 8008606:	bf00      	nop

08008608 <__aeabi_dmul>:
 8008608:	b570      	push	{r4, r5, r6, lr}
 800860a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800860e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8008612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008616:	bf1d      	ittte	ne
 8008618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800861c:	ea94 0f0c 	teqne	r4, ip
 8008620:	ea95 0f0c 	teqne	r5, ip
 8008624:	f000 f8de 	bleq	80087e4 <__aeabi_dmul+0x1dc>
 8008628:	442c      	add	r4, r5
 800862a:	ea81 0603 	eor.w	r6, r1, r3
 800862e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8008632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8008636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800863a:	bf18      	it	ne
 800863c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8008640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8008644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008648:	d038      	beq.n	80086bc <__aeabi_dmul+0xb4>
 800864a:	fba0 ce02 	umull	ip, lr, r0, r2
 800864e:	f04f 0500 	mov.w	r5, #0
 8008652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8008656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800865a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800865e:	f04f 0600 	mov.w	r6, #0
 8008662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8008666:	f09c 0f00 	teq	ip, #0
 800866a:	bf18      	it	ne
 800866c:	f04e 0e01 	orrne.w	lr, lr, #1
 8008670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8008674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8008678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800867c:	d204      	bcs.n	8008688 <__aeabi_dmul+0x80>
 800867e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8008682:	416d      	adcs	r5, r5
 8008684:	eb46 0606 	adc.w	r6, r6, r6
 8008688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800868c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8008690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8008694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8008698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800869c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80086a0:	bf88      	it	hi
 80086a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80086a6:	d81e      	bhi.n	80086e6 <__aeabi_dmul+0xde>
 80086a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80086ac:	bf08      	it	eq
 80086ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80086b2:	f150 0000 	adcs.w	r0, r0, #0
 80086b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80086ba:	bd70      	pop	{r4, r5, r6, pc}
 80086bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80086c0:	ea46 0101 	orr.w	r1, r6, r1
 80086c4:	ea40 0002 	orr.w	r0, r0, r2
 80086c8:	ea81 0103 	eor.w	r1, r1, r3
 80086cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80086d0:	bfc2      	ittt	gt
 80086d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80086d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80086da:	bd70      	popgt	{r4, r5, r6, pc}
 80086dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80086e0:	f04f 0e00 	mov.w	lr, #0
 80086e4:	3c01      	subs	r4, #1
 80086e6:	f300 80ab 	bgt.w	8008840 <__aeabi_dmul+0x238>
 80086ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80086ee:	bfde      	ittt	le
 80086f0:	2000      	movle	r0, #0
 80086f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80086f6:	bd70      	pople	{r4, r5, r6, pc}
 80086f8:	f1c4 0400 	rsb	r4, r4, #0
 80086fc:	3c20      	subs	r4, #32
 80086fe:	da35      	bge.n	800876c <__aeabi_dmul+0x164>
 8008700:	340c      	adds	r4, #12
 8008702:	dc1b      	bgt.n	800873c <__aeabi_dmul+0x134>
 8008704:	f104 0414 	add.w	r4, r4, #20
 8008708:	f1c4 0520 	rsb	r5, r4, #32
 800870c:	fa00 f305 	lsl.w	r3, r0, r5
 8008710:	fa20 f004 	lsr.w	r0, r0, r4
 8008714:	fa01 f205 	lsl.w	r2, r1, r5
 8008718:	ea40 0002 	orr.w	r0, r0, r2
 800871c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8008720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8008724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008728:	fa21 f604 	lsr.w	r6, r1, r4
 800872c:	eb42 0106 	adc.w	r1, r2, r6
 8008730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008734:	bf08      	it	eq
 8008736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800873a:	bd70      	pop	{r4, r5, r6, pc}
 800873c:	f1c4 040c 	rsb	r4, r4, #12
 8008740:	f1c4 0520 	rsb	r5, r4, #32
 8008744:	fa00 f304 	lsl.w	r3, r0, r4
 8008748:	fa20 f005 	lsr.w	r0, r0, r5
 800874c:	fa01 f204 	lsl.w	r2, r1, r4
 8008750:	ea40 0002 	orr.w	r0, r0, r2
 8008754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8008758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800875c:	f141 0100 	adc.w	r1, r1, #0
 8008760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008764:	bf08      	it	eq
 8008766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800876a:	bd70      	pop	{r4, r5, r6, pc}
 800876c:	f1c4 0520 	rsb	r5, r4, #32
 8008770:	fa00 f205 	lsl.w	r2, r0, r5
 8008774:	ea4e 0e02 	orr.w	lr, lr, r2
 8008778:	fa20 f304 	lsr.w	r3, r0, r4
 800877c:	fa01 f205 	lsl.w	r2, r1, r5
 8008780:	ea43 0302 	orr.w	r3, r3, r2
 8008784:	fa21 f004 	lsr.w	r0, r1, r4
 8008788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800878c:	fa21 f204 	lsr.w	r2, r1, r4
 8008790:	ea20 0002 	bic.w	r0, r0, r2
 8008794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8008798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800879c:	bf08      	it	eq
 800879e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80087a2:	bd70      	pop	{r4, r5, r6, pc}
 80087a4:	f094 0f00 	teq	r4, #0
 80087a8:	d10f      	bne.n	80087ca <__aeabi_dmul+0x1c2>
 80087aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80087ae:	0040      	lsls	r0, r0, #1
 80087b0:	eb41 0101 	adc.w	r1, r1, r1
 80087b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80087b8:	bf08      	it	eq
 80087ba:	3c01      	subeq	r4, #1
 80087bc:	d0f7      	beq.n	80087ae <__aeabi_dmul+0x1a6>
 80087be:	ea41 0106 	orr.w	r1, r1, r6
 80087c2:	f095 0f00 	teq	r5, #0
 80087c6:	bf18      	it	ne
 80087c8:	4770      	bxne	lr
 80087ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80087ce:	0052      	lsls	r2, r2, #1
 80087d0:	eb43 0303 	adc.w	r3, r3, r3
 80087d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80087d8:	bf08      	it	eq
 80087da:	3d01      	subeq	r5, #1
 80087dc:	d0f7      	beq.n	80087ce <__aeabi_dmul+0x1c6>
 80087de:	ea43 0306 	orr.w	r3, r3, r6
 80087e2:	4770      	bx	lr
 80087e4:	ea94 0f0c 	teq	r4, ip
 80087e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80087ec:	bf18      	it	ne
 80087ee:	ea95 0f0c 	teqne	r5, ip
 80087f2:	d00c      	beq.n	800880e <__aeabi_dmul+0x206>
 80087f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80087f8:	bf18      	it	ne
 80087fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80087fe:	d1d1      	bne.n	80087a4 <__aeabi_dmul+0x19c>
 8008800:	ea81 0103 	eor.w	r1, r1, r3
 8008804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8008808:	f04f 0000 	mov.w	r0, #0
 800880c:	bd70      	pop	{r4, r5, r6, pc}
 800880e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008812:	bf06      	itte	eq
 8008814:	4610      	moveq	r0, r2
 8008816:	4619      	moveq	r1, r3
 8008818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800881c:	d019      	beq.n	8008852 <__aeabi_dmul+0x24a>
 800881e:	ea94 0f0c 	teq	r4, ip
 8008822:	d102      	bne.n	800882a <__aeabi_dmul+0x222>
 8008824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008828:	d113      	bne.n	8008852 <__aeabi_dmul+0x24a>
 800882a:	ea95 0f0c 	teq	r5, ip
 800882e:	d105      	bne.n	800883c <__aeabi_dmul+0x234>
 8008830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008834:	bf1c      	itt	ne
 8008836:	4610      	movne	r0, r2
 8008838:	4619      	movne	r1, r3
 800883a:	d10a      	bne.n	8008852 <__aeabi_dmul+0x24a>
 800883c:	ea81 0103 	eor.w	r1, r1, r3
 8008840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8008844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8008848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800884c:	f04f 0000 	mov.w	r0, #0
 8008850:	bd70      	pop	{r4, r5, r6, pc}
 8008852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8008856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800885a:	bd70      	pop	{r4, r5, r6, pc}

0800885c <__aeabi_ddiv>:
 800885c:	b570      	push	{r4, r5, r6, lr}
 800885e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8008862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8008866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800886a:	bf1d      	ittte	ne
 800886c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8008870:	ea94 0f0c 	teqne	r4, ip
 8008874:	ea95 0f0c 	teqne	r5, ip
 8008878:	f000 f8a7 	bleq	80089ca <__aeabi_ddiv+0x16e>
 800887c:	eba4 0405 	sub.w	r4, r4, r5
 8008880:	ea81 0e03 	eor.w	lr, r1, r3
 8008884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800888c:	f000 8088 	beq.w	80089a0 <__aeabi_ddiv+0x144>
 8008890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8008898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800889c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80088a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80088a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80088a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80088ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80088b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80088b4:	429d      	cmp	r5, r3
 80088b6:	bf08      	it	eq
 80088b8:	4296      	cmpeq	r6, r2
 80088ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80088be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80088c2:	d202      	bcs.n	80088ca <__aeabi_ddiv+0x6e>
 80088c4:	085b      	lsrs	r3, r3, #1
 80088c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80088ca:	1ab6      	subs	r6, r6, r2
 80088cc:	eb65 0503 	sbc.w	r5, r5, r3
 80088d0:	085b      	lsrs	r3, r3, #1
 80088d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80088d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80088da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80088de:	ebb6 0e02 	subs.w	lr, r6, r2
 80088e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80088e6:	bf22      	ittt	cs
 80088e8:	1ab6      	subcs	r6, r6, r2
 80088ea:	4675      	movcs	r5, lr
 80088ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80088f0:	085b      	lsrs	r3, r3, #1
 80088f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80088f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80088fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80088fe:	bf22      	ittt	cs
 8008900:	1ab6      	subcs	r6, r6, r2
 8008902:	4675      	movcs	r5, lr
 8008904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008908:	085b      	lsrs	r3, r3, #1
 800890a:	ea4f 0232 	mov.w	r2, r2, rrx
 800890e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008916:	bf22      	ittt	cs
 8008918:	1ab6      	subcs	r6, r6, r2
 800891a:	4675      	movcs	r5, lr
 800891c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008920:	085b      	lsrs	r3, r3, #1
 8008922:	ea4f 0232 	mov.w	r2, r2, rrx
 8008926:	ebb6 0e02 	subs.w	lr, r6, r2
 800892a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800892e:	bf22      	ittt	cs
 8008930:	1ab6      	subcs	r6, r6, r2
 8008932:	4675      	movcs	r5, lr
 8008934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008938:	ea55 0e06 	orrs.w	lr, r5, r6
 800893c:	d018      	beq.n	8008970 <__aeabi_ddiv+0x114>
 800893e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8008942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8008946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800894a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800894e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8008952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8008956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800895a:	d1c0      	bne.n	80088de <__aeabi_ddiv+0x82>
 800895c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8008960:	d10b      	bne.n	800897a <__aeabi_ddiv+0x11e>
 8008962:	ea41 0100 	orr.w	r1, r1, r0
 8008966:	f04f 0000 	mov.w	r0, #0
 800896a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800896e:	e7b6      	b.n	80088de <__aeabi_ddiv+0x82>
 8008970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8008974:	bf04      	itt	eq
 8008976:	4301      	orreq	r1, r0
 8008978:	2000      	moveq	r0, #0
 800897a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800897e:	bf88      	it	hi
 8008980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8008984:	f63f aeaf 	bhi.w	80086e6 <__aeabi_dmul+0xde>
 8008988:	ebb5 0c03 	subs.w	ip, r5, r3
 800898c:	bf04      	itt	eq
 800898e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8008992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008996:	f150 0000 	adcs.w	r0, r0, #0
 800899a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800899e:	bd70      	pop	{r4, r5, r6, pc}
 80089a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80089a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80089a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80089ac:	bfc2      	ittt	gt
 80089ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80089b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80089b6:	bd70      	popgt	{r4, r5, r6, pc}
 80089b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80089bc:	f04f 0e00 	mov.w	lr, #0
 80089c0:	3c01      	subs	r4, #1
 80089c2:	e690      	b.n	80086e6 <__aeabi_dmul+0xde>
 80089c4:	ea45 0e06 	orr.w	lr, r5, r6
 80089c8:	e68d      	b.n	80086e6 <__aeabi_dmul+0xde>
 80089ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80089ce:	ea94 0f0c 	teq	r4, ip
 80089d2:	bf08      	it	eq
 80089d4:	ea95 0f0c 	teqeq	r5, ip
 80089d8:	f43f af3b 	beq.w	8008852 <__aeabi_dmul+0x24a>
 80089dc:	ea94 0f0c 	teq	r4, ip
 80089e0:	d10a      	bne.n	80089f8 <__aeabi_ddiv+0x19c>
 80089e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80089e6:	f47f af34 	bne.w	8008852 <__aeabi_dmul+0x24a>
 80089ea:	ea95 0f0c 	teq	r5, ip
 80089ee:	f47f af25 	bne.w	800883c <__aeabi_dmul+0x234>
 80089f2:	4610      	mov	r0, r2
 80089f4:	4619      	mov	r1, r3
 80089f6:	e72c      	b.n	8008852 <__aeabi_dmul+0x24a>
 80089f8:	ea95 0f0c 	teq	r5, ip
 80089fc:	d106      	bne.n	8008a0c <__aeabi_ddiv+0x1b0>
 80089fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008a02:	f43f aefd 	beq.w	8008800 <__aeabi_dmul+0x1f8>
 8008a06:	4610      	mov	r0, r2
 8008a08:	4619      	mov	r1, r3
 8008a0a:	e722      	b.n	8008852 <__aeabi_dmul+0x24a>
 8008a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008a10:	bf18      	it	ne
 8008a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008a16:	f47f aec5 	bne.w	80087a4 <__aeabi_dmul+0x19c>
 8008a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8008a1e:	f47f af0d 	bne.w	800883c <__aeabi_dmul+0x234>
 8008a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8008a26:	f47f aeeb 	bne.w	8008800 <__aeabi_dmul+0x1f8>
 8008a2a:	e712      	b.n	8008852 <__aeabi_dmul+0x24a>

08008a2c <__gedf2>:
 8008a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8008a30:	e006      	b.n	8008a40 <__cmpdf2+0x4>
 8008a32:	bf00      	nop

08008a34 <__ledf2>:
 8008a34:	f04f 0c01 	mov.w	ip, #1
 8008a38:	e002      	b.n	8008a40 <__cmpdf2+0x4>
 8008a3a:	bf00      	nop

08008a3c <__cmpdf2>:
 8008a3c:	f04f 0c01 	mov.w	ip, #1
 8008a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8008a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008a50:	bf18      	it	ne
 8008a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8008a56:	d01b      	beq.n	8008a90 <__cmpdf2+0x54>
 8008a58:	b001      	add	sp, #4
 8008a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8008a5e:	bf0c      	ite	eq
 8008a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8008a64:	ea91 0f03 	teqne	r1, r3
 8008a68:	bf02      	ittt	eq
 8008a6a:	ea90 0f02 	teqeq	r0, r2
 8008a6e:	2000      	moveq	r0, #0
 8008a70:	4770      	bxeq	lr
 8008a72:	f110 0f00 	cmn.w	r0, #0
 8008a76:	ea91 0f03 	teq	r1, r3
 8008a7a:	bf58      	it	pl
 8008a7c:	4299      	cmppl	r1, r3
 8008a7e:	bf08      	it	eq
 8008a80:	4290      	cmpeq	r0, r2
 8008a82:	bf2c      	ite	cs
 8008a84:	17d8      	asrcs	r0, r3, #31
 8008a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8008a8a:	f040 0001 	orr.w	r0, r0, #1
 8008a8e:	4770      	bx	lr
 8008a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008a98:	d102      	bne.n	8008aa0 <__cmpdf2+0x64>
 8008a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8008a9e:	d107      	bne.n	8008ab0 <__cmpdf2+0x74>
 8008aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008aa8:	d1d6      	bne.n	8008a58 <__cmpdf2+0x1c>
 8008aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8008aae:	d0d3      	beq.n	8008a58 <__cmpdf2+0x1c>
 8008ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008ab4:	4770      	bx	lr
 8008ab6:	bf00      	nop

08008ab8 <__aeabi_cdrcmple>:
 8008ab8:	4684      	mov	ip, r0
 8008aba:	4610      	mov	r0, r2
 8008abc:	4662      	mov	r2, ip
 8008abe:	468c      	mov	ip, r1
 8008ac0:	4619      	mov	r1, r3
 8008ac2:	4663      	mov	r3, ip
 8008ac4:	e000      	b.n	8008ac8 <__aeabi_cdcmpeq>
 8008ac6:	bf00      	nop

08008ac8 <__aeabi_cdcmpeq>:
 8008ac8:	b501      	push	{r0, lr}
 8008aca:	f7ff ffb7 	bl	8008a3c <__cmpdf2>
 8008ace:	2800      	cmp	r0, #0
 8008ad0:	bf48      	it	mi
 8008ad2:	f110 0f00 	cmnmi.w	r0, #0
 8008ad6:	bd01      	pop	{r0, pc}

08008ad8 <__aeabi_dcmpeq>:
 8008ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008adc:	f7ff fff4 	bl	8008ac8 <__aeabi_cdcmpeq>
 8008ae0:	bf0c      	ite	eq
 8008ae2:	2001      	moveq	r0, #1
 8008ae4:	2000      	movne	r0, #0
 8008ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8008aea:	bf00      	nop

08008aec <__aeabi_dcmplt>:
 8008aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008af0:	f7ff ffea 	bl	8008ac8 <__aeabi_cdcmpeq>
 8008af4:	bf34      	ite	cc
 8008af6:	2001      	movcc	r0, #1
 8008af8:	2000      	movcs	r0, #0
 8008afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8008afe:	bf00      	nop

08008b00 <__aeabi_dcmple>:
 8008b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008b04:	f7ff ffe0 	bl	8008ac8 <__aeabi_cdcmpeq>
 8008b08:	bf94      	ite	ls
 8008b0a:	2001      	movls	r0, #1
 8008b0c:	2000      	movhi	r0, #0
 8008b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008b12:	bf00      	nop

08008b14 <__aeabi_dcmpge>:
 8008b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008b18:	f7ff ffce 	bl	8008ab8 <__aeabi_cdrcmple>
 8008b1c:	bf94      	ite	ls
 8008b1e:	2001      	movls	r0, #1
 8008b20:	2000      	movhi	r0, #0
 8008b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8008b26:	bf00      	nop

08008b28 <__aeabi_dcmpgt>:
 8008b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008b2c:	f7ff ffc4 	bl	8008ab8 <__aeabi_cdrcmple>
 8008b30:	bf34      	ite	cc
 8008b32:	2001      	movcc	r0, #1
 8008b34:	2000      	movcs	r0, #0
 8008b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8008b3a:	bf00      	nop

08008b3c <__aeabi_dcmpun>:
 8008b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008b44:	d102      	bne.n	8008b4c <__aeabi_dcmpun+0x10>
 8008b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8008b4a:	d10a      	bne.n	8008b62 <__aeabi_dcmpun+0x26>
 8008b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008b54:	d102      	bne.n	8008b5c <__aeabi_dcmpun+0x20>
 8008b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8008b5a:	d102      	bne.n	8008b62 <__aeabi_dcmpun+0x26>
 8008b5c:	f04f 0000 	mov.w	r0, #0
 8008b60:	4770      	bx	lr
 8008b62:	f04f 0001 	mov.w	r0, #1
 8008b66:	4770      	bx	lr

08008b68 <__aeabi_d2iz>:
 8008b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8008b70:	d215      	bcs.n	8008b9e <__aeabi_d2iz+0x36>
 8008b72:	d511      	bpl.n	8008b98 <__aeabi_d2iz+0x30>
 8008b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8008b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008b7c:	d912      	bls.n	8008ba4 <__aeabi_d2iz+0x3c>
 8008b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8008b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8008b92:	bf18      	it	ne
 8008b94:	4240      	negne	r0, r0
 8008b96:	4770      	bx	lr
 8008b98:	f04f 0000 	mov.w	r0, #0
 8008b9c:	4770      	bx	lr
 8008b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008ba2:	d105      	bne.n	8008bb0 <__aeabi_d2iz+0x48>
 8008ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8008ba8:	bf08      	it	eq
 8008baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8008bae:	4770      	bx	lr
 8008bb0:	f04f 0000 	mov.w	r0, #0
 8008bb4:	4770      	bx	lr
 8008bb6:	bf00      	nop

08008bb8 <__aeabi_uldivmod>:
 8008bb8:	b953      	cbnz	r3, 8008bd0 <__aeabi_uldivmod+0x18>
 8008bba:	b94a      	cbnz	r2, 8008bd0 <__aeabi_uldivmod+0x18>
 8008bbc:	2900      	cmp	r1, #0
 8008bbe:	bf08      	it	eq
 8008bc0:	2800      	cmpeq	r0, #0
 8008bc2:	bf1c      	itt	ne
 8008bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8008bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8008bcc:	f000 b988 	b.w	8008ee0 <__aeabi_idiv0>
 8008bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8008bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008bd8:	f000 f806 	bl	8008be8 <__udivmoddi4>
 8008bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008be4:	b004      	add	sp, #16
 8008be6:	4770      	bx	lr

08008be8 <__udivmoddi4>:
 8008be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bec:	9d08      	ldr	r5, [sp, #32]
 8008bee:	468e      	mov	lr, r1
 8008bf0:	4604      	mov	r4, r0
 8008bf2:	4688      	mov	r8, r1
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d14a      	bne.n	8008c8e <__udivmoddi4+0xa6>
 8008bf8:	428a      	cmp	r2, r1
 8008bfa:	4617      	mov	r7, r2
 8008bfc:	d962      	bls.n	8008cc4 <__udivmoddi4+0xdc>
 8008bfe:	fab2 f682 	clz	r6, r2
 8008c02:	b14e      	cbz	r6, 8008c18 <__udivmoddi4+0x30>
 8008c04:	f1c6 0320 	rsb	r3, r6, #32
 8008c08:	fa01 f806 	lsl.w	r8, r1, r6
 8008c0c:	fa20 f303 	lsr.w	r3, r0, r3
 8008c10:	40b7      	lsls	r7, r6
 8008c12:	ea43 0808 	orr.w	r8, r3, r8
 8008c16:	40b4      	lsls	r4, r6
 8008c18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8008c1c:	fa1f fc87 	uxth.w	ip, r7
 8008c20:	fbb8 f1fe 	udiv	r1, r8, lr
 8008c24:	0c23      	lsrs	r3, r4, #16
 8008c26:	fb0e 8811 	mls	r8, lr, r1, r8
 8008c2a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008c2e:	fb01 f20c 	mul.w	r2, r1, ip
 8008c32:	429a      	cmp	r2, r3
 8008c34:	d909      	bls.n	8008c4a <__udivmoddi4+0x62>
 8008c36:	18fb      	adds	r3, r7, r3
 8008c38:	f101 30ff 	add.w	r0, r1, #4294967295
 8008c3c:	f080 80ea 	bcs.w	8008e14 <__udivmoddi4+0x22c>
 8008c40:	429a      	cmp	r2, r3
 8008c42:	f240 80e7 	bls.w	8008e14 <__udivmoddi4+0x22c>
 8008c46:	3902      	subs	r1, #2
 8008c48:	443b      	add	r3, r7
 8008c4a:	1a9a      	subs	r2, r3, r2
 8008c4c:	b2a3      	uxth	r3, r4
 8008c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8008c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8008c56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c5a:	fb00 fc0c 	mul.w	ip, r0, ip
 8008c5e:	459c      	cmp	ip, r3
 8008c60:	d909      	bls.n	8008c76 <__udivmoddi4+0x8e>
 8008c62:	18fb      	adds	r3, r7, r3
 8008c64:	f100 32ff 	add.w	r2, r0, #4294967295
 8008c68:	f080 80d6 	bcs.w	8008e18 <__udivmoddi4+0x230>
 8008c6c:	459c      	cmp	ip, r3
 8008c6e:	f240 80d3 	bls.w	8008e18 <__udivmoddi4+0x230>
 8008c72:	443b      	add	r3, r7
 8008c74:	3802      	subs	r0, #2
 8008c76:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8008c7a:	eba3 030c 	sub.w	r3, r3, ip
 8008c7e:	2100      	movs	r1, #0
 8008c80:	b11d      	cbz	r5, 8008c8a <__udivmoddi4+0xa2>
 8008c82:	40f3      	lsrs	r3, r6
 8008c84:	2200      	movs	r2, #0
 8008c86:	e9c5 3200 	strd	r3, r2, [r5]
 8008c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c8e:	428b      	cmp	r3, r1
 8008c90:	d905      	bls.n	8008c9e <__udivmoddi4+0xb6>
 8008c92:	b10d      	cbz	r5, 8008c98 <__udivmoddi4+0xb0>
 8008c94:	e9c5 0100 	strd	r0, r1, [r5]
 8008c98:	2100      	movs	r1, #0
 8008c9a:	4608      	mov	r0, r1
 8008c9c:	e7f5      	b.n	8008c8a <__udivmoddi4+0xa2>
 8008c9e:	fab3 f183 	clz	r1, r3
 8008ca2:	2900      	cmp	r1, #0
 8008ca4:	d146      	bne.n	8008d34 <__udivmoddi4+0x14c>
 8008ca6:	4573      	cmp	r3, lr
 8008ca8:	d302      	bcc.n	8008cb0 <__udivmoddi4+0xc8>
 8008caa:	4282      	cmp	r2, r0
 8008cac:	f200 8105 	bhi.w	8008eba <__udivmoddi4+0x2d2>
 8008cb0:	1a84      	subs	r4, r0, r2
 8008cb2:	eb6e 0203 	sbc.w	r2, lr, r3
 8008cb6:	2001      	movs	r0, #1
 8008cb8:	4690      	mov	r8, r2
 8008cba:	2d00      	cmp	r5, #0
 8008cbc:	d0e5      	beq.n	8008c8a <__udivmoddi4+0xa2>
 8008cbe:	e9c5 4800 	strd	r4, r8, [r5]
 8008cc2:	e7e2      	b.n	8008c8a <__udivmoddi4+0xa2>
 8008cc4:	2a00      	cmp	r2, #0
 8008cc6:	f000 8090 	beq.w	8008dea <__udivmoddi4+0x202>
 8008cca:	fab2 f682 	clz	r6, r2
 8008cce:	2e00      	cmp	r6, #0
 8008cd0:	f040 80a4 	bne.w	8008e1c <__udivmoddi4+0x234>
 8008cd4:	1a8a      	subs	r2, r1, r2
 8008cd6:	0c03      	lsrs	r3, r0, #16
 8008cd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8008cdc:	b280      	uxth	r0, r0
 8008cde:	b2bc      	uxth	r4, r7
 8008ce0:	2101      	movs	r1, #1
 8008ce2:	fbb2 fcfe 	udiv	ip, r2, lr
 8008ce6:	fb0e 221c 	mls	r2, lr, ip, r2
 8008cea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008cee:	fb04 f20c 	mul.w	r2, r4, ip
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	d907      	bls.n	8008d06 <__udivmoddi4+0x11e>
 8008cf6:	18fb      	adds	r3, r7, r3
 8008cf8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8008cfc:	d202      	bcs.n	8008d04 <__udivmoddi4+0x11c>
 8008cfe:	429a      	cmp	r2, r3
 8008d00:	f200 80e0 	bhi.w	8008ec4 <__udivmoddi4+0x2dc>
 8008d04:	46c4      	mov	ip, r8
 8008d06:	1a9b      	subs	r3, r3, r2
 8008d08:	fbb3 f2fe 	udiv	r2, r3, lr
 8008d0c:	fb0e 3312 	mls	r3, lr, r2, r3
 8008d10:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8008d14:	fb02 f404 	mul.w	r4, r2, r4
 8008d18:	429c      	cmp	r4, r3
 8008d1a:	d907      	bls.n	8008d2c <__udivmoddi4+0x144>
 8008d1c:	18fb      	adds	r3, r7, r3
 8008d1e:	f102 30ff 	add.w	r0, r2, #4294967295
 8008d22:	d202      	bcs.n	8008d2a <__udivmoddi4+0x142>
 8008d24:	429c      	cmp	r4, r3
 8008d26:	f200 80ca 	bhi.w	8008ebe <__udivmoddi4+0x2d6>
 8008d2a:	4602      	mov	r2, r0
 8008d2c:	1b1b      	subs	r3, r3, r4
 8008d2e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8008d32:	e7a5      	b.n	8008c80 <__udivmoddi4+0x98>
 8008d34:	f1c1 0620 	rsb	r6, r1, #32
 8008d38:	408b      	lsls	r3, r1
 8008d3a:	fa22 f706 	lsr.w	r7, r2, r6
 8008d3e:	431f      	orrs	r7, r3
 8008d40:	fa0e f401 	lsl.w	r4, lr, r1
 8008d44:	fa20 f306 	lsr.w	r3, r0, r6
 8008d48:	fa2e fe06 	lsr.w	lr, lr, r6
 8008d4c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8008d50:	4323      	orrs	r3, r4
 8008d52:	fa00 f801 	lsl.w	r8, r0, r1
 8008d56:	fa1f fc87 	uxth.w	ip, r7
 8008d5a:	fbbe f0f9 	udiv	r0, lr, r9
 8008d5e:	0c1c      	lsrs	r4, r3, #16
 8008d60:	fb09 ee10 	mls	lr, r9, r0, lr
 8008d64:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8008d68:	fb00 fe0c 	mul.w	lr, r0, ip
 8008d6c:	45a6      	cmp	lr, r4
 8008d6e:	fa02 f201 	lsl.w	r2, r2, r1
 8008d72:	d909      	bls.n	8008d88 <__udivmoddi4+0x1a0>
 8008d74:	193c      	adds	r4, r7, r4
 8008d76:	f100 3aff 	add.w	sl, r0, #4294967295
 8008d7a:	f080 809c 	bcs.w	8008eb6 <__udivmoddi4+0x2ce>
 8008d7e:	45a6      	cmp	lr, r4
 8008d80:	f240 8099 	bls.w	8008eb6 <__udivmoddi4+0x2ce>
 8008d84:	3802      	subs	r0, #2
 8008d86:	443c      	add	r4, r7
 8008d88:	eba4 040e 	sub.w	r4, r4, lr
 8008d8c:	fa1f fe83 	uxth.w	lr, r3
 8008d90:	fbb4 f3f9 	udiv	r3, r4, r9
 8008d94:	fb09 4413 	mls	r4, r9, r3, r4
 8008d98:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8008d9c:	fb03 fc0c 	mul.w	ip, r3, ip
 8008da0:	45a4      	cmp	ip, r4
 8008da2:	d908      	bls.n	8008db6 <__udivmoddi4+0x1ce>
 8008da4:	193c      	adds	r4, r7, r4
 8008da6:	f103 3eff 	add.w	lr, r3, #4294967295
 8008daa:	f080 8082 	bcs.w	8008eb2 <__udivmoddi4+0x2ca>
 8008dae:	45a4      	cmp	ip, r4
 8008db0:	d97f      	bls.n	8008eb2 <__udivmoddi4+0x2ca>
 8008db2:	3b02      	subs	r3, #2
 8008db4:	443c      	add	r4, r7
 8008db6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8008dba:	eba4 040c 	sub.w	r4, r4, ip
 8008dbe:	fba0 ec02 	umull	lr, ip, r0, r2
 8008dc2:	4564      	cmp	r4, ip
 8008dc4:	4673      	mov	r3, lr
 8008dc6:	46e1      	mov	r9, ip
 8008dc8:	d362      	bcc.n	8008e90 <__udivmoddi4+0x2a8>
 8008dca:	d05f      	beq.n	8008e8c <__udivmoddi4+0x2a4>
 8008dcc:	b15d      	cbz	r5, 8008de6 <__udivmoddi4+0x1fe>
 8008dce:	ebb8 0203 	subs.w	r2, r8, r3
 8008dd2:	eb64 0409 	sbc.w	r4, r4, r9
 8008dd6:	fa04 f606 	lsl.w	r6, r4, r6
 8008dda:	fa22 f301 	lsr.w	r3, r2, r1
 8008dde:	431e      	orrs	r6, r3
 8008de0:	40cc      	lsrs	r4, r1
 8008de2:	e9c5 6400 	strd	r6, r4, [r5]
 8008de6:	2100      	movs	r1, #0
 8008de8:	e74f      	b.n	8008c8a <__udivmoddi4+0xa2>
 8008dea:	fbb1 fcf2 	udiv	ip, r1, r2
 8008dee:	0c01      	lsrs	r1, r0, #16
 8008df0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8008df4:	b280      	uxth	r0, r0
 8008df6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8008dfa:	463b      	mov	r3, r7
 8008dfc:	4638      	mov	r0, r7
 8008dfe:	463c      	mov	r4, r7
 8008e00:	46b8      	mov	r8, r7
 8008e02:	46be      	mov	lr, r7
 8008e04:	2620      	movs	r6, #32
 8008e06:	fbb1 f1f7 	udiv	r1, r1, r7
 8008e0a:	eba2 0208 	sub.w	r2, r2, r8
 8008e0e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8008e12:	e766      	b.n	8008ce2 <__udivmoddi4+0xfa>
 8008e14:	4601      	mov	r1, r0
 8008e16:	e718      	b.n	8008c4a <__udivmoddi4+0x62>
 8008e18:	4610      	mov	r0, r2
 8008e1a:	e72c      	b.n	8008c76 <__udivmoddi4+0x8e>
 8008e1c:	f1c6 0220 	rsb	r2, r6, #32
 8008e20:	fa2e f302 	lsr.w	r3, lr, r2
 8008e24:	40b7      	lsls	r7, r6
 8008e26:	40b1      	lsls	r1, r6
 8008e28:	fa20 f202 	lsr.w	r2, r0, r2
 8008e2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8008e30:	430a      	orrs	r2, r1
 8008e32:	fbb3 f8fe 	udiv	r8, r3, lr
 8008e36:	b2bc      	uxth	r4, r7
 8008e38:	fb0e 3318 	mls	r3, lr, r8, r3
 8008e3c:	0c11      	lsrs	r1, r2, #16
 8008e3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008e42:	fb08 f904 	mul.w	r9, r8, r4
 8008e46:	40b0      	lsls	r0, r6
 8008e48:	4589      	cmp	r9, r1
 8008e4a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8008e4e:	b280      	uxth	r0, r0
 8008e50:	d93e      	bls.n	8008ed0 <__udivmoddi4+0x2e8>
 8008e52:	1879      	adds	r1, r7, r1
 8008e54:	f108 3cff 	add.w	ip, r8, #4294967295
 8008e58:	d201      	bcs.n	8008e5e <__udivmoddi4+0x276>
 8008e5a:	4589      	cmp	r9, r1
 8008e5c:	d81f      	bhi.n	8008e9e <__udivmoddi4+0x2b6>
 8008e5e:	eba1 0109 	sub.w	r1, r1, r9
 8008e62:	fbb1 f9fe 	udiv	r9, r1, lr
 8008e66:	fb09 f804 	mul.w	r8, r9, r4
 8008e6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8008e6e:	b292      	uxth	r2, r2
 8008e70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8008e74:	4542      	cmp	r2, r8
 8008e76:	d229      	bcs.n	8008ecc <__udivmoddi4+0x2e4>
 8008e78:	18ba      	adds	r2, r7, r2
 8008e7a:	f109 31ff 	add.w	r1, r9, #4294967295
 8008e7e:	d2c4      	bcs.n	8008e0a <__udivmoddi4+0x222>
 8008e80:	4542      	cmp	r2, r8
 8008e82:	d2c2      	bcs.n	8008e0a <__udivmoddi4+0x222>
 8008e84:	f1a9 0102 	sub.w	r1, r9, #2
 8008e88:	443a      	add	r2, r7
 8008e8a:	e7be      	b.n	8008e0a <__udivmoddi4+0x222>
 8008e8c:	45f0      	cmp	r8, lr
 8008e8e:	d29d      	bcs.n	8008dcc <__udivmoddi4+0x1e4>
 8008e90:	ebbe 0302 	subs.w	r3, lr, r2
 8008e94:	eb6c 0c07 	sbc.w	ip, ip, r7
 8008e98:	3801      	subs	r0, #1
 8008e9a:	46e1      	mov	r9, ip
 8008e9c:	e796      	b.n	8008dcc <__udivmoddi4+0x1e4>
 8008e9e:	eba7 0909 	sub.w	r9, r7, r9
 8008ea2:	4449      	add	r1, r9
 8008ea4:	f1a8 0c02 	sub.w	ip, r8, #2
 8008ea8:	fbb1 f9fe 	udiv	r9, r1, lr
 8008eac:	fb09 f804 	mul.w	r8, r9, r4
 8008eb0:	e7db      	b.n	8008e6a <__udivmoddi4+0x282>
 8008eb2:	4673      	mov	r3, lr
 8008eb4:	e77f      	b.n	8008db6 <__udivmoddi4+0x1ce>
 8008eb6:	4650      	mov	r0, sl
 8008eb8:	e766      	b.n	8008d88 <__udivmoddi4+0x1a0>
 8008eba:	4608      	mov	r0, r1
 8008ebc:	e6fd      	b.n	8008cba <__udivmoddi4+0xd2>
 8008ebe:	443b      	add	r3, r7
 8008ec0:	3a02      	subs	r2, #2
 8008ec2:	e733      	b.n	8008d2c <__udivmoddi4+0x144>
 8008ec4:	f1ac 0c02 	sub.w	ip, ip, #2
 8008ec8:	443b      	add	r3, r7
 8008eca:	e71c      	b.n	8008d06 <__udivmoddi4+0x11e>
 8008ecc:	4649      	mov	r1, r9
 8008ece:	e79c      	b.n	8008e0a <__udivmoddi4+0x222>
 8008ed0:	eba1 0109 	sub.w	r1, r1, r9
 8008ed4:	46c4      	mov	ip, r8
 8008ed6:	fbb1 f9fe 	udiv	r9, r1, lr
 8008eda:	fb09 f804 	mul.w	r8, r9, r4
 8008ede:	e7c4      	b.n	8008e6a <__udivmoddi4+0x282>

08008ee0 <__aeabi_idiv0>:
 8008ee0:	4770      	bx	lr
 8008ee2:	bf00      	nop

08008ee4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b084      	sub	sp, #16
 8008ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8008eea:	463b      	mov	r3, r7
 8008eec:	2200      	movs	r2, #0
 8008eee:	601a      	str	r2, [r3, #0]
 8008ef0:	605a      	str	r2, [r3, #4]
 8008ef2:	609a      	str	r2, [r3, #8]
 8008ef4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8008ef6:	4b21      	ldr	r3, [pc, #132]	@ (8008f7c <MX_ADC1_Init+0x98>)
 8008ef8:	4a21      	ldr	r2, [pc, #132]	@ (8008f80 <MX_ADC1_Init+0x9c>)
 8008efa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8008efc:	4b1f      	ldr	r3, [pc, #124]	@ (8008f7c <MX_ADC1_Init+0x98>)
 8008efe:	2200      	movs	r2, #0
 8008f00:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8008f02:	4b1e      	ldr	r3, [pc, #120]	@ (8008f7c <MX_ADC1_Init+0x98>)
 8008f04:	2200      	movs	r2, #0
 8008f06:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8008f08:	4b1c      	ldr	r3, [pc, #112]	@ (8008f7c <MX_ADC1_Init+0x98>)
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8008f0e:	4b1b      	ldr	r3, [pc, #108]	@ (8008f7c <MX_ADC1_Init+0x98>)
 8008f10:	2201      	movs	r2, #1
 8008f12:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8008f14:	4b19      	ldr	r3, [pc, #100]	@ (8008f7c <MX_ADC1_Init+0x98>)
 8008f16:	2200      	movs	r2, #0
 8008f18:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8008f1c:	4b17      	ldr	r3, [pc, #92]	@ (8008f7c <MX_ADC1_Init+0x98>)
 8008f1e:	2200      	movs	r2, #0
 8008f20:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008f22:	4b16      	ldr	r3, [pc, #88]	@ (8008f7c <MX_ADC1_Init+0x98>)
 8008f24:	4a17      	ldr	r2, [pc, #92]	@ (8008f84 <MX_ADC1_Init+0xa0>)
 8008f26:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008f28:	4b14      	ldr	r3, [pc, #80]	@ (8008f7c <MX_ADC1_Init+0x98>)
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8008f2e:	4b13      	ldr	r3, [pc, #76]	@ (8008f7c <MX_ADC1_Init+0x98>)
 8008f30:	2201      	movs	r2, #1
 8008f32:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8008f34:	4b11      	ldr	r3, [pc, #68]	@ (8008f7c <MX_ADC1_Init+0x98>)
 8008f36:	2201      	movs	r2, #1
 8008f38:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8008f3c:	4b0f      	ldr	r3, [pc, #60]	@ (8008f7c <MX_ADC1_Init+0x98>)
 8008f3e:	2201      	movs	r2, #1
 8008f40:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8008f42:	480e      	ldr	r0, [pc, #56]	@ (8008f7c <MX_ADC1_Init+0x98>)
 8008f44:	f001 faf0 	bl	800a528 <HAL_ADC_Init>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d001      	beq.n	8008f52 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8008f4e:	f000 faed 	bl	800952c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8008f52:	2300      	movs	r3, #0
 8008f54:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8008f56:	2301      	movs	r3, #1
 8008f58:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008f5e:	463b      	mov	r3, r7
 8008f60:	4619      	mov	r1, r3
 8008f62:	4806      	ldr	r0, [pc, #24]	@ (8008f7c <MX_ADC1_Init+0x98>)
 8008f64:	f001 fb24 	bl	800a5b0 <HAL_ADC_ConfigChannel>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d001      	beq.n	8008f72 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8008f6e:	f000 fadd 	bl	800952c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8008f72:	bf00      	nop
 8008f74:	3710      	adds	r7, #16
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}
 8008f7a:	bf00      	nop
 8008f7c:	20000308 	.word	0x20000308
 8008f80:	40012000 	.word	0x40012000
 8008f84:	0f000001 	.word	0x0f000001

08008f88 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b08a      	sub	sp, #40	@ 0x28
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008f90:	f107 0314 	add.w	r3, r7, #20
 8008f94:	2200      	movs	r2, #0
 8008f96:	601a      	str	r2, [r3, #0]
 8008f98:	605a      	str	r2, [r3, #4]
 8008f9a:	609a      	str	r2, [r3, #8]
 8008f9c:	60da      	str	r2, [r3, #12]
 8008f9e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	4a2f      	ldr	r2, [pc, #188]	@ (8009064 <HAL_ADC_MspInit+0xdc>)
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	d157      	bne.n	800905a <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8008faa:	2300      	movs	r3, #0
 8008fac:	613b      	str	r3, [r7, #16]
 8008fae:	4b2e      	ldr	r3, [pc, #184]	@ (8009068 <HAL_ADC_MspInit+0xe0>)
 8008fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008fb2:	4a2d      	ldr	r2, [pc, #180]	@ (8009068 <HAL_ADC_MspInit+0xe0>)
 8008fb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008fb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8008fba:	4b2b      	ldr	r3, [pc, #172]	@ (8009068 <HAL_ADC_MspInit+0xe0>)
 8008fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008fbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008fc2:	613b      	str	r3, [r7, #16]
 8008fc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	60fb      	str	r3, [r7, #12]
 8008fca:	4b27      	ldr	r3, [pc, #156]	@ (8009068 <HAL_ADC_MspInit+0xe0>)
 8008fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fce:	4a26      	ldr	r2, [pc, #152]	@ (8009068 <HAL_ADC_MspInit+0xe0>)
 8008fd0:	f043 0301 	orr.w	r3, r3, #1
 8008fd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8008fd6:	4b24      	ldr	r3, [pc, #144]	@ (8009068 <HAL_ADC_MspInit+0xe0>)
 8008fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fda:	f003 0301 	and.w	r3, r3, #1
 8008fde:	60fb      	str	r3, [r7, #12]
 8008fe0:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = HM_ACS712_ADC_Pin|VR1_ADCIN1_Pin|VR2_ADCIN2_Pin|VC_ADCIN4_Pin
 8008fe2:	232f      	movs	r3, #47	@ 0x2f
 8008fe4:	617b      	str	r3, [r7, #20]
                          |HM_OPA_ADC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008fe6:	2303      	movs	r3, #3
 8008fe8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008fea:	2300      	movs	r3, #0
 8008fec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008fee:	f107 0314 	add.w	r3, r7, #20
 8008ff2:	4619      	mov	r1, r3
 8008ff4:	481d      	ldr	r0, [pc, #116]	@ (800906c <HAL_ADC_MspInit+0xe4>)
 8008ff6:	f002 f905 	bl	800b204 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8008ffa:	4b1d      	ldr	r3, [pc, #116]	@ (8009070 <HAL_ADC_MspInit+0xe8>)
 8008ffc:	4a1d      	ldr	r2, [pc, #116]	@ (8009074 <HAL_ADC_MspInit+0xec>)
 8008ffe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8009000:	4b1b      	ldr	r3, [pc, #108]	@ (8009070 <HAL_ADC_MspInit+0xe8>)
 8009002:	2200      	movs	r2, #0
 8009004:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009006:	4b1a      	ldr	r3, [pc, #104]	@ (8009070 <HAL_ADC_MspInit+0xe8>)
 8009008:	2200      	movs	r2, #0
 800900a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800900c:	4b18      	ldr	r3, [pc, #96]	@ (8009070 <HAL_ADC_MspInit+0xe8>)
 800900e:	2200      	movs	r2, #0
 8009010:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8009012:	4b17      	ldr	r3, [pc, #92]	@ (8009070 <HAL_ADC_MspInit+0xe8>)
 8009014:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009018:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800901a:	4b15      	ldr	r3, [pc, #84]	@ (8009070 <HAL_ADC_MspInit+0xe8>)
 800901c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009020:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8009022:	4b13      	ldr	r3, [pc, #76]	@ (8009070 <HAL_ADC_MspInit+0xe8>)
 8009024:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8009028:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800902a:	4b11      	ldr	r3, [pc, #68]	@ (8009070 <HAL_ADC_MspInit+0xe8>)
 800902c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009030:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8009032:	4b0f      	ldr	r3, [pc, #60]	@ (8009070 <HAL_ADC_MspInit+0xe8>)
 8009034:	2200      	movs	r2, #0
 8009036:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009038:	4b0d      	ldr	r3, [pc, #52]	@ (8009070 <HAL_ADC_MspInit+0xe8>)
 800903a:	2200      	movs	r2, #0
 800903c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800903e:	480c      	ldr	r0, [pc, #48]	@ (8009070 <HAL_ADC_MspInit+0xe8>)
 8009040:	f001 fdf6 	bl	800ac30 <HAL_DMA_Init>
 8009044:	4603      	mov	r3, r0
 8009046:	2b00      	cmp	r3, #0
 8009048:	d001      	beq.n	800904e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800904a:	f000 fa6f 	bl	800952c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	4a07      	ldr	r2, [pc, #28]	@ (8009070 <HAL_ADC_MspInit+0xe8>)
 8009052:	639a      	str	r2, [r3, #56]	@ 0x38
 8009054:	4a06      	ldr	r2, [pc, #24]	@ (8009070 <HAL_ADC_MspInit+0xe8>)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800905a:	bf00      	nop
 800905c:	3728      	adds	r7, #40	@ 0x28
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}
 8009062:	bf00      	nop
 8009064:	40012000 	.word	0x40012000
 8009068:	40023800 	.word	0x40023800
 800906c:	40020000 	.word	0x40020000
 8009070:	20000350 	.word	0x20000350
 8009074:	40026410 	.word	0x40026410

08009078 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b082      	sub	sp, #8
 800907c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800907e:	2300      	movs	r3, #0
 8009080:	607b      	str	r3, [r7, #4]
 8009082:	4b0c      	ldr	r3, [pc, #48]	@ (80090b4 <MX_DMA_Init+0x3c>)
 8009084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009086:	4a0b      	ldr	r2, [pc, #44]	@ (80090b4 <MX_DMA_Init+0x3c>)
 8009088:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800908c:	6313      	str	r3, [r2, #48]	@ 0x30
 800908e:	4b09      	ldr	r3, [pc, #36]	@ (80090b4 <MX_DMA_Init+0x3c>)
 8009090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009092:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009096:	607b      	str	r3, [r7, #4]
 8009098:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800909a:	2200      	movs	r2, #0
 800909c:	2100      	movs	r1, #0
 800909e:	2038      	movs	r0, #56	@ 0x38
 80090a0:	f001 fd8f 	bl	800abc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80090a4:	2038      	movs	r0, #56	@ 0x38
 80090a6:	f001 fda8 	bl	800abfa <HAL_NVIC_EnableIRQ>

}
 80090aa:	bf00      	nop
 80090ac:	3708      	adds	r7, #8
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}
 80090b2:	bf00      	nop
 80090b4:	40023800 	.word	0x40023800

080090b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b08c      	sub	sp, #48	@ 0x30
 80090bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80090be:	f107 031c 	add.w	r3, r7, #28
 80090c2:	2200      	movs	r2, #0
 80090c4:	601a      	str	r2, [r3, #0]
 80090c6:	605a      	str	r2, [r3, #4]
 80090c8:	609a      	str	r2, [r3, #8]
 80090ca:	60da      	str	r2, [r3, #12]
 80090cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80090ce:	2300      	movs	r3, #0
 80090d0:	61bb      	str	r3, [r7, #24]
 80090d2:	4b5b      	ldr	r3, [pc, #364]	@ (8009240 <MX_GPIO_Init+0x188>)
 80090d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090d6:	4a5a      	ldr	r2, [pc, #360]	@ (8009240 <MX_GPIO_Init+0x188>)
 80090d8:	f043 0310 	orr.w	r3, r3, #16
 80090dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80090de:	4b58      	ldr	r3, [pc, #352]	@ (8009240 <MX_GPIO_Init+0x188>)
 80090e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090e2:	f003 0310 	and.w	r3, r3, #16
 80090e6:	61bb      	str	r3, [r7, #24]
 80090e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80090ea:	2300      	movs	r3, #0
 80090ec:	617b      	str	r3, [r7, #20]
 80090ee:	4b54      	ldr	r3, [pc, #336]	@ (8009240 <MX_GPIO_Init+0x188>)
 80090f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090f2:	4a53      	ldr	r2, [pc, #332]	@ (8009240 <MX_GPIO_Init+0x188>)
 80090f4:	f043 0304 	orr.w	r3, r3, #4
 80090f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80090fa:	4b51      	ldr	r3, [pc, #324]	@ (8009240 <MX_GPIO_Init+0x188>)
 80090fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090fe:	f003 0304 	and.w	r3, r3, #4
 8009102:	617b      	str	r3, [r7, #20]
 8009104:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8009106:	2300      	movs	r3, #0
 8009108:	613b      	str	r3, [r7, #16]
 800910a:	4b4d      	ldr	r3, [pc, #308]	@ (8009240 <MX_GPIO_Init+0x188>)
 800910c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800910e:	4a4c      	ldr	r2, [pc, #304]	@ (8009240 <MX_GPIO_Init+0x188>)
 8009110:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009114:	6313      	str	r3, [r2, #48]	@ 0x30
 8009116:	4b4a      	ldr	r3, [pc, #296]	@ (8009240 <MX_GPIO_Init+0x188>)
 8009118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800911a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800911e:	613b      	str	r3, [r7, #16]
 8009120:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009122:	2300      	movs	r3, #0
 8009124:	60fb      	str	r3, [r7, #12]
 8009126:	4b46      	ldr	r3, [pc, #280]	@ (8009240 <MX_GPIO_Init+0x188>)
 8009128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800912a:	4a45      	ldr	r2, [pc, #276]	@ (8009240 <MX_GPIO_Init+0x188>)
 800912c:	f043 0301 	orr.w	r3, r3, #1
 8009130:	6313      	str	r3, [r2, #48]	@ 0x30
 8009132:	4b43      	ldr	r3, [pc, #268]	@ (8009240 <MX_GPIO_Init+0x188>)
 8009134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009136:	f003 0301 	and.w	r3, r3, #1
 800913a:	60fb      	str	r3, [r7, #12]
 800913c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800913e:	2300      	movs	r3, #0
 8009140:	60bb      	str	r3, [r7, #8]
 8009142:	4b3f      	ldr	r3, [pc, #252]	@ (8009240 <MX_GPIO_Init+0x188>)
 8009144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009146:	4a3e      	ldr	r2, [pc, #248]	@ (8009240 <MX_GPIO_Init+0x188>)
 8009148:	f043 0302 	orr.w	r3, r3, #2
 800914c:	6313      	str	r3, [r2, #48]	@ 0x30
 800914e:	4b3c      	ldr	r3, [pc, #240]	@ (8009240 <MX_GPIO_Init+0x188>)
 8009150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009152:	f003 0302 	and.w	r3, r3, #2
 8009156:	60bb      	str	r3, [r7, #8]
 8009158:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800915a:	2300      	movs	r3, #0
 800915c:	607b      	str	r3, [r7, #4]
 800915e:	4b38      	ldr	r3, [pc, #224]	@ (8009240 <MX_GPIO_Init+0x188>)
 8009160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009162:	4a37      	ldr	r2, [pc, #220]	@ (8009240 <MX_GPIO_Init+0x188>)
 8009164:	f043 0308 	orr.w	r3, r3, #8
 8009168:	6313      	str	r3, [r2, #48]	@ 0x30
 800916a:	4b35      	ldr	r3, [pc, #212]	@ (8009240 <MX_GPIO_Init+0x188>)
 800916c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800916e:	f003 0308 	and.w	r3, r3, #8
 8009172:	607b      	str	r3, [r7, #4]
 8009174:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(I2C1_INT_GPIO_Port, I2C1_INT_Pin, GPIO_PIN_RESET);
 8009176:	2200      	movs	r2, #0
 8009178:	2120      	movs	r1, #32
 800917a:	4832      	ldr	r0, [pc, #200]	@ (8009244 <MX_GPIO_Init+0x18c>)
 800917c:	f002 f9c6 	bl	800b50c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8009180:	2304      	movs	r3, #4
 8009182:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009184:	2300      	movs	r3, #0
 8009186:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009188:	2300      	movs	r3, #0
 800918a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800918c:	f107 031c 	add.w	r3, r7, #28
 8009190:	4619      	mov	r1, r3
 8009192:	482d      	ldr	r0, [pc, #180]	@ (8009248 <MX_GPIO_Init+0x190>)
 8009194:	f002 f836 	bl	800b204 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_PUSH_BUTT_Pin */
  GPIO_InitStruct.Pin = BLUE_PUSH_BUTT_Pin;
 8009198:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800919c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800919e:	2300      	movs	r3, #0
 80091a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091a2:	2300      	movs	r3, #0
 80091a4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BLUE_PUSH_BUTT_GPIO_Port, &GPIO_InitStruct);
 80091a6:	f107 031c 	add.w	r3, r7, #28
 80091aa:	4619      	mov	r1, r3
 80091ac:	4827      	ldr	r0, [pc, #156]	@ (800924c <MX_GPIO_Init+0x194>)
 80091ae:	f002 f829 	bl	800b204 <HAL_GPIO_Init>

  /*Configure GPIO pin : AC60HZ_S_Pin */
  GPIO_InitStruct.Pin = AC60HZ_S_Pin;
 80091b2:	2310      	movs	r3, #16
 80091b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80091b6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80091ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091bc:	2300      	movs	r3, #0
 80091be:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(AC60HZ_S_GPIO_Port, &GPIO_InitStruct);
 80091c0:	f107 031c 	add.w	r3, r7, #28
 80091c4:	4619      	mov	r1, r3
 80091c6:	4822      	ldr	r0, [pc, #136]	@ (8009250 <MX_GPIO_Init+0x198>)
 80091c8:	f002 f81c 	bl	800b204 <HAL_GPIO_Init>

  /*Configure GPIO pins : BD_Pin HM_DO_Pin */
  GPIO_InitStruct.Pin = BD_Pin|HM_DO_Pin;
 80091cc:	f44f 7320 	mov.w	r3, #640	@ 0x280
 80091d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80091d2:	2300      	movs	r3, #0
 80091d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091d6:	2300      	movs	r3, #0
 80091d8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80091da:	f107 031c 	add.w	r3, r7, #28
 80091de:	4619      	mov	r1, r3
 80091e0:	481b      	ldr	r0, [pc, #108]	@ (8009250 <MX_GPIO_Init+0x198>)
 80091e2:	f002 f80f 	bl	800b204 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_EN_Pin */
  GPIO_InitStruct.Pin = USB_EN_Pin;
 80091e6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80091ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80091ec:	2300      	movs	r3, #0
 80091ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80091f0:	2301      	movs	r3, #1
 80091f2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_EN_GPIO_Port, &GPIO_InitStruct);
 80091f4:	f107 031c 	add.w	r3, r7, #28
 80091f8:	4619      	mov	r1, r3
 80091fa:	4812      	ldr	r0, [pc, #72]	@ (8009244 <MX_GPIO_Init+0x18c>)
 80091fc:	f002 f802 	bl	800b204 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C1_INT_Pin */
  GPIO_InitStruct.Pin = I2C1_INT_Pin;
 8009200:	2320      	movs	r3, #32
 8009202:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009204:	2301      	movs	r3, #1
 8009206:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009208:	2300      	movs	r3, #0
 800920a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800920c:	2300      	movs	r3, #0
 800920e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(I2C1_INT_GPIO_Port, &GPIO_InitStruct);
 8009210:	f107 031c 	add.w	r3, r7, #28
 8009214:	4619      	mov	r1, r3
 8009216:	480b      	ldr	r0, [pc, #44]	@ (8009244 <MX_GPIO_Init+0x18c>)
 8009218:	f001 fff4 	bl	800b204 <HAL_GPIO_Init>

  /*Configure GPIO pins : S2_Pin S1_Pin */
  GPIO_InitStruct.Pin = S2_Pin|S1_Pin;
 800921c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8009220:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009222:	2300      	movs	r3, #0
 8009224:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009226:	2300      	movs	r3, #0
 8009228:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800922a:	f107 031c 	add.w	r3, r7, #28
 800922e:	4619      	mov	r1, r3
 8009230:	4804      	ldr	r0, [pc, #16]	@ (8009244 <MX_GPIO_Init+0x18c>)
 8009232:	f001 ffe7 	bl	800b204 <HAL_GPIO_Init>

}
 8009236:	bf00      	nop
 8009238:	3730      	adds	r7, #48	@ 0x30
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}
 800923e:	bf00      	nop
 8009240:	40023800 	.word	0x40023800
 8009244:	40020400 	.word	0x40020400
 8009248:	40021000 	.word	0x40021000
 800924c:	40020800 	.word	0x40020800
 8009250:	40020000 	.word	0x40020000

08009254 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8009258:	4b12      	ldr	r3, [pc, #72]	@ (80092a4 <MX_I2C1_Init+0x50>)
 800925a:	4a13      	ldr	r2, [pc, #76]	@ (80092a8 <MX_I2C1_Init+0x54>)
 800925c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800925e:	4b11      	ldr	r3, [pc, #68]	@ (80092a4 <MX_I2C1_Init+0x50>)
 8009260:	4a12      	ldr	r2, [pc, #72]	@ (80092ac <MX_I2C1_Init+0x58>)
 8009262:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8009264:	4b0f      	ldr	r3, [pc, #60]	@ (80092a4 <MX_I2C1_Init+0x50>)
 8009266:	2200      	movs	r2, #0
 8009268:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800926a:	4b0e      	ldr	r3, [pc, #56]	@ (80092a4 <MX_I2C1_Init+0x50>)
 800926c:	2200      	movs	r2, #0
 800926e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009270:	4b0c      	ldr	r3, [pc, #48]	@ (80092a4 <MX_I2C1_Init+0x50>)
 8009272:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8009276:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009278:	4b0a      	ldr	r3, [pc, #40]	@ (80092a4 <MX_I2C1_Init+0x50>)
 800927a:	2200      	movs	r2, #0
 800927c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800927e:	4b09      	ldr	r3, [pc, #36]	@ (80092a4 <MX_I2C1_Init+0x50>)
 8009280:	2200      	movs	r2, #0
 8009282:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009284:	4b07      	ldr	r3, [pc, #28]	@ (80092a4 <MX_I2C1_Init+0x50>)
 8009286:	2200      	movs	r2, #0
 8009288:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800928a:	4b06      	ldr	r3, [pc, #24]	@ (80092a4 <MX_I2C1_Init+0x50>)
 800928c:	2200      	movs	r2, #0
 800928e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8009290:	4804      	ldr	r0, [pc, #16]	@ (80092a4 <MX_I2C1_Init+0x50>)
 8009292:	f002 f955 	bl	800b540 <HAL_I2C_Init>
 8009296:	4603      	mov	r3, r0
 8009298:	2b00      	cmp	r3, #0
 800929a:	d001      	beq.n	80092a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800929c:	f000 f946 	bl	800952c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80092a0:	bf00      	nop
 80092a2:	bd80      	pop	{r7, pc}
 80092a4:	200003b0 	.word	0x200003b0
 80092a8:	40005400 	.word	0x40005400
 80092ac:	000186a0 	.word	0x000186a0

080092b0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b08a      	sub	sp, #40	@ 0x28
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80092b8:	f107 0314 	add.w	r3, r7, #20
 80092bc:	2200      	movs	r2, #0
 80092be:	601a      	str	r2, [r3, #0]
 80092c0:	605a      	str	r2, [r3, #4]
 80092c2:	609a      	str	r2, [r3, #8]
 80092c4:	60da      	str	r2, [r3, #12]
 80092c6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	4a19      	ldr	r2, [pc, #100]	@ (8009334 <HAL_I2C_MspInit+0x84>)
 80092ce:	4293      	cmp	r3, r2
 80092d0:	d12b      	bne.n	800932a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80092d2:	2300      	movs	r3, #0
 80092d4:	613b      	str	r3, [r7, #16]
 80092d6:	4b18      	ldr	r3, [pc, #96]	@ (8009338 <HAL_I2C_MspInit+0x88>)
 80092d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092da:	4a17      	ldr	r2, [pc, #92]	@ (8009338 <HAL_I2C_MspInit+0x88>)
 80092dc:	f043 0302 	orr.w	r3, r3, #2
 80092e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80092e2:	4b15      	ldr	r3, [pc, #84]	@ (8009338 <HAL_I2C_MspInit+0x88>)
 80092e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092e6:	f003 0302 	and.w	r3, r3, #2
 80092ea:	613b      	str	r3, [r7, #16]
 80092ec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80092ee:	23c0      	movs	r3, #192	@ 0xc0
 80092f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80092f2:	2312      	movs	r3, #18
 80092f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092f6:	2300      	movs	r3, #0
 80092f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80092fa:	2303      	movs	r3, #3
 80092fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80092fe:	2304      	movs	r3, #4
 8009300:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009302:	f107 0314 	add.w	r3, r7, #20
 8009306:	4619      	mov	r1, r3
 8009308:	480c      	ldr	r0, [pc, #48]	@ (800933c <HAL_I2C_MspInit+0x8c>)
 800930a:	f001 ff7b 	bl	800b204 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800930e:	2300      	movs	r3, #0
 8009310:	60fb      	str	r3, [r7, #12]
 8009312:	4b09      	ldr	r3, [pc, #36]	@ (8009338 <HAL_I2C_MspInit+0x88>)
 8009314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009316:	4a08      	ldr	r2, [pc, #32]	@ (8009338 <HAL_I2C_MspInit+0x88>)
 8009318:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800931c:	6413      	str	r3, [r2, #64]	@ 0x40
 800931e:	4b06      	ldr	r3, [pc, #24]	@ (8009338 <HAL_I2C_MspInit+0x88>)
 8009320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009322:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009326:	60fb      	str	r3, [r7, #12]
 8009328:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800932a:	bf00      	nop
 800932c:	3728      	adds	r7, #40	@ 0x28
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}
 8009332:	bf00      	nop
 8009334:	40005400 	.word	0x40005400
 8009338:	40023800 	.word	0x40023800
 800933c:	40020400 	.word	0x40020400

08009340 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b084      	sub	sp, #16
 8009344:	af00      	add	r7, sp, #0
 8009346:	60f8      	str	r0, [r7, #12]
 8009348:	60b9      	str	r1, [r7, #8]
 800934a:	607a      	str	r2, [r7, #4]
    // 使用 10ms 超時，失敗也返回成功
    HAL_UART_Transmit(DEBUG_UART_PORT, (uint8_t*)ptr, len, 10);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	b29a      	uxth	r2, r3
 8009350:	230a      	movs	r3, #10
 8009352:	68b9      	ldr	r1, [r7, #8]
 8009354:	4803      	ldr	r0, [pc, #12]	@ (8009364 <_write+0x24>)
 8009356:	f005 fc65 	bl	800ec24 <HAL_UART_Transmit>
    return len;  // 總是返回成功
 800935a:	687b      	ldr	r3, [r7, #4]
}
 800935c:	4618      	mov	r0, r3
 800935e:	3710      	adds	r7, #16
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}
 8009364:	200006e8 	.word	0x200006e8

08009368 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b086      	sub	sp, #24
 800936c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
    // 設置向量表到APP區域
  SCB->VTOR = 0x08008000;
 800936e:	4b32      	ldr	r3, [pc, #200]	@ (8009438 <main+0xd0>)
 8009370:	4a32      	ldr	r2, [pc, #200]	@ (800943c <main+0xd4>)
 8009372:	609a      	str	r2, [r3, #8]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8009374:	b672      	cpsid	i
}
 8009376:	bf00      	nop
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009378:	f001 f840 	bl	800a3fc <HAL_Init>
  __ASM volatile ("cpsie i" : : : "memory");
 800937c:	b662      	cpsie	i
}
 800937e:	bf00      	nop
  /* USER CODE BEGIN Init */
  __enable_irq();
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009380:	f000 f86a 	bl	8009458 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009384:	f7ff fe98 	bl	80090b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8009388:	f7ff fe76 	bl	8009078 <MX_DMA_Init>
  MX_ADC1_Init();
 800938c:	f7ff fdaa 	bl	8008ee4 <MX_ADC1_Init>
  MX_I2C1_Init();
 8009390:	f7ff ff60 	bl	8009254 <MX_I2C1_Init>
  MX_TIM1_Init();
 8009394:	f000 fdce 	bl	8009f34 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8009398:	f000 ff34 	bl	800a204 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 800939c:	f000 fe6c 	bl	800a078 <MX_TIM4_Init>
  MX_USB_DEVICE_Init();
 80093a0:	f009 f872 	bl	8012488 <MX_USB_DEVICE_Init>
  MX_USART6_UART_Init();
 80093a4:	f000 ff58 	bl	800a258 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  // 🔧 簡化測試：先測試基本功能
  printf("=== APP STARTED ===\r\n");
 80093a8:	4825      	ldr	r0, [pc, #148]	@ (8009440 <main+0xd8>)
 80093aa:	f00a fa1b 	bl	80137e4 <puts>

  // 測試 LED（PA5 是板載 LED）
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80093ae:	1d3b      	adds	r3, r7, #4
 80093b0:	2200      	movs	r2, #0
 80093b2:	601a      	str	r2, [r3, #0]
 80093b4:	605a      	str	r2, [r3, #4]
 80093b6:	609a      	str	r2, [r3, #8]
 80093b8:	60da      	str	r2, [r3, #12]
 80093ba:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = HM_OPA_ADC_Pin;
 80093bc:	2320      	movs	r3, #32
 80093be:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80093c0:	2301      	movs	r3, #1
 80093c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093c4:	2300      	movs	r3, #0
 80093c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80093c8:	2300      	movs	r3, #0
 80093ca:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(HM_OPA_ADC_GPIO_Port, &GPIO_InitStruct);
 80093cc:	1d3b      	adds	r3, r7, #4
 80093ce:	4619      	mov	r1, r3
 80093d0:	481c      	ldr	r0, [pc, #112]	@ (8009444 <main+0xdc>)
 80093d2:	f001 ff17 	bl	800b204 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(HM_OPA_ADC_GPIO_Port, HM_OPA_ADC_Pin, GPIO_PIN_SET);
 80093d6:	2201      	movs	r2, #1
 80093d8:	2120      	movs	r1, #32
 80093da:	481a      	ldr	r0, [pc, #104]	@ (8009444 <main+0xdc>)
 80093dc:	f002 f896 	bl	800b50c <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80093e0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80093e4:	f001 f87c 	bl	800a4e0 <HAL_Delay>
  HAL_GPIO_WritePin(HM_OPA_ADC_GPIO_Port, HM_OPA_ADC_Pin, GPIO_PIN_RESET);
 80093e8:	2200      	movs	r2, #0
 80093ea:	2120      	movs	r1, #32
 80093ec:	4815      	ldr	r0, [pc, #84]	@ (8009444 <main+0xdc>)
 80093ee:	f002 f88d 	bl	800b50c <HAL_GPIO_WritePin>

  printf("LED Test completed\r\n");
 80093f2:	4815      	ldr	r0, [pc, #84]	@ (8009448 <main+0xe0>)
 80093f4:	f00a f9f6 	bl	80137e4 <puts>


  printf("=== STM32 SSD1306 字符測試系統 ===\r\n");
 80093f8:	4814      	ldr	r0, [pc, #80]	@ (800944c <main+0xe4>)
 80093fa:	f00a f9f3 	bl	80137e4 <puts>

      // 初始化 SSD1306
      if (ssd1306_Init()) {
 80093fe:	f000 f89b 	bl	8009538 <ssd1306_Init>
 8009402:	4603      	mov	r3, r0
 8009404:	2b00      	cmp	r3, #0
 8009406:	d011      	beq.n	800942c <main+0xc4>
          printf("✓ SSD1306 初始化成功\r\n");
 8009408:	4811      	ldr	r0, [pc, #68]	@ (8009450 <main+0xe8>)
 800940a:	f00a f9eb 	bl	80137e4 <puts>

          // 執行所有測試
          ssd1306_TestAllCharacters();
 800940e:	f000 fa53 	bl	80098b8 <ssd1306_TestAllCharacters>
          HAL_Delay(1000);
 8009412:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8009416:	f001 f863 	bl	800a4e0 <HAL_Delay>

          ssd1306_TestFonts();
 800941a:	f000 fb27 	bl	8009a6c <ssd1306_TestFonts>
          HAL_Delay(1000);
 800941e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8009422:	f001 f85d 	bl	800a4e0 <HAL_Delay>

          // 可選：逐個字符測試（時間較長）
          // ssd1306_TestIndividualChars();

          // 持續測試
          ssd1306_ContinuousTest();
 8009426:	f000 fb53 	bl	8009ad0 <ssd1306_ContinuousTest>
 800942a:	e003      	b.n	8009434 <main+0xcc>

      } else {
          printf("✗ SSD1306 初始化失敗\r\n");
 800942c:	4809      	ldr	r0, [pc, #36]	@ (8009454 <main+0xec>)
 800942e:	f00a f9d9 	bl	80137e4 <puts>
      }
      while(1){
 8009432:	bf00      	nop
 8009434:	bf00      	nop
 8009436:	e7fd      	b.n	8009434 <main+0xcc>
 8009438:	e000ed00 	.word	0xe000ed00
 800943c:	08008000 	.word	0x08008000
 8009440:	08015b8c 	.word	0x08015b8c
 8009444:	40020000 	.word	0x40020000
 8009448:	08015ba4 	.word	0x08015ba4
 800944c:	08015bb8 	.word	0x08015bb8
 8009450:	08015be4 	.word	0x08015be4
 8009454:	08015c04 	.word	0x08015c04

08009458 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b094      	sub	sp, #80	@ 0x50
 800945c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800945e:	f107 0320 	add.w	r3, r7, #32
 8009462:	2230      	movs	r2, #48	@ 0x30
 8009464:	2100      	movs	r1, #0
 8009466:	4618      	mov	r0, r3
 8009468:	f00a fabe 	bl	80139e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800946c:	f107 030c 	add.w	r3, r7, #12
 8009470:	2200      	movs	r2, #0
 8009472:	601a      	str	r2, [r3, #0]
 8009474:	605a      	str	r2, [r3, #4]
 8009476:	609a      	str	r2, [r3, #8]
 8009478:	60da      	str	r2, [r3, #12]
 800947a:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN */
  // 🔧 先重置到默認狀態
  HAL_RCC_DeInit();
 800947c:	f004 fbe0 	bl	800dc40 <HAL_RCC_DeInit>
  /* USER CODE END */

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8009480:	2300      	movs	r3, #0
 8009482:	60bb      	str	r3, [r7, #8]
 8009484:	4b27      	ldr	r3, [pc, #156]	@ (8009524 <SystemClock_Config+0xcc>)
 8009486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009488:	4a26      	ldr	r2, [pc, #152]	@ (8009524 <SystemClock_Config+0xcc>)
 800948a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800948e:	6413      	str	r3, [r2, #64]	@ 0x40
 8009490:	4b24      	ldr	r3, [pc, #144]	@ (8009524 <SystemClock_Config+0xcc>)
 8009492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009494:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009498:	60bb      	str	r3, [r7, #8]
 800949a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800949c:	2300      	movs	r3, #0
 800949e:	607b      	str	r3, [r7, #4]
 80094a0:	4b21      	ldr	r3, [pc, #132]	@ (8009528 <SystemClock_Config+0xd0>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	4a20      	ldr	r2, [pc, #128]	@ (8009528 <SystemClock_Config+0xd0>)
 80094a6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80094aa:	6013      	str	r3, [r2, #0]
 80094ac:	4b1e      	ldr	r3, [pc, #120]	@ (8009528 <SystemClock_Config+0xd0>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80094b4:	607b      	str	r3, [r7, #4]
 80094b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80094b8:	2301      	movs	r3, #1
 80094ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80094bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80094c0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80094c2:	2302      	movs	r3, #2
 80094c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80094c6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80094ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80094cc:	2304      	movs	r3, #4
 80094ce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80094d0:	2348      	movs	r3, #72	@ 0x48
 80094d2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80094d4:	2302      	movs	r3, #2
 80094d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80094d8:	2303      	movs	r3, #3
 80094da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80094dc:	f107 0320 	add.w	r3, r7, #32
 80094e0:	4618      	mov	r0, r3
 80094e2:	f003 ff15 	bl	800d310 <HAL_RCC_OscConfig>
 80094e6:	4603      	mov	r3, r0
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d001      	beq.n	80094f0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80094ec:	f000 f81e 	bl	800952c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80094f0:	230f      	movs	r3, #15
 80094f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80094f4:	2302      	movs	r3, #2
 80094f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80094f8:	2300      	movs	r3, #0
 80094fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80094fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009500:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8009502:	2300      	movs	r3, #0
 8009504:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8009506:	f107 030c 	add.w	r3, r7, #12
 800950a:	2102      	movs	r1, #2
 800950c:	4618      	mov	r0, r3
 800950e:	f004 f977 	bl	800d800 <HAL_RCC_ClockConfig>
 8009512:	4603      	mov	r3, r0
 8009514:	2b00      	cmp	r3, #0
 8009516:	d001      	beq.n	800951c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8009518:	f000 f808 	bl	800952c <Error_Handler>
  }
}
 800951c:	bf00      	nop
 800951e:	3750      	adds	r7, #80	@ 0x50
 8009520:	46bd      	mov	sp, r7
 8009522:	bd80      	pop	{r7, pc}
 8009524:	40023800 	.word	0x40023800
 8009528:	40007000 	.word	0x40007000

0800952c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800952c:	b480      	push	{r7}
 800952e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8009530:	b672      	cpsid	i
}
 8009532:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8009534:	bf00      	nop
 8009536:	e7fd      	b.n	8009534 <Error_Handler+0x8>

08009538 <ssd1306_Init>:
 * @brief  初始化SSD1306 OLED顯示器
 * @retval 初始化狀態 (1: 成功, 0: 失敗)
 */
#if 1
uint8_t ssd1306_Init(void)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	af00      	add	r7, sp, #0
    /* 等待100ms讓SSD1306開機 */
    HAL_Delay(100);
 800953c:	2064      	movs	r0, #100	@ 0x64
 800953e:	f000 ffcf 	bl	800a4e0 <HAL_Delay>

    /* 初始化LCD */
    ssd1306_WriteCommand(0xAE); //display off
 8009542:	20ae      	movs	r0, #174	@ 0xae
 8009544:	f000 fb92 	bl	8009c6c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8009548:	2020      	movs	r0, #32
 800954a:	f000 fb8f 	bl	8009c6c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); // 00,Horizontal Addressing Mode; 01,Vertical Addressing Mode;
 800954e:	2010      	movs	r0, #16
 8009550:	f000 fb8c 	bl	8009c6c <ssd1306_WriteCommand>
                                // 10,Page Addressing Mode (RESET); 11,Invalid
    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8009554:	20b0      	movs	r0, #176	@ 0xb0
 8009556:	f000 fb89 	bl	8009c6c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800955a:	20c8      	movs	r0, #200	@ 0xc8
 800955c:	f000 fb86 	bl	8009c6c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //---set low column address
 8009560:	2000      	movs	r0, #0
 8009562:	f000 fb83 	bl	8009c6c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8009566:	2010      	movs	r0, #16
 8009568:	f000 fb80 	bl	8009c6c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800956c:	2040      	movs	r0, #64	@ 0x40
 800956e:	f000 fb7d 	bl	8009c6c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x81); //--set contrast control register - CHECK
 8009572:	2081      	movs	r0, #129	@ 0x81
 8009574:	f000 fb7a 	bl	8009c6c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xFF);
 8009578:	20ff      	movs	r0, #255	@ 0xff
 800957a:	f000 fb77 	bl	8009c6c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 800957e:	20a1      	movs	r0, #161	@ 0xa1
 8009580:	f000 fb74 	bl	8009c6c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA6); //--set normal color
 8009584:	20a6      	movs	r0, #166	@ 0xa6
 8009586:	f000 fb71 	bl	8009c6c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800958a:	20a8      	movs	r0, #168	@ 0xa8
 800958c:	f000 fb6e 	bl	8009c6c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x1F); // 改為 0x1F (32-1) 而不是 0x3F (64-1)
 8009590:	201f      	movs	r0, #31
 8009592:	f000 fb6b 	bl	8009c6c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8009596:	20a4      	movs	r0, #164	@ 0xa4
 8009598:	f000 fb68 	bl	8009c6c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD3); //--set display offset - CHECK
 800959c:	20d3      	movs	r0, #211	@ 0xd3
 800959e:	f000 fb65 	bl	8009c6c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //--not offset
 80095a2:	2000      	movs	r0, #0
 80095a4:	f000 fb62 	bl	8009c6c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80095a8:	20d5      	movs	r0, #213	@ 0xd5
 80095aa:	f000 fb5f 	bl	8009c6c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80095ae:	20f0      	movs	r0, #240	@ 0xf0
 80095b0:	f000 fb5c 	bl	8009c6c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80095b4:	20d9      	movs	r0, #217	@ 0xd9
 80095b6:	f000 fb59 	bl	8009c6c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80095ba:	2022      	movs	r0, #34	@ 0x22
 80095bc:	f000 fb56 	bl	8009c6c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80095c0:	20da      	movs	r0, #218	@ 0xda
 80095c2:	f000 fb53 	bl	8009c6c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x02); // 改為 0x02 (128x32用) 而不是 0x12 (128x64用)
 80095c6:	2002      	movs	r0, #2
 80095c8:	f000 fb50 	bl	8009c6c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xDB); //--set vcomh
 80095cc:	20db      	movs	r0, #219	@ 0xdb
 80095ce:	f000 fb4d 	bl	8009c6c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80095d2:	2020      	movs	r0, #32
 80095d4:	f000 fb4a 	bl	8009c6c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80095d8:	208d      	movs	r0, #141	@ 0x8d
 80095da:	f000 fb47 	bl	8009c6c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80095de:	2014      	movs	r0, #20
 80095e0:	f000 fb44 	bl	8009c6c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 80095e4:	20af      	movs	r0, #175	@ 0xaf
 80095e6:	f000 fb41 	bl	8009c6c <ssd1306_WriteCommand>

    /* 清除螢幕 */
    ssd1306_Fill(Black);
 80095ea:	2000      	movs	r0, #0
 80095ec:	f000 f814 	bl	8009618 <ssd1306_Fill>

    /* 更新螢幕 */
    ssd1306_UpdateScreen();
 80095f0:	f000 f836 	bl	8009660 <ssd1306_UpdateScreen>

    /* 設定預設值 */
    SSD1306.CurrentX = 0;
 80095f4:	4b07      	ldr	r3, [pc, #28]	@ (8009614 <ssd1306_Init+0xdc>)
 80095f6:	2200      	movs	r2, #0
 80095f8:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80095fa:	4b06      	ldr	r3, [pc, #24]	@ (8009614 <ssd1306_Init+0xdc>)
 80095fc:	2200      	movs	r2, #0
 80095fe:	805a      	strh	r2, [r3, #2]
    SSD1306.Initialized = 1;
 8009600:	4b04      	ldr	r3, [pc, #16]	@ (8009614 <ssd1306_Init+0xdc>)
 8009602:	2201      	movs	r2, #1
 8009604:	715a      	strb	r2, [r3, #5]
    SSD1306.DisplayOn = 1;  // 添加這行
 8009606:	4b03      	ldr	r3, [pc, #12]	@ (8009614 <ssd1306_Init+0xdc>)
 8009608:	2201      	movs	r2, #1
 800960a:	719a      	strb	r2, [r3, #6]

    /* 回傳OK */
    return 1;
 800960c:	2301      	movs	r3, #1
}
 800960e:	4618      	mov	r0, r3
 8009610:	bd80      	pop	{r7, pc}
 8009612:	bf00      	nop
 8009614:	20000404 	.word	0x20000404

08009618 <ssd1306_Fill>:
 * @brief  用指定顏色填滿整個螢幕
 * @param  color: 填充顏色
 * @retval None
 */
void ssd1306_Fill(SSD1306_COLOR color)
{
 8009618:	b480      	push	{r7}
 800961a:	b085      	sub	sp, #20
 800961c:	af00      	add	r7, sp, #0
 800961e:	4603      	mov	r3, r0
 8009620:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8009622:	2300      	movs	r3, #0
 8009624:	60fb      	str	r3, [r7, #12]
 8009626:	e00d      	b.n	8009644 <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8009628:	79fb      	ldrb	r3, [r7, #7]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d101      	bne.n	8009632 <ssd1306_Fill+0x1a>
 800962e:	2100      	movs	r1, #0
 8009630:	e000      	b.n	8009634 <ssd1306_Fill+0x1c>
 8009632:	21ff      	movs	r1, #255	@ 0xff
 8009634:	4a09      	ldr	r2, [pc, #36]	@ (800965c <ssd1306_Fill+0x44>)
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	4413      	add	r3, r2
 800963a:	460a      	mov	r2, r1
 800963c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	3301      	adds	r3, #1
 8009642:	60fb      	str	r3, [r7, #12]
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800964a:	d3ed      	bcc.n	8009628 <ssd1306_Fill+0x10>
    }
}
 800964c:	bf00      	nop
 800964e:	bf00      	nop
 8009650:	3714      	adds	r7, #20
 8009652:	46bd      	mov	sp, r7
 8009654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009658:	4770      	bx	lr
 800965a:	bf00      	nop
 800965c:	2000040c 	.word	0x2000040c

08009660 <ssd1306_UpdateScreen>:
/**
 * @brief  將緩衝區內容寫入螢幕
 * @retval None
 */
void ssd1306_UpdateScreen(void)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b082      	sub	sp, #8
 8009664:	af00      	add	r7, sp, #0
    uint8_t i;

    for (i = 0; i < 8; i++) {
 8009666:	2300      	movs	r3, #0
 8009668:	71fb      	strb	r3, [r7, #7]
 800966a:	e016      	b.n	800969a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // 設定頁地址
 800966c:	79fb      	ldrb	r3, [r7, #7]
 800966e:	3b50      	subs	r3, #80	@ 0x50
 8009670:	b2db      	uxtb	r3, r3
 8009672:	4618      	mov	r0, r3
 8009674:	f000 fafa 	bl	8009c6c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);     // 設定低欄位起始地址
 8009678:	2000      	movs	r0, #0
 800967a:	f000 faf7 	bl	8009c6c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);     // 設定高欄位起始地址
 800967e:	2010      	movs	r0, #16
 8009680:	f000 faf4 	bl	8009c6c <ssd1306_WriteCommand>

        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH);
 8009684:	79fb      	ldrb	r3, [r7, #7]
 8009686:	01db      	lsls	r3, r3, #7
 8009688:	4a08      	ldr	r2, [pc, #32]	@ (80096ac <ssd1306_UpdateScreen+0x4c>)
 800968a:	4413      	add	r3, r2
 800968c:	2180      	movs	r1, #128	@ 0x80
 800968e:	4618      	mov	r0, r3
 8009690:	f000 fb04 	bl	8009c9c <ssd1306_WriteData>
    for (i = 0; i < 8; i++) {
 8009694:	79fb      	ldrb	r3, [r7, #7]
 8009696:	3301      	adds	r3, #1
 8009698:	71fb      	strb	r3, [r7, #7]
 800969a:	79fb      	ldrb	r3, [r7, #7]
 800969c:	2b07      	cmp	r3, #7
 800969e:	d9e5      	bls.n	800966c <ssd1306_UpdateScreen+0xc>
    }
}
 80096a0:	bf00      	nop
 80096a2:	bf00      	nop
 80096a4:	3708      	adds	r7, #8
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}
 80096aa:	bf00      	nop
 80096ac:	2000040c 	.word	0x2000040c

080096b0 <ssd1306_DrawPixel>:
 * @param  y: Y座標
 * @param  color: 像素顏色
 * @retval None
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 80096b0:	b480      	push	{r7}
 80096b2:	b083      	sub	sp, #12
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	4603      	mov	r3, r0
 80096b8:	71fb      	strb	r3, [r7, #7]
 80096ba:	460b      	mov	r3, r1
 80096bc:	71bb      	strb	r3, [r7, #6]
 80096be:	4613      	mov	r3, r2
 80096c0:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 80096c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	db48      	blt.n	800975c <ssd1306_DrawPixel+0xac>
 80096ca:	79bb      	ldrb	r3, [r7, #6]
 80096cc:	2b1f      	cmp	r3, #31
 80096ce:	d845      	bhi.n	800975c <ssd1306_DrawPixel+0xac>
    {
        return;
    }

    if (SSD1306.Inverted)
 80096d0:	4b25      	ldr	r3, [pc, #148]	@ (8009768 <ssd1306_DrawPixel+0xb8>)
 80096d2:	791b      	ldrb	r3, [r3, #4]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d006      	beq.n	80096e6 <ssd1306_DrawPixel+0x36>
    {
        color = (SSD1306_COLOR)!color;
 80096d8:	797b      	ldrb	r3, [r7, #5]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	bf0c      	ite	eq
 80096de:	2301      	moveq	r3, #1
 80096e0:	2300      	movne	r3, #0
 80096e2:	b2db      	uxtb	r3, r3
 80096e4:	717b      	strb	r3, [r7, #5]
    }

    if (color == White)
 80096e6:	797b      	ldrb	r3, [r7, #5]
 80096e8:	2b01      	cmp	r3, #1
 80096ea:	d11a      	bne.n	8009722 <ssd1306_DrawPixel+0x72>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80096ec:	79fa      	ldrb	r2, [r7, #7]
 80096ee:	79bb      	ldrb	r3, [r7, #6]
 80096f0:	08db      	lsrs	r3, r3, #3
 80096f2:	b2d8      	uxtb	r0, r3
 80096f4:	4603      	mov	r3, r0
 80096f6:	01db      	lsls	r3, r3, #7
 80096f8:	4413      	add	r3, r2
 80096fa:	4a1c      	ldr	r2, [pc, #112]	@ (800976c <ssd1306_DrawPixel+0xbc>)
 80096fc:	5cd3      	ldrb	r3, [r2, r3]
 80096fe:	b25a      	sxtb	r2, r3
 8009700:	79bb      	ldrb	r3, [r7, #6]
 8009702:	f003 0307 	and.w	r3, r3, #7
 8009706:	2101      	movs	r1, #1
 8009708:	fa01 f303 	lsl.w	r3, r1, r3
 800970c:	b25b      	sxtb	r3, r3
 800970e:	4313      	orrs	r3, r2
 8009710:	b259      	sxtb	r1, r3
 8009712:	79fa      	ldrb	r2, [r7, #7]
 8009714:	4603      	mov	r3, r0
 8009716:	01db      	lsls	r3, r3, #7
 8009718:	4413      	add	r3, r2
 800971a:	b2c9      	uxtb	r1, r1
 800971c:	4a13      	ldr	r2, [pc, #76]	@ (800976c <ssd1306_DrawPixel+0xbc>)
 800971e:	54d1      	strb	r1, [r2, r3]
 8009720:	e01d      	b.n	800975e <ssd1306_DrawPixel+0xae>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8009722:	79fa      	ldrb	r2, [r7, #7]
 8009724:	79bb      	ldrb	r3, [r7, #6]
 8009726:	08db      	lsrs	r3, r3, #3
 8009728:	b2d8      	uxtb	r0, r3
 800972a:	4603      	mov	r3, r0
 800972c:	01db      	lsls	r3, r3, #7
 800972e:	4413      	add	r3, r2
 8009730:	4a0e      	ldr	r2, [pc, #56]	@ (800976c <ssd1306_DrawPixel+0xbc>)
 8009732:	5cd3      	ldrb	r3, [r2, r3]
 8009734:	b25a      	sxtb	r2, r3
 8009736:	79bb      	ldrb	r3, [r7, #6]
 8009738:	f003 0307 	and.w	r3, r3, #7
 800973c:	2101      	movs	r1, #1
 800973e:	fa01 f303 	lsl.w	r3, r1, r3
 8009742:	b25b      	sxtb	r3, r3
 8009744:	43db      	mvns	r3, r3
 8009746:	b25b      	sxtb	r3, r3
 8009748:	4013      	ands	r3, r2
 800974a:	b259      	sxtb	r1, r3
 800974c:	79fa      	ldrb	r2, [r7, #7]
 800974e:	4603      	mov	r3, r0
 8009750:	01db      	lsls	r3, r3, #7
 8009752:	4413      	add	r3, r2
 8009754:	b2c9      	uxtb	r1, r1
 8009756:	4a05      	ldr	r2, [pc, #20]	@ (800976c <ssd1306_DrawPixel+0xbc>)
 8009758:	54d1      	strb	r1, [r2, r3]
 800975a:	e000      	b.n	800975e <ssd1306_DrawPixel+0xae>
        return;
 800975c:	bf00      	nop
    }
}
 800975e:	370c      	adds	r7, #12
 8009760:	46bd      	mov	sp, r7
 8009762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009766:	4770      	bx	lr
 8009768:	20000404 	.word	0x20000404
 800976c:	2000040c 	.word	0x2000040c

08009770 <ssd1306_WriteChar>:
 * @param  color: 字元顏色
 * @retval 寫入的字元
 */
extern const uint8_t Font7x10_Data[];
char ssd1306_WriteChar(char ch, FontDef_t Font, SSD1306_COLOR color)
{
 8009770:	b590      	push	{r4, r7, lr}
 8009772:	b089      	sub	sp, #36	@ 0x24
 8009774:	af00      	add	r7, sp, #0
 8009776:	4604      	mov	r4, r0
 8009778:	1d38      	adds	r0, r7, #4
 800977a:	e880 0006 	stmia.w	r0, {r1, r2}
 800977e:	461a      	mov	r2, r3
 8009780:	4623      	mov	r3, r4
 8009782:	73fb      	strb	r3, [r7, #15]
 8009784:	4613      	mov	r3, r2
 8009786:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // 檢查字符範圍 - 擴大支持範圍
    if (ch < 32 || ch > 126) {
 8009788:	7bfb      	ldrb	r3, [r7, #15]
 800978a:	2b1f      	cmp	r3, #31
 800978c:	d902      	bls.n	8009794 <ssd1306_WriteChar+0x24>
 800978e:	7bfb      	ldrb	r3, [r7, #15]
 8009790:	2b7e      	cmp	r3, #126	@ 0x7e
 8009792:	d901      	bls.n	8009798 <ssd1306_WriteChar+0x28>
        return 0;  // 不支持的字符
 8009794:	2300      	movs	r3, #0
 8009796:	e088      	b.n	80098aa <ssd1306_WriteChar+0x13a>
    }

    // 檢查邊界
    if (SSD1306.CurrentX + Font.width >= SSD1306_WIDTH ||
 8009798:	4b46      	ldr	r3, [pc, #280]	@ (80098b4 <ssd1306_WriteChar+0x144>)
 800979a:	881b      	ldrh	r3, [r3, #0]
 800979c:	461a      	mov	r2, r3
 800979e:	793b      	ldrb	r3, [r7, #4]
 80097a0:	4413      	add	r3, r2
 80097a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80097a4:	dc06      	bgt.n	80097b4 <ssd1306_WriteChar+0x44>
        SSD1306.CurrentY + Font.height >= SSD1306_HEIGHT) {
 80097a6:	4b43      	ldr	r3, [pc, #268]	@ (80098b4 <ssd1306_WriteChar+0x144>)
 80097a8:	885b      	ldrh	r3, [r3, #2]
 80097aa:	461a      	mov	r2, r3
 80097ac:	797b      	ldrb	r3, [r7, #5]
 80097ae:	4413      	add	r3, r2
    if (SSD1306.CurrentX + Font.width >= SSD1306_WIDTH ||
 80097b0:	2b1f      	cmp	r3, #31
 80097b2:	dd01      	ble.n	80097b8 <ssd1306_WriteChar+0x48>
        return 0;
 80097b4:	2300      	movs	r3, #0
 80097b6:	e078      	b.n	80098aa <ssd1306_WriteChar+0x13a>
    }

    // 計算字符在字體數據中的偏移
    uint32_t char_index = ch - 32;  // ASCII 32 是空格
 80097b8:	7bfb      	ldrb	r3, [r7, #15]
 80097ba:	3b20      	subs	r3, #32
 80097bc:	617b      	str	r3, [r7, #20]

    // 遍歷字體的每一行
    for (i = 0; i < Font.height; i++) {
 80097be:	2300      	movs	r3, #0
 80097c0:	61fb      	str	r3, [r7, #28]
 80097c2:	e04a      	b.n	800985a <ssd1306_WriteChar+0xea>
        // 獲取當前行的字體數據
        b = Font.data[char_index * Font.height + i];
 80097c4:	68ba      	ldr	r2, [r7, #8]
 80097c6:	797b      	ldrb	r3, [r7, #5]
 80097c8:	4619      	mov	r1, r3
 80097ca:	697b      	ldr	r3, [r7, #20]
 80097cc:	fb03 f101 	mul.w	r1, r3, r1
 80097d0:	69fb      	ldr	r3, [r7, #28]
 80097d2:	440b      	add	r3, r1
 80097d4:	4413      	add	r3, r2
 80097d6:	781b      	ldrb	r3, [r3, #0]
 80097d8:	613b      	str	r3, [r7, #16]

        // 遍歷當前行的每一位
        for (j = 0; j < Font.width; j++) {
 80097da:	2300      	movs	r3, #0
 80097dc:	61bb      	str	r3, [r7, #24]
 80097de:	e034      	b.n	800984a <ssd1306_WriteChar+0xda>
            if ((b << j) & 0x80) {  // 檢查最高位
 80097e0:	693a      	ldr	r2, [r7, #16]
 80097e2:	69bb      	ldr	r3, [r7, #24]
 80097e4:	fa02 f303 	lsl.w	r3, r2, r3
 80097e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d012      	beq.n	8009816 <ssd1306_WriteChar+0xa6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j,
 80097f0:	4b30      	ldr	r3, [pc, #192]	@ (80098b4 <ssd1306_WriteChar+0x144>)
 80097f2:	881b      	ldrh	r3, [r3, #0]
 80097f4:	b2da      	uxtb	r2, r3
 80097f6:	69bb      	ldr	r3, [r7, #24]
 80097f8:	b2db      	uxtb	r3, r3
 80097fa:	4413      	add	r3, r2
 80097fc:	b2d8      	uxtb	r0, r3
                                SSD1306.CurrentY + i,
 80097fe:	4b2d      	ldr	r3, [pc, #180]	@ (80098b4 <ssd1306_WriteChar+0x144>)
 8009800:	885b      	ldrh	r3, [r3, #2]
                ssd1306_DrawPixel(SSD1306.CurrentX + j,
 8009802:	b2da      	uxtb	r2, r3
 8009804:	69fb      	ldr	r3, [r7, #28]
 8009806:	b2db      	uxtb	r3, r3
 8009808:	4413      	add	r3, r2
 800980a:	b2db      	uxtb	r3, r3
 800980c:	7bba      	ldrb	r2, [r7, #14]
 800980e:	4619      	mov	r1, r3
 8009810:	f7ff ff4e 	bl	80096b0 <ssd1306_DrawPixel>
 8009814:	e016      	b.n	8009844 <ssd1306_WriteChar+0xd4>
                                (SSD1306_COLOR) color);
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j,
 8009816:	4b27      	ldr	r3, [pc, #156]	@ (80098b4 <ssd1306_WriteChar+0x144>)
 8009818:	881b      	ldrh	r3, [r3, #0]
 800981a:	b2da      	uxtb	r2, r3
 800981c:	69bb      	ldr	r3, [r7, #24]
 800981e:	b2db      	uxtb	r3, r3
 8009820:	4413      	add	r3, r2
 8009822:	b2d8      	uxtb	r0, r3
                                SSD1306.CurrentY + i,
 8009824:	4b23      	ldr	r3, [pc, #140]	@ (80098b4 <ssd1306_WriteChar+0x144>)
 8009826:	885b      	ldrh	r3, [r3, #2]
                ssd1306_DrawPixel(SSD1306.CurrentX + j,
 8009828:	b2da      	uxtb	r2, r3
 800982a:	69fb      	ldr	r3, [r7, #28]
 800982c:	b2db      	uxtb	r3, r3
 800982e:	4413      	add	r3, r2
 8009830:	b2d9      	uxtb	r1, r3
 8009832:	7bbb      	ldrb	r3, [r7, #14]
 8009834:	2b00      	cmp	r3, #0
 8009836:	bf0c      	ite	eq
 8009838:	2301      	moveq	r3, #1
 800983a:	2300      	movne	r3, #0
 800983c:	b2db      	uxtb	r3, r3
 800983e:	461a      	mov	r2, r3
 8009840:	f7ff ff36 	bl	80096b0 <ssd1306_DrawPixel>
        for (j = 0; j < Font.width; j++) {
 8009844:	69bb      	ldr	r3, [r7, #24]
 8009846:	3301      	adds	r3, #1
 8009848:	61bb      	str	r3, [r7, #24]
 800984a:	793b      	ldrb	r3, [r7, #4]
 800984c:	461a      	mov	r2, r3
 800984e:	69bb      	ldr	r3, [r7, #24]
 8009850:	4293      	cmp	r3, r2
 8009852:	d3c5      	bcc.n	80097e0 <ssd1306_WriteChar+0x70>
    for (i = 0; i < Font.height; i++) {
 8009854:	69fb      	ldr	r3, [r7, #28]
 8009856:	3301      	adds	r3, #1
 8009858:	61fb      	str	r3, [r7, #28]
 800985a:	797b      	ldrb	r3, [r7, #5]
 800985c:	461a      	mov	r2, r3
 800985e:	69fb      	ldr	r3, [r7, #28]
 8009860:	4293      	cmp	r3, r2
 8009862:	d3af      	bcc.n	80097c4 <ssd1306_WriteChar+0x54>
            }
        }
    }

    // 移動游標到下一個字符位置
    SSD1306.CurrentX += Font.width;
 8009864:	4b13      	ldr	r3, [pc, #76]	@ (80098b4 <ssd1306_WriteChar+0x144>)
 8009866:	881b      	ldrh	r3, [r3, #0]
 8009868:	793a      	ldrb	r2, [r7, #4]
 800986a:	4413      	add	r3, r2
 800986c:	b29a      	uxth	r2, r3
 800986e:	4b11      	ldr	r3, [pc, #68]	@ (80098b4 <ssd1306_WriteChar+0x144>)
 8009870:	801a      	strh	r2, [r3, #0]

    // 檢查是否需要換行
    if (SSD1306.CurrentX + Font.width >= SSD1306_WIDTH) {
 8009872:	4b10      	ldr	r3, [pc, #64]	@ (80098b4 <ssd1306_WriteChar+0x144>)
 8009874:	881b      	ldrh	r3, [r3, #0]
 8009876:	461a      	mov	r2, r3
 8009878:	793b      	ldrb	r3, [r7, #4]
 800987a:	4413      	add	r3, r2
 800987c:	2b7f      	cmp	r3, #127	@ 0x7f
 800987e:	dd13      	ble.n	80098a8 <ssd1306_WriteChar+0x138>
        SSD1306.CurrentX = 0;
 8009880:	4b0c      	ldr	r3, [pc, #48]	@ (80098b4 <ssd1306_WriteChar+0x144>)
 8009882:	2200      	movs	r2, #0
 8009884:	801a      	strh	r2, [r3, #0]
        SSD1306.CurrentY += Font.height;
 8009886:	4b0b      	ldr	r3, [pc, #44]	@ (80098b4 <ssd1306_WriteChar+0x144>)
 8009888:	885b      	ldrh	r3, [r3, #2]
 800988a:	797a      	ldrb	r2, [r7, #5]
 800988c:	4413      	add	r3, r2
 800988e:	b29a      	uxth	r2, r3
 8009890:	4b08      	ldr	r3, [pc, #32]	@ (80098b4 <ssd1306_WriteChar+0x144>)
 8009892:	805a      	strh	r2, [r3, #2]

        // 如果超出螢幕高度，回到頂部
        if (SSD1306.CurrentY + Font.height >= SSD1306_HEIGHT) {
 8009894:	4b07      	ldr	r3, [pc, #28]	@ (80098b4 <ssd1306_WriteChar+0x144>)
 8009896:	885b      	ldrh	r3, [r3, #2]
 8009898:	461a      	mov	r2, r3
 800989a:	797b      	ldrb	r3, [r7, #5]
 800989c:	4413      	add	r3, r2
 800989e:	2b1f      	cmp	r3, #31
 80098a0:	dd02      	ble.n	80098a8 <ssd1306_WriteChar+0x138>
            SSD1306.CurrentY = 0;
 80098a2:	4b04      	ldr	r3, [pc, #16]	@ (80098b4 <ssd1306_WriteChar+0x144>)
 80098a4:	2200      	movs	r2, #0
 80098a6:	805a      	strh	r2, [r3, #2]
        }
    }

    return ch;
 80098a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	3724      	adds	r7, #36	@ 0x24
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd90      	pop	{r4, r7, pc}
 80098b2:	bf00      	nop
 80098b4:	20000404 	.word	0x20000404

080098b8 <ssd1306_TestAllCharacters>:
/**
 * @brief  測試所有字符顯示
 * @retval None
 */
void ssd1306_TestAllCharacters(void)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	af00      	add	r7, sp, #0
    printf("=== SSD1306 字符顯示測試開始 ===\r\n");
 80098bc:	4857      	ldr	r0, [pc, #348]	@ (8009a1c <ssd1306_TestAllCharacters+0x164>)
 80098be:	f009 ff91 	bl	80137e4 <puts>

    // 確保顯示器已初始化
    if (!SSD1306.Initialized) {
 80098c2:	4b57      	ldr	r3, [pc, #348]	@ (8009a20 <ssd1306_TestAllCharacters+0x168>)
 80098c4:	795b      	ldrb	r3, [r3, #5]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d103      	bne.n	80098d2 <ssd1306_TestAllCharacters+0x1a>
        printf("錯誤：SSD1306 未初始化\r\n");
 80098ca:	4856      	ldr	r0, [pc, #344]	@ (8009a24 <ssd1306_TestAllCharacters+0x16c>)
 80098cc:	f009 ff8a 	bl	80137e4 <puts>
        return;
 80098d0:	e0a2      	b.n	8009a18 <ssd1306_TestAllCharacters+0x160>
    }

    // **測試1：基本連接測試**
    printf("1. 基本連接測試...\r\n");
 80098d2:	4855      	ldr	r0, [pc, #340]	@ (8009a28 <ssd1306_TestAllCharacters+0x170>)
 80098d4:	f009 ff86 	bl	80137e4 <puts>
    ssd1306_Fill(Black);
 80098d8:	2000      	movs	r0, #0
 80098da:	f7ff fe9d 	bl	8009618 <ssd1306_Fill>
    ssd1306_SetCursor(0, 0);
 80098de:	2100      	movs	r1, #0
 80098e0:	2000      	movs	r0, #0
 80098e2:	f000 f9ab 	bl	8009c3c <ssd1306_SetCursor>
    ssd1306_WriteString("SSD1306 OK!", Font_7x10, White);
 80098e6:	4a51      	ldr	r2, [pc, #324]	@ (8009a2c <ssd1306_TestAllCharacters+0x174>)
 80098e8:	2301      	movs	r3, #1
 80098ea:	ca06      	ldmia	r2, {r1, r2}
 80098ec:	4850      	ldr	r0, [pc, #320]	@ (8009a30 <ssd1306_TestAllCharacters+0x178>)
 80098ee:	f000 f983 	bl	8009bf8 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 80098f2:	f7ff feb5 	bl	8009660 <ssd1306_UpdateScreen>
    HAL_Delay(2000);
 80098f6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80098fa:	f000 fdf1 	bl	800a4e0 <HAL_Delay>

    // **測試2：大寫字母 A-Z**
    printf("2. 測試大寫字母 A-Z...\r\n");
 80098fe:	484d      	ldr	r0, [pc, #308]	@ (8009a34 <ssd1306_TestAllCharacters+0x17c>)
 8009900:	f009 ff70 	bl	80137e4 <puts>
    ssd1306_Fill(Black);
 8009904:	2000      	movs	r0, #0
 8009906:	f7ff fe87 	bl	8009618 <ssd1306_Fill>
    ssd1306_SetCursor(0, 0);
 800990a:	2100      	movs	r1, #0
 800990c:	2000      	movs	r0, #0
 800990e:	f000 f995 	bl	8009c3c <ssd1306_SetCursor>
    ssd1306_WriteString("ABCDEFGHIJKLM", Font_7x10, White);
 8009912:	4a46      	ldr	r2, [pc, #280]	@ (8009a2c <ssd1306_TestAllCharacters+0x174>)
 8009914:	2301      	movs	r3, #1
 8009916:	ca06      	ldmia	r2, {r1, r2}
 8009918:	4847      	ldr	r0, [pc, #284]	@ (8009a38 <ssd1306_TestAllCharacters+0x180>)
 800991a:	f000 f96d 	bl	8009bf8 <ssd1306_WriteString>
    ssd1306_SetCursor(0, 12);
 800991e:	210c      	movs	r1, #12
 8009920:	2000      	movs	r0, #0
 8009922:	f000 f98b 	bl	8009c3c <ssd1306_SetCursor>
    ssd1306_WriteString("NOPQRSTUVWXYZ", Font_7x10, White);
 8009926:	4a41      	ldr	r2, [pc, #260]	@ (8009a2c <ssd1306_TestAllCharacters+0x174>)
 8009928:	2301      	movs	r3, #1
 800992a:	ca06      	ldmia	r2, {r1, r2}
 800992c:	4843      	ldr	r0, [pc, #268]	@ (8009a3c <ssd1306_TestAllCharacters+0x184>)
 800992e:	f000 f963 	bl	8009bf8 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8009932:	f7ff fe95 	bl	8009660 <ssd1306_UpdateScreen>
    HAL_Delay(3000);
 8009936:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800993a:	f000 fdd1 	bl	800a4e0 <HAL_Delay>

    // **測試3：小寫字母 a-z**
    printf("3. 測試小寫字母 a-z...\r\n");
 800993e:	4840      	ldr	r0, [pc, #256]	@ (8009a40 <ssd1306_TestAllCharacters+0x188>)
 8009940:	f009 ff50 	bl	80137e4 <puts>
    ssd1306_Fill(Black);
 8009944:	2000      	movs	r0, #0
 8009946:	f7ff fe67 	bl	8009618 <ssd1306_Fill>
    ssd1306_SetCursor(0, 0);
 800994a:	2100      	movs	r1, #0
 800994c:	2000      	movs	r0, #0
 800994e:	f000 f975 	bl	8009c3c <ssd1306_SetCursor>
    ssd1306_WriteString("abcdefghijklm", Font_7x10, White);
 8009952:	4a36      	ldr	r2, [pc, #216]	@ (8009a2c <ssd1306_TestAllCharacters+0x174>)
 8009954:	2301      	movs	r3, #1
 8009956:	ca06      	ldmia	r2, {r1, r2}
 8009958:	483a      	ldr	r0, [pc, #232]	@ (8009a44 <ssd1306_TestAllCharacters+0x18c>)
 800995a:	f000 f94d 	bl	8009bf8 <ssd1306_WriteString>
    ssd1306_SetCursor(0, 12);
 800995e:	210c      	movs	r1, #12
 8009960:	2000      	movs	r0, #0
 8009962:	f000 f96b 	bl	8009c3c <ssd1306_SetCursor>
    ssd1306_WriteString("nopqrstuvwxyz", Font_7x10, White);
 8009966:	4a31      	ldr	r2, [pc, #196]	@ (8009a2c <ssd1306_TestAllCharacters+0x174>)
 8009968:	2301      	movs	r3, #1
 800996a:	ca06      	ldmia	r2, {r1, r2}
 800996c:	4836      	ldr	r0, [pc, #216]	@ (8009a48 <ssd1306_TestAllCharacters+0x190>)
 800996e:	f000 f943 	bl	8009bf8 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8009972:	f7ff fe75 	bl	8009660 <ssd1306_UpdateScreen>
    HAL_Delay(3000);
 8009976:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800997a:	f000 fdb1 	bl	800a4e0 <HAL_Delay>

    // **測試4：數字 0-9**
    printf("4. 測試數字 0-9...\r\n");
 800997e:	4833      	ldr	r0, [pc, #204]	@ (8009a4c <ssd1306_TestAllCharacters+0x194>)
 8009980:	f009 ff30 	bl	80137e4 <puts>
    ssd1306_Fill(Black);
 8009984:	2000      	movs	r0, #0
 8009986:	f7ff fe47 	bl	8009618 <ssd1306_Fill>
    ssd1306_SetCursor(0, 0);
 800998a:	2100      	movs	r1, #0
 800998c:	2000      	movs	r0, #0
 800998e:	f000 f955 	bl	8009c3c <ssd1306_SetCursor>
    ssd1306_WriteString("0123456789", Font_7x10, White);
 8009992:	4a26      	ldr	r2, [pc, #152]	@ (8009a2c <ssd1306_TestAllCharacters+0x174>)
 8009994:	2301      	movs	r3, #1
 8009996:	ca06      	ldmia	r2, {r1, r2}
 8009998:	482d      	ldr	r0, [pc, #180]	@ (8009a50 <ssd1306_TestAllCharacters+0x198>)
 800999a:	f000 f92d 	bl	8009bf8 <ssd1306_WriteString>
    ssd1306_SetCursor(0, 12);
 800999e:	210c      	movs	r1, #12
 80099a0:	2000      	movs	r0, #0
 80099a2:	f000 f94b 	bl	8009c3c <ssd1306_SetCursor>
    ssd1306_WriteString("9876543210", Font_7x10, White);
 80099a6:	4a21      	ldr	r2, [pc, #132]	@ (8009a2c <ssd1306_TestAllCharacters+0x174>)
 80099a8:	2301      	movs	r3, #1
 80099aa:	ca06      	ldmia	r2, {r1, r2}
 80099ac:	4829      	ldr	r0, [pc, #164]	@ (8009a54 <ssd1306_TestAllCharacters+0x19c>)
 80099ae:	f000 f923 	bl	8009bf8 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 80099b2:	f7ff fe55 	bl	8009660 <ssd1306_UpdateScreen>
    HAL_Delay(3000);
 80099b6:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80099ba:	f000 fd91 	bl	800a4e0 <HAL_Delay>

    // **測試5：標點符號**
    printf("5. 測試標點符號...\r\n");
 80099be:	4826      	ldr	r0, [pc, #152]	@ (8009a58 <ssd1306_TestAllCharacters+0x1a0>)
 80099c0:	f009 ff10 	bl	80137e4 <puts>
    ssd1306_Fill(Black);
 80099c4:	2000      	movs	r0, #0
 80099c6:	f7ff fe27 	bl	8009618 <ssd1306_Fill>
    ssd1306_SetCursor(0, 0);
 80099ca:	2100      	movs	r1, #0
 80099cc:	2000      	movs	r0, #0
 80099ce:	f000 f935 	bl	8009c3c <ssd1306_SetCursor>
    ssd1306_WriteString("!@#$%^&*()", Font_7x10, White);
 80099d2:	4a16      	ldr	r2, [pc, #88]	@ (8009a2c <ssd1306_TestAllCharacters+0x174>)
 80099d4:	2301      	movs	r3, #1
 80099d6:	ca06      	ldmia	r2, {r1, r2}
 80099d8:	4820      	ldr	r0, [pc, #128]	@ (8009a5c <ssd1306_TestAllCharacters+0x1a4>)
 80099da:	f000 f90d 	bl	8009bf8 <ssd1306_WriteString>
    ssd1306_SetCursor(0, 12);
 80099de:	210c      	movs	r1, #12
 80099e0:	2000      	movs	r0, #0
 80099e2:	f000 f92b 	bl	8009c3c <ssd1306_SetCursor>
    ssd1306_WriteString("[]{}|:;\"'<>", Font_7x10, White);
 80099e6:	4a11      	ldr	r2, [pc, #68]	@ (8009a2c <ssd1306_TestAllCharacters+0x174>)
 80099e8:	2301      	movs	r3, #1
 80099ea:	ca06      	ldmia	r2, {r1, r2}
 80099ec:	481c      	ldr	r0, [pc, #112]	@ (8009a60 <ssd1306_TestAllCharacters+0x1a8>)
 80099ee:	f000 f903 	bl	8009bf8 <ssd1306_WriteString>
    ssd1306_SetCursor(0, 24);
 80099f2:	2118      	movs	r1, #24
 80099f4:	2000      	movs	r0, #0
 80099f6:	f000 f921 	bl	8009c3c <ssd1306_SetCursor>
    ssd1306_WriteString("?/.,`~+-=_", Font_7x10, White);
 80099fa:	4a0c      	ldr	r2, [pc, #48]	@ (8009a2c <ssd1306_TestAllCharacters+0x174>)
 80099fc:	2301      	movs	r3, #1
 80099fe:	ca06      	ldmia	r2, {r1, r2}
 8009a00:	4818      	ldr	r0, [pc, #96]	@ (8009a64 <ssd1306_TestAllCharacters+0x1ac>)
 8009a02:	f000 f8f9 	bl	8009bf8 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8009a06:	f7ff fe2b 	bl	8009660 <ssd1306_UpdateScreen>
    HAL_Delay(3000);
 8009a0a:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8009a0e:	f000 fd67 	bl	800a4e0 <HAL_Delay>

    printf("=== 字符顯示測試完成 ===\r\n");
 8009a12:	4815      	ldr	r0, [pc, #84]	@ (8009a68 <ssd1306_TestAllCharacters+0x1b0>)
 8009a14:	f009 fee6 	bl	80137e4 <puts>
}
 8009a18:	bd80      	pop	{r7, pc}
 8009a1a:	bf00      	nop
 8009a1c:	08015c24 	.word	0x08015c24
 8009a20:	20000404 	.word	0x20000404
 8009a24:	08015c50 	.word	0x08015c50
 8009a28:	08015c70 	.word	0x08015c70
 8009a2c:	20000000 	.word	0x20000000
 8009a30:	08015c8c 	.word	0x08015c8c
 8009a34:	08015c98 	.word	0x08015c98
 8009a38:	08015cb8 	.word	0x08015cb8
 8009a3c:	08015cc8 	.word	0x08015cc8
 8009a40:	08015cd8 	.word	0x08015cd8
 8009a44:	08015cf8 	.word	0x08015cf8
 8009a48:	08015d08 	.word	0x08015d08
 8009a4c:	08015d18 	.word	0x08015d18
 8009a50:	08015d30 	.word	0x08015d30
 8009a54:	08015d3c 	.word	0x08015d3c
 8009a58:	08015d48 	.word	0x08015d48
 8009a5c:	08015d64 	.word	0x08015d64
 8009a60:	08015d70 	.word	0x08015d70
 8009a64:	08015d7c 	.word	0x08015d7c
 8009a68:	08015d88 	.word	0x08015d88

08009a6c <ssd1306_TestFonts>:
/**
 * @brief  測試字體大小（如果有多種字體）
 * @retval None
 */
void ssd1306_TestFonts(void)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	af00      	add	r7, sp, #0
    printf("=== 字體測試 ===\r\n");
 8009a70:	4812      	ldr	r0, [pc, #72]	@ (8009abc <ssd1306_TestFonts+0x50>)
 8009a72:	f009 feb7 	bl	80137e4 <puts>

    // 測試 Font_7x10
    ssd1306_Fill(Black);
 8009a76:	2000      	movs	r0, #0
 8009a78:	f7ff fdce 	bl	8009618 <ssd1306_Fill>
    ssd1306_SetCursor(0, 0);
 8009a7c:	2100      	movs	r1, #0
 8009a7e:	2000      	movs	r0, #0
 8009a80:	f000 f8dc 	bl	8009c3c <ssd1306_SetCursor>
    ssd1306_WriteString("Font 7x10:", Font_7x10, White);
 8009a84:	4a0e      	ldr	r2, [pc, #56]	@ (8009ac0 <ssd1306_TestFonts+0x54>)
 8009a86:	2301      	movs	r3, #1
 8009a88:	ca06      	ldmia	r2, {r1, r2}
 8009a8a:	480e      	ldr	r0, [pc, #56]	@ (8009ac4 <ssd1306_TestFonts+0x58>)
 8009a8c:	f000 f8b4 	bl	8009bf8 <ssd1306_WriteString>
    ssd1306_SetCursor(0, 12);
 8009a90:	210c      	movs	r1, #12
 8009a92:	2000      	movs	r0, #0
 8009a94:	f000 f8d2 	bl	8009c3c <ssd1306_SetCursor>
    ssd1306_WriteString("ABC abc 123", Font_7x10, White);
 8009a98:	4a09      	ldr	r2, [pc, #36]	@ (8009ac0 <ssd1306_TestFonts+0x54>)
 8009a9a:	2301      	movs	r3, #1
 8009a9c:	ca06      	ldmia	r2, {r1, r2}
 8009a9e:	480a      	ldr	r0, [pc, #40]	@ (8009ac8 <ssd1306_TestFonts+0x5c>)
 8009aa0:	f000 f8aa 	bl	8009bf8 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8009aa4:	f7ff fddc 	bl	8009660 <ssd1306_UpdateScreen>
    HAL_Delay(2000);
 8009aa8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8009aac:	f000 fd18 	bl	800a4e0 <HAL_Delay>
    // ssd1306_SetCursor(0, 15);
    // ssd1306_WriteString("ABC 123", Font_11x18, White);
    // ssd1306_UpdateScreen();
    // HAL_Delay(2000);

    printf("=== 字體測試完成 ===\r\n");
 8009ab0:	4806      	ldr	r0, [pc, #24]	@ (8009acc <ssd1306_TestFonts+0x60>)
 8009ab2:	f009 fe97 	bl	80137e4 <puts>
}
 8009ab6:	bf00      	nop
 8009ab8:	bd80      	pop	{r7, pc}
 8009aba:	bf00      	nop
 8009abc:	08015e30 	.word	0x08015e30
 8009ac0:	20000000 	.word	0x20000000
 8009ac4:	08015e48 	.word	0x08015e48
 8009ac8:	08015e54 	.word	0x08015e54
 8009acc:	08015e60 	.word	0x08015e60

08009ad0 <ssd1306_ContinuousTest>:
/**
 * @brief  持續顯示測試
 * @retval None
 */
void ssd1306_ContinuousTest(void)
{
 8009ad0:	b590      	push	{r4, r7, lr}
 8009ad2:	b091      	sub	sp, #68	@ 0x44
 8009ad4:	af00      	add	r7, sp, #0
    printf("=== 持續顯示測試開始 ===\r\n");
 8009ad6:	483e      	ldr	r0, [pc, #248]	@ (8009bd0 <ssd1306_ContinuousTest+0x100>)
 8009ad8:	f009 fe84 	bl	80137e4 <puts>

    uint32_t counter = 0;
 8009adc:	2300      	movs	r3, #0
 8009ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
    char line1[20], line2[20], line3[20];

    while (1) {
        ssd1306_Fill(Black);
 8009ae0:	2000      	movs	r0, #0
 8009ae2:	f7ff fd99 	bl	8009618 <ssd1306_Fill>

        // 第一行：計數器
        ssd1306_SetCursor(0, 0);
 8009ae6:	2100      	movs	r1, #0
 8009ae8:	2000      	movs	r0, #0
 8009aea:	f000 f8a7 	bl	8009c3c <ssd1306_SetCursor>
        sprintf(line1, "Count: %lu", counter);
 8009aee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8009af2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009af4:	4937      	ldr	r1, [pc, #220]	@ (8009bd4 <ssd1306_ContinuousTest+0x104>)
 8009af6:	4618      	mov	r0, r3
 8009af8:	f009 fe7c 	bl	80137f4 <siprintf>
        ssd1306_WriteString(line1, Font_7x10, White);
 8009afc:	4a36      	ldr	r2, [pc, #216]	@ (8009bd8 <ssd1306_ContinuousTest+0x108>)
 8009afe:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8009b02:	2301      	movs	r3, #1
 8009b04:	ca06      	ldmia	r2, {r1, r2}
 8009b06:	f000 f877 	bl	8009bf8 <ssd1306_WriteString>

        // 第二行：時間
        ssd1306_SetCursor(0, 12);
 8009b0a:	210c      	movs	r1, #12
 8009b0c:	2000      	movs	r0, #0
 8009b0e:	f000 f895 	bl	8009c3c <ssd1306_SetCursor>
        sprintf(line2, "Time: %lu", HAL_GetTick() / 1000);
 8009b12:	f000 fcd9 	bl	800a4c8 <HAL_GetTick>
 8009b16:	4603      	mov	r3, r0
 8009b18:	4a30      	ldr	r2, [pc, #192]	@ (8009bdc <ssd1306_ContinuousTest+0x10c>)
 8009b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8009b1e:	099a      	lsrs	r2, r3, #6
 8009b20:	f107 0314 	add.w	r3, r7, #20
 8009b24:	492e      	ldr	r1, [pc, #184]	@ (8009be0 <ssd1306_ContinuousTest+0x110>)
 8009b26:	4618      	mov	r0, r3
 8009b28:	f009 fe64 	bl	80137f4 <siprintf>
        ssd1306_WriteString(line2, Font_7x10, White);
 8009b2c:	4a2a      	ldr	r2, [pc, #168]	@ (8009bd8 <ssd1306_ContinuousTest+0x108>)
 8009b2e:	f107 0014 	add.w	r0, r7, #20
 8009b32:	2301      	movs	r3, #1
 8009b34:	ca06      	ldmia	r2, {r1, r2}
 8009b36:	f000 f85f 	bl	8009bf8 <ssd1306_WriteString>

        // 第三行：循環字符
        ssd1306_SetCursor(0, 24);
 8009b3a:	2118      	movs	r1, #24
 8009b3c:	2000      	movs	r0, #0
 8009b3e:	f000 f87d 	bl	8009c3c <ssd1306_SetCursor>
        sprintf(line3, "Test: %c%d", 'A' + (counter % 26), counter % 10);
 8009b42:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009b44:	4b27      	ldr	r3, [pc, #156]	@ (8009be4 <ssd1306_ContinuousTest+0x114>)
 8009b46:	fba3 1302 	umull	r1, r3, r3, r2
 8009b4a:	08db      	lsrs	r3, r3, #3
 8009b4c:	211a      	movs	r1, #26
 8009b4e:	fb01 f303 	mul.w	r3, r1, r3
 8009b52:	1ad3      	subs	r3, r2, r3
 8009b54:	f103 0441 	add.w	r4, r3, #65	@ 0x41
 8009b58:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009b5a:	4b23      	ldr	r3, [pc, #140]	@ (8009be8 <ssd1306_ContinuousTest+0x118>)
 8009b5c:	fba3 2301 	umull	r2, r3, r3, r1
 8009b60:	08da      	lsrs	r2, r3, #3
 8009b62:	4613      	mov	r3, r2
 8009b64:	009b      	lsls	r3, r3, #2
 8009b66:	4413      	add	r3, r2
 8009b68:	005b      	lsls	r3, r3, #1
 8009b6a:	1aca      	subs	r2, r1, r3
 8009b6c:	4638      	mov	r0, r7
 8009b6e:	4613      	mov	r3, r2
 8009b70:	4622      	mov	r2, r4
 8009b72:	491e      	ldr	r1, [pc, #120]	@ (8009bec <ssd1306_ContinuousTest+0x11c>)
 8009b74:	f009 fe3e 	bl	80137f4 <siprintf>
        ssd1306_WriteString(line3, Font_7x10, White);
 8009b78:	4a17      	ldr	r2, [pc, #92]	@ (8009bd8 <ssd1306_ContinuousTest+0x108>)
 8009b7a:	4638      	mov	r0, r7
 8009b7c:	2301      	movs	r3, #1
 8009b7e:	ca06      	ldmia	r2, {r1, r2}
 8009b80:	f000 f83a 	bl	8009bf8 <ssd1306_WriteString>

        ssd1306_UpdateScreen();
 8009b84:	f7ff fd6c 	bl	8009660 <ssd1306_UpdateScreen>

        counter++;
 8009b88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b8a:	3301      	adds	r3, #1
 8009b8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        HAL_Delay(1000);
 8009b8e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8009b92:	f000 fca5 	bl	800a4e0 <HAL_Delay>

        // 每 10 次輸出一次狀態
        if (counter % 10 == 0) {
 8009b96:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009b98:	4b13      	ldr	r3, [pc, #76]	@ (8009be8 <ssd1306_ContinuousTest+0x118>)
 8009b9a:	fba3 2301 	umull	r2, r3, r3, r1
 8009b9e:	08da      	lsrs	r2, r3, #3
 8009ba0:	4613      	mov	r3, r2
 8009ba2:	009b      	lsls	r3, r3, #2
 8009ba4:	4413      	add	r3, r2
 8009ba6:	005b      	lsls	r3, r3, #1
 8009ba8:	1aca      	subs	r2, r1, r3
 8009baa:	2a00      	cmp	r2, #0
 8009bac:	d103      	bne.n	8009bb6 <ssd1306_ContinuousTest+0xe6>
            printf("持續測試中... Count: %lu\r\n", counter);
 8009bae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009bb0:	480f      	ldr	r0, [pc, #60]	@ (8009bf0 <ssd1306_ContinuousTest+0x120>)
 8009bb2:	f009 fdaf 	bl	8013714 <iprintf>
        }

        // 測試 100 次後停止
        if (counter >= 100) {
 8009bb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009bb8:	2b63      	cmp	r3, #99	@ 0x63
 8009bba:	d800      	bhi.n	8009bbe <ssd1306_ContinuousTest+0xee>
    while (1) {
 8009bbc:	e790      	b.n	8009ae0 <ssd1306_ContinuousTest+0x10>
            break;
 8009bbe:	bf00      	nop
        }
    }

    printf("=== 持續顯示測試完成 ===\r\n");
 8009bc0:	480c      	ldr	r0, [pc, #48]	@ (8009bf4 <ssd1306_ContinuousTest+0x124>)
 8009bc2:	f009 fe0f 	bl	80137e4 <puts>
}
 8009bc6:	bf00      	nop
 8009bc8:	3744      	adds	r7, #68	@ 0x44
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bd90      	pop	{r4, r7, pc}
 8009bce:	bf00      	nop
 8009bd0:	08015e7c 	.word	0x08015e7c
 8009bd4:	08015ea0 	.word	0x08015ea0
 8009bd8:	20000000 	.word	0x20000000
 8009bdc:	10624dd3 	.word	0x10624dd3
 8009be0:	08015eac 	.word	0x08015eac
 8009be4:	4ec4ec4f 	.word	0x4ec4ec4f
 8009be8:	cccccccd 	.word	0xcccccccd
 8009bec:	08015eb8 	.word	0x08015eb8
 8009bf0:	08015ec4 	.word	0x08015ec4
 8009bf4:	08015ee4 	.word	0x08015ee4

08009bf8 <ssd1306_WriteString>:
 * @param  Font: 字型指標
 * @param  color: 字串顏色
 * @retval 最後寫入的字元
 */
void ssd1306_WriteString(char* str, FontDef_t Font, SSD1306_COLOR color)  // 修正：使用 FontDef_t
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b084      	sub	sp, #16
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	60f8      	str	r0, [r7, #12]
 8009c00:	1d38      	adds	r0, r7, #4
 8009c02:	e880 0006 	stmia.w	r0, {r1, r2}
 8009c06:	70fb      	strb	r3, [r7, #3]
    /* 寫入字串直到結束符 */
    while (*str) {
 8009c08:	e00f      	b.n	8009c2a <ssd1306_WriteString+0x32>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	7818      	ldrb	r0, [r3, #0]
 8009c0e:	78fb      	ldrb	r3, [r7, #3]
 8009c10:	1d3a      	adds	r2, r7, #4
 8009c12:	ca06      	ldmia	r2, {r1, r2}
 8009c14:	f7ff fdac 	bl	8009770 <ssd1306_WriteChar>
 8009c18:	4603      	mov	r3, r0
 8009c1a:	461a      	mov	r2, r3
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	781b      	ldrb	r3, [r3, #0]
 8009c20:	429a      	cmp	r2, r3
 8009c22:	d107      	bne.n	8009c34 <ssd1306_WriteString+0x3c>
            /* 字元寫入失敗 */
            return;
        }
        str++;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	3301      	adds	r3, #1
 8009c28:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	781b      	ldrb	r3, [r3, #0]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d1eb      	bne.n	8009c0a <ssd1306_WriteString+0x12>
 8009c32:	e000      	b.n	8009c36 <ssd1306_WriteString+0x3e>
            return;
 8009c34:	bf00      	nop
    }
}
 8009c36:	3710      	adds	r7, #16
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	bd80      	pop	{r7, pc}

08009c3c <ssd1306_SetCursor>:
 * @param  x: X座標
 * @param  y: Y座標
 * @retval None
 */
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8009c3c:	b480      	push	{r7}
 8009c3e:	b083      	sub	sp, #12
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	4603      	mov	r3, r0
 8009c44:	460a      	mov	r2, r1
 8009c46:	71fb      	strb	r3, [r7, #7]
 8009c48:	4613      	mov	r3, r2
 8009c4a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8009c4c:	79fb      	ldrb	r3, [r7, #7]
 8009c4e:	b29a      	uxth	r2, r3
 8009c50:	4b05      	ldr	r3, [pc, #20]	@ (8009c68 <ssd1306_SetCursor+0x2c>)
 8009c52:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8009c54:	79bb      	ldrb	r3, [r7, #6]
 8009c56:	b29a      	uxth	r2, r3
 8009c58:	4b03      	ldr	r3, [pc, #12]	@ (8009c68 <ssd1306_SetCursor+0x2c>)
 8009c5a:	805a      	strh	r2, [r3, #2]
}
 8009c5c:	bf00      	nop
 8009c5e:	370c      	adds	r7, #12
 8009c60:	46bd      	mov	sp, r7
 8009c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c66:	4770      	bx	lr
 8009c68:	20000404 	.word	0x20000404

08009c6c <ssd1306_WriteCommand>:
 * @brief  寫入命令到SSD1306
 * @param  byte: 命令位元組
 * @retval None
 */
void ssd1306_WriteCommand(uint8_t byte)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b086      	sub	sp, #24
 8009c70:	af04      	add	r7, sp, #16
 8009c72:	4603      	mov	r3, r0
 8009c74:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8009c76:	f04f 33ff 	mov.w	r3, #4294967295
 8009c7a:	9302      	str	r3, [sp, #8]
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	9301      	str	r3, [sp, #4]
 8009c80:	1dfb      	adds	r3, r7, #7
 8009c82:	9300      	str	r3, [sp, #0]
 8009c84:	2301      	movs	r3, #1
 8009c86:	2200      	movs	r2, #0
 8009c88:	2178      	movs	r1, #120	@ 0x78
 8009c8a:	4803      	ldr	r0, [pc, #12]	@ (8009c98 <ssd1306_WriteCommand+0x2c>)
 8009c8c:	f001 fd9c 	bl	800b7c8 <HAL_I2C_Mem_Write>
}
 8009c90:	bf00      	nop
 8009c92:	3708      	adds	r7, #8
 8009c94:	46bd      	mov	sp, r7
 8009c96:	bd80      	pop	{r7, pc}
 8009c98:	200003b0 	.word	0x200003b0

08009c9c <ssd1306_WriteData>:
 * @param  buffer: 數據緩衝區
 * @param  buff_size: 緩衝區大小
 * @retval None
 */
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b086      	sub	sp, #24
 8009ca0:	af04      	add	r7, sp, #16
 8009ca2:	6078      	str	r0, [r7, #4]
 8009ca4:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	b29b      	uxth	r3, r3
 8009caa:	f04f 32ff 	mov.w	r2, #4294967295
 8009cae:	9202      	str	r2, [sp, #8]
 8009cb0:	9301      	str	r3, [sp, #4]
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	9300      	str	r3, [sp, #0]
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	2240      	movs	r2, #64	@ 0x40
 8009cba:	2178      	movs	r1, #120	@ 0x78
 8009cbc:	4803      	ldr	r0, [pc, #12]	@ (8009ccc <ssd1306_WriteData+0x30>)
 8009cbe:	f001 fd83 	bl	800b7c8 <HAL_I2C_Mem_Write>
}
 8009cc2:	bf00      	nop
 8009cc4:	3708      	adds	r7, #8
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}
 8009cca:	bf00      	nop
 8009ccc:	200003b0 	.word	0x200003b0

08009cd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b082      	sub	sp, #8
 8009cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	607b      	str	r3, [r7, #4]
 8009cda:	4b10      	ldr	r3, [pc, #64]	@ (8009d1c <HAL_MspInit+0x4c>)
 8009cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009cde:	4a0f      	ldr	r2, [pc, #60]	@ (8009d1c <HAL_MspInit+0x4c>)
 8009ce0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009ce4:	6453      	str	r3, [r2, #68]	@ 0x44
 8009ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8009d1c <HAL_MspInit+0x4c>)
 8009ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009cea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009cee:	607b      	str	r3, [r7, #4]
 8009cf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	603b      	str	r3, [r7, #0]
 8009cf6:	4b09      	ldr	r3, [pc, #36]	@ (8009d1c <HAL_MspInit+0x4c>)
 8009cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cfa:	4a08      	ldr	r2, [pc, #32]	@ (8009d1c <HAL_MspInit+0x4c>)
 8009cfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009d00:	6413      	str	r3, [r2, #64]	@ 0x40
 8009d02:	4b06      	ldr	r3, [pc, #24]	@ (8009d1c <HAL_MspInit+0x4c>)
 8009d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009d0a:	603b      	str	r3, [r7, #0]
 8009d0c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8009d0e:	2007      	movs	r0, #7
 8009d10:	f000 ff4c 	bl	800abac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009d14:	bf00      	nop
 8009d16:	3708      	adds	r7, #8
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bd80      	pop	{r7, pc}
 8009d1c:	40023800 	.word	0x40023800

08009d20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009d20:	b480      	push	{r7}
 8009d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8009d24:	bf00      	nop
 8009d26:	e7fd      	b.n	8009d24 <NMI_Handler+0x4>

08009d28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009d28:	b480      	push	{r7}
 8009d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009d2c:	bf00      	nop
 8009d2e:	e7fd      	b.n	8009d2c <HardFault_Handler+0x4>

08009d30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009d30:	b480      	push	{r7}
 8009d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009d34:	bf00      	nop
 8009d36:	e7fd      	b.n	8009d34 <MemManage_Handler+0x4>

08009d38 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009d38:	b480      	push	{r7}
 8009d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009d3c:	bf00      	nop
 8009d3e:	e7fd      	b.n	8009d3c <BusFault_Handler+0x4>

08009d40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009d40:	b480      	push	{r7}
 8009d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009d44:	bf00      	nop
 8009d46:	e7fd      	b.n	8009d44 <UsageFault_Handler+0x4>

08009d48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009d48:	b480      	push	{r7}
 8009d4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009d4c:	bf00      	nop
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d54:	4770      	bx	lr

08009d56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009d56:	b480      	push	{r7}
 8009d58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009d5a:	bf00      	nop
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d62:	4770      	bx	lr

08009d64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009d64:	b480      	push	{r7}
 8009d66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009d68:	bf00      	nop
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d70:	4770      	bx	lr

08009d72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009d72:	b580      	push	{r7, lr}
 8009d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009d76:	f000 fb93 	bl	800a4a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009d7a:	bf00      	nop
 8009d7c:	bd80      	pop	{r7, pc}
	...

08009d80 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8009d84:	4802      	ldr	r0, [pc, #8]	@ (8009d90 <TIM4_IRQHandler+0x10>)
 8009d86:	f004 f8d1 	bl	800df2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8009d8a:	bf00      	nop
 8009d8c:	bd80      	pop	{r7, pc}
 8009d8e:	bf00      	nop
 8009d90:	20000658 	.word	0x20000658

08009d94 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8009d98:	4802      	ldr	r0, [pc, #8]	@ (8009da4 <DMA2_Stream0_IRQHandler+0x10>)
 8009d9a:	f000 fff7 	bl	800ad8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8009d9e:	bf00      	nop
 8009da0:	bd80      	pop	{r7, pc}
 8009da2:	bf00      	nop
 8009da4:	20000350 	.word	0x20000350

08009da8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8009dac:	4802      	ldr	r0, [pc, #8]	@ (8009db8 <OTG_FS_IRQHandler+0x10>)
 8009dae:	f002 f9b8 	bl	800c122 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8009db2:	bf00      	nop
 8009db4:	bd80      	pop	{r7, pc}
 8009db6:	bf00      	nop
 8009db8:	20000c14 	.word	0x20000c14

08009dbc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8009dbc:	b480      	push	{r7}
 8009dbe:	af00      	add	r7, sp, #0
  return 1;
 8009dc0:	2301      	movs	r3, #1
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dca:	4770      	bx	lr

08009dcc <_kill>:

int _kill(int pid, int sig)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b082      	sub	sp, #8
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
 8009dd4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8009dd6:	f009 fe59 	bl	8013a8c <__errno>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	2216      	movs	r2, #22
 8009dde:	601a      	str	r2, [r3, #0]
  return -1;
 8009de0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3708      	adds	r7, #8
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}

08009dec <_exit>:

void _exit (int status)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b082      	sub	sp, #8
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8009df4:	f04f 31ff 	mov.w	r1, #4294967295
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f7ff ffe7 	bl	8009dcc <_kill>
  while (1) {}    /* Make sure we hang here */
 8009dfe:	bf00      	nop
 8009e00:	e7fd      	b.n	8009dfe <_exit+0x12>

08009e02 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8009e02:	b580      	push	{r7, lr}
 8009e04:	b086      	sub	sp, #24
 8009e06:	af00      	add	r7, sp, #0
 8009e08:	60f8      	str	r0, [r7, #12]
 8009e0a:	60b9      	str	r1, [r7, #8]
 8009e0c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009e0e:	2300      	movs	r3, #0
 8009e10:	617b      	str	r3, [r7, #20]
 8009e12:	e00a      	b.n	8009e2a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8009e14:	f3af 8000 	nop.w
 8009e18:	4601      	mov	r1, r0
 8009e1a:	68bb      	ldr	r3, [r7, #8]
 8009e1c:	1c5a      	adds	r2, r3, #1
 8009e1e:	60ba      	str	r2, [r7, #8]
 8009e20:	b2ca      	uxtb	r2, r1
 8009e22:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009e24:	697b      	ldr	r3, [r7, #20]
 8009e26:	3301      	adds	r3, #1
 8009e28:	617b      	str	r3, [r7, #20]
 8009e2a:	697a      	ldr	r2, [r7, #20]
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	429a      	cmp	r2, r3
 8009e30:	dbf0      	blt.n	8009e14 <_read+0x12>
  }

  return len;
 8009e32:	687b      	ldr	r3, [r7, #4]
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	3718      	adds	r7, #24
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}

08009e3c <_close>:
  }
  return len;
}

int _close(int file)
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	b083      	sub	sp, #12
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8009e44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009e48:	4618      	mov	r0, r3
 8009e4a:	370c      	adds	r7, #12
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e52:	4770      	bx	lr

08009e54 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8009e54:	b480      	push	{r7}
 8009e56:	b083      	sub	sp, #12
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
 8009e5c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8009e64:	605a      	str	r2, [r3, #4]
  return 0;
 8009e66:	2300      	movs	r3, #0
}
 8009e68:	4618      	mov	r0, r3
 8009e6a:	370c      	adds	r7, #12
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e72:	4770      	bx	lr

08009e74 <_isatty>:

int _isatty(int file)
{
 8009e74:	b480      	push	{r7}
 8009e76:	b083      	sub	sp, #12
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8009e7c:	2301      	movs	r3, #1
}
 8009e7e:	4618      	mov	r0, r3
 8009e80:	370c      	adds	r7, #12
 8009e82:	46bd      	mov	sp, r7
 8009e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e88:	4770      	bx	lr

08009e8a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8009e8a:	b480      	push	{r7}
 8009e8c:	b085      	sub	sp, #20
 8009e8e:	af00      	add	r7, sp, #0
 8009e90:	60f8      	str	r0, [r7, #12]
 8009e92:	60b9      	str	r1, [r7, #8]
 8009e94:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8009e96:	2300      	movs	r3, #0
}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	3714      	adds	r7, #20
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea2:	4770      	bx	lr

08009ea4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b086      	sub	sp, #24
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009eac:	4a14      	ldr	r2, [pc, #80]	@ (8009f00 <_sbrk+0x5c>)
 8009eae:	4b15      	ldr	r3, [pc, #84]	@ (8009f04 <_sbrk+0x60>)
 8009eb0:	1ad3      	subs	r3, r2, r3
 8009eb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009eb4:	697b      	ldr	r3, [r7, #20]
 8009eb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009eb8:	4b13      	ldr	r3, [pc, #76]	@ (8009f08 <_sbrk+0x64>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d102      	bne.n	8009ec6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009ec0:	4b11      	ldr	r3, [pc, #68]	@ (8009f08 <_sbrk+0x64>)
 8009ec2:	4a12      	ldr	r2, [pc, #72]	@ (8009f0c <_sbrk+0x68>)
 8009ec4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009ec6:	4b10      	ldr	r3, [pc, #64]	@ (8009f08 <_sbrk+0x64>)
 8009ec8:	681a      	ldr	r2, [r3, #0]
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	4413      	add	r3, r2
 8009ece:	693a      	ldr	r2, [r7, #16]
 8009ed0:	429a      	cmp	r2, r3
 8009ed2:	d207      	bcs.n	8009ee4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009ed4:	f009 fdda 	bl	8013a8c <__errno>
 8009ed8:	4603      	mov	r3, r0
 8009eda:	220c      	movs	r2, #12
 8009edc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8009ede:	f04f 33ff 	mov.w	r3, #4294967295
 8009ee2:	e009      	b.n	8009ef8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009ee4:	4b08      	ldr	r3, [pc, #32]	@ (8009f08 <_sbrk+0x64>)
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8009eea:	4b07      	ldr	r3, [pc, #28]	@ (8009f08 <_sbrk+0x64>)
 8009eec:	681a      	ldr	r2, [r3, #0]
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	4413      	add	r3, r2
 8009ef2:	4a05      	ldr	r2, [pc, #20]	@ (8009f08 <_sbrk+0x64>)
 8009ef4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
}
 8009ef8:	4618      	mov	r0, r3
 8009efa:	3718      	adds	r7, #24
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}
 8009f00:	20020000 	.word	0x20020000
 8009f04:	00000400 	.word	0x00000400
 8009f08:	2000060c 	.word	0x2000060c
 8009f0c:	20001258 	.word	0x20001258

08009f10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009f10:	b480      	push	{r7}
 8009f12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009f14:	4b06      	ldr	r3, [pc, #24]	@ (8009f30 <SystemInit+0x20>)
 8009f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f1a:	4a05      	ldr	r2, [pc, #20]	@ (8009f30 <SystemInit+0x20>)
 8009f1c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009f20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009f24:	bf00      	nop
 8009f26:	46bd      	mov	sp, r7
 8009f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2c:	4770      	bx	lr
 8009f2e:	bf00      	nop
 8009f30:	e000ed00 	.word	0xe000ed00

08009f34 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b096      	sub	sp, #88	@ 0x58
 8009f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009f3a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8009f3e:	2200      	movs	r2, #0
 8009f40:	601a      	str	r2, [r3, #0]
 8009f42:	605a      	str	r2, [r3, #4]
 8009f44:	609a      	str	r2, [r3, #8]
 8009f46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009f48:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	601a      	str	r2, [r3, #0]
 8009f50:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009f52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009f56:	2200      	movs	r2, #0
 8009f58:	601a      	str	r2, [r3, #0]
 8009f5a:	605a      	str	r2, [r3, #4]
 8009f5c:	609a      	str	r2, [r3, #8]
 8009f5e:	60da      	str	r2, [r3, #12]
 8009f60:	611a      	str	r2, [r3, #16]
 8009f62:	615a      	str	r2, [r3, #20]
 8009f64:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8009f66:	1d3b      	adds	r3, r7, #4
 8009f68:	2220      	movs	r2, #32
 8009f6a:	2100      	movs	r1, #0
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	f009 fd3b 	bl	80139e8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8009f72:	4b3f      	ldr	r3, [pc, #252]	@ (800a070 <MX_TIM1_Init+0x13c>)
 8009f74:	4a3f      	ldr	r2, [pc, #252]	@ (800a074 <MX_TIM1_Init+0x140>)
 8009f76:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8009f78:	4b3d      	ldr	r3, [pc, #244]	@ (800a070 <MX_TIM1_Init+0x13c>)
 8009f7a:	2247      	movs	r2, #71	@ 0x47
 8009f7c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009f7e:	4b3c      	ldr	r3, [pc, #240]	@ (800a070 <MX_TIM1_Init+0x13c>)
 8009f80:	2200      	movs	r2, #0
 8009f82:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8009f84:	4b3a      	ldr	r3, [pc, #232]	@ (800a070 <MX_TIM1_Init+0x13c>)
 8009f86:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8009f8a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009f8c:	4b38      	ldr	r3, [pc, #224]	@ (800a070 <MX_TIM1_Init+0x13c>)
 8009f8e:	2200      	movs	r2, #0
 8009f90:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8009f92:	4b37      	ldr	r3, [pc, #220]	@ (800a070 <MX_TIM1_Init+0x13c>)
 8009f94:	2200      	movs	r2, #0
 8009f96:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009f98:	4b35      	ldr	r3, [pc, #212]	@ (800a070 <MX_TIM1_Init+0x13c>)
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8009f9e:	4834      	ldr	r0, [pc, #208]	@ (800a070 <MX_TIM1_Init+0x13c>)
 8009fa0:	f003 ff1c 	bl	800dddc <HAL_TIM_Base_Init>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d001      	beq.n	8009fae <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8009faa:	f7ff fabf 	bl	800952c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009fae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009fb2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8009fb4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8009fb8:	4619      	mov	r1, r3
 8009fba:	482d      	ldr	r0, [pc, #180]	@ (800a070 <MX_TIM1_Init+0x13c>)
 8009fbc:	f004 f968 	bl	800e290 <HAL_TIM_ConfigClockSource>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d001      	beq.n	8009fca <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8009fc6:	f7ff fab1 	bl	800952c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8009fca:	4829      	ldr	r0, [pc, #164]	@ (800a070 <MX_TIM1_Init+0x13c>)
 8009fcc:	f003 ff55 	bl	800de7a <HAL_TIM_PWM_Init>
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d001      	beq.n	8009fda <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8009fd6:	f7ff faa9 	bl	800952c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009fda:	2300      	movs	r3, #0
 8009fdc:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009fde:	2300      	movs	r3, #0
 8009fe0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8009fe2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8009fe6:	4619      	mov	r1, r3
 8009fe8:	4821      	ldr	r0, [pc, #132]	@ (800a070 <MX_TIM1_Init+0x13c>)
 8009fea:	f004 fcf7 	bl	800e9dc <HAL_TIMEx_MasterConfigSynchronization>
 8009fee:	4603      	mov	r3, r0
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d001      	beq.n	8009ff8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8009ff4:	f7ff fa9a 	bl	800952c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009ff8:	2360      	movs	r3, #96	@ 0x60
 8009ffa:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 500;
 8009ffc:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800a000:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a002:	2300      	movs	r3, #0
 800a004:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800a006:	2300      	movs	r3, #0
 800a008:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a00a:	2300      	movs	r3, #0
 800a00c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800a00e:	2300      	movs	r3, #0
 800a010:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800a012:	2300      	movs	r3, #0
 800a014:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800a016:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a01a:	2200      	movs	r2, #0
 800a01c:	4619      	mov	r1, r3
 800a01e:	4814      	ldr	r0, [pc, #80]	@ (800a070 <MX_TIM1_Init+0x13c>)
 800a020:	f004 f874 	bl	800e10c <HAL_TIM_PWM_ConfigChannel>
 800a024:	4603      	mov	r3, r0
 800a026:	2b00      	cmp	r3, #0
 800a028:	d001      	beq.n	800a02e <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 800a02a:	f7ff fa7f 	bl	800952c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800a02e:	2300      	movs	r3, #0
 800a030:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800a032:	2300      	movs	r3, #0
 800a034:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800a036:	2300      	movs	r3, #0
 800a038:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800a03a:	2300      	movs	r3, #0
 800a03c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800a03e:	2300      	movs	r3, #0
 800a040:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800a042:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a046:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800a048:	2300      	movs	r3, #0
 800a04a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800a04c:	1d3b      	adds	r3, r7, #4
 800a04e:	4619      	mov	r1, r3
 800a050:	4807      	ldr	r0, [pc, #28]	@ (800a070 <MX_TIM1_Init+0x13c>)
 800a052:	f004 fd31 	bl	800eab8 <HAL_TIMEx_ConfigBreakDeadTime>
 800a056:	4603      	mov	r3, r0
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d001      	beq.n	800a060 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 800a05c:	f7ff fa66 	bl	800952c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800a060:	4803      	ldr	r0, [pc, #12]	@ (800a070 <MX_TIM1_Init+0x13c>)
 800a062:	f000 f895 	bl	800a190 <HAL_TIM_MspPostInit>

}
 800a066:	bf00      	nop
 800a068:	3758      	adds	r7, #88	@ 0x58
 800a06a:	46bd      	mov	sp, r7
 800a06c:	bd80      	pop	{r7, pc}
 800a06e:	bf00      	nop
 800a070:	20000610 	.word	0x20000610
 800a074:	40010000 	.word	0x40010000

0800a078 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b086      	sub	sp, #24
 800a07c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a07e:	f107 0308 	add.w	r3, r7, #8
 800a082:	2200      	movs	r2, #0
 800a084:	601a      	str	r2, [r3, #0]
 800a086:	605a      	str	r2, [r3, #4]
 800a088:	609a      	str	r2, [r3, #8]
 800a08a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a08c:	463b      	mov	r3, r7
 800a08e:	2200      	movs	r2, #0
 800a090:	601a      	str	r2, [r3, #0]
 800a092:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800a094:	4b1d      	ldr	r3, [pc, #116]	@ (800a10c <MX_TIM4_Init+0x94>)
 800a096:	4a1e      	ldr	r2, [pc, #120]	@ (800a110 <MX_TIM4_Init+0x98>)
 800a098:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 800a09a:	4b1c      	ldr	r3, [pc, #112]	@ (800a10c <MX_TIM4_Init+0x94>)
 800a09c:	2247      	movs	r2, #71	@ 0x47
 800a09e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a0a0:	4b1a      	ldr	r3, [pc, #104]	@ (800a10c <MX_TIM4_Init+0x94>)
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 800a0a6:	4b19      	ldr	r3, [pc, #100]	@ (800a10c <MX_TIM4_Init+0x94>)
 800a0a8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800a0ac:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a0ae:	4b17      	ldr	r3, [pc, #92]	@ (800a10c <MX_TIM4_Init+0x94>)
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a0b4:	4b15      	ldr	r3, [pc, #84]	@ (800a10c <MX_TIM4_Init+0x94>)
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800a0ba:	4814      	ldr	r0, [pc, #80]	@ (800a10c <MX_TIM4_Init+0x94>)
 800a0bc:	f003 fe8e 	bl	800dddc <HAL_TIM_Base_Init>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d001      	beq.n	800a0ca <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800a0c6:	f7ff fa31 	bl	800952c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a0ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a0ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800a0d0:	f107 0308 	add.w	r3, r7, #8
 800a0d4:	4619      	mov	r1, r3
 800a0d6:	480d      	ldr	r0, [pc, #52]	@ (800a10c <MX_TIM4_Init+0x94>)
 800a0d8:	f004 f8da 	bl	800e290 <HAL_TIM_ConfigClockSource>
 800a0dc:	4603      	mov	r3, r0
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d001      	beq.n	800a0e6 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800a0e2:	f7ff fa23 	bl	800952c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800a0ee:	463b      	mov	r3, r7
 800a0f0:	4619      	mov	r1, r3
 800a0f2:	4806      	ldr	r0, [pc, #24]	@ (800a10c <MX_TIM4_Init+0x94>)
 800a0f4:	f004 fc72 	bl	800e9dc <HAL_TIMEx_MasterConfigSynchronization>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d001      	beq.n	800a102 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800a0fe:	f7ff fa15 	bl	800952c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800a102:	bf00      	nop
 800a104:	3718      	adds	r7, #24
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}
 800a10a:	bf00      	nop
 800a10c:	20000658 	.word	0x20000658
 800a110:	40000800 	.word	0x40000800

0800a114 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b084      	sub	sp, #16
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	4a18      	ldr	r2, [pc, #96]	@ (800a184 <HAL_TIM_Base_MspInit+0x70>)
 800a122:	4293      	cmp	r3, r2
 800a124:	d10e      	bne.n	800a144 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800a126:	2300      	movs	r3, #0
 800a128:	60fb      	str	r3, [r7, #12]
 800a12a:	4b17      	ldr	r3, [pc, #92]	@ (800a188 <HAL_TIM_Base_MspInit+0x74>)
 800a12c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a12e:	4a16      	ldr	r2, [pc, #88]	@ (800a188 <HAL_TIM_Base_MspInit+0x74>)
 800a130:	f043 0301 	orr.w	r3, r3, #1
 800a134:	6453      	str	r3, [r2, #68]	@ 0x44
 800a136:	4b14      	ldr	r3, [pc, #80]	@ (800a188 <HAL_TIM_Base_MspInit+0x74>)
 800a138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a13a:	f003 0301 	and.w	r3, r3, #1
 800a13e:	60fb      	str	r3, [r7, #12]
 800a140:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800a142:	e01a      	b.n	800a17a <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM4)
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	4a10      	ldr	r2, [pc, #64]	@ (800a18c <HAL_TIM_Base_MspInit+0x78>)
 800a14a:	4293      	cmp	r3, r2
 800a14c:	d115      	bne.n	800a17a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800a14e:	2300      	movs	r3, #0
 800a150:	60bb      	str	r3, [r7, #8]
 800a152:	4b0d      	ldr	r3, [pc, #52]	@ (800a188 <HAL_TIM_Base_MspInit+0x74>)
 800a154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a156:	4a0c      	ldr	r2, [pc, #48]	@ (800a188 <HAL_TIM_Base_MspInit+0x74>)
 800a158:	f043 0304 	orr.w	r3, r3, #4
 800a15c:	6413      	str	r3, [r2, #64]	@ 0x40
 800a15e:	4b0a      	ldr	r3, [pc, #40]	@ (800a188 <HAL_TIM_Base_MspInit+0x74>)
 800a160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a162:	f003 0304 	and.w	r3, r3, #4
 800a166:	60bb      	str	r3, [r7, #8]
 800a168:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800a16a:	2200      	movs	r2, #0
 800a16c:	2100      	movs	r1, #0
 800a16e:	201e      	movs	r0, #30
 800a170:	f000 fd27 	bl	800abc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800a174:	201e      	movs	r0, #30
 800a176:	f000 fd40 	bl	800abfa <HAL_NVIC_EnableIRQ>
}
 800a17a:	bf00      	nop
 800a17c:	3710      	adds	r7, #16
 800a17e:	46bd      	mov	sp, r7
 800a180:	bd80      	pop	{r7, pc}
 800a182:	bf00      	nop
 800a184:	40010000 	.word	0x40010000
 800a188:	40023800 	.word	0x40023800
 800a18c:	40000800 	.word	0x40000800

0800a190 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b088      	sub	sp, #32
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a198:	f107 030c 	add.w	r3, r7, #12
 800a19c:	2200      	movs	r2, #0
 800a19e:	601a      	str	r2, [r3, #0]
 800a1a0:	605a      	str	r2, [r3, #4]
 800a1a2:	609a      	str	r2, [r3, #8]
 800a1a4:	60da      	str	r2, [r3, #12]
 800a1a6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	4a12      	ldr	r2, [pc, #72]	@ (800a1f8 <HAL_TIM_MspPostInit+0x68>)
 800a1ae:	4293      	cmp	r3, r2
 800a1b0:	d11e      	bne.n	800a1f0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	60bb      	str	r3, [r7, #8]
 800a1b6:	4b11      	ldr	r3, [pc, #68]	@ (800a1fc <HAL_TIM_MspPostInit+0x6c>)
 800a1b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1ba:	4a10      	ldr	r2, [pc, #64]	@ (800a1fc <HAL_TIM_MspPostInit+0x6c>)
 800a1bc:	f043 0301 	orr.w	r3, r3, #1
 800a1c0:	6313      	str	r3, [r2, #48]	@ 0x30
 800a1c2:	4b0e      	ldr	r3, [pc, #56]	@ (800a1fc <HAL_TIM_MspPostInit+0x6c>)
 800a1c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1c6:	f003 0301 	and.w	r3, r3, #1
 800a1ca:	60bb      	str	r3, [r7, #8]
 800a1cc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = VACUUM_CTRL_Pin;
 800a1ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a1d2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a1d4:	2302      	movs	r3, #2
 800a1d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a1d8:	2300      	movs	r3, #0
 800a1da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a1dc:	2300      	movs	r3, #0
 800a1de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VACUUM_CTRL_GPIO_Port, &GPIO_InitStruct);
 800a1e4:	f107 030c 	add.w	r3, r7, #12
 800a1e8:	4619      	mov	r1, r3
 800a1ea:	4805      	ldr	r0, [pc, #20]	@ (800a200 <HAL_TIM_MspPostInit+0x70>)
 800a1ec:	f001 f80a 	bl	800b204 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800a1f0:	bf00      	nop
 800a1f2:	3720      	adds	r7, #32
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	bd80      	pop	{r7, pc}
 800a1f8:	40010000 	.word	0x40010000
 800a1fc:	40023800 	.word	0x40023800
 800a200:	40020000 	.word	0x40020000

0800a204 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart6;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800a208:	4b11      	ldr	r3, [pc, #68]	@ (800a250 <MX_USART2_UART_Init+0x4c>)
 800a20a:	4a12      	ldr	r2, [pc, #72]	@ (800a254 <MX_USART2_UART_Init+0x50>)
 800a20c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800a20e:	4b10      	ldr	r3, [pc, #64]	@ (800a250 <MX_USART2_UART_Init+0x4c>)
 800a210:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800a214:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800a216:	4b0e      	ldr	r3, [pc, #56]	@ (800a250 <MX_USART2_UART_Init+0x4c>)
 800a218:	2200      	movs	r2, #0
 800a21a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800a21c:	4b0c      	ldr	r3, [pc, #48]	@ (800a250 <MX_USART2_UART_Init+0x4c>)
 800a21e:	2200      	movs	r2, #0
 800a220:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800a222:	4b0b      	ldr	r3, [pc, #44]	@ (800a250 <MX_USART2_UART_Init+0x4c>)
 800a224:	2200      	movs	r2, #0
 800a226:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800a228:	4b09      	ldr	r3, [pc, #36]	@ (800a250 <MX_USART2_UART_Init+0x4c>)
 800a22a:	220c      	movs	r2, #12
 800a22c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800a22e:	4b08      	ldr	r3, [pc, #32]	@ (800a250 <MX_USART2_UART_Init+0x4c>)
 800a230:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800a234:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800a236:	4b06      	ldr	r3, [pc, #24]	@ (800a250 <MX_USART2_UART_Init+0x4c>)
 800a238:	2200      	movs	r2, #0
 800a23a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800a23c:	4804      	ldr	r0, [pc, #16]	@ (800a250 <MX_USART2_UART_Init+0x4c>)
 800a23e:	f004 fca1 	bl	800eb84 <HAL_UART_Init>
 800a242:	4603      	mov	r3, r0
 800a244:	2b00      	cmp	r3, #0
 800a246:	d001      	beq.n	800a24c <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 800a248:	f7ff f970 	bl	800952c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800a24c:	bf00      	nop
 800a24e:	bd80      	pop	{r7, pc}
 800a250:	200006a0 	.word	0x200006a0
 800a254:	40004400 	.word	0x40004400

0800a258 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800a25c:	4b11      	ldr	r3, [pc, #68]	@ (800a2a4 <MX_USART6_UART_Init+0x4c>)
 800a25e:	4a12      	ldr	r2, [pc, #72]	@ (800a2a8 <MX_USART6_UART_Init+0x50>)
 800a260:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800a262:	4b10      	ldr	r3, [pc, #64]	@ (800a2a4 <MX_USART6_UART_Init+0x4c>)
 800a264:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800a268:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800a26a:	4b0e      	ldr	r3, [pc, #56]	@ (800a2a4 <MX_USART6_UART_Init+0x4c>)
 800a26c:	2200      	movs	r2, #0
 800a26e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800a270:	4b0c      	ldr	r3, [pc, #48]	@ (800a2a4 <MX_USART6_UART_Init+0x4c>)
 800a272:	2200      	movs	r2, #0
 800a274:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800a276:	4b0b      	ldr	r3, [pc, #44]	@ (800a2a4 <MX_USART6_UART_Init+0x4c>)
 800a278:	2200      	movs	r2, #0
 800a27a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800a27c:	4b09      	ldr	r3, [pc, #36]	@ (800a2a4 <MX_USART6_UART_Init+0x4c>)
 800a27e:	220c      	movs	r2, #12
 800a280:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a282:	4b08      	ldr	r3, [pc, #32]	@ (800a2a4 <MX_USART6_UART_Init+0x4c>)
 800a284:	2200      	movs	r2, #0
 800a286:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800a288:	4b06      	ldr	r3, [pc, #24]	@ (800a2a4 <MX_USART6_UART_Init+0x4c>)
 800a28a:	2200      	movs	r2, #0
 800a28c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800a28e:	4805      	ldr	r0, [pc, #20]	@ (800a2a4 <MX_USART6_UART_Init+0x4c>)
 800a290:	f004 fc78 	bl	800eb84 <HAL_UART_Init>
 800a294:	4603      	mov	r3, r0
 800a296:	2b00      	cmp	r3, #0
 800a298:	d001      	beq.n	800a29e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800a29a:	f7ff f947 	bl	800952c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800a29e:	bf00      	nop
 800a2a0:	bd80      	pop	{r7, pc}
 800a2a2:	bf00      	nop
 800a2a4:	200006e8 	.word	0x200006e8
 800a2a8:	40011400 	.word	0x40011400

0800a2ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b08c      	sub	sp, #48	@ 0x30
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a2b4:	f107 031c 	add.w	r3, r7, #28
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	601a      	str	r2, [r3, #0]
 800a2bc:	605a      	str	r2, [r3, #4]
 800a2be:	609a      	str	r2, [r3, #8]
 800a2c0:	60da      	str	r2, [r3, #12]
 800a2c2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	4a32      	ldr	r2, [pc, #200]	@ (800a394 <HAL_UART_MspInit+0xe8>)
 800a2ca:	4293      	cmp	r3, r2
 800a2cc:	d12c      	bne.n	800a328 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	61bb      	str	r3, [r7, #24]
 800a2d2:	4b31      	ldr	r3, [pc, #196]	@ (800a398 <HAL_UART_MspInit+0xec>)
 800a2d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2d6:	4a30      	ldr	r2, [pc, #192]	@ (800a398 <HAL_UART_MspInit+0xec>)
 800a2d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a2dc:	6413      	str	r3, [r2, #64]	@ 0x40
 800a2de:	4b2e      	ldr	r3, [pc, #184]	@ (800a398 <HAL_UART_MspInit+0xec>)
 800a2e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a2e6:	61bb      	str	r3, [r7, #24]
 800a2e8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	617b      	str	r3, [r7, #20]
 800a2ee:	4b2a      	ldr	r3, [pc, #168]	@ (800a398 <HAL_UART_MspInit+0xec>)
 800a2f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2f2:	4a29      	ldr	r2, [pc, #164]	@ (800a398 <HAL_UART_MspInit+0xec>)
 800a2f4:	f043 0308 	orr.w	r3, r3, #8
 800a2f8:	6313      	str	r3, [r2, #48]	@ 0x30
 800a2fa:	4b27      	ldr	r3, [pc, #156]	@ (800a398 <HAL_UART_MspInit+0xec>)
 800a2fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2fe:	f003 0308 	and.w	r3, r3, #8
 800a302:	617b      	str	r3, [r7, #20]
 800a304:	697b      	ldr	r3, [r7, #20]
    PD3     ------> USART2_CTS
    PD4     ------> USART2_RTS
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800a306:	2378      	movs	r3, #120	@ 0x78
 800a308:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a30a:	2302      	movs	r3, #2
 800a30c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a30e:	2300      	movs	r3, #0
 800a310:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a312:	2303      	movs	r3, #3
 800a314:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800a316:	2307      	movs	r3, #7
 800a318:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a31a:	f107 031c 	add.w	r3, r7, #28
 800a31e:	4619      	mov	r1, r3
 800a320:	481e      	ldr	r0, [pc, #120]	@ (800a39c <HAL_UART_MspInit+0xf0>)
 800a322:	f000 ff6f 	bl	800b204 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800a326:	e030      	b.n	800a38a <HAL_UART_MspInit+0xde>
  else if(uartHandle->Instance==USART6)
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	4a1c      	ldr	r2, [pc, #112]	@ (800a3a0 <HAL_UART_MspInit+0xf4>)
 800a32e:	4293      	cmp	r3, r2
 800a330:	d12b      	bne.n	800a38a <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART6_CLK_ENABLE();
 800a332:	2300      	movs	r3, #0
 800a334:	613b      	str	r3, [r7, #16]
 800a336:	4b18      	ldr	r3, [pc, #96]	@ (800a398 <HAL_UART_MspInit+0xec>)
 800a338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a33a:	4a17      	ldr	r2, [pc, #92]	@ (800a398 <HAL_UART_MspInit+0xec>)
 800a33c:	f043 0320 	orr.w	r3, r3, #32
 800a340:	6453      	str	r3, [r2, #68]	@ 0x44
 800a342:	4b15      	ldr	r3, [pc, #84]	@ (800a398 <HAL_UART_MspInit+0xec>)
 800a344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a346:	f003 0320 	and.w	r3, r3, #32
 800a34a:	613b      	str	r3, [r7, #16]
 800a34c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a34e:	2300      	movs	r3, #0
 800a350:	60fb      	str	r3, [r7, #12]
 800a352:	4b11      	ldr	r3, [pc, #68]	@ (800a398 <HAL_UART_MspInit+0xec>)
 800a354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a356:	4a10      	ldr	r2, [pc, #64]	@ (800a398 <HAL_UART_MspInit+0xec>)
 800a358:	f043 0304 	orr.w	r3, r3, #4
 800a35c:	6313      	str	r3, [r2, #48]	@ 0x30
 800a35e:	4b0e      	ldr	r3, [pc, #56]	@ (800a398 <HAL_UART_MspInit+0xec>)
 800a360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a362:	f003 0304 	and.w	r3, r3, #4
 800a366:	60fb      	str	r3, [r7, #12]
 800a368:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800a36a:	23c0      	movs	r3, #192	@ 0xc0
 800a36c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a36e:	2302      	movs	r3, #2
 800a370:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a372:	2300      	movs	r3, #0
 800a374:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a376:	2303      	movs	r3, #3
 800a378:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800a37a:	2308      	movs	r3, #8
 800a37c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a37e:	f107 031c 	add.w	r3, r7, #28
 800a382:	4619      	mov	r1, r3
 800a384:	4807      	ldr	r0, [pc, #28]	@ (800a3a4 <HAL_UART_MspInit+0xf8>)
 800a386:	f000 ff3d 	bl	800b204 <HAL_GPIO_Init>
}
 800a38a:	bf00      	nop
 800a38c:	3730      	adds	r7, #48	@ 0x30
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}
 800a392:	bf00      	nop
 800a394:	40004400 	.word	0x40004400
 800a398:	40023800 	.word	0x40023800
 800a39c:	40020c00 	.word	0x40020c00
 800a3a0:	40011400 	.word	0x40011400
 800a3a4:	40020800 	.word	0x40020800

0800a3a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800a3a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800a3e0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800a3ac:	f7ff fdb0 	bl	8009f10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800a3b0:	480c      	ldr	r0, [pc, #48]	@ (800a3e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800a3b2:	490d      	ldr	r1, [pc, #52]	@ (800a3e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800a3b4:	4a0d      	ldr	r2, [pc, #52]	@ (800a3ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 800a3b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800a3b8:	e002      	b.n	800a3c0 <LoopCopyDataInit>

0800a3ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a3ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a3bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a3be:	3304      	adds	r3, #4

0800a3c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a3c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a3c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a3c4:	d3f9      	bcc.n	800a3ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a3c6:	4a0a      	ldr	r2, [pc, #40]	@ (800a3f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800a3c8:	4c0a      	ldr	r4, [pc, #40]	@ (800a3f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800a3ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a3cc:	e001      	b.n	800a3d2 <LoopFillZerobss>

0800a3ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a3ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a3d0:	3204      	adds	r2, #4

0800a3d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a3d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a3d4:	d3fb      	bcc.n	800a3ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800a3d6:	f009 fb5f 	bl	8013a98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a3da:	f7fe ffc5 	bl	8009368 <main>
  bx  lr    
 800a3de:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800a3e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800a3e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800a3e8:	200002ec 	.word	0x200002ec
  ldr r2, =_sidata
 800a3ec:	08016684 	.word	0x08016684
  ldr r2, =_sbss
 800a3f0:	200002ec 	.word	0x200002ec
  ldr r4, =_ebss
 800a3f4:	20001258 	.word	0x20001258

0800a3f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a3f8:	e7fe      	b.n	800a3f8 <ADC_IRQHandler>
	...

0800a3fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800a400:	4b0e      	ldr	r3, [pc, #56]	@ (800a43c <HAL_Init+0x40>)
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	4a0d      	ldr	r2, [pc, #52]	@ (800a43c <HAL_Init+0x40>)
 800a406:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800a40a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800a40c:	4b0b      	ldr	r3, [pc, #44]	@ (800a43c <HAL_Init+0x40>)
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	4a0a      	ldr	r2, [pc, #40]	@ (800a43c <HAL_Init+0x40>)
 800a412:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800a416:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800a418:	4b08      	ldr	r3, [pc, #32]	@ (800a43c <HAL_Init+0x40>)
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	4a07      	ldr	r2, [pc, #28]	@ (800a43c <HAL_Init+0x40>)
 800a41e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a422:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a424:	2003      	movs	r0, #3
 800a426:	f000 fbc1 	bl	800abac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800a42a:	2000      	movs	r0, #0
 800a42c:	f000 f808 	bl	800a440 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800a430:	f7ff fc4e 	bl	8009cd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800a434:	2300      	movs	r3, #0
}
 800a436:	4618      	mov	r0, r3
 800a438:	bd80      	pop	{r7, pc}
 800a43a:	bf00      	nop
 800a43c:	40023c00 	.word	0x40023c00

0800a440 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b082      	sub	sp, #8
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800a448:	4b12      	ldr	r3, [pc, #72]	@ (800a494 <HAL_InitTick+0x54>)
 800a44a:	681a      	ldr	r2, [r3, #0]
 800a44c:	4b12      	ldr	r3, [pc, #72]	@ (800a498 <HAL_InitTick+0x58>)
 800a44e:	781b      	ldrb	r3, [r3, #0]
 800a450:	4619      	mov	r1, r3
 800a452:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a456:	fbb3 f3f1 	udiv	r3, r3, r1
 800a45a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a45e:	4618      	mov	r0, r3
 800a460:	f000 fbd9 	bl	800ac16 <HAL_SYSTICK_Config>
 800a464:	4603      	mov	r3, r0
 800a466:	2b00      	cmp	r3, #0
 800a468:	d001      	beq.n	800a46e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800a46a:	2301      	movs	r3, #1
 800a46c:	e00e      	b.n	800a48c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2b0f      	cmp	r3, #15
 800a472:	d80a      	bhi.n	800a48a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800a474:	2200      	movs	r2, #0
 800a476:	6879      	ldr	r1, [r7, #4]
 800a478:	f04f 30ff 	mov.w	r0, #4294967295
 800a47c:	f000 fba1 	bl	800abc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800a480:	4a06      	ldr	r2, [pc, #24]	@ (800a49c <HAL_InitTick+0x5c>)
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800a486:	2300      	movs	r3, #0
 800a488:	e000      	b.n	800a48c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800a48a:	2301      	movs	r3, #1
}
 800a48c:	4618      	mov	r0, r3
 800a48e:	3708      	adds	r7, #8
 800a490:	46bd      	mov	sp, r7
 800a492:	bd80      	pop	{r7, pc}
 800a494:	20000008 	.word	0x20000008
 800a498:	20000010 	.word	0x20000010
 800a49c:	2000000c 	.word	0x2000000c

0800a4a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800a4a4:	4b06      	ldr	r3, [pc, #24]	@ (800a4c0 <HAL_IncTick+0x20>)
 800a4a6:	781b      	ldrb	r3, [r3, #0]
 800a4a8:	461a      	mov	r2, r3
 800a4aa:	4b06      	ldr	r3, [pc, #24]	@ (800a4c4 <HAL_IncTick+0x24>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	4413      	add	r3, r2
 800a4b0:	4a04      	ldr	r2, [pc, #16]	@ (800a4c4 <HAL_IncTick+0x24>)
 800a4b2:	6013      	str	r3, [r2, #0]
}
 800a4b4:	bf00      	nop
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4bc:	4770      	bx	lr
 800a4be:	bf00      	nop
 800a4c0:	20000010 	.word	0x20000010
 800a4c4:	20000730 	.word	0x20000730

0800a4c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a4c8:	b480      	push	{r7}
 800a4ca:	af00      	add	r7, sp, #0
  return uwTick;
 800a4cc:	4b03      	ldr	r3, [pc, #12]	@ (800a4dc <HAL_GetTick+0x14>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
}
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d8:	4770      	bx	lr
 800a4da:	bf00      	nop
 800a4dc:	20000730 	.word	0x20000730

0800a4e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b084      	sub	sp, #16
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a4e8:	f7ff ffee 	bl	800a4c8 <HAL_GetTick>
 800a4ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4f8:	d005      	beq.n	800a506 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800a4fa:	4b0a      	ldr	r3, [pc, #40]	@ (800a524 <HAL_Delay+0x44>)
 800a4fc:	781b      	ldrb	r3, [r3, #0]
 800a4fe:	461a      	mov	r2, r3
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	4413      	add	r3, r2
 800a504:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800a506:	bf00      	nop
 800a508:	f7ff ffde 	bl	800a4c8 <HAL_GetTick>
 800a50c:	4602      	mov	r2, r0
 800a50e:	68bb      	ldr	r3, [r7, #8]
 800a510:	1ad3      	subs	r3, r2, r3
 800a512:	68fa      	ldr	r2, [r7, #12]
 800a514:	429a      	cmp	r2, r3
 800a516:	d8f7      	bhi.n	800a508 <HAL_Delay+0x28>
  {
  }
}
 800a518:	bf00      	nop
 800a51a:	bf00      	nop
 800a51c:	3710      	adds	r7, #16
 800a51e:	46bd      	mov	sp, r7
 800a520:	bd80      	pop	{r7, pc}
 800a522:	bf00      	nop
 800a524:	20000010 	.word	0x20000010

0800a528 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b084      	sub	sp, #16
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a530:	2300      	movs	r3, #0
 800a532:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d101      	bne.n	800a53e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800a53a:	2301      	movs	r3, #1
 800a53c:	e033      	b.n	800a5a6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a542:	2b00      	cmp	r3, #0
 800a544:	d109      	bne.n	800a55a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	f7fe fd1e 	bl	8008f88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2200      	movs	r2, #0
 800a550:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2200      	movs	r2, #0
 800a556:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a55e:	f003 0310 	and.w	r3, r3, #16
 800a562:	2b00      	cmp	r3, #0
 800a564:	d118      	bne.n	800a598 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a56a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800a56e:	f023 0302 	bic.w	r3, r3, #2
 800a572:	f043 0202 	orr.w	r2, r3, #2
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800a57a:	6878      	ldr	r0, [r7, #4]
 800a57c:	f000 f94a 	bl	800a814 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2200      	movs	r2, #0
 800a584:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a58a:	f023 0303 	bic.w	r3, r3, #3
 800a58e:	f043 0201 	orr.w	r2, r3, #1
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	641a      	str	r2, [r3, #64]	@ 0x40
 800a596:	e001      	b.n	800a59c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800a598:	2301      	movs	r3, #1
 800a59a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2200      	movs	r2, #0
 800a5a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800a5a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	3710      	adds	r7, #16
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}
	...

0800a5b0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800a5b0:	b480      	push	{r7}
 800a5b2:	b085      	sub	sp, #20
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
 800a5b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a5c4:	2b01      	cmp	r3, #1
 800a5c6:	d101      	bne.n	800a5cc <HAL_ADC_ConfigChannel+0x1c>
 800a5c8:	2302      	movs	r3, #2
 800a5ca:	e113      	b.n	800a7f4 <HAL_ADC_ConfigChannel+0x244>
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2201      	movs	r2, #1
 800a5d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	2b09      	cmp	r3, #9
 800a5da:	d925      	bls.n	800a628 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	68d9      	ldr	r1, [r3, #12]
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	b29b      	uxth	r3, r3
 800a5e8:	461a      	mov	r2, r3
 800a5ea:	4613      	mov	r3, r2
 800a5ec:	005b      	lsls	r3, r3, #1
 800a5ee:	4413      	add	r3, r2
 800a5f0:	3b1e      	subs	r3, #30
 800a5f2:	2207      	movs	r2, #7
 800a5f4:	fa02 f303 	lsl.w	r3, r2, r3
 800a5f8:	43da      	mvns	r2, r3
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	400a      	ands	r2, r1
 800a600:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	68d9      	ldr	r1, [r3, #12]
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	689a      	ldr	r2, [r3, #8]
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	b29b      	uxth	r3, r3
 800a612:	4618      	mov	r0, r3
 800a614:	4603      	mov	r3, r0
 800a616:	005b      	lsls	r3, r3, #1
 800a618:	4403      	add	r3, r0
 800a61a:	3b1e      	subs	r3, #30
 800a61c:	409a      	lsls	r2, r3
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	430a      	orrs	r2, r1
 800a624:	60da      	str	r2, [r3, #12]
 800a626:	e022      	b.n	800a66e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	6919      	ldr	r1, [r3, #16]
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	b29b      	uxth	r3, r3
 800a634:	461a      	mov	r2, r3
 800a636:	4613      	mov	r3, r2
 800a638:	005b      	lsls	r3, r3, #1
 800a63a:	4413      	add	r3, r2
 800a63c:	2207      	movs	r2, #7
 800a63e:	fa02 f303 	lsl.w	r3, r2, r3
 800a642:	43da      	mvns	r2, r3
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	400a      	ands	r2, r1
 800a64a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	6919      	ldr	r1, [r3, #16]
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	689a      	ldr	r2, [r3, #8]
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	b29b      	uxth	r3, r3
 800a65c:	4618      	mov	r0, r3
 800a65e:	4603      	mov	r3, r0
 800a660:	005b      	lsls	r3, r3, #1
 800a662:	4403      	add	r3, r0
 800a664:	409a      	lsls	r2, r3
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	430a      	orrs	r2, r1
 800a66c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	685b      	ldr	r3, [r3, #4]
 800a672:	2b06      	cmp	r3, #6
 800a674:	d824      	bhi.n	800a6c0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	685a      	ldr	r2, [r3, #4]
 800a680:	4613      	mov	r3, r2
 800a682:	009b      	lsls	r3, r3, #2
 800a684:	4413      	add	r3, r2
 800a686:	3b05      	subs	r3, #5
 800a688:	221f      	movs	r2, #31
 800a68a:	fa02 f303 	lsl.w	r3, r2, r3
 800a68e:	43da      	mvns	r2, r3
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	400a      	ands	r2, r1
 800a696:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	b29b      	uxth	r3, r3
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	685a      	ldr	r2, [r3, #4]
 800a6aa:	4613      	mov	r3, r2
 800a6ac:	009b      	lsls	r3, r3, #2
 800a6ae:	4413      	add	r3, r2
 800a6b0:	3b05      	subs	r3, #5
 800a6b2:	fa00 f203 	lsl.w	r2, r0, r3
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	430a      	orrs	r2, r1
 800a6bc:	635a      	str	r2, [r3, #52]	@ 0x34
 800a6be:	e04c      	b.n	800a75a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	685b      	ldr	r3, [r3, #4]
 800a6c4:	2b0c      	cmp	r3, #12
 800a6c6:	d824      	bhi.n	800a712 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	685a      	ldr	r2, [r3, #4]
 800a6d2:	4613      	mov	r3, r2
 800a6d4:	009b      	lsls	r3, r3, #2
 800a6d6:	4413      	add	r3, r2
 800a6d8:	3b23      	subs	r3, #35	@ 0x23
 800a6da:	221f      	movs	r2, #31
 800a6dc:	fa02 f303 	lsl.w	r3, r2, r3
 800a6e0:	43da      	mvns	r2, r3
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	400a      	ands	r2, r1
 800a6e8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	b29b      	uxth	r3, r3
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	685a      	ldr	r2, [r3, #4]
 800a6fc:	4613      	mov	r3, r2
 800a6fe:	009b      	lsls	r3, r3, #2
 800a700:	4413      	add	r3, r2
 800a702:	3b23      	subs	r3, #35	@ 0x23
 800a704:	fa00 f203 	lsl.w	r2, r0, r3
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	430a      	orrs	r2, r1
 800a70e:	631a      	str	r2, [r3, #48]	@ 0x30
 800a710:	e023      	b.n	800a75a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	685a      	ldr	r2, [r3, #4]
 800a71c:	4613      	mov	r3, r2
 800a71e:	009b      	lsls	r3, r3, #2
 800a720:	4413      	add	r3, r2
 800a722:	3b41      	subs	r3, #65	@ 0x41
 800a724:	221f      	movs	r2, #31
 800a726:	fa02 f303 	lsl.w	r3, r2, r3
 800a72a:	43da      	mvns	r2, r3
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	400a      	ands	r2, r1
 800a732:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	b29b      	uxth	r3, r3
 800a740:	4618      	mov	r0, r3
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	685a      	ldr	r2, [r3, #4]
 800a746:	4613      	mov	r3, r2
 800a748:	009b      	lsls	r3, r3, #2
 800a74a:	4413      	add	r3, r2
 800a74c:	3b41      	subs	r3, #65	@ 0x41
 800a74e:	fa00 f203 	lsl.w	r2, r0, r3
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	430a      	orrs	r2, r1
 800a758:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a75a:	4b29      	ldr	r3, [pc, #164]	@ (800a800 <HAL_ADC_ConfigChannel+0x250>)
 800a75c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	4a28      	ldr	r2, [pc, #160]	@ (800a804 <HAL_ADC_ConfigChannel+0x254>)
 800a764:	4293      	cmp	r3, r2
 800a766:	d10f      	bne.n	800a788 <HAL_ADC_ConfigChannel+0x1d8>
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	2b12      	cmp	r3, #18
 800a76e:	d10b      	bne.n	800a788 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	685b      	ldr	r3, [r3, #4]
 800a774:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	685b      	ldr	r3, [r3, #4]
 800a780:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	4a1d      	ldr	r2, [pc, #116]	@ (800a804 <HAL_ADC_ConfigChannel+0x254>)
 800a78e:	4293      	cmp	r3, r2
 800a790:	d12b      	bne.n	800a7ea <HAL_ADC_ConfigChannel+0x23a>
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	4a1c      	ldr	r2, [pc, #112]	@ (800a808 <HAL_ADC_ConfigChannel+0x258>)
 800a798:	4293      	cmp	r3, r2
 800a79a:	d003      	beq.n	800a7a4 <HAL_ADC_ConfigChannel+0x1f4>
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	2b11      	cmp	r3, #17
 800a7a2:	d122      	bne.n	800a7ea <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	685b      	ldr	r3, [r3, #4]
 800a7a8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	685b      	ldr	r3, [r3, #4]
 800a7b4:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	4a11      	ldr	r2, [pc, #68]	@ (800a808 <HAL_ADC_ConfigChannel+0x258>)
 800a7c2:	4293      	cmp	r3, r2
 800a7c4:	d111      	bne.n	800a7ea <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800a7c6:	4b11      	ldr	r3, [pc, #68]	@ (800a80c <HAL_ADC_ConfigChannel+0x25c>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	4a11      	ldr	r2, [pc, #68]	@ (800a810 <HAL_ADC_ConfigChannel+0x260>)
 800a7cc:	fba2 2303 	umull	r2, r3, r2, r3
 800a7d0:	0c9a      	lsrs	r2, r3, #18
 800a7d2:	4613      	mov	r3, r2
 800a7d4:	009b      	lsls	r3, r3, #2
 800a7d6:	4413      	add	r3, r2
 800a7d8:	005b      	lsls	r3, r3, #1
 800a7da:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800a7dc:	e002      	b.n	800a7e4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800a7de:	68bb      	ldr	r3, [r7, #8]
 800a7e0:	3b01      	subs	r3, #1
 800a7e2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d1f9      	bne.n	800a7de <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800a7f2:	2300      	movs	r3, #0
}
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	3714      	adds	r7, #20
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fe:	4770      	bx	lr
 800a800:	40012300 	.word	0x40012300
 800a804:	40012000 	.word	0x40012000
 800a808:	10000012 	.word	0x10000012
 800a80c:	20000008 	.word	0x20000008
 800a810:	431bde83 	.word	0x431bde83

0800a814 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800a814:	b480      	push	{r7}
 800a816:	b085      	sub	sp, #20
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a81c:	4b79      	ldr	r3, [pc, #484]	@ (800aa04 <ADC_Init+0x1f0>)
 800a81e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	685b      	ldr	r3, [r3, #4]
 800a824:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	685a      	ldr	r2, [r3, #4]
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	685b      	ldr	r3, [r3, #4]
 800a834:	431a      	orrs	r2, r3
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	685a      	ldr	r2, [r3, #4]
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a848:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	6859      	ldr	r1, [r3, #4]
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	691b      	ldr	r3, [r3, #16]
 800a854:	021a      	lsls	r2, r3, #8
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	430a      	orrs	r2, r1
 800a85c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	685a      	ldr	r2, [r3, #4]
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800a86c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	6859      	ldr	r1, [r3, #4]
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	689a      	ldr	r2, [r3, #8]
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	430a      	orrs	r2, r1
 800a87e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	689a      	ldr	r2, [r3, #8]
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a88e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	6899      	ldr	r1, [r3, #8]
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	68da      	ldr	r2, [r3, #12]
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	430a      	orrs	r2, r1
 800a8a0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8a6:	4a58      	ldr	r2, [pc, #352]	@ (800aa08 <ADC_Init+0x1f4>)
 800a8a8:	4293      	cmp	r3, r2
 800a8aa:	d022      	beq.n	800a8f2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	689a      	ldr	r2, [r3, #8]
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800a8ba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	6899      	ldr	r1, [r3, #8]
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	430a      	orrs	r2, r1
 800a8cc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	689a      	ldr	r2, [r3, #8]
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800a8dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	6899      	ldr	r1, [r3, #8]
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	430a      	orrs	r2, r1
 800a8ee:	609a      	str	r2, [r3, #8]
 800a8f0:	e00f      	b.n	800a912 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	689a      	ldr	r2, [r3, #8]
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800a900:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	689a      	ldr	r2, [r3, #8]
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800a910:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	689a      	ldr	r2, [r3, #8]
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	f022 0202 	bic.w	r2, r2, #2
 800a920:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	6899      	ldr	r1, [r3, #8]
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	7e1b      	ldrb	r3, [r3, #24]
 800a92c:	005a      	lsls	r2, r3, #1
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	430a      	orrs	r2, r1
 800a934:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d01b      	beq.n	800a978 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	685a      	ldr	r2, [r3, #4]
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a94e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	685a      	ldr	r2, [r3, #4]
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800a95e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	6859      	ldr	r1, [r3, #4]
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a96a:	3b01      	subs	r3, #1
 800a96c:	035a      	lsls	r2, r3, #13
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	430a      	orrs	r2, r1
 800a974:	605a      	str	r2, [r3, #4]
 800a976:	e007      	b.n	800a988 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	685a      	ldr	r2, [r3, #4]
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a986:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800a996:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	69db      	ldr	r3, [r3, #28]
 800a9a2:	3b01      	subs	r3, #1
 800a9a4:	051a      	lsls	r2, r3, #20
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	430a      	orrs	r2, r1
 800a9ac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	689a      	ldr	r2, [r3, #8]
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800a9bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	6899      	ldr	r1, [r3, #8]
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a9ca:	025a      	lsls	r2, r3, #9
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	430a      	orrs	r2, r1
 800a9d2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	689a      	ldr	r2, [r3, #8]
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a9e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	6899      	ldr	r1, [r3, #8]
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	695b      	ldr	r3, [r3, #20]
 800a9ee:	029a      	lsls	r2, r3, #10
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	430a      	orrs	r2, r1
 800a9f6:	609a      	str	r2, [r3, #8]
}
 800a9f8:	bf00      	nop
 800a9fa:	3714      	adds	r7, #20
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa02:	4770      	bx	lr
 800aa04:	40012300 	.word	0x40012300
 800aa08:	0f000001 	.word	0x0f000001

0800aa0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800aa0c:	b480      	push	{r7}
 800aa0e:	b085      	sub	sp, #20
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	f003 0307 	and.w	r3, r3, #7
 800aa1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800aa1c:	4b0c      	ldr	r3, [pc, #48]	@ (800aa50 <__NVIC_SetPriorityGrouping+0x44>)
 800aa1e:	68db      	ldr	r3, [r3, #12]
 800aa20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800aa22:	68ba      	ldr	r2, [r7, #8]
 800aa24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800aa28:	4013      	ands	r3, r2
 800aa2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800aa30:	68bb      	ldr	r3, [r7, #8]
 800aa32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800aa34:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800aa38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800aa3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800aa3e:	4a04      	ldr	r2, [pc, #16]	@ (800aa50 <__NVIC_SetPriorityGrouping+0x44>)
 800aa40:	68bb      	ldr	r3, [r7, #8]
 800aa42:	60d3      	str	r3, [r2, #12]
}
 800aa44:	bf00      	nop
 800aa46:	3714      	adds	r7, #20
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4e:	4770      	bx	lr
 800aa50:	e000ed00 	.word	0xe000ed00

0800aa54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800aa54:	b480      	push	{r7}
 800aa56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800aa58:	4b04      	ldr	r3, [pc, #16]	@ (800aa6c <__NVIC_GetPriorityGrouping+0x18>)
 800aa5a:	68db      	ldr	r3, [r3, #12]
 800aa5c:	0a1b      	lsrs	r3, r3, #8
 800aa5e:	f003 0307 	and.w	r3, r3, #7
}
 800aa62:	4618      	mov	r0, r3
 800aa64:	46bd      	mov	sp, r7
 800aa66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6a:	4770      	bx	lr
 800aa6c:	e000ed00 	.word	0xe000ed00

0800aa70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800aa70:	b480      	push	{r7}
 800aa72:	b083      	sub	sp, #12
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	4603      	mov	r3, r0
 800aa78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800aa7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	db0b      	blt.n	800aa9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800aa82:	79fb      	ldrb	r3, [r7, #7]
 800aa84:	f003 021f 	and.w	r2, r3, #31
 800aa88:	4907      	ldr	r1, [pc, #28]	@ (800aaa8 <__NVIC_EnableIRQ+0x38>)
 800aa8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aa8e:	095b      	lsrs	r3, r3, #5
 800aa90:	2001      	movs	r0, #1
 800aa92:	fa00 f202 	lsl.w	r2, r0, r2
 800aa96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800aa9a:	bf00      	nop
 800aa9c:	370c      	adds	r7, #12
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa4:	4770      	bx	lr
 800aaa6:	bf00      	nop
 800aaa8:	e000e100 	.word	0xe000e100

0800aaac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800aaac:	b480      	push	{r7}
 800aaae:	b083      	sub	sp, #12
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	4603      	mov	r3, r0
 800aab4:	6039      	str	r1, [r7, #0]
 800aab6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800aab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	db0a      	blt.n	800aad6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	b2da      	uxtb	r2, r3
 800aac4:	490c      	ldr	r1, [pc, #48]	@ (800aaf8 <__NVIC_SetPriority+0x4c>)
 800aac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aaca:	0112      	lsls	r2, r2, #4
 800aacc:	b2d2      	uxtb	r2, r2
 800aace:	440b      	add	r3, r1
 800aad0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800aad4:	e00a      	b.n	800aaec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	b2da      	uxtb	r2, r3
 800aada:	4908      	ldr	r1, [pc, #32]	@ (800aafc <__NVIC_SetPriority+0x50>)
 800aadc:	79fb      	ldrb	r3, [r7, #7]
 800aade:	f003 030f 	and.w	r3, r3, #15
 800aae2:	3b04      	subs	r3, #4
 800aae4:	0112      	lsls	r2, r2, #4
 800aae6:	b2d2      	uxtb	r2, r2
 800aae8:	440b      	add	r3, r1
 800aaea:	761a      	strb	r2, [r3, #24]
}
 800aaec:	bf00      	nop
 800aaee:	370c      	adds	r7, #12
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf6:	4770      	bx	lr
 800aaf8:	e000e100 	.word	0xe000e100
 800aafc:	e000ed00 	.word	0xe000ed00

0800ab00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800ab00:	b480      	push	{r7}
 800ab02:	b089      	sub	sp, #36	@ 0x24
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	60f8      	str	r0, [r7, #12]
 800ab08:	60b9      	str	r1, [r7, #8]
 800ab0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	f003 0307 	and.w	r3, r3, #7
 800ab12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800ab14:	69fb      	ldr	r3, [r7, #28]
 800ab16:	f1c3 0307 	rsb	r3, r3, #7
 800ab1a:	2b04      	cmp	r3, #4
 800ab1c:	bf28      	it	cs
 800ab1e:	2304      	movcs	r3, #4
 800ab20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800ab22:	69fb      	ldr	r3, [r7, #28]
 800ab24:	3304      	adds	r3, #4
 800ab26:	2b06      	cmp	r3, #6
 800ab28:	d902      	bls.n	800ab30 <NVIC_EncodePriority+0x30>
 800ab2a:	69fb      	ldr	r3, [r7, #28]
 800ab2c:	3b03      	subs	r3, #3
 800ab2e:	e000      	b.n	800ab32 <NVIC_EncodePriority+0x32>
 800ab30:	2300      	movs	r3, #0
 800ab32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ab34:	f04f 32ff 	mov.w	r2, #4294967295
 800ab38:	69bb      	ldr	r3, [r7, #24]
 800ab3a:	fa02 f303 	lsl.w	r3, r2, r3
 800ab3e:	43da      	mvns	r2, r3
 800ab40:	68bb      	ldr	r3, [r7, #8]
 800ab42:	401a      	ands	r2, r3
 800ab44:	697b      	ldr	r3, [r7, #20]
 800ab46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800ab48:	f04f 31ff 	mov.w	r1, #4294967295
 800ab4c:	697b      	ldr	r3, [r7, #20]
 800ab4e:	fa01 f303 	lsl.w	r3, r1, r3
 800ab52:	43d9      	mvns	r1, r3
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ab58:	4313      	orrs	r3, r2
         );
}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	3724      	adds	r7, #36	@ 0x24
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab64:	4770      	bx	lr
	...

0800ab68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b082      	sub	sp, #8
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	3b01      	subs	r3, #1
 800ab74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ab78:	d301      	bcc.n	800ab7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800ab7a:	2301      	movs	r3, #1
 800ab7c:	e00f      	b.n	800ab9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800ab7e:	4a0a      	ldr	r2, [pc, #40]	@ (800aba8 <SysTick_Config+0x40>)
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	3b01      	subs	r3, #1
 800ab84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800ab86:	210f      	movs	r1, #15
 800ab88:	f04f 30ff 	mov.w	r0, #4294967295
 800ab8c:	f7ff ff8e 	bl	800aaac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800ab90:	4b05      	ldr	r3, [pc, #20]	@ (800aba8 <SysTick_Config+0x40>)
 800ab92:	2200      	movs	r2, #0
 800ab94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800ab96:	4b04      	ldr	r3, [pc, #16]	@ (800aba8 <SysTick_Config+0x40>)
 800ab98:	2207      	movs	r2, #7
 800ab9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800ab9c:	2300      	movs	r3, #0
}
 800ab9e:	4618      	mov	r0, r3
 800aba0:	3708      	adds	r7, #8
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}
 800aba6:	bf00      	nop
 800aba8:	e000e010 	.word	0xe000e010

0800abac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b082      	sub	sp, #8
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800abb4:	6878      	ldr	r0, [r7, #4]
 800abb6:	f7ff ff29 	bl	800aa0c <__NVIC_SetPriorityGrouping>
}
 800abba:	bf00      	nop
 800abbc:	3708      	adds	r7, #8
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}

0800abc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800abc2:	b580      	push	{r7, lr}
 800abc4:	b086      	sub	sp, #24
 800abc6:	af00      	add	r7, sp, #0
 800abc8:	4603      	mov	r3, r0
 800abca:	60b9      	str	r1, [r7, #8]
 800abcc:	607a      	str	r2, [r7, #4]
 800abce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800abd0:	2300      	movs	r3, #0
 800abd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800abd4:	f7ff ff3e 	bl	800aa54 <__NVIC_GetPriorityGrouping>
 800abd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800abda:	687a      	ldr	r2, [r7, #4]
 800abdc:	68b9      	ldr	r1, [r7, #8]
 800abde:	6978      	ldr	r0, [r7, #20]
 800abe0:	f7ff ff8e 	bl	800ab00 <NVIC_EncodePriority>
 800abe4:	4602      	mov	r2, r0
 800abe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800abea:	4611      	mov	r1, r2
 800abec:	4618      	mov	r0, r3
 800abee:	f7ff ff5d 	bl	800aaac <__NVIC_SetPriority>
}
 800abf2:	bf00      	nop
 800abf4:	3718      	adds	r7, #24
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd80      	pop	{r7, pc}

0800abfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800abfa:	b580      	push	{r7, lr}
 800abfc:	b082      	sub	sp, #8
 800abfe:	af00      	add	r7, sp, #0
 800ac00:	4603      	mov	r3, r0
 800ac02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800ac04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac08:	4618      	mov	r0, r3
 800ac0a:	f7ff ff31 	bl	800aa70 <__NVIC_EnableIRQ>
}
 800ac0e:	bf00      	nop
 800ac10:	3708      	adds	r7, #8
 800ac12:	46bd      	mov	sp, r7
 800ac14:	bd80      	pop	{r7, pc}

0800ac16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800ac16:	b580      	push	{r7, lr}
 800ac18:	b082      	sub	sp, #8
 800ac1a:	af00      	add	r7, sp, #0
 800ac1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800ac1e:	6878      	ldr	r0, [r7, #4]
 800ac20:	f7ff ffa2 	bl	800ab68 <SysTick_Config>
 800ac24:	4603      	mov	r3, r0
}
 800ac26:	4618      	mov	r0, r3
 800ac28:	3708      	adds	r7, #8
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bd80      	pop	{r7, pc}
	...

0800ac30 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b086      	sub	sp, #24
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800ac38:	2300      	movs	r3, #0
 800ac3a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800ac3c:	f7ff fc44 	bl	800a4c8 <HAL_GetTick>
 800ac40:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d101      	bne.n	800ac4c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800ac48:	2301      	movs	r3, #1
 800ac4a:	e099      	b.n	800ad80 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	2202      	movs	r2, #2
 800ac50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2200      	movs	r2, #0
 800ac58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	681a      	ldr	r2, [r3, #0]
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	f022 0201 	bic.w	r2, r2, #1
 800ac6a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800ac6c:	e00f      	b.n	800ac8e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800ac6e:	f7ff fc2b 	bl	800a4c8 <HAL_GetTick>
 800ac72:	4602      	mov	r2, r0
 800ac74:	693b      	ldr	r3, [r7, #16]
 800ac76:	1ad3      	subs	r3, r2, r3
 800ac78:	2b05      	cmp	r3, #5
 800ac7a:	d908      	bls.n	800ac8e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	2220      	movs	r2, #32
 800ac80:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	2203      	movs	r2, #3
 800ac86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800ac8a:	2303      	movs	r3, #3
 800ac8c:	e078      	b.n	800ad80 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	f003 0301 	and.w	r3, r3, #1
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d1e8      	bne.n	800ac6e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800aca4:	697a      	ldr	r2, [r7, #20]
 800aca6:	4b38      	ldr	r3, [pc, #224]	@ (800ad88 <HAL_DMA_Init+0x158>)
 800aca8:	4013      	ands	r3, r2
 800acaa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	685a      	ldr	r2, [r3, #4]
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	689b      	ldr	r3, [r3, #8]
 800acb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800acba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	691b      	ldr	r3, [r3, #16]
 800acc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800acc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	699b      	ldr	r3, [r3, #24]
 800accc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800acd2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6a1b      	ldr	r3, [r3, #32]
 800acd8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800acda:	697a      	ldr	r2, [r7, #20]
 800acdc:	4313      	orrs	r3, r2
 800acde:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ace4:	2b04      	cmp	r3, #4
 800ace6:	d107      	bne.n	800acf8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800acf0:	4313      	orrs	r3, r2
 800acf2:	697a      	ldr	r2, [r7, #20]
 800acf4:	4313      	orrs	r3, r2
 800acf6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	697a      	ldr	r2, [r7, #20]
 800acfe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	695b      	ldr	r3, [r3, #20]
 800ad06:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800ad08:	697b      	ldr	r3, [r7, #20]
 800ad0a:	f023 0307 	bic.w	r3, r3, #7
 800ad0e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad14:	697a      	ldr	r2, [r7, #20]
 800ad16:	4313      	orrs	r3, r2
 800ad18:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad1e:	2b04      	cmp	r3, #4
 800ad20:	d117      	bne.n	800ad52 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad26:	697a      	ldr	r2, [r7, #20]
 800ad28:	4313      	orrs	r3, r2
 800ad2a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d00e      	beq.n	800ad52 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	f000 f9e9 	bl	800b10c <DMA_CheckFifoParam>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d008      	beq.n	800ad52 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2240      	movs	r2, #64	@ 0x40
 800ad44:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	2201      	movs	r2, #1
 800ad4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800ad4e:	2301      	movs	r3, #1
 800ad50:	e016      	b.n	800ad80 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	697a      	ldr	r2, [r7, #20]
 800ad58:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800ad5a:	6878      	ldr	r0, [r7, #4]
 800ad5c:	f000 f9a0 	bl	800b0a0 <DMA_CalcBaseAndBitshift>
 800ad60:	4603      	mov	r3, r0
 800ad62:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ad68:	223f      	movs	r2, #63	@ 0x3f
 800ad6a:	409a      	lsls	r2, r3
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2200      	movs	r2, #0
 800ad74:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	2201      	movs	r2, #1
 800ad7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800ad7e:	2300      	movs	r3, #0
}
 800ad80:	4618      	mov	r0, r3
 800ad82:	3718      	adds	r7, #24
 800ad84:	46bd      	mov	sp, r7
 800ad86:	bd80      	pop	{r7, pc}
 800ad88:	f010803f 	.word	0xf010803f

0800ad8c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b086      	sub	sp, #24
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800ad94:	2300      	movs	r3, #0
 800ad96:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800ad98:	4b8e      	ldr	r3, [pc, #568]	@ (800afd4 <HAL_DMA_IRQHandler+0x248>)
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	4a8e      	ldr	r2, [pc, #568]	@ (800afd8 <HAL_DMA_IRQHandler+0x24c>)
 800ad9e:	fba2 2303 	umull	r2, r3, r2, r3
 800ada2:	0a9b      	lsrs	r3, r3, #10
 800ada4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800adaa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800adac:	693b      	ldr	r3, [r7, #16]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800adb6:	2208      	movs	r2, #8
 800adb8:	409a      	lsls	r2, r3
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	4013      	ands	r3, r2
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d01a      	beq.n	800adf8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	f003 0304 	and.w	r3, r3, #4
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d013      	beq.n	800adf8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	681a      	ldr	r2, [r3, #0]
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	f022 0204 	bic.w	r2, r2, #4
 800adde:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ade4:	2208      	movs	r2, #8
 800ade6:	409a      	lsls	r2, r3
 800ade8:	693b      	ldr	r3, [r7, #16]
 800adea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800adf0:	f043 0201 	orr.w	r2, r3, #1
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800adfc:	2201      	movs	r2, #1
 800adfe:	409a      	lsls	r2, r3
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	4013      	ands	r3, r2
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d012      	beq.n	800ae2e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	695b      	ldr	r3, [r3, #20]
 800ae0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d00b      	beq.n	800ae2e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ae1a:	2201      	movs	r2, #1
 800ae1c:	409a      	lsls	r2, r3
 800ae1e:	693b      	ldr	r3, [r7, #16]
 800ae20:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae26:	f043 0202 	orr.w	r2, r3, #2
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ae32:	2204      	movs	r2, #4
 800ae34:	409a      	lsls	r2, r3
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	4013      	ands	r3, r2
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d012      	beq.n	800ae64 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	f003 0302 	and.w	r3, r3, #2
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d00b      	beq.n	800ae64 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ae50:	2204      	movs	r2, #4
 800ae52:	409a      	lsls	r2, r3
 800ae54:	693b      	ldr	r3, [r7, #16]
 800ae56:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae5c:	f043 0204 	orr.w	r2, r3, #4
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ae68:	2210      	movs	r2, #16
 800ae6a:	409a      	lsls	r2, r3
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	4013      	ands	r3, r2
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d043      	beq.n	800aefc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	f003 0308 	and.w	r3, r3, #8
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d03c      	beq.n	800aefc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ae86:	2210      	movs	r2, #16
 800ae88:	409a      	lsls	r2, r3
 800ae8a:	693b      	ldr	r3, [r7, #16]
 800ae8c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d018      	beq.n	800aece <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d108      	bne.n	800aebc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d024      	beq.n	800aefc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	4798      	blx	r3
 800aeba:	e01f      	b.n	800aefc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d01b      	beq.n	800aefc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	4798      	blx	r3
 800aecc:	e016      	b.n	800aefc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d107      	bne.n	800aeec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	681a      	ldr	r2, [r3, #0]
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	f022 0208 	bic.w	r2, r2, #8
 800aeea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d003      	beq.n	800aefc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aef8:	6878      	ldr	r0, [r7, #4]
 800aefa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800af00:	2220      	movs	r2, #32
 800af02:	409a      	lsls	r2, r3
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	4013      	ands	r3, r2
 800af08:	2b00      	cmp	r3, #0
 800af0a:	f000 808f 	beq.w	800b02c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	f003 0310 	and.w	r3, r3, #16
 800af18:	2b00      	cmp	r3, #0
 800af1a:	f000 8087 	beq.w	800b02c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800af22:	2220      	movs	r2, #32
 800af24:	409a      	lsls	r2, r3
 800af26:	693b      	ldr	r3, [r7, #16]
 800af28:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800af30:	b2db      	uxtb	r3, r3
 800af32:	2b05      	cmp	r3, #5
 800af34:	d136      	bne.n	800afa4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	681a      	ldr	r2, [r3, #0]
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	f022 0216 	bic.w	r2, r2, #22
 800af44:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	695a      	ldr	r2, [r3, #20]
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800af54:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d103      	bne.n	800af66 <HAL_DMA_IRQHandler+0x1da>
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800af62:	2b00      	cmp	r3, #0
 800af64:	d007      	beq.n	800af76 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	681a      	ldr	r2, [r3, #0]
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	f022 0208 	bic.w	r2, r2, #8
 800af74:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800af7a:	223f      	movs	r2, #63	@ 0x3f
 800af7c:	409a      	lsls	r2, r3
 800af7e:	693b      	ldr	r3, [r7, #16]
 800af80:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	2201      	movs	r2, #1
 800af86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	2200      	movs	r2, #0
 800af8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af96:	2b00      	cmp	r3, #0
 800af98:	d07e      	beq.n	800b098 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	4798      	blx	r3
        }
        return;
 800afa2:	e079      	b.n	800b098 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d01d      	beq.n	800afee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d10d      	bne.n	800afdc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d031      	beq.n	800b02c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800afcc:	6878      	ldr	r0, [r7, #4]
 800afce:	4798      	blx	r3
 800afd0:	e02c      	b.n	800b02c <HAL_DMA_IRQHandler+0x2a0>
 800afd2:	bf00      	nop
 800afd4:	20000008 	.word	0x20000008
 800afd8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d023      	beq.n	800b02c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800afe8:	6878      	ldr	r0, [r7, #4]
 800afea:	4798      	blx	r3
 800afec:	e01e      	b.n	800b02c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d10f      	bne.n	800b01c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	681a      	ldr	r2, [r3, #0]
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	f022 0210 	bic.w	r2, r2, #16
 800b00a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2201      	movs	r2, #1
 800b010:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2200      	movs	r2, #0
 800b018:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b020:	2b00      	cmp	r3, #0
 800b022:	d003      	beq.n	800b02c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b028:	6878      	ldr	r0, [r7, #4]
 800b02a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b030:	2b00      	cmp	r3, #0
 800b032:	d032      	beq.n	800b09a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b038:	f003 0301 	and.w	r3, r3, #1
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d022      	beq.n	800b086 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2205      	movs	r2, #5
 800b044:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	681a      	ldr	r2, [r3, #0]
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	f022 0201 	bic.w	r2, r2, #1
 800b056:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800b058:	68bb      	ldr	r3, [r7, #8]
 800b05a:	3301      	adds	r3, #1
 800b05c:	60bb      	str	r3, [r7, #8]
 800b05e:	697a      	ldr	r2, [r7, #20]
 800b060:	429a      	cmp	r2, r3
 800b062:	d307      	bcc.n	800b074 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	f003 0301 	and.w	r3, r3, #1
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d1f2      	bne.n	800b058 <HAL_DMA_IRQHandler+0x2cc>
 800b072:	e000      	b.n	800b076 <HAL_DMA_IRQHandler+0x2ea>
          break;
 800b074:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	2201      	movs	r2, #1
 800b07a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	2200      	movs	r2, #0
 800b082:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d005      	beq.n	800b09a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b092:	6878      	ldr	r0, [r7, #4]
 800b094:	4798      	blx	r3
 800b096:	e000      	b.n	800b09a <HAL_DMA_IRQHandler+0x30e>
        return;
 800b098:	bf00      	nop
    }
  }
}
 800b09a:	3718      	adds	r7, #24
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bd80      	pop	{r7, pc}

0800b0a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800b0a0:	b480      	push	{r7}
 800b0a2:	b085      	sub	sp, #20
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	b2db      	uxtb	r3, r3
 800b0ae:	3b10      	subs	r3, #16
 800b0b0:	4a14      	ldr	r2, [pc, #80]	@ (800b104 <DMA_CalcBaseAndBitshift+0x64>)
 800b0b2:	fba2 2303 	umull	r2, r3, r2, r3
 800b0b6:	091b      	lsrs	r3, r3, #4
 800b0b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800b0ba:	4a13      	ldr	r2, [pc, #76]	@ (800b108 <DMA_CalcBaseAndBitshift+0x68>)
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	4413      	add	r3, r2
 800b0c0:	781b      	ldrb	r3, [r3, #0]
 800b0c2:	461a      	mov	r2, r3
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	2b03      	cmp	r3, #3
 800b0cc:	d909      	bls.n	800b0e2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800b0d6:	f023 0303 	bic.w	r3, r3, #3
 800b0da:	1d1a      	adds	r2, r3, #4
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	659a      	str	r2, [r3, #88]	@ 0x58
 800b0e0:	e007      	b.n	800b0f2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800b0ea:	f023 0303 	bic.w	r3, r3, #3
 800b0ee:	687a      	ldr	r2, [r7, #4]
 800b0f0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	3714      	adds	r7, #20
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b100:	4770      	bx	lr
 800b102:	bf00      	nop
 800b104:	aaaaaaab 	.word	0xaaaaaaab
 800b108:	080162f8 	.word	0x080162f8

0800b10c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800b10c:	b480      	push	{r7}
 800b10e:	b085      	sub	sp, #20
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b114:	2300      	movs	r3, #0
 800b116:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b11c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	699b      	ldr	r3, [r3, #24]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d11f      	bne.n	800b166 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800b126:	68bb      	ldr	r3, [r7, #8]
 800b128:	2b03      	cmp	r3, #3
 800b12a:	d856      	bhi.n	800b1da <DMA_CheckFifoParam+0xce>
 800b12c:	a201      	add	r2, pc, #4	@ (adr r2, 800b134 <DMA_CheckFifoParam+0x28>)
 800b12e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b132:	bf00      	nop
 800b134:	0800b145 	.word	0x0800b145
 800b138:	0800b157 	.word	0x0800b157
 800b13c:	0800b145 	.word	0x0800b145
 800b140:	0800b1db 	.word	0x0800b1db
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b148:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d046      	beq.n	800b1de <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800b150:	2301      	movs	r3, #1
 800b152:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b154:	e043      	b.n	800b1de <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b15a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800b15e:	d140      	bne.n	800b1e2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800b160:	2301      	movs	r3, #1
 800b162:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b164:	e03d      	b.n	800b1e2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	699b      	ldr	r3, [r3, #24]
 800b16a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b16e:	d121      	bne.n	800b1b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800b170:	68bb      	ldr	r3, [r7, #8]
 800b172:	2b03      	cmp	r3, #3
 800b174:	d837      	bhi.n	800b1e6 <DMA_CheckFifoParam+0xda>
 800b176:	a201      	add	r2, pc, #4	@ (adr r2, 800b17c <DMA_CheckFifoParam+0x70>)
 800b178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b17c:	0800b18d 	.word	0x0800b18d
 800b180:	0800b193 	.word	0x0800b193
 800b184:	0800b18d 	.word	0x0800b18d
 800b188:	0800b1a5 	.word	0x0800b1a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800b18c:	2301      	movs	r3, #1
 800b18e:	73fb      	strb	r3, [r7, #15]
      break;
 800b190:	e030      	b.n	800b1f4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b196:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d025      	beq.n	800b1ea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800b19e:	2301      	movs	r3, #1
 800b1a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b1a2:	e022      	b.n	800b1ea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1a8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800b1ac:	d11f      	bne.n	800b1ee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800b1ae:	2301      	movs	r3, #1
 800b1b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800b1b2:	e01c      	b.n	800b1ee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800b1b4:	68bb      	ldr	r3, [r7, #8]
 800b1b6:	2b02      	cmp	r3, #2
 800b1b8:	d903      	bls.n	800b1c2 <DMA_CheckFifoParam+0xb6>
 800b1ba:	68bb      	ldr	r3, [r7, #8]
 800b1bc:	2b03      	cmp	r3, #3
 800b1be:	d003      	beq.n	800b1c8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800b1c0:	e018      	b.n	800b1f4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800b1c2:	2301      	movs	r3, #1
 800b1c4:	73fb      	strb	r3, [r7, #15]
      break;
 800b1c6:	e015      	b.n	800b1f4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d00e      	beq.n	800b1f2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800b1d4:	2301      	movs	r3, #1
 800b1d6:	73fb      	strb	r3, [r7, #15]
      break;
 800b1d8:	e00b      	b.n	800b1f2 <DMA_CheckFifoParam+0xe6>
      break;
 800b1da:	bf00      	nop
 800b1dc:	e00a      	b.n	800b1f4 <DMA_CheckFifoParam+0xe8>
      break;
 800b1de:	bf00      	nop
 800b1e0:	e008      	b.n	800b1f4 <DMA_CheckFifoParam+0xe8>
      break;
 800b1e2:	bf00      	nop
 800b1e4:	e006      	b.n	800b1f4 <DMA_CheckFifoParam+0xe8>
      break;
 800b1e6:	bf00      	nop
 800b1e8:	e004      	b.n	800b1f4 <DMA_CheckFifoParam+0xe8>
      break;
 800b1ea:	bf00      	nop
 800b1ec:	e002      	b.n	800b1f4 <DMA_CheckFifoParam+0xe8>
      break;   
 800b1ee:	bf00      	nop
 800b1f0:	e000      	b.n	800b1f4 <DMA_CheckFifoParam+0xe8>
      break;
 800b1f2:	bf00      	nop
    }
  } 
  
  return status; 
 800b1f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	3714      	adds	r7, #20
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b200:	4770      	bx	lr
 800b202:	bf00      	nop

0800b204 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b204:	b480      	push	{r7}
 800b206:	b089      	sub	sp, #36	@ 0x24
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
 800b20c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800b20e:	2300      	movs	r3, #0
 800b210:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800b212:	2300      	movs	r3, #0
 800b214:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800b216:	2300      	movs	r3, #0
 800b218:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b21a:	2300      	movs	r3, #0
 800b21c:	61fb      	str	r3, [r7, #28]
 800b21e:	e159      	b.n	800b4d4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800b220:	2201      	movs	r2, #1
 800b222:	69fb      	ldr	r3, [r7, #28]
 800b224:	fa02 f303 	lsl.w	r3, r2, r3
 800b228:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	697a      	ldr	r2, [r7, #20]
 800b230:	4013      	ands	r3, r2
 800b232:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800b234:	693a      	ldr	r2, [r7, #16]
 800b236:	697b      	ldr	r3, [r7, #20]
 800b238:	429a      	cmp	r2, r3
 800b23a:	f040 8148 	bne.w	800b4ce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800b23e:	683b      	ldr	r3, [r7, #0]
 800b240:	685b      	ldr	r3, [r3, #4]
 800b242:	f003 0303 	and.w	r3, r3, #3
 800b246:	2b01      	cmp	r3, #1
 800b248:	d005      	beq.n	800b256 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	685b      	ldr	r3, [r3, #4]
 800b24e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800b252:	2b02      	cmp	r3, #2
 800b254:	d130      	bne.n	800b2b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	689b      	ldr	r3, [r3, #8]
 800b25a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800b25c:	69fb      	ldr	r3, [r7, #28]
 800b25e:	005b      	lsls	r3, r3, #1
 800b260:	2203      	movs	r2, #3
 800b262:	fa02 f303 	lsl.w	r3, r2, r3
 800b266:	43db      	mvns	r3, r3
 800b268:	69ba      	ldr	r2, [r7, #24]
 800b26a:	4013      	ands	r3, r2
 800b26c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	68da      	ldr	r2, [r3, #12]
 800b272:	69fb      	ldr	r3, [r7, #28]
 800b274:	005b      	lsls	r3, r3, #1
 800b276:	fa02 f303 	lsl.w	r3, r2, r3
 800b27a:	69ba      	ldr	r2, [r7, #24]
 800b27c:	4313      	orrs	r3, r2
 800b27e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	69ba      	ldr	r2, [r7, #24]
 800b284:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	685b      	ldr	r3, [r3, #4]
 800b28a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b28c:	2201      	movs	r2, #1
 800b28e:	69fb      	ldr	r3, [r7, #28]
 800b290:	fa02 f303 	lsl.w	r3, r2, r3
 800b294:	43db      	mvns	r3, r3
 800b296:	69ba      	ldr	r2, [r7, #24]
 800b298:	4013      	ands	r3, r2
 800b29a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	685b      	ldr	r3, [r3, #4]
 800b2a0:	091b      	lsrs	r3, r3, #4
 800b2a2:	f003 0201 	and.w	r2, r3, #1
 800b2a6:	69fb      	ldr	r3, [r7, #28]
 800b2a8:	fa02 f303 	lsl.w	r3, r2, r3
 800b2ac:	69ba      	ldr	r2, [r7, #24]
 800b2ae:	4313      	orrs	r3, r2
 800b2b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	69ba      	ldr	r2, [r7, #24]
 800b2b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b2b8:	683b      	ldr	r3, [r7, #0]
 800b2ba:	685b      	ldr	r3, [r3, #4]
 800b2bc:	f003 0303 	and.w	r3, r3, #3
 800b2c0:	2b03      	cmp	r3, #3
 800b2c2:	d017      	beq.n	800b2f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	68db      	ldr	r3, [r3, #12]
 800b2c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800b2ca:	69fb      	ldr	r3, [r7, #28]
 800b2cc:	005b      	lsls	r3, r3, #1
 800b2ce:	2203      	movs	r2, #3
 800b2d0:	fa02 f303 	lsl.w	r3, r2, r3
 800b2d4:	43db      	mvns	r3, r3
 800b2d6:	69ba      	ldr	r2, [r7, #24]
 800b2d8:	4013      	ands	r3, r2
 800b2da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b2dc:	683b      	ldr	r3, [r7, #0]
 800b2de:	689a      	ldr	r2, [r3, #8]
 800b2e0:	69fb      	ldr	r3, [r7, #28]
 800b2e2:	005b      	lsls	r3, r3, #1
 800b2e4:	fa02 f303 	lsl.w	r3, r2, r3
 800b2e8:	69ba      	ldr	r2, [r7, #24]
 800b2ea:	4313      	orrs	r3, r2
 800b2ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	69ba      	ldr	r2, [r7, #24]
 800b2f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	685b      	ldr	r3, [r3, #4]
 800b2f8:	f003 0303 	and.w	r3, r3, #3
 800b2fc:	2b02      	cmp	r3, #2
 800b2fe:	d123      	bne.n	800b348 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b300:	69fb      	ldr	r3, [r7, #28]
 800b302:	08da      	lsrs	r2, r3, #3
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	3208      	adds	r2, #8
 800b308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b30c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800b30e:	69fb      	ldr	r3, [r7, #28]
 800b310:	f003 0307 	and.w	r3, r3, #7
 800b314:	009b      	lsls	r3, r3, #2
 800b316:	220f      	movs	r2, #15
 800b318:	fa02 f303 	lsl.w	r3, r2, r3
 800b31c:	43db      	mvns	r3, r3
 800b31e:	69ba      	ldr	r2, [r7, #24]
 800b320:	4013      	ands	r3, r2
 800b322:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	691a      	ldr	r2, [r3, #16]
 800b328:	69fb      	ldr	r3, [r7, #28]
 800b32a:	f003 0307 	and.w	r3, r3, #7
 800b32e:	009b      	lsls	r3, r3, #2
 800b330:	fa02 f303 	lsl.w	r3, r2, r3
 800b334:	69ba      	ldr	r2, [r7, #24]
 800b336:	4313      	orrs	r3, r2
 800b338:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b33a:	69fb      	ldr	r3, [r7, #28]
 800b33c:	08da      	lsrs	r2, r3, #3
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	3208      	adds	r2, #8
 800b342:	69b9      	ldr	r1, [r7, #24]
 800b344:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800b34e:	69fb      	ldr	r3, [r7, #28]
 800b350:	005b      	lsls	r3, r3, #1
 800b352:	2203      	movs	r2, #3
 800b354:	fa02 f303 	lsl.w	r3, r2, r3
 800b358:	43db      	mvns	r3, r3
 800b35a:	69ba      	ldr	r2, [r7, #24]
 800b35c:	4013      	ands	r3, r2
 800b35e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	685b      	ldr	r3, [r3, #4]
 800b364:	f003 0203 	and.w	r2, r3, #3
 800b368:	69fb      	ldr	r3, [r7, #28]
 800b36a:	005b      	lsls	r3, r3, #1
 800b36c:	fa02 f303 	lsl.w	r3, r2, r3
 800b370:	69ba      	ldr	r2, [r7, #24]
 800b372:	4313      	orrs	r3, r2
 800b374:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	69ba      	ldr	r2, [r7, #24]
 800b37a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	685b      	ldr	r3, [r3, #4]
 800b380:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b384:	2b00      	cmp	r3, #0
 800b386:	f000 80a2 	beq.w	800b4ce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b38a:	2300      	movs	r3, #0
 800b38c:	60fb      	str	r3, [r7, #12]
 800b38e:	4b57      	ldr	r3, [pc, #348]	@ (800b4ec <HAL_GPIO_Init+0x2e8>)
 800b390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b392:	4a56      	ldr	r2, [pc, #344]	@ (800b4ec <HAL_GPIO_Init+0x2e8>)
 800b394:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b398:	6453      	str	r3, [r2, #68]	@ 0x44
 800b39a:	4b54      	ldr	r3, [pc, #336]	@ (800b4ec <HAL_GPIO_Init+0x2e8>)
 800b39c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b39e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b3a2:	60fb      	str	r3, [r7, #12]
 800b3a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b3a6:	4a52      	ldr	r2, [pc, #328]	@ (800b4f0 <HAL_GPIO_Init+0x2ec>)
 800b3a8:	69fb      	ldr	r3, [r7, #28]
 800b3aa:	089b      	lsrs	r3, r3, #2
 800b3ac:	3302      	adds	r3, #2
 800b3ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b3b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800b3b4:	69fb      	ldr	r3, [r7, #28]
 800b3b6:	f003 0303 	and.w	r3, r3, #3
 800b3ba:	009b      	lsls	r3, r3, #2
 800b3bc:	220f      	movs	r2, #15
 800b3be:	fa02 f303 	lsl.w	r3, r2, r3
 800b3c2:	43db      	mvns	r3, r3
 800b3c4:	69ba      	ldr	r2, [r7, #24]
 800b3c6:	4013      	ands	r3, r2
 800b3c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	4a49      	ldr	r2, [pc, #292]	@ (800b4f4 <HAL_GPIO_Init+0x2f0>)
 800b3ce:	4293      	cmp	r3, r2
 800b3d0:	d019      	beq.n	800b406 <HAL_GPIO_Init+0x202>
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	4a48      	ldr	r2, [pc, #288]	@ (800b4f8 <HAL_GPIO_Init+0x2f4>)
 800b3d6:	4293      	cmp	r3, r2
 800b3d8:	d013      	beq.n	800b402 <HAL_GPIO_Init+0x1fe>
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	4a47      	ldr	r2, [pc, #284]	@ (800b4fc <HAL_GPIO_Init+0x2f8>)
 800b3de:	4293      	cmp	r3, r2
 800b3e0:	d00d      	beq.n	800b3fe <HAL_GPIO_Init+0x1fa>
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	4a46      	ldr	r2, [pc, #280]	@ (800b500 <HAL_GPIO_Init+0x2fc>)
 800b3e6:	4293      	cmp	r3, r2
 800b3e8:	d007      	beq.n	800b3fa <HAL_GPIO_Init+0x1f6>
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	4a45      	ldr	r2, [pc, #276]	@ (800b504 <HAL_GPIO_Init+0x300>)
 800b3ee:	4293      	cmp	r3, r2
 800b3f0:	d101      	bne.n	800b3f6 <HAL_GPIO_Init+0x1f2>
 800b3f2:	2304      	movs	r3, #4
 800b3f4:	e008      	b.n	800b408 <HAL_GPIO_Init+0x204>
 800b3f6:	2307      	movs	r3, #7
 800b3f8:	e006      	b.n	800b408 <HAL_GPIO_Init+0x204>
 800b3fa:	2303      	movs	r3, #3
 800b3fc:	e004      	b.n	800b408 <HAL_GPIO_Init+0x204>
 800b3fe:	2302      	movs	r3, #2
 800b400:	e002      	b.n	800b408 <HAL_GPIO_Init+0x204>
 800b402:	2301      	movs	r3, #1
 800b404:	e000      	b.n	800b408 <HAL_GPIO_Init+0x204>
 800b406:	2300      	movs	r3, #0
 800b408:	69fa      	ldr	r2, [r7, #28]
 800b40a:	f002 0203 	and.w	r2, r2, #3
 800b40e:	0092      	lsls	r2, r2, #2
 800b410:	4093      	lsls	r3, r2
 800b412:	69ba      	ldr	r2, [r7, #24]
 800b414:	4313      	orrs	r3, r2
 800b416:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b418:	4935      	ldr	r1, [pc, #212]	@ (800b4f0 <HAL_GPIO_Init+0x2ec>)
 800b41a:	69fb      	ldr	r3, [r7, #28]
 800b41c:	089b      	lsrs	r3, r3, #2
 800b41e:	3302      	adds	r3, #2
 800b420:	69ba      	ldr	r2, [r7, #24]
 800b422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b426:	4b38      	ldr	r3, [pc, #224]	@ (800b508 <HAL_GPIO_Init+0x304>)
 800b428:	689b      	ldr	r3, [r3, #8]
 800b42a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b42c:	693b      	ldr	r3, [r7, #16]
 800b42e:	43db      	mvns	r3, r3
 800b430:	69ba      	ldr	r2, [r7, #24]
 800b432:	4013      	ands	r3, r2
 800b434:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b436:	683b      	ldr	r3, [r7, #0]
 800b438:	685b      	ldr	r3, [r3, #4]
 800b43a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d003      	beq.n	800b44a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800b442:	69ba      	ldr	r2, [r7, #24]
 800b444:	693b      	ldr	r3, [r7, #16]
 800b446:	4313      	orrs	r3, r2
 800b448:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800b44a:	4a2f      	ldr	r2, [pc, #188]	@ (800b508 <HAL_GPIO_Init+0x304>)
 800b44c:	69bb      	ldr	r3, [r7, #24]
 800b44e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b450:	4b2d      	ldr	r3, [pc, #180]	@ (800b508 <HAL_GPIO_Init+0x304>)
 800b452:	68db      	ldr	r3, [r3, #12]
 800b454:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b456:	693b      	ldr	r3, [r7, #16]
 800b458:	43db      	mvns	r3, r3
 800b45a:	69ba      	ldr	r2, [r7, #24]
 800b45c:	4013      	ands	r3, r2
 800b45e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b460:	683b      	ldr	r3, [r7, #0]
 800b462:	685b      	ldr	r3, [r3, #4]
 800b464:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d003      	beq.n	800b474 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800b46c:	69ba      	ldr	r2, [r7, #24]
 800b46e:	693b      	ldr	r3, [r7, #16]
 800b470:	4313      	orrs	r3, r2
 800b472:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800b474:	4a24      	ldr	r2, [pc, #144]	@ (800b508 <HAL_GPIO_Init+0x304>)
 800b476:	69bb      	ldr	r3, [r7, #24]
 800b478:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800b47a:	4b23      	ldr	r3, [pc, #140]	@ (800b508 <HAL_GPIO_Init+0x304>)
 800b47c:	685b      	ldr	r3, [r3, #4]
 800b47e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b480:	693b      	ldr	r3, [r7, #16]
 800b482:	43db      	mvns	r3, r3
 800b484:	69ba      	ldr	r2, [r7, #24]
 800b486:	4013      	ands	r3, r2
 800b488:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	685b      	ldr	r3, [r3, #4]
 800b48e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b492:	2b00      	cmp	r3, #0
 800b494:	d003      	beq.n	800b49e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800b496:	69ba      	ldr	r2, [r7, #24]
 800b498:	693b      	ldr	r3, [r7, #16]
 800b49a:	4313      	orrs	r3, r2
 800b49c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800b49e:	4a1a      	ldr	r2, [pc, #104]	@ (800b508 <HAL_GPIO_Init+0x304>)
 800b4a0:	69bb      	ldr	r3, [r7, #24]
 800b4a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b4a4:	4b18      	ldr	r3, [pc, #96]	@ (800b508 <HAL_GPIO_Init+0x304>)
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b4aa:	693b      	ldr	r3, [r7, #16]
 800b4ac:	43db      	mvns	r3, r3
 800b4ae:	69ba      	ldr	r2, [r7, #24]
 800b4b0:	4013      	ands	r3, r2
 800b4b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b4b4:	683b      	ldr	r3, [r7, #0]
 800b4b6:	685b      	ldr	r3, [r3, #4]
 800b4b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d003      	beq.n	800b4c8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800b4c0:	69ba      	ldr	r2, [r7, #24]
 800b4c2:	693b      	ldr	r3, [r7, #16]
 800b4c4:	4313      	orrs	r3, r2
 800b4c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800b4c8:	4a0f      	ldr	r2, [pc, #60]	@ (800b508 <HAL_GPIO_Init+0x304>)
 800b4ca:	69bb      	ldr	r3, [r7, #24]
 800b4cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b4ce:	69fb      	ldr	r3, [r7, #28]
 800b4d0:	3301      	adds	r3, #1
 800b4d2:	61fb      	str	r3, [r7, #28]
 800b4d4:	69fb      	ldr	r3, [r7, #28]
 800b4d6:	2b0f      	cmp	r3, #15
 800b4d8:	f67f aea2 	bls.w	800b220 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800b4dc:	bf00      	nop
 800b4de:	bf00      	nop
 800b4e0:	3724      	adds	r7, #36	@ 0x24
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e8:	4770      	bx	lr
 800b4ea:	bf00      	nop
 800b4ec:	40023800 	.word	0x40023800
 800b4f0:	40013800 	.word	0x40013800
 800b4f4:	40020000 	.word	0x40020000
 800b4f8:	40020400 	.word	0x40020400
 800b4fc:	40020800 	.word	0x40020800
 800b500:	40020c00 	.word	0x40020c00
 800b504:	40021000 	.word	0x40021000
 800b508:	40013c00 	.word	0x40013c00

0800b50c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b50c:	b480      	push	{r7}
 800b50e:	b083      	sub	sp, #12
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
 800b514:	460b      	mov	r3, r1
 800b516:	807b      	strh	r3, [r7, #2]
 800b518:	4613      	mov	r3, r2
 800b51a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b51c:	787b      	ldrb	r3, [r7, #1]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d003      	beq.n	800b52a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b522:	887a      	ldrh	r2, [r7, #2]
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800b528:	e003      	b.n	800b532 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800b52a:	887b      	ldrh	r3, [r7, #2]
 800b52c:	041a      	lsls	r2, r3, #16
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	619a      	str	r2, [r3, #24]
}
 800b532:	bf00      	nop
 800b534:	370c      	adds	r7, #12
 800b536:	46bd      	mov	sp, r7
 800b538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53c:	4770      	bx	lr
	...

0800b540 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b084      	sub	sp, #16
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d101      	bne.n	800b552 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b54e:	2301      	movs	r3, #1
 800b550:	e12b      	b.n	800b7aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b558:	b2db      	uxtb	r3, r3
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d106      	bne.n	800b56c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2200      	movs	r2, #0
 800b562:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800b566:	6878      	ldr	r0, [r7, #4]
 800b568:	f7fd fea2 	bl	80092b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2224      	movs	r2, #36	@ 0x24
 800b570:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	681a      	ldr	r2, [r3, #0]
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	f022 0201 	bic.w	r2, r2, #1
 800b582:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	681a      	ldr	r2, [r3, #0]
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b592:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	681a      	ldr	r2, [r3, #0]
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b5a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800b5a4:	f002 fb24 	bl	800dbf0 <HAL_RCC_GetPCLK1Freq>
 800b5a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	685b      	ldr	r3, [r3, #4]
 800b5ae:	4a81      	ldr	r2, [pc, #516]	@ (800b7b4 <HAL_I2C_Init+0x274>)
 800b5b0:	4293      	cmp	r3, r2
 800b5b2:	d807      	bhi.n	800b5c4 <HAL_I2C_Init+0x84>
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	4a80      	ldr	r2, [pc, #512]	@ (800b7b8 <HAL_I2C_Init+0x278>)
 800b5b8:	4293      	cmp	r3, r2
 800b5ba:	bf94      	ite	ls
 800b5bc:	2301      	movls	r3, #1
 800b5be:	2300      	movhi	r3, #0
 800b5c0:	b2db      	uxtb	r3, r3
 800b5c2:	e006      	b.n	800b5d2 <HAL_I2C_Init+0x92>
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	4a7d      	ldr	r2, [pc, #500]	@ (800b7bc <HAL_I2C_Init+0x27c>)
 800b5c8:	4293      	cmp	r3, r2
 800b5ca:	bf94      	ite	ls
 800b5cc:	2301      	movls	r3, #1
 800b5ce:	2300      	movhi	r3, #0
 800b5d0:	b2db      	uxtb	r3, r3
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d001      	beq.n	800b5da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	e0e7      	b.n	800b7aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	4a78      	ldr	r2, [pc, #480]	@ (800b7c0 <HAL_I2C_Init+0x280>)
 800b5de:	fba2 2303 	umull	r2, r3, r2, r3
 800b5e2:	0c9b      	lsrs	r3, r3, #18
 800b5e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	685b      	ldr	r3, [r3, #4]
 800b5ec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	68ba      	ldr	r2, [r7, #8]
 800b5f6:	430a      	orrs	r2, r1
 800b5f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	6a1b      	ldr	r3, [r3, #32]
 800b600:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	685b      	ldr	r3, [r3, #4]
 800b608:	4a6a      	ldr	r2, [pc, #424]	@ (800b7b4 <HAL_I2C_Init+0x274>)
 800b60a:	4293      	cmp	r3, r2
 800b60c:	d802      	bhi.n	800b614 <HAL_I2C_Init+0xd4>
 800b60e:	68bb      	ldr	r3, [r7, #8]
 800b610:	3301      	adds	r3, #1
 800b612:	e009      	b.n	800b628 <HAL_I2C_Init+0xe8>
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800b61a:	fb02 f303 	mul.w	r3, r2, r3
 800b61e:	4a69      	ldr	r2, [pc, #420]	@ (800b7c4 <HAL_I2C_Init+0x284>)
 800b620:	fba2 2303 	umull	r2, r3, r2, r3
 800b624:	099b      	lsrs	r3, r3, #6
 800b626:	3301      	adds	r3, #1
 800b628:	687a      	ldr	r2, [r7, #4]
 800b62a:	6812      	ldr	r2, [r2, #0]
 800b62c:	430b      	orrs	r3, r1
 800b62e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	69db      	ldr	r3, [r3, #28]
 800b636:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800b63a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	685b      	ldr	r3, [r3, #4]
 800b642:	495c      	ldr	r1, [pc, #368]	@ (800b7b4 <HAL_I2C_Init+0x274>)
 800b644:	428b      	cmp	r3, r1
 800b646:	d819      	bhi.n	800b67c <HAL_I2C_Init+0x13c>
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	1e59      	subs	r1, r3, #1
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	685b      	ldr	r3, [r3, #4]
 800b650:	005b      	lsls	r3, r3, #1
 800b652:	fbb1 f3f3 	udiv	r3, r1, r3
 800b656:	1c59      	adds	r1, r3, #1
 800b658:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800b65c:	400b      	ands	r3, r1
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d00a      	beq.n	800b678 <HAL_I2C_Init+0x138>
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	1e59      	subs	r1, r3, #1
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	685b      	ldr	r3, [r3, #4]
 800b66a:	005b      	lsls	r3, r3, #1
 800b66c:	fbb1 f3f3 	udiv	r3, r1, r3
 800b670:	3301      	adds	r3, #1
 800b672:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b676:	e051      	b.n	800b71c <HAL_I2C_Init+0x1dc>
 800b678:	2304      	movs	r3, #4
 800b67a:	e04f      	b.n	800b71c <HAL_I2C_Init+0x1dc>
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	689b      	ldr	r3, [r3, #8]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d111      	bne.n	800b6a8 <HAL_I2C_Init+0x168>
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	1e58      	subs	r0, r3, #1
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	6859      	ldr	r1, [r3, #4]
 800b68c:	460b      	mov	r3, r1
 800b68e:	005b      	lsls	r3, r3, #1
 800b690:	440b      	add	r3, r1
 800b692:	fbb0 f3f3 	udiv	r3, r0, r3
 800b696:	3301      	adds	r3, #1
 800b698:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	bf0c      	ite	eq
 800b6a0:	2301      	moveq	r3, #1
 800b6a2:	2300      	movne	r3, #0
 800b6a4:	b2db      	uxtb	r3, r3
 800b6a6:	e012      	b.n	800b6ce <HAL_I2C_Init+0x18e>
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	1e58      	subs	r0, r3, #1
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	6859      	ldr	r1, [r3, #4]
 800b6b0:	460b      	mov	r3, r1
 800b6b2:	009b      	lsls	r3, r3, #2
 800b6b4:	440b      	add	r3, r1
 800b6b6:	0099      	lsls	r1, r3, #2
 800b6b8:	440b      	add	r3, r1
 800b6ba:	fbb0 f3f3 	udiv	r3, r0, r3
 800b6be:	3301      	adds	r3, #1
 800b6c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	bf0c      	ite	eq
 800b6c8:	2301      	moveq	r3, #1
 800b6ca:	2300      	movne	r3, #0
 800b6cc:	b2db      	uxtb	r3, r3
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d001      	beq.n	800b6d6 <HAL_I2C_Init+0x196>
 800b6d2:	2301      	movs	r3, #1
 800b6d4:	e022      	b.n	800b71c <HAL_I2C_Init+0x1dc>
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	689b      	ldr	r3, [r3, #8]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d10e      	bne.n	800b6fc <HAL_I2C_Init+0x1bc>
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	1e58      	subs	r0, r3, #1
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	6859      	ldr	r1, [r3, #4]
 800b6e6:	460b      	mov	r3, r1
 800b6e8:	005b      	lsls	r3, r3, #1
 800b6ea:	440b      	add	r3, r1
 800b6ec:	fbb0 f3f3 	udiv	r3, r0, r3
 800b6f0:	3301      	adds	r3, #1
 800b6f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b6f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b6fa:	e00f      	b.n	800b71c <HAL_I2C_Init+0x1dc>
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	1e58      	subs	r0, r3, #1
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	6859      	ldr	r1, [r3, #4]
 800b704:	460b      	mov	r3, r1
 800b706:	009b      	lsls	r3, r3, #2
 800b708:	440b      	add	r3, r1
 800b70a:	0099      	lsls	r1, r3, #2
 800b70c:	440b      	add	r3, r1
 800b70e:	fbb0 f3f3 	udiv	r3, r0, r3
 800b712:	3301      	adds	r3, #1
 800b714:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b718:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b71c:	6879      	ldr	r1, [r7, #4]
 800b71e:	6809      	ldr	r1, [r1, #0]
 800b720:	4313      	orrs	r3, r2
 800b722:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	69da      	ldr	r2, [r3, #28]
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	6a1b      	ldr	r3, [r3, #32]
 800b736:	431a      	orrs	r2, r3
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	430a      	orrs	r2, r1
 800b73e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	689b      	ldr	r3, [r3, #8]
 800b746:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800b74a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800b74e:	687a      	ldr	r2, [r7, #4]
 800b750:	6911      	ldr	r1, [r2, #16]
 800b752:	687a      	ldr	r2, [r7, #4]
 800b754:	68d2      	ldr	r2, [r2, #12]
 800b756:	4311      	orrs	r1, r2
 800b758:	687a      	ldr	r2, [r7, #4]
 800b75a:	6812      	ldr	r2, [r2, #0]
 800b75c:	430b      	orrs	r3, r1
 800b75e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	68db      	ldr	r3, [r3, #12]
 800b766:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	695a      	ldr	r2, [r3, #20]
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	699b      	ldr	r3, [r3, #24]
 800b772:	431a      	orrs	r2, r3
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	430a      	orrs	r2, r1
 800b77a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	681a      	ldr	r2, [r3, #0]
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	f042 0201 	orr.w	r2, r2, #1
 800b78a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	2200      	movs	r2, #0
 800b790:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	2220      	movs	r2, #32
 800b796:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	2200      	movs	r2, #0
 800b79e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800b7a8:	2300      	movs	r3, #0
}
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	3710      	adds	r7, #16
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	bd80      	pop	{r7, pc}
 800b7b2:	bf00      	nop
 800b7b4:	000186a0 	.word	0x000186a0
 800b7b8:	001e847f 	.word	0x001e847f
 800b7bc:	003d08ff 	.word	0x003d08ff
 800b7c0:	431bde83 	.word	0x431bde83
 800b7c4:	10624dd3 	.word	0x10624dd3

0800b7c8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b088      	sub	sp, #32
 800b7cc:	af02      	add	r7, sp, #8
 800b7ce:	60f8      	str	r0, [r7, #12]
 800b7d0:	4608      	mov	r0, r1
 800b7d2:	4611      	mov	r1, r2
 800b7d4:	461a      	mov	r2, r3
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	817b      	strh	r3, [r7, #10]
 800b7da:	460b      	mov	r3, r1
 800b7dc:	813b      	strh	r3, [r7, #8]
 800b7de:	4613      	mov	r3, r2
 800b7e0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b7e2:	f7fe fe71 	bl	800a4c8 <HAL_GetTick>
 800b7e6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b7ee:	b2db      	uxtb	r3, r3
 800b7f0:	2b20      	cmp	r3, #32
 800b7f2:	f040 80d9 	bne.w	800b9a8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b7f6:	697b      	ldr	r3, [r7, #20]
 800b7f8:	9300      	str	r3, [sp, #0]
 800b7fa:	2319      	movs	r3, #25
 800b7fc:	2201      	movs	r2, #1
 800b7fe:	496d      	ldr	r1, [pc, #436]	@ (800b9b4 <HAL_I2C_Mem_Write+0x1ec>)
 800b800:	68f8      	ldr	r0, [r7, #12]
 800b802:	f000 f971 	bl	800bae8 <I2C_WaitOnFlagUntilTimeout>
 800b806:	4603      	mov	r3, r0
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d001      	beq.n	800b810 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800b80c:	2302      	movs	r3, #2
 800b80e:	e0cc      	b.n	800b9aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b816:	2b01      	cmp	r3, #1
 800b818:	d101      	bne.n	800b81e <HAL_I2C_Mem_Write+0x56>
 800b81a:	2302      	movs	r3, #2
 800b81c:	e0c5      	b.n	800b9aa <HAL_I2C_Mem_Write+0x1e2>
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	2201      	movs	r2, #1
 800b822:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	f003 0301 	and.w	r3, r3, #1
 800b830:	2b01      	cmp	r3, #1
 800b832:	d007      	beq.n	800b844 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	681a      	ldr	r2, [r3, #0]
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	f042 0201 	orr.w	r2, r2, #1
 800b842:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	681a      	ldr	r2, [r3, #0]
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b852:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	2221      	movs	r2, #33	@ 0x21
 800b858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	2240      	movs	r2, #64	@ 0x40
 800b860:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	2200      	movs	r2, #0
 800b868:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	6a3a      	ldr	r2, [r7, #32]
 800b86e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800b874:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b87a:	b29a      	uxth	r2, r3
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	4a4d      	ldr	r2, [pc, #308]	@ (800b9b8 <HAL_I2C_Mem_Write+0x1f0>)
 800b884:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b886:	88f8      	ldrh	r0, [r7, #6]
 800b888:	893a      	ldrh	r2, [r7, #8]
 800b88a:	8979      	ldrh	r1, [r7, #10]
 800b88c:	697b      	ldr	r3, [r7, #20]
 800b88e:	9301      	str	r3, [sp, #4]
 800b890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b892:	9300      	str	r3, [sp, #0]
 800b894:	4603      	mov	r3, r0
 800b896:	68f8      	ldr	r0, [r7, #12]
 800b898:	f000 f890 	bl	800b9bc <I2C_RequestMemoryWrite>
 800b89c:	4603      	mov	r3, r0
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d052      	beq.n	800b948 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800b8a2:	2301      	movs	r3, #1
 800b8a4:	e081      	b.n	800b9aa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b8a6:	697a      	ldr	r2, [r7, #20]
 800b8a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b8aa:	68f8      	ldr	r0, [r7, #12]
 800b8ac:	f000 fa36 	bl	800bd1c <I2C_WaitOnTXEFlagUntilTimeout>
 800b8b0:	4603      	mov	r3, r0
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d00d      	beq.n	800b8d2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b8ba:	2b04      	cmp	r3, #4
 800b8bc:	d107      	bne.n	800b8ce <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	681a      	ldr	r2, [r3, #0]
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b8cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b8ce:	2301      	movs	r3, #1
 800b8d0:	e06b      	b.n	800b9aa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8d6:	781a      	ldrb	r2, [r3, #0]
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8e2:	1c5a      	adds	r2, r3, #1
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b8ec:	3b01      	subs	r3, #1
 800b8ee:	b29a      	uxth	r2, r3
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b8f8:	b29b      	uxth	r3, r3
 800b8fa:	3b01      	subs	r3, #1
 800b8fc:	b29a      	uxth	r2, r3
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	695b      	ldr	r3, [r3, #20]
 800b908:	f003 0304 	and.w	r3, r3, #4
 800b90c:	2b04      	cmp	r3, #4
 800b90e:	d11b      	bne.n	800b948 <HAL_I2C_Mem_Write+0x180>
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b914:	2b00      	cmp	r3, #0
 800b916:	d017      	beq.n	800b948 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b91c:	781a      	ldrb	r2, [r3, #0]
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b928:	1c5a      	adds	r2, r3, #1
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b932:	3b01      	subs	r3, #1
 800b934:	b29a      	uxth	r2, r3
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b93e:	b29b      	uxth	r3, r3
 800b940:	3b01      	subs	r3, #1
 800b942:	b29a      	uxth	r2, r3
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d1aa      	bne.n	800b8a6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b950:	697a      	ldr	r2, [r7, #20]
 800b952:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b954:	68f8      	ldr	r0, [r7, #12]
 800b956:	f000 fa29 	bl	800bdac <I2C_WaitOnBTFFlagUntilTimeout>
 800b95a:	4603      	mov	r3, r0
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d00d      	beq.n	800b97c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b964:	2b04      	cmp	r3, #4
 800b966:	d107      	bne.n	800b978 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	681a      	ldr	r2, [r3, #0]
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b976:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b978:	2301      	movs	r3, #1
 800b97a:	e016      	b.n	800b9aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	681a      	ldr	r2, [r3, #0]
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b98a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	2220      	movs	r2, #32
 800b990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	2200      	movs	r2, #0
 800b998:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	2200      	movs	r2, #0
 800b9a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	e000      	b.n	800b9aa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800b9a8:	2302      	movs	r3, #2
  }
}
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	3718      	adds	r7, #24
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	bd80      	pop	{r7, pc}
 800b9b2:	bf00      	nop
 800b9b4:	00100002 	.word	0x00100002
 800b9b8:	ffff0000 	.word	0xffff0000

0800b9bc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b088      	sub	sp, #32
 800b9c0:	af02      	add	r7, sp, #8
 800b9c2:	60f8      	str	r0, [r7, #12]
 800b9c4:	4608      	mov	r0, r1
 800b9c6:	4611      	mov	r1, r2
 800b9c8:	461a      	mov	r2, r3
 800b9ca:	4603      	mov	r3, r0
 800b9cc:	817b      	strh	r3, [r7, #10]
 800b9ce:	460b      	mov	r3, r1
 800b9d0:	813b      	strh	r3, [r7, #8]
 800b9d2:	4613      	mov	r3, r2
 800b9d4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	681a      	ldr	r2, [r3, #0]
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b9e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b9e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9e8:	9300      	str	r3, [sp, #0]
 800b9ea:	6a3b      	ldr	r3, [r7, #32]
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800b9f2:	68f8      	ldr	r0, [r7, #12]
 800b9f4:	f000 f878 	bl	800bae8 <I2C_WaitOnFlagUntilTimeout>
 800b9f8:	4603      	mov	r3, r0
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d00d      	beq.n	800ba1a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ba08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ba0c:	d103      	bne.n	800ba16 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ba14:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800ba16:	2303      	movs	r3, #3
 800ba18:	e05f      	b.n	800bada <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800ba1a:	897b      	ldrh	r3, [r7, #10]
 800ba1c:	b2db      	uxtb	r3, r3
 800ba1e:	461a      	mov	r2, r3
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800ba28:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ba2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba2c:	6a3a      	ldr	r2, [r7, #32]
 800ba2e:	492d      	ldr	r1, [pc, #180]	@ (800bae4 <I2C_RequestMemoryWrite+0x128>)
 800ba30:	68f8      	ldr	r0, [r7, #12]
 800ba32:	f000 f8d3 	bl	800bbdc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ba36:	4603      	mov	r3, r0
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d001      	beq.n	800ba40 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800ba3c:	2301      	movs	r3, #1
 800ba3e:	e04c      	b.n	800bada <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ba40:	2300      	movs	r3, #0
 800ba42:	617b      	str	r3, [r7, #20]
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	695b      	ldr	r3, [r3, #20]
 800ba4a:	617b      	str	r3, [r7, #20]
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	699b      	ldr	r3, [r3, #24]
 800ba52:	617b      	str	r3, [r7, #20]
 800ba54:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ba56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba58:	6a39      	ldr	r1, [r7, #32]
 800ba5a:	68f8      	ldr	r0, [r7, #12]
 800ba5c:	f000 f95e 	bl	800bd1c <I2C_WaitOnTXEFlagUntilTimeout>
 800ba60:	4603      	mov	r3, r0
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d00d      	beq.n	800ba82 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba6a:	2b04      	cmp	r3, #4
 800ba6c:	d107      	bne.n	800ba7e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	681a      	ldr	r2, [r3, #0]
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ba7c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800ba7e:	2301      	movs	r3, #1
 800ba80:	e02b      	b.n	800bada <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ba82:	88fb      	ldrh	r3, [r7, #6]
 800ba84:	2b01      	cmp	r3, #1
 800ba86:	d105      	bne.n	800ba94 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ba88:	893b      	ldrh	r3, [r7, #8]
 800ba8a:	b2da      	uxtb	r2, r3
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	611a      	str	r2, [r3, #16]
 800ba92:	e021      	b.n	800bad8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800ba94:	893b      	ldrh	r3, [r7, #8]
 800ba96:	0a1b      	lsrs	r3, r3, #8
 800ba98:	b29b      	uxth	r3, r3
 800ba9a:	b2da      	uxtb	r2, r3
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800baa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800baa4:	6a39      	ldr	r1, [r7, #32]
 800baa6:	68f8      	ldr	r0, [r7, #12]
 800baa8:	f000 f938 	bl	800bd1c <I2C_WaitOnTXEFlagUntilTimeout>
 800baac:	4603      	mov	r3, r0
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d00d      	beq.n	800bace <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bab6:	2b04      	cmp	r3, #4
 800bab8:	d107      	bne.n	800baca <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	681a      	ldr	r2, [r3, #0]
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bac8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800baca:	2301      	movs	r3, #1
 800bacc:	e005      	b.n	800bada <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800bace:	893b      	ldrh	r3, [r7, #8]
 800bad0:	b2da      	uxtb	r2, r3
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800bad8:	2300      	movs	r3, #0
}
 800bada:	4618      	mov	r0, r3
 800badc:	3718      	adds	r7, #24
 800bade:	46bd      	mov	sp, r7
 800bae0:	bd80      	pop	{r7, pc}
 800bae2:	bf00      	nop
 800bae4:	00010002 	.word	0x00010002

0800bae8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b084      	sub	sp, #16
 800baec:	af00      	add	r7, sp, #0
 800baee:	60f8      	str	r0, [r7, #12]
 800baf0:	60b9      	str	r1, [r7, #8]
 800baf2:	603b      	str	r3, [r7, #0]
 800baf4:	4613      	mov	r3, r2
 800baf6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800baf8:	e048      	b.n	800bb8c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bafa:	683b      	ldr	r3, [r7, #0]
 800bafc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb00:	d044      	beq.n	800bb8c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bb02:	f7fe fce1 	bl	800a4c8 <HAL_GetTick>
 800bb06:	4602      	mov	r2, r0
 800bb08:	69bb      	ldr	r3, [r7, #24]
 800bb0a:	1ad3      	subs	r3, r2, r3
 800bb0c:	683a      	ldr	r2, [r7, #0]
 800bb0e:	429a      	cmp	r2, r3
 800bb10:	d302      	bcc.n	800bb18 <I2C_WaitOnFlagUntilTimeout+0x30>
 800bb12:	683b      	ldr	r3, [r7, #0]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d139      	bne.n	800bb8c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800bb18:	68bb      	ldr	r3, [r7, #8]
 800bb1a:	0c1b      	lsrs	r3, r3, #16
 800bb1c:	b2db      	uxtb	r3, r3
 800bb1e:	2b01      	cmp	r3, #1
 800bb20:	d10d      	bne.n	800bb3e <I2C_WaitOnFlagUntilTimeout+0x56>
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	695b      	ldr	r3, [r3, #20]
 800bb28:	43da      	mvns	r2, r3
 800bb2a:	68bb      	ldr	r3, [r7, #8]
 800bb2c:	4013      	ands	r3, r2
 800bb2e:	b29b      	uxth	r3, r3
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	bf0c      	ite	eq
 800bb34:	2301      	moveq	r3, #1
 800bb36:	2300      	movne	r3, #0
 800bb38:	b2db      	uxtb	r3, r3
 800bb3a:	461a      	mov	r2, r3
 800bb3c:	e00c      	b.n	800bb58 <I2C_WaitOnFlagUntilTimeout+0x70>
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	699b      	ldr	r3, [r3, #24]
 800bb44:	43da      	mvns	r2, r3
 800bb46:	68bb      	ldr	r3, [r7, #8]
 800bb48:	4013      	ands	r3, r2
 800bb4a:	b29b      	uxth	r3, r3
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	bf0c      	ite	eq
 800bb50:	2301      	moveq	r3, #1
 800bb52:	2300      	movne	r3, #0
 800bb54:	b2db      	uxtb	r3, r3
 800bb56:	461a      	mov	r2, r3
 800bb58:	79fb      	ldrb	r3, [r7, #7]
 800bb5a:	429a      	cmp	r2, r3
 800bb5c:	d116      	bne.n	800bb8c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	2200      	movs	r2, #0
 800bb62:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	2220      	movs	r2, #32
 800bb68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	2200      	movs	r2, #0
 800bb70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb78:	f043 0220 	orr.w	r2, r3, #32
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	2200      	movs	r2, #0
 800bb84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800bb88:	2301      	movs	r3, #1
 800bb8a:	e023      	b.n	800bbd4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bb8c:	68bb      	ldr	r3, [r7, #8]
 800bb8e:	0c1b      	lsrs	r3, r3, #16
 800bb90:	b2db      	uxtb	r3, r3
 800bb92:	2b01      	cmp	r3, #1
 800bb94:	d10d      	bne.n	800bbb2 <I2C_WaitOnFlagUntilTimeout+0xca>
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	695b      	ldr	r3, [r3, #20]
 800bb9c:	43da      	mvns	r2, r3
 800bb9e:	68bb      	ldr	r3, [r7, #8]
 800bba0:	4013      	ands	r3, r2
 800bba2:	b29b      	uxth	r3, r3
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	bf0c      	ite	eq
 800bba8:	2301      	moveq	r3, #1
 800bbaa:	2300      	movne	r3, #0
 800bbac:	b2db      	uxtb	r3, r3
 800bbae:	461a      	mov	r2, r3
 800bbb0:	e00c      	b.n	800bbcc <I2C_WaitOnFlagUntilTimeout+0xe4>
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	699b      	ldr	r3, [r3, #24]
 800bbb8:	43da      	mvns	r2, r3
 800bbba:	68bb      	ldr	r3, [r7, #8]
 800bbbc:	4013      	ands	r3, r2
 800bbbe:	b29b      	uxth	r3, r3
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	bf0c      	ite	eq
 800bbc4:	2301      	moveq	r3, #1
 800bbc6:	2300      	movne	r3, #0
 800bbc8:	b2db      	uxtb	r3, r3
 800bbca:	461a      	mov	r2, r3
 800bbcc:	79fb      	ldrb	r3, [r7, #7]
 800bbce:	429a      	cmp	r2, r3
 800bbd0:	d093      	beq.n	800bafa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bbd2:	2300      	movs	r3, #0
}
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	3710      	adds	r7, #16
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	bd80      	pop	{r7, pc}

0800bbdc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b084      	sub	sp, #16
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	60f8      	str	r0, [r7, #12]
 800bbe4:	60b9      	str	r1, [r7, #8]
 800bbe6:	607a      	str	r2, [r7, #4]
 800bbe8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800bbea:	e071      	b.n	800bcd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	695b      	ldr	r3, [r3, #20]
 800bbf2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bbf6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bbfa:	d123      	bne.n	800bc44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	681a      	ldr	r2, [r3, #0]
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bc0a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800bc14:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	2200      	movs	r2, #0
 800bc1a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	2220      	movs	r2, #32
 800bc20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	2200      	movs	r2, #0
 800bc28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc30:	f043 0204 	orr.w	r2, r3, #4
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800bc40:	2301      	movs	r3, #1
 800bc42:	e067      	b.n	800bd14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc4a:	d041      	beq.n	800bcd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bc4c:	f7fe fc3c 	bl	800a4c8 <HAL_GetTick>
 800bc50:	4602      	mov	r2, r0
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	1ad3      	subs	r3, r2, r3
 800bc56:	687a      	ldr	r2, [r7, #4]
 800bc58:	429a      	cmp	r2, r3
 800bc5a:	d302      	bcc.n	800bc62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d136      	bne.n	800bcd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800bc62:	68bb      	ldr	r3, [r7, #8]
 800bc64:	0c1b      	lsrs	r3, r3, #16
 800bc66:	b2db      	uxtb	r3, r3
 800bc68:	2b01      	cmp	r3, #1
 800bc6a:	d10c      	bne.n	800bc86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	695b      	ldr	r3, [r3, #20]
 800bc72:	43da      	mvns	r2, r3
 800bc74:	68bb      	ldr	r3, [r7, #8]
 800bc76:	4013      	ands	r3, r2
 800bc78:	b29b      	uxth	r3, r3
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	bf14      	ite	ne
 800bc7e:	2301      	movne	r3, #1
 800bc80:	2300      	moveq	r3, #0
 800bc82:	b2db      	uxtb	r3, r3
 800bc84:	e00b      	b.n	800bc9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	699b      	ldr	r3, [r3, #24]
 800bc8c:	43da      	mvns	r2, r3
 800bc8e:	68bb      	ldr	r3, [r7, #8]
 800bc90:	4013      	ands	r3, r2
 800bc92:	b29b      	uxth	r3, r3
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	bf14      	ite	ne
 800bc98:	2301      	movne	r3, #1
 800bc9a:	2300      	moveq	r3, #0
 800bc9c:	b2db      	uxtb	r3, r3
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d016      	beq.n	800bcd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	2200      	movs	r2, #0
 800bca6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	2220      	movs	r2, #32
 800bcac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bcbc:	f043 0220 	orr.w	r2, r3, #32
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800bccc:	2301      	movs	r3, #1
 800bcce:	e021      	b.n	800bd14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800bcd0:	68bb      	ldr	r3, [r7, #8]
 800bcd2:	0c1b      	lsrs	r3, r3, #16
 800bcd4:	b2db      	uxtb	r3, r3
 800bcd6:	2b01      	cmp	r3, #1
 800bcd8:	d10c      	bne.n	800bcf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	695b      	ldr	r3, [r3, #20]
 800bce0:	43da      	mvns	r2, r3
 800bce2:	68bb      	ldr	r3, [r7, #8]
 800bce4:	4013      	ands	r3, r2
 800bce6:	b29b      	uxth	r3, r3
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	bf14      	ite	ne
 800bcec:	2301      	movne	r3, #1
 800bcee:	2300      	moveq	r3, #0
 800bcf0:	b2db      	uxtb	r3, r3
 800bcf2:	e00b      	b.n	800bd0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	699b      	ldr	r3, [r3, #24]
 800bcfa:	43da      	mvns	r2, r3
 800bcfc:	68bb      	ldr	r3, [r7, #8]
 800bcfe:	4013      	ands	r3, r2
 800bd00:	b29b      	uxth	r3, r3
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	bf14      	ite	ne
 800bd06:	2301      	movne	r3, #1
 800bd08:	2300      	moveq	r3, #0
 800bd0a:	b2db      	uxtb	r3, r3
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	f47f af6d 	bne.w	800bbec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800bd12:	2300      	movs	r3, #0
}
 800bd14:	4618      	mov	r0, r3
 800bd16:	3710      	adds	r7, #16
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	bd80      	pop	{r7, pc}

0800bd1c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b084      	sub	sp, #16
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	60f8      	str	r0, [r7, #12]
 800bd24:	60b9      	str	r1, [r7, #8]
 800bd26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bd28:	e034      	b.n	800bd94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800bd2a:	68f8      	ldr	r0, [r7, #12]
 800bd2c:	f000 f886 	bl	800be3c <I2C_IsAcknowledgeFailed>
 800bd30:	4603      	mov	r3, r0
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d001      	beq.n	800bd3a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800bd36:	2301      	movs	r3, #1
 800bd38:	e034      	b.n	800bda4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bd3a:	68bb      	ldr	r3, [r7, #8]
 800bd3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd40:	d028      	beq.n	800bd94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bd42:	f7fe fbc1 	bl	800a4c8 <HAL_GetTick>
 800bd46:	4602      	mov	r2, r0
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	1ad3      	subs	r3, r2, r3
 800bd4c:	68ba      	ldr	r2, [r7, #8]
 800bd4e:	429a      	cmp	r2, r3
 800bd50:	d302      	bcc.n	800bd58 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800bd52:	68bb      	ldr	r3, [r7, #8]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d11d      	bne.n	800bd94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	695b      	ldr	r3, [r3, #20]
 800bd5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bd62:	2b80      	cmp	r3, #128	@ 0x80
 800bd64:	d016      	beq.n	800bd94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	2200      	movs	r2, #0
 800bd6a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	2220      	movs	r2, #32
 800bd70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	2200      	movs	r2, #0
 800bd78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd80:	f043 0220 	orr.w	r2, r3, #32
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800bd90:	2301      	movs	r3, #1
 800bd92:	e007      	b.n	800bda4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	695b      	ldr	r3, [r3, #20]
 800bd9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bd9e:	2b80      	cmp	r3, #128	@ 0x80
 800bda0:	d1c3      	bne.n	800bd2a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800bda2:	2300      	movs	r3, #0
}
 800bda4:	4618      	mov	r0, r3
 800bda6:	3710      	adds	r7, #16
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	bd80      	pop	{r7, pc}

0800bdac <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b084      	sub	sp, #16
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	60f8      	str	r0, [r7, #12]
 800bdb4:	60b9      	str	r1, [r7, #8]
 800bdb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800bdb8:	e034      	b.n	800be24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800bdba:	68f8      	ldr	r0, [r7, #12]
 800bdbc:	f000 f83e 	bl	800be3c <I2C_IsAcknowledgeFailed>
 800bdc0:	4603      	mov	r3, r0
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d001      	beq.n	800bdca <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800bdc6:	2301      	movs	r3, #1
 800bdc8:	e034      	b.n	800be34 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bdca:	68bb      	ldr	r3, [r7, #8]
 800bdcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdd0:	d028      	beq.n	800be24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bdd2:	f7fe fb79 	bl	800a4c8 <HAL_GetTick>
 800bdd6:	4602      	mov	r2, r0
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	1ad3      	subs	r3, r2, r3
 800bddc:	68ba      	ldr	r2, [r7, #8]
 800bdde:	429a      	cmp	r2, r3
 800bde0:	d302      	bcc.n	800bde8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800bde2:	68bb      	ldr	r3, [r7, #8]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d11d      	bne.n	800be24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	695b      	ldr	r3, [r3, #20]
 800bdee:	f003 0304 	and.w	r3, r3, #4
 800bdf2:	2b04      	cmp	r3, #4
 800bdf4:	d016      	beq.n	800be24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	2220      	movs	r2, #32
 800be00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	2200      	movs	r2, #0
 800be08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be10:	f043 0220 	orr.w	r2, r3, #32
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	2200      	movs	r2, #0
 800be1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800be20:	2301      	movs	r3, #1
 800be22:	e007      	b.n	800be34 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	695b      	ldr	r3, [r3, #20]
 800be2a:	f003 0304 	and.w	r3, r3, #4
 800be2e:	2b04      	cmp	r3, #4
 800be30:	d1c3      	bne.n	800bdba <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800be32:	2300      	movs	r3, #0
}
 800be34:	4618      	mov	r0, r3
 800be36:	3710      	adds	r7, #16
 800be38:	46bd      	mov	sp, r7
 800be3a:	bd80      	pop	{r7, pc}

0800be3c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800be3c:	b480      	push	{r7}
 800be3e:	b083      	sub	sp, #12
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	695b      	ldr	r3, [r3, #20]
 800be4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800be4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800be52:	d11b      	bne.n	800be8c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800be5c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	2200      	movs	r2, #0
 800be62:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2220      	movs	r2, #32
 800be68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	2200      	movs	r2, #0
 800be70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be78:	f043 0204 	orr.w	r2, r3, #4
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	2200      	movs	r2, #0
 800be84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800be88:	2301      	movs	r3, #1
 800be8a:	e000      	b.n	800be8e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800be8c:	2300      	movs	r3, #0
}
 800be8e:	4618      	mov	r0, r3
 800be90:	370c      	adds	r7, #12
 800be92:	46bd      	mov	sp, r7
 800be94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be98:	4770      	bx	lr

0800be9a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800be9a:	b580      	push	{r7, lr}
 800be9c:	b086      	sub	sp, #24
 800be9e:	af02      	add	r7, sp, #8
 800bea0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d101      	bne.n	800beac <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800bea8:	2301      	movs	r3, #1
 800beaa:	e101      	b.n	800c0b0 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800beb8:	b2db      	uxtb	r3, r3
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d106      	bne.n	800becc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	2200      	movs	r2, #0
 800bec2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800bec6:	6878      	ldr	r0, [r7, #4]
 800bec8:	f006 fc14 	bl	80126f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	2203      	movs	r2, #3
 800bed0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800bed4:	68bb      	ldr	r3, [r7, #8]
 800bed6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800beda:	d102      	bne.n	800bee2 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	2200      	movs	r2, #0
 800bee0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	4618      	mov	r0, r3
 800bee8:	f003 fb6f 	bl	800f5ca <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	6818      	ldr	r0, [r3, #0]
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	7c1a      	ldrb	r2, [r3, #16]
 800bef4:	f88d 2000 	strb.w	r2, [sp]
 800bef8:	3304      	adds	r3, #4
 800befa:	cb0e      	ldmia	r3, {r1, r2, r3}
 800befc:	f003 fa4e 	bl	800f39c <USB_CoreInit>
 800bf00:	4603      	mov	r3, r0
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d005      	beq.n	800bf12 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	2202      	movs	r2, #2
 800bf0a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800bf0e:	2301      	movs	r3, #1
 800bf10:	e0ce      	b.n	800c0b0 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	2100      	movs	r1, #0
 800bf18:	4618      	mov	r0, r3
 800bf1a:	f003 fb67 	bl	800f5ec <USB_SetCurrentMode>
 800bf1e:	4603      	mov	r3, r0
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d005      	beq.n	800bf30 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2202      	movs	r2, #2
 800bf28:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800bf2c:	2301      	movs	r3, #1
 800bf2e:	e0bf      	b.n	800c0b0 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bf30:	2300      	movs	r3, #0
 800bf32:	73fb      	strb	r3, [r7, #15]
 800bf34:	e04a      	b.n	800bfcc <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800bf36:	7bfa      	ldrb	r2, [r7, #15]
 800bf38:	6879      	ldr	r1, [r7, #4]
 800bf3a:	4613      	mov	r3, r2
 800bf3c:	00db      	lsls	r3, r3, #3
 800bf3e:	4413      	add	r3, r2
 800bf40:	009b      	lsls	r3, r3, #2
 800bf42:	440b      	add	r3, r1
 800bf44:	3315      	adds	r3, #21
 800bf46:	2201      	movs	r2, #1
 800bf48:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800bf4a:	7bfa      	ldrb	r2, [r7, #15]
 800bf4c:	6879      	ldr	r1, [r7, #4]
 800bf4e:	4613      	mov	r3, r2
 800bf50:	00db      	lsls	r3, r3, #3
 800bf52:	4413      	add	r3, r2
 800bf54:	009b      	lsls	r3, r3, #2
 800bf56:	440b      	add	r3, r1
 800bf58:	3314      	adds	r3, #20
 800bf5a:	7bfa      	ldrb	r2, [r7, #15]
 800bf5c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800bf5e:	7bfa      	ldrb	r2, [r7, #15]
 800bf60:	7bfb      	ldrb	r3, [r7, #15]
 800bf62:	b298      	uxth	r0, r3
 800bf64:	6879      	ldr	r1, [r7, #4]
 800bf66:	4613      	mov	r3, r2
 800bf68:	00db      	lsls	r3, r3, #3
 800bf6a:	4413      	add	r3, r2
 800bf6c:	009b      	lsls	r3, r3, #2
 800bf6e:	440b      	add	r3, r1
 800bf70:	332e      	adds	r3, #46	@ 0x2e
 800bf72:	4602      	mov	r2, r0
 800bf74:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800bf76:	7bfa      	ldrb	r2, [r7, #15]
 800bf78:	6879      	ldr	r1, [r7, #4]
 800bf7a:	4613      	mov	r3, r2
 800bf7c:	00db      	lsls	r3, r3, #3
 800bf7e:	4413      	add	r3, r2
 800bf80:	009b      	lsls	r3, r3, #2
 800bf82:	440b      	add	r3, r1
 800bf84:	3318      	adds	r3, #24
 800bf86:	2200      	movs	r2, #0
 800bf88:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800bf8a:	7bfa      	ldrb	r2, [r7, #15]
 800bf8c:	6879      	ldr	r1, [r7, #4]
 800bf8e:	4613      	mov	r3, r2
 800bf90:	00db      	lsls	r3, r3, #3
 800bf92:	4413      	add	r3, r2
 800bf94:	009b      	lsls	r3, r3, #2
 800bf96:	440b      	add	r3, r1
 800bf98:	331c      	adds	r3, #28
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800bf9e:	7bfa      	ldrb	r2, [r7, #15]
 800bfa0:	6879      	ldr	r1, [r7, #4]
 800bfa2:	4613      	mov	r3, r2
 800bfa4:	00db      	lsls	r3, r3, #3
 800bfa6:	4413      	add	r3, r2
 800bfa8:	009b      	lsls	r3, r3, #2
 800bfaa:	440b      	add	r3, r1
 800bfac:	3320      	adds	r3, #32
 800bfae:	2200      	movs	r2, #0
 800bfb0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800bfb2:	7bfa      	ldrb	r2, [r7, #15]
 800bfb4:	6879      	ldr	r1, [r7, #4]
 800bfb6:	4613      	mov	r3, r2
 800bfb8:	00db      	lsls	r3, r3, #3
 800bfba:	4413      	add	r3, r2
 800bfbc:	009b      	lsls	r3, r3, #2
 800bfbe:	440b      	add	r3, r1
 800bfc0:	3324      	adds	r3, #36	@ 0x24
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bfc6:	7bfb      	ldrb	r3, [r7, #15]
 800bfc8:	3301      	adds	r3, #1
 800bfca:	73fb      	strb	r3, [r7, #15]
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	791b      	ldrb	r3, [r3, #4]
 800bfd0:	7bfa      	ldrb	r2, [r7, #15]
 800bfd2:	429a      	cmp	r2, r3
 800bfd4:	d3af      	bcc.n	800bf36 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	73fb      	strb	r3, [r7, #15]
 800bfda:	e044      	b.n	800c066 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800bfdc:	7bfa      	ldrb	r2, [r7, #15]
 800bfde:	6879      	ldr	r1, [r7, #4]
 800bfe0:	4613      	mov	r3, r2
 800bfe2:	00db      	lsls	r3, r3, #3
 800bfe4:	4413      	add	r3, r2
 800bfe6:	009b      	lsls	r3, r3, #2
 800bfe8:	440b      	add	r3, r1
 800bfea:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800bfee:	2200      	movs	r2, #0
 800bff0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800bff2:	7bfa      	ldrb	r2, [r7, #15]
 800bff4:	6879      	ldr	r1, [r7, #4]
 800bff6:	4613      	mov	r3, r2
 800bff8:	00db      	lsls	r3, r3, #3
 800bffa:	4413      	add	r3, r2
 800bffc:	009b      	lsls	r3, r3, #2
 800bffe:	440b      	add	r3, r1
 800c000:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800c004:	7bfa      	ldrb	r2, [r7, #15]
 800c006:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800c008:	7bfa      	ldrb	r2, [r7, #15]
 800c00a:	6879      	ldr	r1, [r7, #4]
 800c00c:	4613      	mov	r3, r2
 800c00e:	00db      	lsls	r3, r3, #3
 800c010:	4413      	add	r3, r2
 800c012:	009b      	lsls	r3, r3, #2
 800c014:	440b      	add	r3, r1
 800c016:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800c01a:	2200      	movs	r2, #0
 800c01c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800c01e:	7bfa      	ldrb	r2, [r7, #15]
 800c020:	6879      	ldr	r1, [r7, #4]
 800c022:	4613      	mov	r3, r2
 800c024:	00db      	lsls	r3, r3, #3
 800c026:	4413      	add	r3, r2
 800c028:	009b      	lsls	r3, r3, #2
 800c02a:	440b      	add	r3, r1
 800c02c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800c030:	2200      	movs	r2, #0
 800c032:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800c034:	7bfa      	ldrb	r2, [r7, #15]
 800c036:	6879      	ldr	r1, [r7, #4]
 800c038:	4613      	mov	r3, r2
 800c03a:	00db      	lsls	r3, r3, #3
 800c03c:	4413      	add	r3, r2
 800c03e:	009b      	lsls	r3, r3, #2
 800c040:	440b      	add	r3, r1
 800c042:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c046:	2200      	movs	r2, #0
 800c048:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800c04a:	7bfa      	ldrb	r2, [r7, #15]
 800c04c:	6879      	ldr	r1, [r7, #4]
 800c04e:	4613      	mov	r3, r2
 800c050:	00db      	lsls	r3, r3, #3
 800c052:	4413      	add	r3, r2
 800c054:	009b      	lsls	r3, r3, #2
 800c056:	440b      	add	r3, r1
 800c058:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800c05c:	2200      	movs	r2, #0
 800c05e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c060:	7bfb      	ldrb	r3, [r7, #15]
 800c062:	3301      	adds	r3, #1
 800c064:	73fb      	strb	r3, [r7, #15]
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	791b      	ldrb	r3, [r3, #4]
 800c06a:	7bfa      	ldrb	r2, [r7, #15]
 800c06c:	429a      	cmp	r2, r3
 800c06e:	d3b5      	bcc.n	800bfdc <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	6818      	ldr	r0, [r3, #0]
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	7c1a      	ldrb	r2, [r3, #16]
 800c078:	f88d 2000 	strb.w	r2, [sp]
 800c07c:	3304      	adds	r3, #4
 800c07e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c080:	f003 fb00 	bl	800f684 <USB_DevInit>
 800c084:	4603      	mov	r3, r0
 800c086:	2b00      	cmp	r3, #0
 800c088:	d005      	beq.n	800c096 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	2202      	movs	r2, #2
 800c08e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800c092:	2301      	movs	r3, #1
 800c094:	e00c      	b.n	800c0b0 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	2200      	movs	r2, #0
 800c09a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	2201      	movs	r2, #1
 800c0a0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	f004 fb4a 	bl	8010742 <USB_DevDisconnect>

  return HAL_OK;
 800c0ae:	2300      	movs	r3, #0
}
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	3710      	adds	r7, #16
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	bd80      	pop	{r7, pc}

0800c0b8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b084      	sub	sp, #16
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c0cc:	2b01      	cmp	r3, #1
 800c0ce:	d101      	bne.n	800c0d4 <HAL_PCD_Start+0x1c>
 800c0d0:	2302      	movs	r3, #2
 800c0d2:	e022      	b.n	800c11a <HAL_PCD_Start+0x62>
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	2201      	movs	r2, #1
 800c0d8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	68db      	ldr	r3, [r3, #12]
 800c0e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d009      	beq.n	800c0fc <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800c0ec:	2b01      	cmp	r3, #1
 800c0ee:	d105      	bne.n	800c0fc <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c0f4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	4618      	mov	r0, r3
 800c102:	f003 fa51 	bl	800f5a8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	4618      	mov	r0, r3
 800c10c:	f004 faf8 	bl	8010700 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	2200      	movs	r2, #0
 800c114:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800c118:	2300      	movs	r3, #0
}
 800c11a:	4618      	mov	r0, r3
 800c11c:	3710      	adds	r7, #16
 800c11e:	46bd      	mov	sp, r7
 800c120:	bd80      	pop	{r7, pc}

0800c122 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800c122:	b590      	push	{r4, r7, lr}
 800c124:	b08d      	sub	sp, #52	@ 0x34
 800c126:	af00      	add	r7, sp, #0
 800c128:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c130:	6a3b      	ldr	r3, [r7, #32]
 800c132:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	4618      	mov	r0, r3
 800c13a:	f004 fbb6 	bl	80108aa <USB_GetMode>
 800c13e:	4603      	mov	r3, r0
 800c140:	2b00      	cmp	r3, #0
 800c142:	f040 848c 	bne.w	800ca5e <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	4618      	mov	r0, r3
 800c14c:	f004 fb1a 	bl	8010784 <USB_ReadInterrupts>
 800c150:	4603      	mov	r3, r0
 800c152:	2b00      	cmp	r3, #0
 800c154:	f000 8482 	beq.w	800ca5c <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800c158:	69fb      	ldr	r3, [r7, #28]
 800c15a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c15e:	689b      	ldr	r3, [r3, #8]
 800c160:	0a1b      	lsrs	r3, r3, #8
 800c162:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	4618      	mov	r0, r3
 800c172:	f004 fb07 	bl	8010784 <USB_ReadInterrupts>
 800c176:	4603      	mov	r3, r0
 800c178:	f003 0302 	and.w	r3, r3, #2
 800c17c:	2b02      	cmp	r3, #2
 800c17e:	d107      	bne.n	800c190 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	695a      	ldr	r2, [r3, #20]
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	f002 0202 	and.w	r2, r2, #2
 800c18e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	4618      	mov	r0, r3
 800c196:	f004 faf5 	bl	8010784 <USB_ReadInterrupts>
 800c19a:	4603      	mov	r3, r0
 800c19c:	f003 0310 	and.w	r3, r3, #16
 800c1a0:	2b10      	cmp	r3, #16
 800c1a2:	d161      	bne.n	800c268 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	699a      	ldr	r2, [r3, #24]
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	f022 0210 	bic.w	r2, r2, #16
 800c1b2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800c1b4:	6a3b      	ldr	r3, [r7, #32]
 800c1b6:	6a1b      	ldr	r3, [r3, #32]
 800c1b8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800c1ba:	69bb      	ldr	r3, [r7, #24]
 800c1bc:	f003 020f 	and.w	r2, r3, #15
 800c1c0:	4613      	mov	r3, r2
 800c1c2:	00db      	lsls	r3, r3, #3
 800c1c4:	4413      	add	r3, r2
 800c1c6:	009b      	lsls	r3, r3, #2
 800c1c8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c1cc:	687a      	ldr	r2, [r7, #4]
 800c1ce:	4413      	add	r3, r2
 800c1d0:	3304      	adds	r3, #4
 800c1d2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800c1d4:	69bb      	ldr	r3, [r7, #24]
 800c1d6:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800c1da:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c1de:	d124      	bne.n	800c22a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800c1e0:	69ba      	ldr	r2, [r7, #24]
 800c1e2:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800c1e6:	4013      	ands	r3, r2
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d035      	beq.n	800c258 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800c1ec:	697b      	ldr	r3, [r7, #20]
 800c1ee:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800c1f0:	69bb      	ldr	r3, [r7, #24]
 800c1f2:	091b      	lsrs	r3, r3, #4
 800c1f4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800c1f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c1fa:	b29b      	uxth	r3, r3
 800c1fc:	461a      	mov	r2, r3
 800c1fe:	6a38      	ldr	r0, [r7, #32]
 800c200:	f004 f92c 	bl	801045c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c204:	697b      	ldr	r3, [r7, #20]
 800c206:	68da      	ldr	r2, [r3, #12]
 800c208:	69bb      	ldr	r3, [r7, #24]
 800c20a:	091b      	lsrs	r3, r3, #4
 800c20c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c210:	441a      	add	r2, r3
 800c212:	697b      	ldr	r3, [r7, #20]
 800c214:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c216:	697b      	ldr	r3, [r7, #20]
 800c218:	695a      	ldr	r2, [r3, #20]
 800c21a:	69bb      	ldr	r3, [r7, #24]
 800c21c:	091b      	lsrs	r3, r3, #4
 800c21e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c222:	441a      	add	r2, r3
 800c224:	697b      	ldr	r3, [r7, #20]
 800c226:	615a      	str	r2, [r3, #20]
 800c228:	e016      	b.n	800c258 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800c22a:	69bb      	ldr	r3, [r7, #24]
 800c22c:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800c230:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800c234:	d110      	bne.n	800c258 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c23c:	2208      	movs	r2, #8
 800c23e:	4619      	mov	r1, r3
 800c240:	6a38      	ldr	r0, [r7, #32]
 800c242:	f004 f90b 	bl	801045c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c246:	697b      	ldr	r3, [r7, #20]
 800c248:	695a      	ldr	r2, [r3, #20]
 800c24a:	69bb      	ldr	r3, [r7, #24]
 800c24c:	091b      	lsrs	r3, r3, #4
 800c24e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c252:	441a      	add	r2, r3
 800c254:	697b      	ldr	r3, [r7, #20]
 800c256:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	699a      	ldr	r2, [r3, #24]
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	f042 0210 	orr.w	r2, r2, #16
 800c266:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	4618      	mov	r0, r3
 800c26e:	f004 fa89 	bl	8010784 <USB_ReadInterrupts>
 800c272:	4603      	mov	r3, r0
 800c274:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800c278:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800c27c:	f040 80a7 	bne.w	800c3ce <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800c280:	2300      	movs	r3, #0
 800c282:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	4618      	mov	r0, r3
 800c28a:	f004 fa8e 	bl	80107aa <USB_ReadDevAllOutEpInterrupt>
 800c28e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800c290:	e099      	b.n	800c3c6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800c292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c294:	f003 0301 	and.w	r3, r3, #1
 800c298:	2b00      	cmp	r3, #0
 800c29a:	f000 808e 	beq.w	800c3ba <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c2a4:	b2d2      	uxtb	r2, r2
 800c2a6:	4611      	mov	r1, r2
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	f004 fab2 	bl	8010812 <USB_ReadDevOutEPInterrupt>
 800c2ae:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800c2b0:	693b      	ldr	r3, [r7, #16]
 800c2b2:	f003 0301 	and.w	r3, r3, #1
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d00c      	beq.n	800c2d4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800c2ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2bc:	015a      	lsls	r2, r3, #5
 800c2be:	69fb      	ldr	r3, [r7, #28]
 800c2c0:	4413      	add	r3, r2
 800c2c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c2c6:	461a      	mov	r2, r3
 800c2c8:	2301      	movs	r3, #1
 800c2ca:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800c2cc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c2ce:	6878      	ldr	r0, [r7, #4]
 800c2d0:	f000 fe8c 	bl	800cfec <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800c2d4:	693b      	ldr	r3, [r7, #16]
 800c2d6:	f003 0308 	and.w	r3, r3, #8
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d00c      	beq.n	800c2f8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800c2de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2e0:	015a      	lsls	r2, r3, #5
 800c2e2:	69fb      	ldr	r3, [r7, #28]
 800c2e4:	4413      	add	r3, r2
 800c2e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c2ea:	461a      	mov	r2, r3
 800c2ec:	2308      	movs	r3, #8
 800c2ee:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800c2f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c2f2:	6878      	ldr	r0, [r7, #4]
 800c2f4:	f000 ff62 	bl	800d1bc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800c2f8:	693b      	ldr	r3, [r7, #16]
 800c2fa:	f003 0310 	and.w	r3, r3, #16
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d008      	beq.n	800c314 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800c302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c304:	015a      	lsls	r2, r3, #5
 800c306:	69fb      	ldr	r3, [r7, #28]
 800c308:	4413      	add	r3, r2
 800c30a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c30e:	461a      	mov	r2, r3
 800c310:	2310      	movs	r3, #16
 800c312:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800c314:	693b      	ldr	r3, [r7, #16]
 800c316:	f003 0302 	and.w	r3, r3, #2
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d030      	beq.n	800c380 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800c31e:	6a3b      	ldr	r3, [r7, #32]
 800c320:	695b      	ldr	r3, [r3, #20]
 800c322:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c326:	2b80      	cmp	r3, #128	@ 0x80
 800c328:	d109      	bne.n	800c33e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800c32a:	69fb      	ldr	r3, [r7, #28]
 800c32c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c330:	685b      	ldr	r3, [r3, #4]
 800c332:	69fa      	ldr	r2, [r7, #28]
 800c334:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c338:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800c33c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800c33e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c340:	4613      	mov	r3, r2
 800c342:	00db      	lsls	r3, r3, #3
 800c344:	4413      	add	r3, r2
 800c346:	009b      	lsls	r3, r3, #2
 800c348:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c34c:	687a      	ldr	r2, [r7, #4]
 800c34e:	4413      	add	r3, r2
 800c350:	3304      	adds	r3, #4
 800c352:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800c354:	697b      	ldr	r3, [r7, #20]
 800c356:	78db      	ldrb	r3, [r3, #3]
 800c358:	2b01      	cmp	r3, #1
 800c35a:	d108      	bne.n	800c36e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800c35c:	697b      	ldr	r3, [r7, #20]
 800c35e:	2200      	movs	r2, #0
 800c360:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800c362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c364:	b2db      	uxtb	r3, r3
 800c366:	4619      	mov	r1, r3
 800c368:	6878      	ldr	r0, [r7, #4]
 800c36a:	f006 fabf 	bl	80128ec <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800c36e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c370:	015a      	lsls	r2, r3, #5
 800c372:	69fb      	ldr	r3, [r7, #28]
 800c374:	4413      	add	r3, r2
 800c376:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c37a:	461a      	mov	r2, r3
 800c37c:	2302      	movs	r3, #2
 800c37e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800c380:	693b      	ldr	r3, [r7, #16]
 800c382:	f003 0320 	and.w	r3, r3, #32
 800c386:	2b00      	cmp	r3, #0
 800c388:	d008      	beq.n	800c39c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c38a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c38c:	015a      	lsls	r2, r3, #5
 800c38e:	69fb      	ldr	r3, [r7, #28]
 800c390:	4413      	add	r3, r2
 800c392:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c396:	461a      	mov	r2, r3
 800c398:	2320      	movs	r3, #32
 800c39a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800c39c:	693b      	ldr	r3, [r7, #16]
 800c39e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d009      	beq.n	800c3ba <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800c3a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3a8:	015a      	lsls	r2, r3, #5
 800c3aa:	69fb      	ldr	r3, [r7, #28]
 800c3ac:	4413      	add	r3, r2
 800c3ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c3b2:	461a      	mov	r2, r3
 800c3b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c3b8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800c3ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3bc:	3301      	adds	r3, #1
 800c3be:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800c3c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3c2:	085b      	lsrs	r3, r3, #1
 800c3c4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800c3c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	f47f af62 	bne.w	800c292 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	f004 f9d6 	bl	8010784 <USB_ReadInterrupts>
 800c3d8:	4603      	mov	r3, r0
 800c3da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c3de:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c3e2:	f040 80db 	bne.w	800c59c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	f004 f9f7 	bl	80107de <USB_ReadDevAllInEpInterrupt>
 800c3f0:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800c3f6:	e0cd      	b.n	800c594 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800c3f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3fa:	f003 0301 	and.w	r3, r3, #1
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	f000 80c2 	beq.w	800c588 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c40a:	b2d2      	uxtb	r2, r2
 800c40c:	4611      	mov	r1, r2
 800c40e:	4618      	mov	r0, r3
 800c410:	f004 fa1d 	bl	801084e <USB_ReadDevInEPInterrupt>
 800c414:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800c416:	693b      	ldr	r3, [r7, #16]
 800c418:	f003 0301 	and.w	r3, r3, #1
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d057      	beq.n	800c4d0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800c420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c422:	f003 030f 	and.w	r3, r3, #15
 800c426:	2201      	movs	r2, #1
 800c428:	fa02 f303 	lsl.w	r3, r2, r3
 800c42c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800c42e:	69fb      	ldr	r3, [r7, #28]
 800c430:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c434:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	43db      	mvns	r3, r3
 800c43a:	69f9      	ldr	r1, [r7, #28]
 800c43c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c440:	4013      	ands	r3, r2
 800c442:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800c444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c446:	015a      	lsls	r2, r3, #5
 800c448:	69fb      	ldr	r3, [r7, #28]
 800c44a:	4413      	add	r3, r2
 800c44c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c450:	461a      	mov	r2, r3
 800c452:	2301      	movs	r3, #1
 800c454:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	799b      	ldrb	r3, [r3, #6]
 800c45a:	2b01      	cmp	r3, #1
 800c45c:	d132      	bne.n	800c4c4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800c45e:	6879      	ldr	r1, [r7, #4]
 800c460:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c462:	4613      	mov	r3, r2
 800c464:	00db      	lsls	r3, r3, #3
 800c466:	4413      	add	r3, r2
 800c468:	009b      	lsls	r3, r3, #2
 800c46a:	440b      	add	r3, r1
 800c46c:	3320      	adds	r3, #32
 800c46e:	6819      	ldr	r1, [r3, #0]
 800c470:	6878      	ldr	r0, [r7, #4]
 800c472:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c474:	4613      	mov	r3, r2
 800c476:	00db      	lsls	r3, r3, #3
 800c478:	4413      	add	r3, r2
 800c47a:	009b      	lsls	r3, r3, #2
 800c47c:	4403      	add	r3, r0
 800c47e:	331c      	adds	r3, #28
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	4419      	add	r1, r3
 800c484:	6878      	ldr	r0, [r7, #4]
 800c486:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c488:	4613      	mov	r3, r2
 800c48a:	00db      	lsls	r3, r3, #3
 800c48c:	4413      	add	r3, r2
 800c48e:	009b      	lsls	r3, r3, #2
 800c490:	4403      	add	r3, r0
 800c492:	3320      	adds	r3, #32
 800c494:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800c496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d113      	bne.n	800c4c4 <HAL_PCD_IRQHandler+0x3a2>
 800c49c:	6879      	ldr	r1, [r7, #4]
 800c49e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c4a0:	4613      	mov	r3, r2
 800c4a2:	00db      	lsls	r3, r3, #3
 800c4a4:	4413      	add	r3, r2
 800c4a6:	009b      	lsls	r3, r3, #2
 800c4a8:	440b      	add	r3, r1
 800c4aa:	3324      	adds	r3, #36	@ 0x24
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d108      	bne.n	800c4c4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	6818      	ldr	r0, [r3, #0]
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c4bc:	461a      	mov	r2, r3
 800c4be:	2101      	movs	r1, #1
 800c4c0:	f004 fa24 	bl	801090c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800c4c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4c6:	b2db      	uxtb	r3, r3
 800c4c8:	4619      	mov	r1, r3
 800c4ca:	6878      	ldr	r0, [r7, #4]
 800c4cc:	f006 f993 	bl	80127f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800c4d0:	693b      	ldr	r3, [r7, #16]
 800c4d2:	f003 0308 	and.w	r3, r3, #8
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d008      	beq.n	800c4ec <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800c4da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4dc:	015a      	lsls	r2, r3, #5
 800c4de:	69fb      	ldr	r3, [r7, #28]
 800c4e0:	4413      	add	r3, r2
 800c4e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c4e6:	461a      	mov	r2, r3
 800c4e8:	2308      	movs	r3, #8
 800c4ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800c4ec:	693b      	ldr	r3, [r7, #16]
 800c4ee:	f003 0310 	and.w	r3, r3, #16
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d008      	beq.n	800c508 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800c4f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4f8:	015a      	lsls	r2, r3, #5
 800c4fa:	69fb      	ldr	r3, [r7, #28]
 800c4fc:	4413      	add	r3, r2
 800c4fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c502:	461a      	mov	r2, r3
 800c504:	2310      	movs	r3, #16
 800c506:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800c508:	693b      	ldr	r3, [r7, #16]
 800c50a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d008      	beq.n	800c524 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800c512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c514:	015a      	lsls	r2, r3, #5
 800c516:	69fb      	ldr	r3, [r7, #28]
 800c518:	4413      	add	r3, r2
 800c51a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c51e:	461a      	mov	r2, r3
 800c520:	2340      	movs	r3, #64	@ 0x40
 800c522:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800c524:	693b      	ldr	r3, [r7, #16]
 800c526:	f003 0302 	and.w	r3, r3, #2
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d023      	beq.n	800c576 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800c52e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c530:	6a38      	ldr	r0, [r7, #32]
 800c532:	f003 fa0b 	bl	800f94c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800c536:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c538:	4613      	mov	r3, r2
 800c53a:	00db      	lsls	r3, r3, #3
 800c53c:	4413      	add	r3, r2
 800c53e:	009b      	lsls	r3, r3, #2
 800c540:	3310      	adds	r3, #16
 800c542:	687a      	ldr	r2, [r7, #4]
 800c544:	4413      	add	r3, r2
 800c546:	3304      	adds	r3, #4
 800c548:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800c54a:	697b      	ldr	r3, [r7, #20]
 800c54c:	78db      	ldrb	r3, [r3, #3]
 800c54e:	2b01      	cmp	r3, #1
 800c550:	d108      	bne.n	800c564 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800c552:	697b      	ldr	r3, [r7, #20]
 800c554:	2200      	movs	r2, #0
 800c556:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800c558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c55a:	b2db      	uxtb	r3, r3
 800c55c:	4619      	mov	r1, r3
 800c55e:	6878      	ldr	r0, [r7, #4]
 800c560:	f006 f9d6 	bl	8012910 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800c564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c566:	015a      	lsls	r2, r3, #5
 800c568:	69fb      	ldr	r3, [r7, #28]
 800c56a:	4413      	add	r3, r2
 800c56c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c570:	461a      	mov	r2, r3
 800c572:	2302      	movs	r3, #2
 800c574:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800c576:	693b      	ldr	r3, [r7, #16]
 800c578:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d003      	beq.n	800c588 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800c580:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c582:	6878      	ldr	r0, [r7, #4]
 800c584:	f000 fca5 	bl	800ced2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800c588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c58a:	3301      	adds	r3, #1
 800c58c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800c58e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c590:	085b      	lsrs	r3, r3, #1
 800c592:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800c594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c596:	2b00      	cmp	r3, #0
 800c598:	f47f af2e 	bne.w	800c3f8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	f004 f8ef 	bl	8010784 <USB_ReadInterrupts>
 800c5a6:	4603      	mov	r3, r0
 800c5a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c5ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c5b0:	d122      	bne.n	800c5f8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800c5b2:	69fb      	ldr	r3, [r7, #28]
 800c5b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c5b8:	685b      	ldr	r3, [r3, #4]
 800c5ba:	69fa      	ldr	r2, [r7, #28]
 800c5bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c5c0:	f023 0301 	bic.w	r3, r3, #1
 800c5c4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800c5cc:	2b01      	cmp	r3, #1
 800c5ce:	d108      	bne.n	800c5e2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800c5d8:	2100      	movs	r1, #0
 800c5da:	6878      	ldr	r0, [r7, #4]
 800c5dc:	f000 fe8c 	bl	800d2f8 <HAL_PCDEx_LPM_Callback>
 800c5e0:	e002      	b.n	800c5e8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800c5e2:	6878      	ldr	r0, [r7, #4]
 800c5e4:	f006 f974 	bl	80128d0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	695a      	ldr	r2, [r3, #20]
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800c5f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	f004 f8c1 	bl	8010784 <USB_ReadInterrupts>
 800c602:	4603      	mov	r3, r0
 800c604:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c608:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c60c:	d112      	bne.n	800c634 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800c60e:	69fb      	ldr	r3, [r7, #28]
 800c610:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c614:	689b      	ldr	r3, [r3, #8]
 800c616:	f003 0301 	and.w	r3, r3, #1
 800c61a:	2b01      	cmp	r3, #1
 800c61c:	d102      	bne.n	800c624 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800c61e:	6878      	ldr	r0, [r7, #4]
 800c620:	f006 f930 	bl	8012884 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	695a      	ldr	r2, [r3, #20]
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800c632:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	4618      	mov	r0, r3
 800c63a:	f004 f8a3 	bl	8010784 <USB_ReadInterrupts>
 800c63e:	4603      	mov	r3, r0
 800c640:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c644:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c648:	f040 80b7 	bne.w	800c7ba <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800c64c:	69fb      	ldr	r3, [r7, #28]
 800c64e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c652:	685b      	ldr	r3, [r3, #4]
 800c654:	69fa      	ldr	r2, [r7, #28]
 800c656:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c65a:	f023 0301 	bic.w	r3, r3, #1
 800c65e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	2110      	movs	r1, #16
 800c666:	4618      	mov	r0, r3
 800c668:	f003 f970 	bl	800f94c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c66c:	2300      	movs	r3, #0
 800c66e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c670:	e046      	b.n	800c700 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800c672:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c674:	015a      	lsls	r2, r3, #5
 800c676:	69fb      	ldr	r3, [r7, #28]
 800c678:	4413      	add	r3, r2
 800c67a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c67e:	461a      	mov	r2, r3
 800c680:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800c684:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c686:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c688:	015a      	lsls	r2, r3, #5
 800c68a:	69fb      	ldr	r3, [r7, #28]
 800c68c:	4413      	add	r3, r2
 800c68e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c696:	0151      	lsls	r1, r2, #5
 800c698:	69fa      	ldr	r2, [r7, #28]
 800c69a:	440a      	add	r2, r1
 800c69c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c6a0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c6a4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800c6a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6a8:	015a      	lsls	r2, r3, #5
 800c6aa:	69fb      	ldr	r3, [r7, #28]
 800c6ac:	4413      	add	r3, r2
 800c6ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c6b2:	461a      	mov	r2, r3
 800c6b4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800c6b8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c6ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6bc:	015a      	lsls	r2, r3, #5
 800c6be:	69fb      	ldr	r3, [r7, #28]
 800c6c0:	4413      	add	r3, r2
 800c6c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c6ca:	0151      	lsls	r1, r2, #5
 800c6cc:	69fa      	ldr	r2, [r7, #28]
 800c6ce:	440a      	add	r2, r1
 800c6d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c6d4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c6d8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c6da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6dc:	015a      	lsls	r2, r3, #5
 800c6de:	69fb      	ldr	r3, [r7, #28]
 800c6e0:	4413      	add	r3, r2
 800c6e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c6ea:	0151      	lsls	r1, r2, #5
 800c6ec:	69fa      	ldr	r2, [r7, #28]
 800c6ee:	440a      	add	r2, r1
 800c6f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c6f4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c6f8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c6fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6fc:	3301      	adds	r3, #1
 800c6fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	791b      	ldrb	r3, [r3, #4]
 800c704:	461a      	mov	r2, r3
 800c706:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c708:	4293      	cmp	r3, r2
 800c70a:	d3b2      	bcc.n	800c672 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800c70c:	69fb      	ldr	r3, [r7, #28]
 800c70e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c712:	69db      	ldr	r3, [r3, #28]
 800c714:	69fa      	ldr	r2, [r7, #28]
 800c716:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c71a:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800c71e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	7bdb      	ldrb	r3, [r3, #15]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d016      	beq.n	800c756 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800c728:	69fb      	ldr	r3, [r7, #28]
 800c72a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c72e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c732:	69fa      	ldr	r2, [r7, #28]
 800c734:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c738:	f043 030b 	orr.w	r3, r3, #11
 800c73c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800c740:	69fb      	ldr	r3, [r7, #28]
 800c742:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c746:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c748:	69fa      	ldr	r2, [r7, #28]
 800c74a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c74e:	f043 030b 	orr.w	r3, r3, #11
 800c752:	6453      	str	r3, [r2, #68]	@ 0x44
 800c754:	e015      	b.n	800c782 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800c756:	69fb      	ldr	r3, [r7, #28]
 800c758:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c75c:	695b      	ldr	r3, [r3, #20]
 800c75e:	69fa      	ldr	r2, [r7, #28]
 800c760:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c764:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800c768:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800c76c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800c76e:	69fb      	ldr	r3, [r7, #28]
 800c770:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c774:	691b      	ldr	r3, [r3, #16]
 800c776:	69fa      	ldr	r2, [r7, #28]
 800c778:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c77c:	f043 030b 	orr.w	r3, r3, #11
 800c780:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800c782:	69fb      	ldr	r3, [r7, #28]
 800c784:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	69fa      	ldr	r2, [r7, #28]
 800c78c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c790:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800c794:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	6818      	ldr	r0, [r3, #0]
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800c7a4:	461a      	mov	r2, r3
 800c7a6:	f004 f8b1 	bl	801090c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	695a      	ldr	r2, [r3, #20]
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800c7b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	4618      	mov	r0, r3
 800c7c0:	f003 ffe0 	bl	8010784 <USB_ReadInterrupts>
 800c7c4:	4603      	mov	r3, r0
 800c7c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c7ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c7ce:	d123      	bne.n	800c818 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	f004 f876 	bl	80108c6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	4618      	mov	r0, r3
 800c7e0:	f003 f92d 	bl	800fa3e <USB_GetDevSpeed>
 800c7e4:	4603      	mov	r3, r0
 800c7e6:	461a      	mov	r2, r3
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	681c      	ldr	r4, [r3, #0]
 800c7f0:	f001 f9f2 	bl	800dbd8 <HAL_RCC_GetHCLKFreq>
 800c7f4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800c7fa:	461a      	mov	r2, r3
 800c7fc:	4620      	mov	r0, r4
 800c7fe:	f002 fe31 	bl	800f464 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800c802:	6878      	ldr	r0, [r7, #4]
 800c804:	f006 f81f 	bl	8012846 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	695a      	ldr	r2, [r3, #20]
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800c816:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	4618      	mov	r0, r3
 800c81e:	f003 ffb1 	bl	8010784 <USB_ReadInterrupts>
 800c822:	4603      	mov	r3, r0
 800c824:	f003 0308 	and.w	r3, r3, #8
 800c828:	2b08      	cmp	r3, #8
 800c82a:	d10a      	bne.n	800c842 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800c82c:	6878      	ldr	r0, [r7, #4]
 800c82e:	f005 fffc 	bl	801282a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	695a      	ldr	r2, [r3, #20]
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	f002 0208 	and.w	r2, r2, #8
 800c840:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	4618      	mov	r0, r3
 800c848:	f003 ff9c 	bl	8010784 <USB_ReadInterrupts>
 800c84c:	4603      	mov	r3, r0
 800c84e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c852:	2b80      	cmp	r3, #128	@ 0x80
 800c854:	d123      	bne.n	800c89e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800c856:	6a3b      	ldr	r3, [r7, #32]
 800c858:	699b      	ldr	r3, [r3, #24]
 800c85a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c85e:	6a3b      	ldr	r3, [r7, #32]
 800c860:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c862:	2301      	movs	r3, #1
 800c864:	627b      	str	r3, [r7, #36]	@ 0x24
 800c866:	e014      	b.n	800c892 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800c868:	6879      	ldr	r1, [r7, #4]
 800c86a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c86c:	4613      	mov	r3, r2
 800c86e:	00db      	lsls	r3, r3, #3
 800c870:	4413      	add	r3, r2
 800c872:	009b      	lsls	r3, r3, #2
 800c874:	440b      	add	r3, r1
 800c876:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800c87a:	781b      	ldrb	r3, [r3, #0]
 800c87c:	2b01      	cmp	r3, #1
 800c87e:	d105      	bne.n	800c88c <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800c880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c882:	b2db      	uxtb	r3, r3
 800c884:	4619      	mov	r1, r3
 800c886:	6878      	ldr	r0, [r7, #4]
 800c888:	f000 faf2 	bl	800ce70 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c88c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c88e:	3301      	adds	r3, #1
 800c890:	627b      	str	r3, [r7, #36]	@ 0x24
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	791b      	ldrb	r3, [r3, #4]
 800c896:	461a      	mov	r2, r3
 800c898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c89a:	4293      	cmp	r3, r2
 800c89c:	d3e4      	bcc.n	800c868 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	f003 ff6e 	bl	8010784 <USB_ReadInterrupts>
 800c8a8:	4603      	mov	r3, r0
 800c8aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c8ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c8b2:	d13c      	bne.n	800c92e <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c8b4:	2301      	movs	r3, #1
 800c8b6:	627b      	str	r3, [r7, #36]	@ 0x24
 800c8b8:	e02b      	b.n	800c912 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800c8ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8bc:	015a      	lsls	r2, r3, #5
 800c8be:	69fb      	ldr	r3, [r7, #28]
 800c8c0:	4413      	add	r3, r2
 800c8c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800c8ca:	6879      	ldr	r1, [r7, #4]
 800c8cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c8ce:	4613      	mov	r3, r2
 800c8d0:	00db      	lsls	r3, r3, #3
 800c8d2:	4413      	add	r3, r2
 800c8d4:	009b      	lsls	r3, r3, #2
 800c8d6:	440b      	add	r3, r1
 800c8d8:	3318      	adds	r3, #24
 800c8da:	781b      	ldrb	r3, [r3, #0]
 800c8dc:	2b01      	cmp	r3, #1
 800c8de:	d115      	bne.n	800c90c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800c8e0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	da12      	bge.n	800c90c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800c8e6:	6879      	ldr	r1, [r7, #4]
 800c8e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c8ea:	4613      	mov	r3, r2
 800c8ec:	00db      	lsls	r3, r3, #3
 800c8ee:	4413      	add	r3, r2
 800c8f0:	009b      	lsls	r3, r3, #2
 800c8f2:	440b      	add	r3, r1
 800c8f4:	3317      	adds	r3, #23
 800c8f6:	2201      	movs	r2, #1
 800c8f8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800c8fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8fc:	b2db      	uxtb	r3, r3
 800c8fe:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c902:	b2db      	uxtb	r3, r3
 800c904:	4619      	mov	r1, r3
 800c906:	6878      	ldr	r0, [r7, #4]
 800c908:	f000 fab2 	bl	800ce70 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c90c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c90e:	3301      	adds	r3, #1
 800c910:	627b      	str	r3, [r7, #36]	@ 0x24
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	791b      	ldrb	r3, [r3, #4]
 800c916:	461a      	mov	r2, r3
 800c918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c91a:	4293      	cmp	r3, r2
 800c91c:	d3cd      	bcc.n	800c8ba <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	695a      	ldr	r2, [r3, #20]
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800c92c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	4618      	mov	r0, r3
 800c934:	f003 ff26 	bl	8010784 <USB_ReadInterrupts>
 800c938:	4603      	mov	r3, r0
 800c93a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c93e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c942:	d156      	bne.n	800c9f2 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c944:	2301      	movs	r3, #1
 800c946:	627b      	str	r3, [r7, #36]	@ 0x24
 800c948:	e045      	b.n	800c9d6 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800c94a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c94c:	015a      	lsls	r2, r3, #5
 800c94e:	69fb      	ldr	r3, [r7, #28]
 800c950:	4413      	add	r3, r2
 800c952:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800c95a:	6879      	ldr	r1, [r7, #4]
 800c95c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c95e:	4613      	mov	r3, r2
 800c960:	00db      	lsls	r3, r3, #3
 800c962:	4413      	add	r3, r2
 800c964:	009b      	lsls	r3, r3, #2
 800c966:	440b      	add	r3, r1
 800c968:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800c96c:	781b      	ldrb	r3, [r3, #0]
 800c96e:	2b01      	cmp	r3, #1
 800c970:	d12e      	bne.n	800c9d0 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800c972:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800c974:	2b00      	cmp	r3, #0
 800c976:	da2b      	bge.n	800c9d0 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 800c978:	69bb      	ldr	r3, [r7, #24]
 800c97a:	0c1a      	lsrs	r2, r3, #16
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800c982:	4053      	eors	r3, r2
 800c984:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d121      	bne.n	800c9d0 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800c98c:	6879      	ldr	r1, [r7, #4]
 800c98e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c990:	4613      	mov	r3, r2
 800c992:	00db      	lsls	r3, r3, #3
 800c994:	4413      	add	r3, r2
 800c996:	009b      	lsls	r3, r3, #2
 800c998:	440b      	add	r3, r1
 800c99a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800c99e:	2201      	movs	r2, #1
 800c9a0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800c9a2:	6a3b      	ldr	r3, [r7, #32]
 800c9a4:	699b      	ldr	r3, [r3, #24]
 800c9a6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800c9aa:	6a3b      	ldr	r3, [r7, #32]
 800c9ac:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800c9ae:	6a3b      	ldr	r3, [r7, #32]
 800c9b0:	695b      	ldr	r3, [r3, #20]
 800c9b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d10a      	bne.n	800c9d0 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800c9ba:	69fb      	ldr	r3, [r7, #28]
 800c9bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c9c0:	685b      	ldr	r3, [r3, #4]
 800c9c2:	69fa      	ldr	r2, [r7, #28]
 800c9c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c9c8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800c9cc:	6053      	str	r3, [r2, #4]
            break;
 800c9ce:	e008      	b.n	800c9e2 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c9d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9d2:	3301      	adds	r3, #1
 800c9d4:	627b      	str	r3, [r7, #36]	@ 0x24
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	791b      	ldrb	r3, [r3, #4]
 800c9da:	461a      	mov	r2, r3
 800c9dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9de:	4293      	cmp	r3, r2
 800c9e0:	d3b3      	bcc.n	800c94a <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	695a      	ldr	r2, [r3, #20]
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800c9f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	f003 fec4 	bl	8010784 <USB_ReadInterrupts>
 800c9fc:	4603      	mov	r3, r0
 800c9fe:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ca02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ca06:	d10a      	bne.n	800ca1e <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800ca08:	6878      	ldr	r0, [r7, #4]
 800ca0a:	f005 ff93 	bl	8012934 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	695a      	ldr	r2, [r3, #20]
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800ca1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	4618      	mov	r0, r3
 800ca24:	f003 feae 	bl	8010784 <USB_ReadInterrupts>
 800ca28:	4603      	mov	r3, r0
 800ca2a:	f003 0304 	and.w	r3, r3, #4
 800ca2e:	2b04      	cmp	r3, #4
 800ca30:	d115      	bne.n	800ca5e <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	685b      	ldr	r3, [r3, #4]
 800ca38:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800ca3a:	69bb      	ldr	r3, [r7, #24]
 800ca3c:	f003 0304 	and.w	r3, r3, #4
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d002      	beq.n	800ca4a <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800ca44:	6878      	ldr	r0, [r7, #4]
 800ca46:	f005 ff83 	bl	8012950 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	6859      	ldr	r1, [r3, #4]
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	69ba      	ldr	r2, [r7, #24]
 800ca56:	430a      	orrs	r2, r1
 800ca58:	605a      	str	r2, [r3, #4]
 800ca5a:	e000      	b.n	800ca5e <HAL_PCD_IRQHandler+0x93c>
      return;
 800ca5c:	bf00      	nop
    }
  }
}
 800ca5e:	3734      	adds	r7, #52	@ 0x34
 800ca60:	46bd      	mov	sp, r7
 800ca62:	bd90      	pop	{r4, r7, pc}

0800ca64 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b082      	sub	sp, #8
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	6078      	str	r0, [r7, #4]
 800ca6c:	460b      	mov	r3, r1
 800ca6e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800ca76:	2b01      	cmp	r3, #1
 800ca78:	d101      	bne.n	800ca7e <HAL_PCD_SetAddress+0x1a>
 800ca7a:	2302      	movs	r3, #2
 800ca7c:	e012      	b.n	800caa4 <HAL_PCD_SetAddress+0x40>
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	2201      	movs	r2, #1
 800ca82:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	78fa      	ldrb	r2, [r7, #3]
 800ca8a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	78fa      	ldrb	r2, [r7, #3]
 800ca92:	4611      	mov	r1, r2
 800ca94:	4618      	mov	r0, r3
 800ca96:	f003 fe0d 	bl	80106b4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	2200      	movs	r2, #0
 800ca9e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800caa2:	2300      	movs	r3, #0
}
 800caa4:	4618      	mov	r0, r3
 800caa6:	3708      	adds	r7, #8
 800caa8:	46bd      	mov	sp, r7
 800caaa:	bd80      	pop	{r7, pc}

0800caac <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800caac:	b580      	push	{r7, lr}
 800caae:	b084      	sub	sp, #16
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	6078      	str	r0, [r7, #4]
 800cab4:	4608      	mov	r0, r1
 800cab6:	4611      	mov	r1, r2
 800cab8:	461a      	mov	r2, r3
 800caba:	4603      	mov	r3, r0
 800cabc:	70fb      	strb	r3, [r7, #3]
 800cabe:	460b      	mov	r3, r1
 800cac0:	803b      	strh	r3, [r7, #0]
 800cac2:	4613      	mov	r3, r2
 800cac4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800cac6:	2300      	movs	r3, #0
 800cac8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800caca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	da0f      	bge.n	800caf2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cad2:	78fb      	ldrb	r3, [r7, #3]
 800cad4:	f003 020f 	and.w	r2, r3, #15
 800cad8:	4613      	mov	r3, r2
 800cada:	00db      	lsls	r3, r3, #3
 800cadc:	4413      	add	r3, r2
 800cade:	009b      	lsls	r3, r3, #2
 800cae0:	3310      	adds	r3, #16
 800cae2:	687a      	ldr	r2, [r7, #4]
 800cae4:	4413      	add	r3, r2
 800cae6:	3304      	adds	r3, #4
 800cae8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	2201      	movs	r2, #1
 800caee:	705a      	strb	r2, [r3, #1]
 800caf0:	e00f      	b.n	800cb12 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800caf2:	78fb      	ldrb	r3, [r7, #3]
 800caf4:	f003 020f 	and.w	r2, r3, #15
 800caf8:	4613      	mov	r3, r2
 800cafa:	00db      	lsls	r3, r3, #3
 800cafc:	4413      	add	r3, r2
 800cafe:	009b      	lsls	r3, r3, #2
 800cb00:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800cb04:	687a      	ldr	r2, [r7, #4]
 800cb06:	4413      	add	r3, r2
 800cb08:	3304      	adds	r3, #4
 800cb0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	2200      	movs	r2, #0
 800cb10:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800cb12:	78fb      	ldrb	r3, [r7, #3]
 800cb14:	f003 030f 	and.w	r3, r3, #15
 800cb18:	b2da      	uxtb	r2, r3
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800cb1e:	883b      	ldrh	r3, [r7, #0]
 800cb20:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	78ba      	ldrb	r2, [r7, #2]
 800cb2c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	785b      	ldrb	r3, [r3, #1]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d004      	beq.n	800cb40 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	781b      	ldrb	r3, [r3, #0]
 800cb3a:	461a      	mov	r2, r3
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800cb40:	78bb      	ldrb	r3, [r7, #2]
 800cb42:	2b02      	cmp	r3, #2
 800cb44:	d102      	bne.n	800cb4c <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	2200      	movs	r2, #0
 800cb4a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800cb52:	2b01      	cmp	r3, #1
 800cb54:	d101      	bne.n	800cb5a <HAL_PCD_EP_Open+0xae>
 800cb56:	2302      	movs	r3, #2
 800cb58:	e00e      	b.n	800cb78 <HAL_PCD_EP_Open+0xcc>
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	2201      	movs	r2, #1
 800cb5e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	68f9      	ldr	r1, [r7, #12]
 800cb68:	4618      	mov	r0, r3
 800cb6a:	f002 ff8d 	bl	800fa88 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	2200      	movs	r2, #0
 800cb72:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800cb76:	7afb      	ldrb	r3, [r7, #11]
}
 800cb78:	4618      	mov	r0, r3
 800cb7a:	3710      	adds	r7, #16
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	bd80      	pop	{r7, pc}

0800cb80 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b084      	sub	sp, #16
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
 800cb88:	460b      	mov	r3, r1
 800cb8a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800cb8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	da0f      	bge.n	800cbb4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cb94:	78fb      	ldrb	r3, [r7, #3]
 800cb96:	f003 020f 	and.w	r2, r3, #15
 800cb9a:	4613      	mov	r3, r2
 800cb9c:	00db      	lsls	r3, r3, #3
 800cb9e:	4413      	add	r3, r2
 800cba0:	009b      	lsls	r3, r3, #2
 800cba2:	3310      	adds	r3, #16
 800cba4:	687a      	ldr	r2, [r7, #4]
 800cba6:	4413      	add	r3, r2
 800cba8:	3304      	adds	r3, #4
 800cbaa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	2201      	movs	r2, #1
 800cbb0:	705a      	strb	r2, [r3, #1]
 800cbb2:	e00f      	b.n	800cbd4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cbb4:	78fb      	ldrb	r3, [r7, #3]
 800cbb6:	f003 020f 	and.w	r2, r3, #15
 800cbba:	4613      	mov	r3, r2
 800cbbc:	00db      	lsls	r3, r3, #3
 800cbbe:	4413      	add	r3, r2
 800cbc0:	009b      	lsls	r3, r3, #2
 800cbc2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800cbc6:	687a      	ldr	r2, [r7, #4]
 800cbc8:	4413      	add	r3, r2
 800cbca:	3304      	adds	r3, #4
 800cbcc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	2200      	movs	r2, #0
 800cbd2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800cbd4:	78fb      	ldrb	r3, [r7, #3]
 800cbd6:	f003 030f 	and.w	r3, r3, #15
 800cbda:	b2da      	uxtb	r2, r3
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800cbe6:	2b01      	cmp	r3, #1
 800cbe8:	d101      	bne.n	800cbee <HAL_PCD_EP_Close+0x6e>
 800cbea:	2302      	movs	r3, #2
 800cbec:	e00e      	b.n	800cc0c <HAL_PCD_EP_Close+0x8c>
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	2201      	movs	r2, #1
 800cbf2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	68f9      	ldr	r1, [r7, #12]
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	f002 ffcb 	bl	800fb98 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	2200      	movs	r2, #0
 800cc06:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800cc0a:	2300      	movs	r3, #0
}
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	3710      	adds	r7, #16
 800cc10:	46bd      	mov	sp, r7
 800cc12:	bd80      	pop	{r7, pc}

0800cc14 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b086      	sub	sp, #24
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	60f8      	str	r0, [r7, #12]
 800cc1c:	607a      	str	r2, [r7, #4]
 800cc1e:	603b      	str	r3, [r7, #0]
 800cc20:	460b      	mov	r3, r1
 800cc22:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cc24:	7afb      	ldrb	r3, [r7, #11]
 800cc26:	f003 020f 	and.w	r2, r3, #15
 800cc2a:	4613      	mov	r3, r2
 800cc2c:	00db      	lsls	r3, r3, #3
 800cc2e:	4413      	add	r3, r2
 800cc30:	009b      	lsls	r3, r3, #2
 800cc32:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800cc36:	68fa      	ldr	r2, [r7, #12]
 800cc38:	4413      	add	r3, r2
 800cc3a:	3304      	adds	r3, #4
 800cc3c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800cc3e:	697b      	ldr	r3, [r7, #20]
 800cc40:	687a      	ldr	r2, [r7, #4]
 800cc42:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800cc44:	697b      	ldr	r3, [r7, #20]
 800cc46:	683a      	ldr	r2, [r7, #0]
 800cc48:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800cc4a:	697b      	ldr	r3, [r7, #20]
 800cc4c:	2200      	movs	r2, #0
 800cc4e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800cc50:	697b      	ldr	r3, [r7, #20]
 800cc52:	2200      	movs	r2, #0
 800cc54:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800cc56:	7afb      	ldrb	r3, [r7, #11]
 800cc58:	f003 030f 	and.w	r3, r3, #15
 800cc5c:	b2da      	uxtb	r2, r3
 800cc5e:	697b      	ldr	r3, [r7, #20]
 800cc60:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	799b      	ldrb	r3, [r3, #6]
 800cc66:	2b01      	cmp	r3, #1
 800cc68:	d102      	bne.n	800cc70 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800cc6a:	687a      	ldr	r2, [r7, #4]
 800cc6c:	697b      	ldr	r3, [r7, #20]
 800cc6e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	6818      	ldr	r0, [r3, #0]
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	799b      	ldrb	r3, [r3, #6]
 800cc78:	461a      	mov	r2, r3
 800cc7a:	6979      	ldr	r1, [r7, #20]
 800cc7c:	f003 f868 	bl	800fd50 <USB_EPStartXfer>

  return HAL_OK;
 800cc80:	2300      	movs	r3, #0
}
 800cc82:	4618      	mov	r0, r3
 800cc84:	3718      	adds	r7, #24
 800cc86:	46bd      	mov	sp, r7
 800cc88:	bd80      	pop	{r7, pc}

0800cc8a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800cc8a:	b580      	push	{r7, lr}
 800cc8c:	b086      	sub	sp, #24
 800cc8e:	af00      	add	r7, sp, #0
 800cc90:	60f8      	str	r0, [r7, #12]
 800cc92:	607a      	str	r2, [r7, #4]
 800cc94:	603b      	str	r3, [r7, #0]
 800cc96:	460b      	mov	r3, r1
 800cc98:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cc9a:	7afb      	ldrb	r3, [r7, #11]
 800cc9c:	f003 020f 	and.w	r2, r3, #15
 800cca0:	4613      	mov	r3, r2
 800cca2:	00db      	lsls	r3, r3, #3
 800cca4:	4413      	add	r3, r2
 800cca6:	009b      	lsls	r3, r3, #2
 800cca8:	3310      	adds	r3, #16
 800ccaa:	68fa      	ldr	r2, [r7, #12]
 800ccac:	4413      	add	r3, r2
 800ccae:	3304      	adds	r3, #4
 800ccb0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800ccb2:	697b      	ldr	r3, [r7, #20]
 800ccb4:	687a      	ldr	r2, [r7, #4]
 800ccb6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800ccb8:	697b      	ldr	r3, [r7, #20]
 800ccba:	683a      	ldr	r2, [r7, #0]
 800ccbc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800ccbe:	697b      	ldr	r3, [r7, #20]
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800ccc4:	697b      	ldr	r3, [r7, #20]
 800ccc6:	2201      	movs	r2, #1
 800ccc8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ccca:	7afb      	ldrb	r3, [r7, #11]
 800cccc:	f003 030f 	and.w	r3, r3, #15
 800ccd0:	b2da      	uxtb	r2, r3
 800ccd2:	697b      	ldr	r3, [r7, #20]
 800ccd4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	799b      	ldrb	r3, [r3, #6]
 800ccda:	2b01      	cmp	r3, #1
 800ccdc:	d102      	bne.n	800cce4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800ccde:	687a      	ldr	r2, [r7, #4]
 800cce0:	697b      	ldr	r3, [r7, #20]
 800cce2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	6818      	ldr	r0, [r3, #0]
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	799b      	ldrb	r3, [r3, #6]
 800ccec:	461a      	mov	r2, r3
 800ccee:	6979      	ldr	r1, [r7, #20]
 800ccf0:	f003 f82e 	bl	800fd50 <USB_EPStartXfer>

  return HAL_OK;
 800ccf4:	2300      	movs	r3, #0
}
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	3718      	adds	r7, #24
 800ccfa:	46bd      	mov	sp, r7
 800ccfc:	bd80      	pop	{r7, pc}

0800ccfe <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ccfe:	b580      	push	{r7, lr}
 800cd00:	b084      	sub	sp, #16
 800cd02:	af00      	add	r7, sp, #0
 800cd04:	6078      	str	r0, [r7, #4]
 800cd06:	460b      	mov	r3, r1
 800cd08:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800cd0a:	78fb      	ldrb	r3, [r7, #3]
 800cd0c:	f003 030f 	and.w	r3, r3, #15
 800cd10:	687a      	ldr	r2, [r7, #4]
 800cd12:	7912      	ldrb	r2, [r2, #4]
 800cd14:	4293      	cmp	r3, r2
 800cd16:	d901      	bls.n	800cd1c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800cd18:	2301      	movs	r3, #1
 800cd1a:	e04f      	b.n	800cdbc <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800cd1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	da0f      	bge.n	800cd44 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cd24:	78fb      	ldrb	r3, [r7, #3]
 800cd26:	f003 020f 	and.w	r2, r3, #15
 800cd2a:	4613      	mov	r3, r2
 800cd2c:	00db      	lsls	r3, r3, #3
 800cd2e:	4413      	add	r3, r2
 800cd30:	009b      	lsls	r3, r3, #2
 800cd32:	3310      	adds	r3, #16
 800cd34:	687a      	ldr	r2, [r7, #4]
 800cd36:	4413      	add	r3, r2
 800cd38:	3304      	adds	r3, #4
 800cd3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	2201      	movs	r2, #1
 800cd40:	705a      	strb	r2, [r3, #1]
 800cd42:	e00d      	b.n	800cd60 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800cd44:	78fa      	ldrb	r2, [r7, #3]
 800cd46:	4613      	mov	r3, r2
 800cd48:	00db      	lsls	r3, r3, #3
 800cd4a:	4413      	add	r3, r2
 800cd4c:	009b      	lsls	r3, r3, #2
 800cd4e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800cd52:	687a      	ldr	r2, [r7, #4]
 800cd54:	4413      	add	r3, r2
 800cd56:	3304      	adds	r3, #4
 800cd58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	2200      	movs	r2, #0
 800cd5e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	2201      	movs	r2, #1
 800cd64:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800cd66:	78fb      	ldrb	r3, [r7, #3]
 800cd68:	f003 030f 	and.w	r3, r3, #15
 800cd6c:	b2da      	uxtb	r2, r3
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800cd78:	2b01      	cmp	r3, #1
 800cd7a:	d101      	bne.n	800cd80 <HAL_PCD_EP_SetStall+0x82>
 800cd7c:	2302      	movs	r3, #2
 800cd7e:	e01d      	b.n	800cdbc <HAL_PCD_EP_SetStall+0xbe>
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	2201      	movs	r2, #1
 800cd84:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	68f9      	ldr	r1, [r7, #12]
 800cd8e:	4618      	mov	r0, r3
 800cd90:	f003 fbbc 	bl	801050c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800cd94:	78fb      	ldrb	r3, [r7, #3]
 800cd96:	f003 030f 	and.w	r3, r3, #15
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d109      	bne.n	800cdb2 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	6818      	ldr	r0, [r3, #0]
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	7999      	ldrb	r1, [r3, #6]
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800cdac:	461a      	mov	r2, r3
 800cdae:	f003 fdad 	bl	801090c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800cdba:	2300      	movs	r3, #0
}
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	3710      	adds	r7, #16
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	bd80      	pop	{r7, pc}

0800cdc4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800cdc4:	b580      	push	{r7, lr}
 800cdc6:	b084      	sub	sp, #16
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
 800cdcc:	460b      	mov	r3, r1
 800cdce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800cdd0:	78fb      	ldrb	r3, [r7, #3]
 800cdd2:	f003 030f 	and.w	r3, r3, #15
 800cdd6:	687a      	ldr	r2, [r7, #4]
 800cdd8:	7912      	ldrb	r2, [r2, #4]
 800cdda:	4293      	cmp	r3, r2
 800cddc:	d901      	bls.n	800cde2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800cdde:	2301      	movs	r3, #1
 800cde0:	e042      	b.n	800ce68 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800cde2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	da0f      	bge.n	800ce0a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cdea:	78fb      	ldrb	r3, [r7, #3]
 800cdec:	f003 020f 	and.w	r2, r3, #15
 800cdf0:	4613      	mov	r3, r2
 800cdf2:	00db      	lsls	r3, r3, #3
 800cdf4:	4413      	add	r3, r2
 800cdf6:	009b      	lsls	r3, r3, #2
 800cdf8:	3310      	adds	r3, #16
 800cdfa:	687a      	ldr	r2, [r7, #4]
 800cdfc:	4413      	add	r3, r2
 800cdfe:	3304      	adds	r3, #4
 800ce00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	2201      	movs	r2, #1
 800ce06:	705a      	strb	r2, [r3, #1]
 800ce08:	e00f      	b.n	800ce2a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ce0a:	78fb      	ldrb	r3, [r7, #3]
 800ce0c:	f003 020f 	and.w	r2, r3, #15
 800ce10:	4613      	mov	r3, r2
 800ce12:	00db      	lsls	r3, r3, #3
 800ce14:	4413      	add	r3, r2
 800ce16:	009b      	lsls	r3, r3, #2
 800ce18:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800ce1c:	687a      	ldr	r2, [r7, #4]
 800ce1e:	4413      	add	r3, r2
 800ce20:	3304      	adds	r3, #4
 800ce22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	2200      	movs	r2, #0
 800ce28:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	2200      	movs	r2, #0
 800ce2e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ce30:	78fb      	ldrb	r3, [r7, #3]
 800ce32:	f003 030f 	and.w	r3, r3, #15
 800ce36:	b2da      	uxtb	r2, r3
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800ce42:	2b01      	cmp	r3, #1
 800ce44:	d101      	bne.n	800ce4a <HAL_PCD_EP_ClrStall+0x86>
 800ce46:	2302      	movs	r3, #2
 800ce48:	e00e      	b.n	800ce68 <HAL_PCD_EP_ClrStall+0xa4>
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	2201      	movs	r2, #1
 800ce4e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	68f9      	ldr	r1, [r7, #12]
 800ce58:	4618      	mov	r0, r3
 800ce5a:	f003 fbc5 	bl	80105e8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	2200      	movs	r2, #0
 800ce62:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800ce66:	2300      	movs	r3, #0
}
 800ce68:	4618      	mov	r0, r3
 800ce6a:	3710      	adds	r7, #16
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	bd80      	pop	{r7, pc}

0800ce70 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b084      	sub	sp, #16
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
 800ce78:	460b      	mov	r3, r1
 800ce7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800ce7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	da0c      	bge.n	800ce9e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ce84:	78fb      	ldrb	r3, [r7, #3]
 800ce86:	f003 020f 	and.w	r2, r3, #15
 800ce8a:	4613      	mov	r3, r2
 800ce8c:	00db      	lsls	r3, r3, #3
 800ce8e:	4413      	add	r3, r2
 800ce90:	009b      	lsls	r3, r3, #2
 800ce92:	3310      	adds	r3, #16
 800ce94:	687a      	ldr	r2, [r7, #4]
 800ce96:	4413      	add	r3, r2
 800ce98:	3304      	adds	r3, #4
 800ce9a:	60fb      	str	r3, [r7, #12]
 800ce9c:	e00c      	b.n	800ceb8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ce9e:	78fb      	ldrb	r3, [r7, #3]
 800cea0:	f003 020f 	and.w	r2, r3, #15
 800cea4:	4613      	mov	r3, r2
 800cea6:	00db      	lsls	r3, r3, #3
 800cea8:	4413      	add	r3, r2
 800ceaa:	009b      	lsls	r3, r3, #2
 800ceac:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800ceb0:	687a      	ldr	r2, [r7, #4]
 800ceb2:	4413      	add	r3, r2
 800ceb4:	3304      	adds	r3, #4
 800ceb6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	68f9      	ldr	r1, [r7, #12]
 800cebe:	4618      	mov	r0, r3
 800cec0:	f003 f9e4 	bl	801028c <USB_EPStopXfer>
 800cec4:	4603      	mov	r3, r0
 800cec6:	72fb      	strb	r3, [r7, #11]

  return ret;
 800cec8:	7afb      	ldrb	r3, [r7, #11]
}
 800ceca:	4618      	mov	r0, r3
 800cecc:	3710      	adds	r7, #16
 800cece:	46bd      	mov	sp, r7
 800ced0:	bd80      	pop	{r7, pc}

0800ced2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800ced2:	b580      	push	{r7, lr}
 800ced4:	b08a      	sub	sp, #40	@ 0x28
 800ced6:	af02      	add	r7, sp, #8
 800ced8:	6078      	str	r0, [r7, #4]
 800ceda:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cee2:	697b      	ldr	r3, [r7, #20]
 800cee4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800cee6:	683a      	ldr	r2, [r7, #0]
 800cee8:	4613      	mov	r3, r2
 800ceea:	00db      	lsls	r3, r3, #3
 800ceec:	4413      	add	r3, r2
 800ceee:	009b      	lsls	r3, r3, #2
 800cef0:	3310      	adds	r3, #16
 800cef2:	687a      	ldr	r2, [r7, #4]
 800cef4:	4413      	add	r3, r2
 800cef6:	3304      	adds	r3, #4
 800cef8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	695a      	ldr	r2, [r3, #20]
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	691b      	ldr	r3, [r3, #16]
 800cf02:	429a      	cmp	r2, r3
 800cf04:	d901      	bls.n	800cf0a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800cf06:	2301      	movs	r3, #1
 800cf08:	e06b      	b.n	800cfe2 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	691a      	ldr	r2, [r3, #16]
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	695b      	ldr	r3, [r3, #20]
 800cf12:	1ad3      	subs	r3, r2, r3
 800cf14:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	689b      	ldr	r3, [r3, #8]
 800cf1a:	69fa      	ldr	r2, [r7, #28]
 800cf1c:	429a      	cmp	r2, r3
 800cf1e:	d902      	bls.n	800cf26 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	689b      	ldr	r3, [r3, #8]
 800cf24:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800cf26:	69fb      	ldr	r3, [r7, #28]
 800cf28:	3303      	adds	r3, #3
 800cf2a:	089b      	lsrs	r3, r3, #2
 800cf2c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800cf2e:	e02a      	b.n	800cf86 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	691a      	ldr	r2, [r3, #16]
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	695b      	ldr	r3, [r3, #20]
 800cf38:	1ad3      	subs	r3, r2, r3
 800cf3a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	689b      	ldr	r3, [r3, #8]
 800cf40:	69fa      	ldr	r2, [r7, #28]
 800cf42:	429a      	cmp	r2, r3
 800cf44:	d902      	bls.n	800cf4c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	689b      	ldr	r3, [r3, #8]
 800cf4a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800cf4c:	69fb      	ldr	r3, [r7, #28]
 800cf4e:	3303      	adds	r3, #3
 800cf50:	089b      	lsrs	r3, r3, #2
 800cf52:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	68d9      	ldr	r1, [r3, #12]
 800cf58:	683b      	ldr	r3, [r7, #0]
 800cf5a:	b2da      	uxtb	r2, r3
 800cf5c:	69fb      	ldr	r3, [r7, #28]
 800cf5e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800cf64:	9300      	str	r3, [sp, #0]
 800cf66:	4603      	mov	r3, r0
 800cf68:	6978      	ldr	r0, [r7, #20]
 800cf6a:	f003 fa39 	bl	80103e0 <USB_WritePacket>

    ep->xfer_buff  += len;
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	68da      	ldr	r2, [r3, #12]
 800cf72:	69fb      	ldr	r3, [r7, #28]
 800cf74:	441a      	add	r2, r3
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	695a      	ldr	r2, [r3, #20]
 800cf7e:	69fb      	ldr	r3, [r7, #28]
 800cf80:	441a      	add	r2, r3
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800cf86:	683b      	ldr	r3, [r7, #0]
 800cf88:	015a      	lsls	r2, r3, #5
 800cf8a:	693b      	ldr	r3, [r7, #16]
 800cf8c:	4413      	add	r3, r2
 800cf8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cf92:	699b      	ldr	r3, [r3, #24]
 800cf94:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800cf96:	69ba      	ldr	r2, [r7, #24]
 800cf98:	429a      	cmp	r2, r3
 800cf9a:	d809      	bhi.n	800cfb0 <PCD_WriteEmptyTxFifo+0xde>
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	695a      	ldr	r2, [r3, #20]
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800cfa4:	429a      	cmp	r2, r3
 800cfa6:	d203      	bcs.n	800cfb0 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	691b      	ldr	r3, [r3, #16]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d1bf      	bne.n	800cf30 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	691a      	ldr	r2, [r3, #16]
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	695b      	ldr	r3, [r3, #20]
 800cfb8:	429a      	cmp	r2, r3
 800cfba:	d811      	bhi.n	800cfe0 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800cfbc:	683b      	ldr	r3, [r7, #0]
 800cfbe:	f003 030f 	and.w	r3, r3, #15
 800cfc2:	2201      	movs	r2, #1
 800cfc4:	fa02 f303 	lsl.w	r3, r2, r3
 800cfc8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800cfca:	693b      	ldr	r3, [r7, #16]
 800cfcc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cfd0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cfd2:	68bb      	ldr	r3, [r7, #8]
 800cfd4:	43db      	mvns	r3, r3
 800cfd6:	6939      	ldr	r1, [r7, #16]
 800cfd8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800cfdc:	4013      	ands	r3, r2
 800cfde:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800cfe0:	2300      	movs	r3, #0
}
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	3720      	adds	r7, #32
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	bd80      	pop	{r7, pc}
	...

0800cfec <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800cfec:	b580      	push	{r7, lr}
 800cfee:	b088      	sub	sp, #32
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]
 800cff4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cffc:	69fb      	ldr	r3, [r7, #28]
 800cffe:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800d000:	69fb      	ldr	r3, [r7, #28]
 800d002:	333c      	adds	r3, #60	@ 0x3c
 800d004:	3304      	adds	r3, #4
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800d00a:	683b      	ldr	r3, [r7, #0]
 800d00c:	015a      	lsls	r2, r3, #5
 800d00e:	69bb      	ldr	r3, [r7, #24]
 800d010:	4413      	add	r3, r2
 800d012:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d016:	689b      	ldr	r3, [r3, #8]
 800d018:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	799b      	ldrb	r3, [r3, #6]
 800d01e:	2b01      	cmp	r3, #1
 800d020:	d17b      	bne.n	800d11a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800d022:	693b      	ldr	r3, [r7, #16]
 800d024:	f003 0308 	and.w	r3, r3, #8
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d015      	beq.n	800d058 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d02c:	697b      	ldr	r3, [r7, #20]
 800d02e:	4a61      	ldr	r2, [pc, #388]	@ (800d1b4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800d030:	4293      	cmp	r3, r2
 800d032:	f240 80b9 	bls.w	800d1a8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d036:	693b      	ldr	r3, [r7, #16]
 800d038:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	f000 80b3 	beq.w	800d1a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d042:	683b      	ldr	r3, [r7, #0]
 800d044:	015a      	lsls	r2, r3, #5
 800d046:	69bb      	ldr	r3, [r7, #24]
 800d048:	4413      	add	r3, r2
 800d04a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d04e:	461a      	mov	r2, r3
 800d050:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d054:	6093      	str	r3, [r2, #8]
 800d056:	e0a7      	b.n	800d1a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800d058:	693b      	ldr	r3, [r7, #16]
 800d05a:	f003 0320 	and.w	r3, r3, #32
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d009      	beq.n	800d076 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800d062:	683b      	ldr	r3, [r7, #0]
 800d064:	015a      	lsls	r2, r3, #5
 800d066:	69bb      	ldr	r3, [r7, #24]
 800d068:	4413      	add	r3, r2
 800d06a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d06e:	461a      	mov	r2, r3
 800d070:	2320      	movs	r3, #32
 800d072:	6093      	str	r3, [r2, #8]
 800d074:	e098      	b.n	800d1a8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800d076:	693b      	ldr	r3, [r7, #16]
 800d078:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	f040 8093 	bne.w	800d1a8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d082:	697b      	ldr	r3, [r7, #20]
 800d084:	4a4b      	ldr	r2, [pc, #300]	@ (800d1b4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800d086:	4293      	cmp	r3, r2
 800d088:	d90f      	bls.n	800d0aa <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d08a:	693b      	ldr	r3, [r7, #16]
 800d08c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d090:	2b00      	cmp	r3, #0
 800d092:	d00a      	beq.n	800d0aa <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d094:	683b      	ldr	r3, [r7, #0]
 800d096:	015a      	lsls	r2, r3, #5
 800d098:	69bb      	ldr	r3, [r7, #24]
 800d09a:	4413      	add	r3, r2
 800d09c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d0a0:	461a      	mov	r2, r3
 800d0a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d0a6:	6093      	str	r3, [r2, #8]
 800d0a8:	e07e      	b.n	800d1a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800d0aa:	683a      	ldr	r2, [r7, #0]
 800d0ac:	4613      	mov	r3, r2
 800d0ae:	00db      	lsls	r3, r3, #3
 800d0b0:	4413      	add	r3, r2
 800d0b2:	009b      	lsls	r3, r3, #2
 800d0b4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800d0b8:	687a      	ldr	r2, [r7, #4]
 800d0ba:	4413      	add	r3, r2
 800d0bc:	3304      	adds	r3, #4
 800d0be:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	6a1a      	ldr	r2, [r3, #32]
 800d0c4:	683b      	ldr	r3, [r7, #0]
 800d0c6:	0159      	lsls	r1, r3, #5
 800d0c8:	69bb      	ldr	r3, [r7, #24]
 800d0ca:	440b      	add	r3, r1
 800d0cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d0d0:	691b      	ldr	r3, [r3, #16]
 800d0d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d0d6:	1ad2      	subs	r2, r2, r3
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800d0dc:	683b      	ldr	r3, [r7, #0]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d114      	bne.n	800d10c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	691b      	ldr	r3, [r3, #16]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d109      	bne.n	800d0fe <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	6818      	ldr	r0, [r3, #0]
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d0f4:	461a      	mov	r2, r3
 800d0f6:	2101      	movs	r1, #1
 800d0f8:	f003 fc08 	bl	801090c <USB_EP0_OutStart>
 800d0fc:	e006      	b.n	800d10c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	68da      	ldr	r2, [r3, #12]
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	695b      	ldr	r3, [r3, #20]
 800d106:	441a      	add	r2, r3
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d10c:	683b      	ldr	r3, [r7, #0]
 800d10e:	b2db      	uxtb	r3, r3
 800d110:	4619      	mov	r1, r3
 800d112:	6878      	ldr	r0, [r7, #4]
 800d114:	f005 fb54 	bl	80127c0 <HAL_PCD_DataOutStageCallback>
 800d118:	e046      	b.n	800d1a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800d11a:	697b      	ldr	r3, [r7, #20]
 800d11c:	4a26      	ldr	r2, [pc, #152]	@ (800d1b8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800d11e:	4293      	cmp	r3, r2
 800d120:	d124      	bne.n	800d16c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800d122:	693b      	ldr	r3, [r7, #16]
 800d124:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d00a      	beq.n	800d142 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d12c:	683b      	ldr	r3, [r7, #0]
 800d12e:	015a      	lsls	r2, r3, #5
 800d130:	69bb      	ldr	r3, [r7, #24]
 800d132:	4413      	add	r3, r2
 800d134:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d138:	461a      	mov	r2, r3
 800d13a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d13e:	6093      	str	r3, [r2, #8]
 800d140:	e032      	b.n	800d1a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800d142:	693b      	ldr	r3, [r7, #16]
 800d144:	f003 0320 	and.w	r3, r3, #32
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d008      	beq.n	800d15e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800d14c:	683b      	ldr	r3, [r7, #0]
 800d14e:	015a      	lsls	r2, r3, #5
 800d150:	69bb      	ldr	r3, [r7, #24]
 800d152:	4413      	add	r3, r2
 800d154:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d158:	461a      	mov	r2, r3
 800d15a:	2320      	movs	r3, #32
 800d15c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d15e:	683b      	ldr	r3, [r7, #0]
 800d160:	b2db      	uxtb	r3, r3
 800d162:	4619      	mov	r1, r3
 800d164:	6878      	ldr	r0, [r7, #4]
 800d166:	f005 fb2b 	bl	80127c0 <HAL_PCD_DataOutStageCallback>
 800d16a:	e01d      	b.n	800d1a8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800d16c:	683b      	ldr	r3, [r7, #0]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d114      	bne.n	800d19c <PCD_EP_OutXfrComplete_int+0x1b0>
 800d172:	6879      	ldr	r1, [r7, #4]
 800d174:	683a      	ldr	r2, [r7, #0]
 800d176:	4613      	mov	r3, r2
 800d178:	00db      	lsls	r3, r3, #3
 800d17a:	4413      	add	r3, r2
 800d17c:	009b      	lsls	r3, r3, #2
 800d17e:	440b      	add	r3, r1
 800d180:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d108      	bne.n	800d19c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	6818      	ldr	r0, [r3, #0]
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d194:	461a      	mov	r2, r3
 800d196:	2100      	movs	r1, #0
 800d198:	f003 fbb8 	bl	801090c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d19c:	683b      	ldr	r3, [r7, #0]
 800d19e:	b2db      	uxtb	r3, r3
 800d1a0:	4619      	mov	r1, r3
 800d1a2:	6878      	ldr	r0, [r7, #4]
 800d1a4:	f005 fb0c 	bl	80127c0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800d1a8:	2300      	movs	r3, #0
}
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	3720      	adds	r7, #32
 800d1ae:	46bd      	mov	sp, r7
 800d1b0:	bd80      	pop	{r7, pc}
 800d1b2:	bf00      	nop
 800d1b4:	4f54300a 	.word	0x4f54300a
 800d1b8:	4f54310a 	.word	0x4f54310a

0800d1bc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d1bc:	b580      	push	{r7, lr}
 800d1be:	b086      	sub	sp, #24
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	6078      	str	r0, [r7, #4]
 800d1c4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d1cc:	697b      	ldr	r3, [r7, #20]
 800d1ce:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800d1d0:	697b      	ldr	r3, [r7, #20]
 800d1d2:	333c      	adds	r3, #60	@ 0x3c
 800d1d4:	3304      	adds	r3, #4
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800d1da:	683b      	ldr	r3, [r7, #0]
 800d1dc:	015a      	lsls	r2, r3, #5
 800d1de:	693b      	ldr	r3, [r7, #16]
 800d1e0:	4413      	add	r3, r2
 800d1e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d1e6:	689b      	ldr	r3, [r3, #8]
 800d1e8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	4a15      	ldr	r2, [pc, #84]	@ (800d244 <PCD_EP_OutSetupPacket_int+0x88>)
 800d1ee:	4293      	cmp	r3, r2
 800d1f0:	d90e      	bls.n	800d210 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d1f2:	68bb      	ldr	r3, [r7, #8]
 800d1f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d009      	beq.n	800d210 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d1fc:	683b      	ldr	r3, [r7, #0]
 800d1fe:	015a      	lsls	r2, r3, #5
 800d200:	693b      	ldr	r3, [r7, #16]
 800d202:	4413      	add	r3, r2
 800d204:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d208:	461a      	mov	r2, r3
 800d20a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d20e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800d210:	6878      	ldr	r0, [r7, #4]
 800d212:	f005 fac3 	bl	801279c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	4a0a      	ldr	r2, [pc, #40]	@ (800d244 <PCD_EP_OutSetupPacket_int+0x88>)
 800d21a:	4293      	cmp	r3, r2
 800d21c:	d90c      	bls.n	800d238 <PCD_EP_OutSetupPacket_int+0x7c>
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	799b      	ldrb	r3, [r3, #6]
 800d222:	2b01      	cmp	r3, #1
 800d224:	d108      	bne.n	800d238 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	6818      	ldr	r0, [r3, #0]
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d230:	461a      	mov	r2, r3
 800d232:	2101      	movs	r1, #1
 800d234:	f003 fb6a 	bl	801090c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800d238:	2300      	movs	r3, #0
}
 800d23a:	4618      	mov	r0, r3
 800d23c:	3718      	adds	r7, #24
 800d23e:	46bd      	mov	sp, r7
 800d240:	bd80      	pop	{r7, pc}
 800d242:	bf00      	nop
 800d244:	4f54300a 	.word	0x4f54300a

0800d248 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800d248:	b480      	push	{r7}
 800d24a:	b085      	sub	sp, #20
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
 800d250:	460b      	mov	r3, r1
 800d252:	70fb      	strb	r3, [r7, #3]
 800d254:	4613      	mov	r3, r2
 800d256:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d25e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800d260:	78fb      	ldrb	r3, [r7, #3]
 800d262:	2b00      	cmp	r3, #0
 800d264:	d107      	bne.n	800d276 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800d266:	883b      	ldrh	r3, [r7, #0]
 800d268:	0419      	lsls	r1, r3, #16
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	68ba      	ldr	r2, [r7, #8]
 800d270:	430a      	orrs	r2, r1
 800d272:	629a      	str	r2, [r3, #40]	@ 0x28
 800d274:	e028      	b.n	800d2c8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d27c:	0c1b      	lsrs	r3, r3, #16
 800d27e:	68ba      	ldr	r2, [r7, #8]
 800d280:	4413      	add	r3, r2
 800d282:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800d284:	2300      	movs	r3, #0
 800d286:	73fb      	strb	r3, [r7, #15]
 800d288:	e00d      	b.n	800d2a6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	681a      	ldr	r2, [r3, #0]
 800d28e:	7bfb      	ldrb	r3, [r7, #15]
 800d290:	3340      	adds	r3, #64	@ 0x40
 800d292:	009b      	lsls	r3, r3, #2
 800d294:	4413      	add	r3, r2
 800d296:	685b      	ldr	r3, [r3, #4]
 800d298:	0c1b      	lsrs	r3, r3, #16
 800d29a:	68ba      	ldr	r2, [r7, #8]
 800d29c:	4413      	add	r3, r2
 800d29e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800d2a0:	7bfb      	ldrb	r3, [r7, #15]
 800d2a2:	3301      	adds	r3, #1
 800d2a4:	73fb      	strb	r3, [r7, #15]
 800d2a6:	7bfa      	ldrb	r2, [r7, #15]
 800d2a8:	78fb      	ldrb	r3, [r7, #3]
 800d2aa:	3b01      	subs	r3, #1
 800d2ac:	429a      	cmp	r2, r3
 800d2ae:	d3ec      	bcc.n	800d28a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800d2b0:	883b      	ldrh	r3, [r7, #0]
 800d2b2:	0418      	lsls	r0, r3, #16
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	6819      	ldr	r1, [r3, #0]
 800d2b8:	78fb      	ldrb	r3, [r7, #3]
 800d2ba:	3b01      	subs	r3, #1
 800d2bc:	68ba      	ldr	r2, [r7, #8]
 800d2be:	4302      	orrs	r2, r0
 800d2c0:	3340      	adds	r3, #64	@ 0x40
 800d2c2:	009b      	lsls	r3, r3, #2
 800d2c4:	440b      	add	r3, r1
 800d2c6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800d2c8:	2300      	movs	r3, #0
}
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	3714      	adds	r7, #20
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d4:	4770      	bx	lr

0800d2d6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800d2d6:	b480      	push	{r7}
 800d2d8:	b083      	sub	sp, #12
 800d2da:	af00      	add	r7, sp, #0
 800d2dc:	6078      	str	r0, [r7, #4]
 800d2de:	460b      	mov	r3, r1
 800d2e0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	887a      	ldrh	r2, [r7, #2]
 800d2e8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800d2ea:	2300      	movs	r3, #0
}
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	370c      	adds	r7, #12
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f6:	4770      	bx	lr

0800d2f8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d2f8:	b480      	push	{r7}
 800d2fa:	b083      	sub	sp, #12
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	6078      	str	r0, [r7, #4]
 800d300:	460b      	mov	r3, r1
 800d302:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800d304:	bf00      	nop
 800d306:	370c      	adds	r7, #12
 800d308:	46bd      	mov	sp, r7
 800d30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d30e:	4770      	bx	lr

0800d310 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d310:	b580      	push	{r7, lr}
 800d312:	b086      	sub	sp, #24
 800d314:	af00      	add	r7, sp, #0
 800d316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d101      	bne.n	800d322 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d31e:	2301      	movs	r3, #1
 800d320:	e267      	b.n	800d7f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	f003 0301 	and.w	r3, r3, #1
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d075      	beq.n	800d41a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800d32e:	4b88      	ldr	r3, [pc, #544]	@ (800d550 <HAL_RCC_OscConfig+0x240>)
 800d330:	689b      	ldr	r3, [r3, #8]
 800d332:	f003 030c 	and.w	r3, r3, #12
 800d336:	2b04      	cmp	r3, #4
 800d338:	d00c      	beq.n	800d354 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d33a:	4b85      	ldr	r3, [pc, #532]	@ (800d550 <HAL_RCC_OscConfig+0x240>)
 800d33c:	689b      	ldr	r3, [r3, #8]
 800d33e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800d342:	2b08      	cmp	r3, #8
 800d344:	d112      	bne.n	800d36c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d346:	4b82      	ldr	r3, [pc, #520]	@ (800d550 <HAL_RCC_OscConfig+0x240>)
 800d348:	685b      	ldr	r3, [r3, #4]
 800d34a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d34e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d352:	d10b      	bne.n	800d36c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d354:	4b7e      	ldr	r3, [pc, #504]	@ (800d550 <HAL_RCC_OscConfig+0x240>)
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d05b      	beq.n	800d418 <HAL_RCC_OscConfig+0x108>
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	685b      	ldr	r3, [r3, #4]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d157      	bne.n	800d418 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800d368:	2301      	movs	r3, #1
 800d36a:	e242      	b.n	800d7f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	685b      	ldr	r3, [r3, #4]
 800d370:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d374:	d106      	bne.n	800d384 <HAL_RCC_OscConfig+0x74>
 800d376:	4b76      	ldr	r3, [pc, #472]	@ (800d550 <HAL_RCC_OscConfig+0x240>)
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	4a75      	ldr	r2, [pc, #468]	@ (800d550 <HAL_RCC_OscConfig+0x240>)
 800d37c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d380:	6013      	str	r3, [r2, #0]
 800d382:	e01d      	b.n	800d3c0 <HAL_RCC_OscConfig+0xb0>
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	685b      	ldr	r3, [r3, #4]
 800d388:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d38c:	d10c      	bne.n	800d3a8 <HAL_RCC_OscConfig+0x98>
 800d38e:	4b70      	ldr	r3, [pc, #448]	@ (800d550 <HAL_RCC_OscConfig+0x240>)
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	4a6f      	ldr	r2, [pc, #444]	@ (800d550 <HAL_RCC_OscConfig+0x240>)
 800d394:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d398:	6013      	str	r3, [r2, #0]
 800d39a:	4b6d      	ldr	r3, [pc, #436]	@ (800d550 <HAL_RCC_OscConfig+0x240>)
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	4a6c      	ldr	r2, [pc, #432]	@ (800d550 <HAL_RCC_OscConfig+0x240>)
 800d3a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d3a4:	6013      	str	r3, [r2, #0]
 800d3a6:	e00b      	b.n	800d3c0 <HAL_RCC_OscConfig+0xb0>
 800d3a8:	4b69      	ldr	r3, [pc, #420]	@ (800d550 <HAL_RCC_OscConfig+0x240>)
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	4a68      	ldr	r2, [pc, #416]	@ (800d550 <HAL_RCC_OscConfig+0x240>)
 800d3ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d3b2:	6013      	str	r3, [r2, #0]
 800d3b4:	4b66      	ldr	r3, [pc, #408]	@ (800d550 <HAL_RCC_OscConfig+0x240>)
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	4a65      	ldr	r2, [pc, #404]	@ (800d550 <HAL_RCC_OscConfig+0x240>)
 800d3ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d3be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	685b      	ldr	r3, [r3, #4]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d013      	beq.n	800d3f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d3c8:	f7fd f87e 	bl	800a4c8 <HAL_GetTick>
 800d3cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d3ce:	e008      	b.n	800d3e2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d3d0:	f7fd f87a 	bl	800a4c8 <HAL_GetTick>
 800d3d4:	4602      	mov	r2, r0
 800d3d6:	693b      	ldr	r3, [r7, #16]
 800d3d8:	1ad3      	subs	r3, r2, r3
 800d3da:	2b64      	cmp	r3, #100	@ 0x64
 800d3dc:	d901      	bls.n	800d3e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800d3de:	2303      	movs	r3, #3
 800d3e0:	e207      	b.n	800d7f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d3e2:	4b5b      	ldr	r3, [pc, #364]	@ (800d550 <HAL_RCC_OscConfig+0x240>)
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d0f0      	beq.n	800d3d0 <HAL_RCC_OscConfig+0xc0>
 800d3ee:	e014      	b.n	800d41a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d3f0:	f7fd f86a 	bl	800a4c8 <HAL_GetTick>
 800d3f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d3f6:	e008      	b.n	800d40a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d3f8:	f7fd f866 	bl	800a4c8 <HAL_GetTick>
 800d3fc:	4602      	mov	r2, r0
 800d3fe:	693b      	ldr	r3, [r7, #16]
 800d400:	1ad3      	subs	r3, r2, r3
 800d402:	2b64      	cmp	r3, #100	@ 0x64
 800d404:	d901      	bls.n	800d40a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800d406:	2303      	movs	r3, #3
 800d408:	e1f3      	b.n	800d7f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d40a:	4b51      	ldr	r3, [pc, #324]	@ (800d550 <HAL_RCC_OscConfig+0x240>)
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d412:	2b00      	cmp	r3, #0
 800d414:	d1f0      	bne.n	800d3f8 <HAL_RCC_OscConfig+0xe8>
 800d416:	e000      	b.n	800d41a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d418:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	f003 0302 	and.w	r3, r3, #2
 800d422:	2b00      	cmp	r3, #0
 800d424:	d063      	beq.n	800d4ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800d426:	4b4a      	ldr	r3, [pc, #296]	@ (800d550 <HAL_RCC_OscConfig+0x240>)
 800d428:	689b      	ldr	r3, [r3, #8]
 800d42a:	f003 030c 	and.w	r3, r3, #12
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d00b      	beq.n	800d44a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d432:	4b47      	ldr	r3, [pc, #284]	@ (800d550 <HAL_RCC_OscConfig+0x240>)
 800d434:	689b      	ldr	r3, [r3, #8]
 800d436:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800d43a:	2b08      	cmp	r3, #8
 800d43c:	d11c      	bne.n	800d478 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d43e:	4b44      	ldr	r3, [pc, #272]	@ (800d550 <HAL_RCC_OscConfig+0x240>)
 800d440:	685b      	ldr	r3, [r3, #4]
 800d442:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d446:	2b00      	cmp	r3, #0
 800d448:	d116      	bne.n	800d478 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d44a:	4b41      	ldr	r3, [pc, #260]	@ (800d550 <HAL_RCC_OscConfig+0x240>)
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	f003 0302 	and.w	r3, r3, #2
 800d452:	2b00      	cmp	r3, #0
 800d454:	d005      	beq.n	800d462 <HAL_RCC_OscConfig+0x152>
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	68db      	ldr	r3, [r3, #12]
 800d45a:	2b01      	cmp	r3, #1
 800d45c:	d001      	beq.n	800d462 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800d45e:	2301      	movs	r3, #1
 800d460:	e1c7      	b.n	800d7f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d462:	4b3b      	ldr	r3, [pc, #236]	@ (800d550 <HAL_RCC_OscConfig+0x240>)
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	691b      	ldr	r3, [r3, #16]
 800d46e:	00db      	lsls	r3, r3, #3
 800d470:	4937      	ldr	r1, [pc, #220]	@ (800d550 <HAL_RCC_OscConfig+0x240>)
 800d472:	4313      	orrs	r3, r2
 800d474:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d476:	e03a      	b.n	800d4ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	68db      	ldr	r3, [r3, #12]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d020      	beq.n	800d4c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d480:	4b34      	ldr	r3, [pc, #208]	@ (800d554 <HAL_RCC_OscConfig+0x244>)
 800d482:	2201      	movs	r2, #1
 800d484:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d486:	f7fd f81f 	bl	800a4c8 <HAL_GetTick>
 800d48a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d48c:	e008      	b.n	800d4a0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d48e:	f7fd f81b 	bl	800a4c8 <HAL_GetTick>
 800d492:	4602      	mov	r2, r0
 800d494:	693b      	ldr	r3, [r7, #16]
 800d496:	1ad3      	subs	r3, r2, r3
 800d498:	2b02      	cmp	r3, #2
 800d49a:	d901      	bls.n	800d4a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800d49c:	2303      	movs	r3, #3
 800d49e:	e1a8      	b.n	800d7f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d4a0:	4b2b      	ldr	r3, [pc, #172]	@ (800d550 <HAL_RCC_OscConfig+0x240>)
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	f003 0302 	and.w	r3, r3, #2
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d0f0      	beq.n	800d48e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d4ac:	4b28      	ldr	r3, [pc, #160]	@ (800d550 <HAL_RCC_OscConfig+0x240>)
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	691b      	ldr	r3, [r3, #16]
 800d4b8:	00db      	lsls	r3, r3, #3
 800d4ba:	4925      	ldr	r1, [pc, #148]	@ (800d550 <HAL_RCC_OscConfig+0x240>)
 800d4bc:	4313      	orrs	r3, r2
 800d4be:	600b      	str	r3, [r1, #0]
 800d4c0:	e015      	b.n	800d4ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d4c2:	4b24      	ldr	r3, [pc, #144]	@ (800d554 <HAL_RCC_OscConfig+0x244>)
 800d4c4:	2200      	movs	r2, #0
 800d4c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d4c8:	f7fc fffe 	bl	800a4c8 <HAL_GetTick>
 800d4cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d4ce:	e008      	b.n	800d4e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d4d0:	f7fc fffa 	bl	800a4c8 <HAL_GetTick>
 800d4d4:	4602      	mov	r2, r0
 800d4d6:	693b      	ldr	r3, [r7, #16]
 800d4d8:	1ad3      	subs	r3, r2, r3
 800d4da:	2b02      	cmp	r3, #2
 800d4dc:	d901      	bls.n	800d4e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800d4de:	2303      	movs	r3, #3
 800d4e0:	e187      	b.n	800d7f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d4e2:	4b1b      	ldr	r3, [pc, #108]	@ (800d550 <HAL_RCC_OscConfig+0x240>)
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	f003 0302 	and.w	r3, r3, #2
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d1f0      	bne.n	800d4d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	f003 0308 	and.w	r3, r3, #8
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d036      	beq.n	800d568 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	695b      	ldr	r3, [r3, #20]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d016      	beq.n	800d530 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d502:	4b15      	ldr	r3, [pc, #84]	@ (800d558 <HAL_RCC_OscConfig+0x248>)
 800d504:	2201      	movs	r2, #1
 800d506:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d508:	f7fc ffde 	bl	800a4c8 <HAL_GetTick>
 800d50c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d50e:	e008      	b.n	800d522 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d510:	f7fc ffda 	bl	800a4c8 <HAL_GetTick>
 800d514:	4602      	mov	r2, r0
 800d516:	693b      	ldr	r3, [r7, #16]
 800d518:	1ad3      	subs	r3, r2, r3
 800d51a:	2b02      	cmp	r3, #2
 800d51c:	d901      	bls.n	800d522 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800d51e:	2303      	movs	r3, #3
 800d520:	e167      	b.n	800d7f2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d522:	4b0b      	ldr	r3, [pc, #44]	@ (800d550 <HAL_RCC_OscConfig+0x240>)
 800d524:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d526:	f003 0302 	and.w	r3, r3, #2
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d0f0      	beq.n	800d510 <HAL_RCC_OscConfig+0x200>
 800d52e:	e01b      	b.n	800d568 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d530:	4b09      	ldr	r3, [pc, #36]	@ (800d558 <HAL_RCC_OscConfig+0x248>)
 800d532:	2200      	movs	r2, #0
 800d534:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d536:	f7fc ffc7 	bl	800a4c8 <HAL_GetTick>
 800d53a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d53c:	e00e      	b.n	800d55c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d53e:	f7fc ffc3 	bl	800a4c8 <HAL_GetTick>
 800d542:	4602      	mov	r2, r0
 800d544:	693b      	ldr	r3, [r7, #16]
 800d546:	1ad3      	subs	r3, r2, r3
 800d548:	2b02      	cmp	r3, #2
 800d54a:	d907      	bls.n	800d55c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800d54c:	2303      	movs	r3, #3
 800d54e:	e150      	b.n	800d7f2 <HAL_RCC_OscConfig+0x4e2>
 800d550:	40023800 	.word	0x40023800
 800d554:	42470000 	.word	0x42470000
 800d558:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d55c:	4b88      	ldr	r3, [pc, #544]	@ (800d780 <HAL_RCC_OscConfig+0x470>)
 800d55e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d560:	f003 0302 	and.w	r3, r3, #2
 800d564:	2b00      	cmp	r3, #0
 800d566:	d1ea      	bne.n	800d53e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	f003 0304 	and.w	r3, r3, #4
 800d570:	2b00      	cmp	r3, #0
 800d572:	f000 8097 	beq.w	800d6a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d576:	2300      	movs	r3, #0
 800d578:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d57a:	4b81      	ldr	r3, [pc, #516]	@ (800d780 <HAL_RCC_OscConfig+0x470>)
 800d57c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d57e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d582:	2b00      	cmp	r3, #0
 800d584:	d10f      	bne.n	800d5a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d586:	2300      	movs	r3, #0
 800d588:	60bb      	str	r3, [r7, #8]
 800d58a:	4b7d      	ldr	r3, [pc, #500]	@ (800d780 <HAL_RCC_OscConfig+0x470>)
 800d58c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d58e:	4a7c      	ldr	r2, [pc, #496]	@ (800d780 <HAL_RCC_OscConfig+0x470>)
 800d590:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d594:	6413      	str	r3, [r2, #64]	@ 0x40
 800d596:	4b7a      	ldr	r3, [pc, #488]	@ (800d780 <HAL_RCC_OscConfig+0x470>)
 800d598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d59a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d59e:	60bb      	str	r3, [r7, #8]
 800d5a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d5a2:	2301      	movs	r3, #1
 800d5a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d5a6:	4b77      	ldr	r3, [pc, #476]	@ (800d784 <HAL_RCC_OscConfig+0x474>)
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d118      	bne.n	800d5e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800d5b2:	4b74      	ldr	r3, [pc, #464]	@ (800d784 <HAL_RCC_OscConfig+0x474>)
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	4a73      	ldr	r2, [pc, #460]	@ (800d784 <HAL_RCC_OscConfig+0x474>)
 800d5b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d5bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d5be:	f7fc ff83 	bl	800a4c8 <HAL_GetTick>
 800d5c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d5c4:	e008      	b.n	800d5d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d5c6:	f7fc ff7f 	bl	800a4c8 <HAL_GetTick>
 800d5ca:	4602      	mov	r2, r0
 800d5cc:	693b      	ldr	r3, [r7, #16]
 800d5ce:	1ad3      	subs	r3, r2, r3
 800d5d0:	2b02      	cmp	r3, #2
 800d5d2:	d901      	bls.n	800d5d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800d5d4:	2303      	movs	r3, #3
 800d5d6:	e10c      	b.n	800d7f2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d5d8:	4b6a      	ldr	r3, [pc, #424]	@ (800d784 <HAL_RCC_OscConfig+0x474>)
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d0f0      	beq.n	800d5c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	689b      	ldr	r3, [r3, #8]
 800d5e8:	2b01      	cmp	r3, #1
 800d5ea:	d106      	bne.n	800d5fa <HAL_RCC_OscConfig+0x2ea>
 800d5ec:	4b64      	ldr	r3, [pc, #400]	@ (800d780 <HAL_RCC_OscConfig+0x470>)
 800d5ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d5f0:	4a63      	ldr	r2, [pc, #396]	@ (800d780 <HAL_RCC_OscConfig+0x470>)
 800d5f2:	f043 0301 	orr.w	r3, r3, #1
 800d5f6:	6713      	str	r3, [r2, #112]	@ 0x70
 800d5f8:	e01c      	b.n	800d634 <HAL_RCC_OscConfig+0x324>
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	689b      	ldr	r3, [r3, #8]
 800d5fe:	2b05      	cmp	r3, #5
 800d600:	d10c      	bne.n	800d61c <HAL_RCC_OscConfig+0x30c>
 800d602:	4b5f      	ldr	r3, [pc, #380]	@ (800d780 <HAL_RCC_OscConfig+0x470>)
 800d604:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d606:	4a5e      	ldr	r2, [pc, #376]	@ (800d780 <HAL_RCC_OscConfig+0x470>)
 800d608:	f043 0304 	orr.w	r3, r3, #4
 800d60c:	6713      	str	r3, [r2, #112]	@ 0x70
 800d60e:	4b5c      	ldr	r3, [pc, #368]	@ (800d780 <HAL_RCC_OscConfig+0x470>)
 800d610:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d612:	4a5b      	ldr	r2, [pc, #364]	@ (800d780 <HAL_RCC_OscConfig+0x470>)
 800d614:	f043 0301 	orr.w	r3, r3, #1
 800d618:	6713      	str	r3, [r2, #112]	@ 0x70
 800d61a:	e00b      	b.n	800d634 <HAL_RCC_OscConfig+0x324>
 800d61c:	4b58      	ldr	r3, [pc, #352]	@ (800d780 <HAL_RCC_OscConfig+0x470>)
 800d61e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d620:	4a57      	ldr	r2, [pc, #348]	@ (800d780 <HAL_RCC_OscConfig+0x470>)
 800d622:	f023 0301 	bic.w	r3, r3, #1
 800d626:	6713      	str	r3, [r2, #112]	@ 0x70
 800d628:	4b55      	ldr	r3, [pc, #340]	@ (800d780 <HAL_RCC_OscConfig+0x470>)
 800d62a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d62c:	4a54      	ldr	r2, [pc, #336]	@ (800d780 <HAL_RCC_OscConfig+0x470>)
 800d62e:	f023 0304 	bic.w	r3, r3, #4
 800d632:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	689b      	ldr	r3, [r3, #8]
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d015      	beq.n	800d668 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d63c:	f7fc ff44 	bl	800a4c8 <HAL_GetTick>
 800d640:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d642:	e00a      	b.n	800d65a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d644:	f7fc ff40 	bl	800a4c8 <HAL_GetTick>
 800d648:	4602      	mov	r2, r0
 800d64a:	693b      	ldr	r3, [r7, #16]
 800d64c:	1ad3      	subs	r3, r2, r3
 800d64e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d652:	4293      	cmp	r3, r2
 800d654:	d901      	bls.n	800d65a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800d656:	2303      	movs	r3, #3
 800d658:	e0cb      	b.n	800d7f2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d65a:	4b49      	ldr	r3, [pc, #292]	@ (800d780 <HAL_RCC_OscConfig+0x470>)
 800d65c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d65e:	f003 0302 	and.w	r3, r3, #2
 800d662:	2b00      	cmp	r3, #0
 800d664:	d0ee      	beq.n	800d644 <HAL_RCC_OscConfig+0x334>
 800d666:	e014      	b.n	800d692 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d668:	f7fc ff2e 	bl	800a4c8 <HAL_GetTick>
 800d66c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d66e:	e00a      	b.n	800d686 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d670:	f7fc ff2a 	bl	800a4c8 <HAL_GetTick>
 800d674:	4602      	mov	r2, r0
 800d676:	693b      	ldr	r3, [r7, #16]
 800d678:	1ad3      	subs	r3, r2, r3
 800d67a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d67e:	4293      	cmp	r3, r2
 800d680:	d901      	bls.n	800d686 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800d682:	2303      	movs	r3, #3
 800d684:	e0b5      	b.n	800d7f2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d686:	4b3e      	ldr	r3, [pc, #248]	@ (800d780 <HAL_RCC_OscConfig+0x470>)
 800d688:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d68a:	f003 0302 	and.w	r3, r3, #2
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d1ee      	bne.n	800d670 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800d692:	7dfb      	ldrb	r3, [r7, #23]
 800d694:	2b01      	cmp	r3, #1
 800d696:	d105      	bne.n	800d6a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d698:	4b39      	ldr	r3, [pc, #228]	@ (800d780 <HAL_RCC_OscConfig+0x470>)
 800d69a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d69c:	4a38      	ldr	r2, [pc, #224]	@ (800d780 <HAL_RCC_OscConfig+0x470>)
 800d69e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d6a2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	699b      	ldr	r3, [r3, #24]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	f000 80a1 	beq.w	800d7f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800d6ae:	4b34      	ldr	r3, [pc, #208]	@ (800d780 <HAL_RCC_OscConfig+0x470>)
 800d6b0:	689b      	ldr	r3, [r3, #8]
 800d6b2:	f003 030c 	and.w	r3, r3, #12
 800d6b6:	2b08      	cmp	r3, #8
 800d6b8:	d05c      	beq.n	800d774 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	699b      	ldr	r3, [r3, #24]
 800d6be:	2b02      	cmp	r3, #2
 800d6c0:	d141      	bne.n	800d746 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d6c2:	4b31      	ldr	r3, [pc, #196]	@ (800d788 <HAL_RCC_OscConfig+0x478>)
 800d6c4:	2200      	movs	r2, #0
 800d6c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d6c8:	f7fc fefe 	bl	800a4c8 <HAL_GetTick>
 800d6cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d6ce:	e008      	b.n	800d6e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d6d0:	f7fc fefa 	bl	800a4c8 <HAL_GetTick>
 800d6d4:	4602      	mov	r2, r0
 800d6d6:	693b      	ldr	r3, [r7, #16]
 800d6d8:	1ad3      	subs	r3, r2, r3
 800d6da:	2b02      	cmp	r3, #2
 800d6dc:	d901      	bls.n	800d6e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800d6de:	2303      	movs	r3, #3
 800d6e0:	e087      	b.n	800d7f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d6e2:	4b27      	ldr	r3, [pc, #156]	@ (800d780 <HAL_RCC_OscConfig+0x470>)
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d1f0      	bne.n	800d6d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	69da      	ldr	r2, [r3, #28]
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	6a1b      	ldr	r3, [r3, #32]
 800d6f6:	431a      	orrs	r2, r3
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d6fc:	019b      	lsls	r3, r3, #6
 800d6fe:	431a      	orrs	r2, r3
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d704:	085b      	lsrs	r3, r3, #1
 800d706:	3b01      	subs	r3, #1
 800d708:	041b      	lsls	r3, r3, #16
 800d70a:	431a      	orrs	r2, r3
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d710:	061b      	lsls	r3, r3, #24
 800d712:	491b      	ldr	r1, [pc, #108]	@ (800d780 <HAL_RCC_OscConfig+0x470>)
 800d714:	4313      	orrs	r3, r2
 800d716:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d718:	4b1b      	ldr	r3, [pc, #108]	@ (800d788 <HAL_RCC_OscConfig+0x478>)
 800d71a:	2201      	movs	r2, #1
 800d71c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d71e:	f7fc fed3 	bl	800a4c8 <HAL_GetTick>
 800d722:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d724:	e008      	b.n	800d738 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d726:	f7fc fecf 	bl	800a4c8 <HAL_GetTick>
 800d72a:	4602      	mov	r2, r0
 800d72c:	693b      	ldr	r3, [r7, #16]
 800d72e:	1ad3      	subs	r3, r2, r3
 800d730:	2b02      	cmp	r3, #2
 800d732:	d901      	bls.n	800d738 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800d734:	2303      	movs	r3, #3
 800d736:	e05c      	b.n	800d7f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d738:	4b11      	ldr	r3, [pc, #68]	@ (800d780 <HAL_RCC_OscConfig+0x470>)
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d740:	2b00      	cmp	r3, #0
 800d742:	d0f0      	beq.n	800d726 <HAL_RCC_OscConfig+0x416>
 800d744:	e054      	b.n	800d7f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d746:	4b10      	ldr	r3, [pc, #64]	@ (800d788 <HAL_RCC_OscConfig+0x478>)
 800d748:	2200      	movs	r2, #0
 800d74a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d74c:	f7fc febc 	bl	800a4c8 <HAL_GetTick>
 800d750:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d752:	e008      	b.n	800d766 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d754:	f7fc feb8 	bl	800a4c8 <HAL_GetTick>
 800d758:	4602      	mov	r2, r0
 800d75a:	693b      	ldr	r3, [r7, #16]
 800d75c:	1ad3      	subs	r3, r2, r3
 800d75e:	2b02      	cmp	r3, #2
 800d760:	d901      	bls.n	800d766 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800d762:	2303      	movs	r3, #3
 800d764:	e045      	b.n	800d7f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d766:	4b06      	ldr	r3, [pc, #24]	@ (800d780 <HAL_RCC_OscConfig+0x470>)
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d1f0      	bne.n	800d754 <HAL_RCC_OscConfig+0x444>
 800d772:	e03d      	b.n	800d7f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	699b      	ldr	r3, [r3, #24]
 800d778:	2b01      	cmp	r3, #1
 800d77a:	d107      	bne.n	800d78c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800d77c:	2301      	movs	r3, #1
 800d77e:	e038      	b.n	800d7f2 <HAL_RCC_OscConfig+0x4e2>
 800d780:	40023800 	.word	0x40023800
 800d784:	40007000 	.word	0x40007000
 800d788:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800d78c:	4b1b      	ldr	r3, [pc, #108]	@ (800d7fc <HAL_RCC_OscConfig+0x4ec>)
 800d78e:	685b      	ldr	r3, [r3, #4]
 800d790:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	699b      	ldr	r3, [r3, #24]
 800d796:	2b01      	cmp	r3, #1
 800d798:	d028      	beq.n	800d7ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d7a4:	429a      	cmp	r2, r3
 800d7a6:	d121      	bne.n	800d7ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d7b2:	429a      	cmp	r2, r3
 800d7b4:	d11a      	bne.n	800d7ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800d7b6:	68fa      	ldr	r2, [r7, #12]
 800d7b8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800d7bc:	4013      	ands	r3, r2
 800d7be:	687a      	ldr	r2, [r7, #4]
 800d7c0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800d7c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800d7c4:	4293      	cmp	r3, r2
 800d7c6:	d111      	bne.n	800d7ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7d2:	085b      	lsrs	r3, r3, #1
 800d7d4:	3b01      	subs	r3, #1
 800d7d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800d7d8:	429a      	cmp	r2, r3
 800d7da:	d107      	bne.n	800d7ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800d7e8:	429a      	cmp	r2, r3
 800d7ea:	d001      	beq.n	800d7f0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800d7ec:	2301      	movs	r3, #1
 800d7ee:	e000      	b.n	800d7f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800d7f0:	2300      	movs	r3, #0
}
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	3718      	adds	r7, #24
 800d7f6:	46bd      	mov	sp, r7
 800d7f8:	bd80      	pop	{r7, pc}
 800d7fa:	bf00      	nop
 800d7fc:	40023800 	.word	0x40023800

0800d800 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d800:	b580      	push	{r7, lr}
 800d802:	b084      	sub	sp, #16
 800d804:	af00      	add	r7, sp, #0
 800d806:	6078      	str	r0, [r7, #4]
 800d808:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d101      	bne.n	800d814 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d810:	2301      	movs	r3, #1
 800d812:	e0cc      	b.n	800d9ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d814:	4b68      	ldr	r3, [pc, #416]	@ (800d9b8 <HAL_RCC_ClockConfig+0x1b8>)
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	f003 0307 	and.w	r3, r3, #7
 800d81c:	683a      	ldr	r2, [r7, #0]
 800d81e:	429a      	cmp	r2, r3
 800d820:	d90c      	bls.n	800d83c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d822:	4b65      	ldr	r3, [pc, #404]	@ (800d9b8 <HAL_RCC_ClockConfig+0x1b8>)
 800d824:	683a      	ldr	r2, [r7, #0]
 800d826:	b2d2      	uxtb	r2, r2
 800d828:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d82a:	4b63      	ldr	r3, [pc, #396]	@ (800d9b8 <HAL_RCC_ClockConfig+0x1b8>)
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	f003 0307 	and.w	r3, r3, #7
 800d832:	683a      	ldr	r2, [r7, #0]
 800d834:	429a      	cmp	r2, r3
 800d836:	d001      	beq.n	800d83c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800d838:	2301      	movs	r3, #1
 800d83a:	e0b8      	b.n	800d9ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	f003 0302 	and.w	r3, r3, #2
 800d844:	2b00      	cmp	r3, #0
 800d846:	d020      	beq.n	800d88a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	f003 0304 	and.w	r3, r3, #4
 800d850:	2b00      	cmp	r3, #0
 800d852:	d005      	beq.n	800d860 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800d854:	4b59      	ldr	r3, [pc, #356]	@ (800d9bc <HAL_RCC_ClockConfig+0x1bc>)
 800d856:	689b      	ldr	r3, [r3, #8]
 800d858:	4a58      	ldr	r2, [pc, #352]	@ (800d9bc <HAL_RCC_ClockConfig+0x1bc>)
 800d85a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800d85e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	f003 0308 	and.w	r3, r3, #8
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d005      	beq.n	800d878 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800d86c:	4b53      	ldr	r3, [pc, #332]	@ (800d9bc <HAL_RCC_ClockConfig+0x1bc>)
 800d86e:	689b      	ldr	r3, [r3, #8]
 800d870:	4a52      	ldr	r2, [pc, #328]	@ (800d9bc <HAL_RCC_ClockConfig+0x1bc>)
 800d872:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800d876:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d878:	4b50      	ldr	r3, [pc, #320]	@ (800d9bc <HAL_RCC_ClockConfig+0x1bc>)
 800d87a:	689b      	ldr	r3, [r3, #8]
 800d87c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	689b      	ldr	r3, [r3, #8]
 800d884:	494d      	ldr	r1, [pc, #308]	@ (800d9bc <HAL_RCC_ClockConfig+0x1bc>)
 800d886:	4313      	orrs	r3, r2
 800d888:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	f003 0301 	and.w	r3, r3, #1
 800d892:	2b00      	cmp	r3, #0
 800d894:	d044      	beq.n	800d920 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	685b      	ldr	r3, [r3, #4]
 800d89a:	2b01      	cmp	r3, #1
 800d89c:	d107      	bne.n	800d8ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d89e:	4b47      	ldr	r3, [pc, #284]	@ (800d9bc <HAL_RCC_ClockConfig+0x1bc>)
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d119      	bne.n	800d8de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d8aa:	2301      	movs	r3, #1
 800d8ac:	e07f      	b.n	800d9ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	685b      	ldr	r3, [r3, #4]
 800d8b2:	2b02      	cmp	r3, #2
 800d8b4:	d003      	beq.n	800d8be <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800d8ba:	2b03      	cmp	r3, #3
 800d8bc:	d107      	bne.n	800d8ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d8be:	4b3f      	ldr	r3, [pc, #252]	@ (800d9bc <HAL_RCC_ClockConfig+0x1bc>)
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d109      	bne.n	800d8de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d8ca:	2301      	movs	r3, #1
 800d8cc:	e06f      	b.n	800d9ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d8ce:	4b3b      	ldr	r3, [pc, #236]	@ (800d9bc <HAL_RCC_ClockConfig+0x1bc>)
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	f003 0302 	and.w	r3, r3, #2
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d101      	bne.n	800d8de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d8da:	2301      	movs	r3, #1
 800d8dc:	e067      	b.n	800d9ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800d8de:	4b37      	ldr	r3, [pc, #220]	@ (800d9bc <HAL_RCC_ClockConfig+0x1bc>)
 800d8e0:	689b      	ldr	r3, [r3, #8]
 800d8e2:	f023 0203 	bic.w	r2, r3, #3
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	685b      	ldr	r3, [r3, #4]
 800d8ea:	4934      	ldr	r1, [pc, #208]	@ (800d9bc <HAL_RCC_ClockConfig+0x1bc>)
 800d8ec:	4313      	orrs	r3, r2
 800d8ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800d8f0:	f7fc fdea 	bl	800a4c8 <HAL_GetTick>
 800d8f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d8f6:	e00a      	b.n	800d90e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d8f8:	f7fc fde6 	bl	800a4c8 <HAL_GetTick>
 800d8fc:	4602      	mov	r2, r0
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	1ad3      	subs	r3, r2, r3
 800d902:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d906:	4293      	cmp	r3, r2
 800d908:	d901      	bls.n	800d90e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800d90a:	2303      	movs	r3, #3
 800d90c:	e04f      	b.n	800d9ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d90e:	4b2b      	ldr	r3, [pc, #172]	@ (800d9bc <HAL_RCC_ClockConfig+0x1bc>)
 800d910:	689b      	ldr	r3, [r3, #8]
 800d912:	f003 020c 	and.w	r2, r3, #12
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	685b      	ldr	r3, [r3, #4]
 800d91a:	009b      	lsls	r3, r3, #2
 800d91c:	429a      	cmp	r2, r3
 800d91e:	d1eb      	bne.n	800d8f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d920:	4b25      	ldr	r3, [pc, #148]	@ (800d9b8 <HAL_RCC_ClockConfig+0x1b8>)
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	f003 0307 	and.w	r3, r3, #7
 800d928:	683a      	ldr	r2, [r7, #0]
 800d92a:	429a      	cmp	r2, r3
 800d92c:	d20c      	bcs.n	800d948 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d92e:	4b22      	ldr	r3, [pc, #136]	@ (800d9b8 <HAL_RCC_ClockConfig+0x1b8>)
 800d930:	683a      	ldr	r2, [r7, #0]
 800d932:	b2d2      	uxtb	r2, r2
 800d934:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d936:	4b20      	ldr	r3, [pc, #128]	@ (800d9b8 <HAL_RCC_ClockConfig+0x1b8>)
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	f003 0307 	and.w	r3, r3, #7
 800d93e:	683a      	ldr	r2, [r7, #0]
 800d940:	429a      	cmp	r2, r3
 800d942:	d001      	beq.n	800d948 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800d944:	2301      	movs	r3, #1
 800d946:	e032      	b.n	800d9ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	f003 0304 	and.w	r3, r3, #4
 800d950:	2b00      	cmp	r3, #0
 800d952:	d008      	beq.n	800d966 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d954:	4b19      	ldr	r3, [pc, #100]	@ (800d9bc <HAL_RCC_ClockConfig+0x1bc>)
 800d956:	689b      	ldr	r3, [r3, #8]
 800d958:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	68db      	ldr	r3, [r3, #12]
 800d960:	4916      	ldr	r1, [pc, #88]	@ (800d9bc <HAL_RCC_ClockConfig+0x1bc>)
 800d962:	4313      	orrs	r3, r2
 800d964:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	f003 0308 	and.w	r3, r3, #8
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d009      	beq.n	800d986 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800d972:	4b12      	ldr	r3, [pc, #72]	@ (800d9bc <HAL_RCC_ClockConfig+0x1bc>)
 800d974:	689b      	ldr	r3, [r3, #8]
 800d976:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	691b      	ldr	r3, [r3, #16]
 800d97e:	00db      	lsls	r3, r3, #3
 800d980:	490e      	ldr	r1, [pc, #56]	@ (800d9bc <HAL_RCC_ClockConfig+0x1bc>)
 800d982:	4313      	orrs	r3, r2
 800d984:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800d986:	f000 f821 	bl	800d9cc <HAL_RCC_GetSysClockFreq>
 800d98a:	4602      	mov	r2, r0
 800d98c:	4b0b      	ldr	r3, [pc, #44]	@ (800d9bc <HAL_RCC_ClockConfig+0x1bc>)
 800d98e:	689b      	ldr	r3, [r3, #8]
 800d990:	091b      	lsrs	r3, r3, #4
 800d992:	f003 030f 	and.w	r3, r3, #15
 800d996:	490a      	ldr	r1, [pc, #40]	@ (800d9c0 <HAL_RCC_ClockConfig+0x1c0>)
 800d998:	5ccb      	ldrb	r3, [r1, r3]
 800d99a:	fa22 f303 	lsr.w	r3, r2, r3
 800d99e:	4a09      	ldr	r2, [pc, #36]	@ (800d9c4 <HAL_RCC_ClockConfig+0x1c4>)
 800d9a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800d9a2:	4b09      	ldr	r3, [pc, #36]	@ (800d9c8 <HAL_RCC_ClockConfig+0x1c8>)
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	f7fc fd4a 	bl	800a440 <HAL_InitTick>

  return HAL_OK;
 800d9ac:	2300      	movs	r3, #0
}
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	3710      	adds	r7, #16
 800d9b2:	46bd      	mov	sp, r7
 800d9b4:	bd80      	pop	{r7, pc}
 800d9b6:	bf00      	nop
 800d9b8:	40023c00 	.word	0x40023c00
 800d9bc:	40023800 	.word	0x40023800
 800d9c0:	080162e0 	.word	0x080162e0
 800d9c4:	20000008 	.word	0x20000008
 800d9c8:	2000000c 	.word	0x2000000c

0800d9cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d9cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d9d0:	b094      	sub	sp, #80	@ 0x50
 800d9d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800d9d4:	2300      	movs	r3, #0
 800d9d6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800d9d8:	2300      	movs	r3, #0
 800d9da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800d9dc:	2300      	movs	r3, #0
 800d9de:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800d9e0:	2300      	movs	r3, #0
 800d9e2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d9e4:	4b79      	ldr	r3, [pc, #484]	@ (800dbcc <HAL_RCC_GetSysClockFreq+0x200>)
 800d9e6:	689b      	ldr	r3, [r3, #8]
 800d9e8:	f003 030c 	and.w	r3, r3, #12
 800d9ec:	2b08      	cmp	r3, #8
 800d9ee:	d00d      	beq.n	800da0c <HAL_RCC_GetSysClockFreq+0x40>
 800d9f0:	2b08      	cmp	r3, #8
 800d9f2:	f200 80e1 	bhi.w	800dbb8 <HAL_RCC_GetSysClockFreq+0x1ec>
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d002      	beq.n	800da00 <HAL_RCC_GetSysClockFreq+0x34>
 800d9fa:	2b04      	cmp	r3, #4
 800d9fc:	d003      	beq.n	800da06 <HAL_RCC_GetSysClockFreq+0x3a>
 800d9fe:	e0db      	b.n	800dbb8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800da00:	4b73      	ldr	r3, [pc, #460]	@ (800dbd0 <HAL_RCC_GetSysClockFreq+0x204>)
 800da02:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800da04:	e0db      	b.n	800dbbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800da06:	4b73      	ldr	r3, [pc, #460]	@ (800dbd4 <HAL_RCC_GetSysClockFreq+0x208>)
 800da08:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800da0a:	e0d8      	b.n	800dbbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800da0c:	4b6f      	ldr	r3, [pc, #444]	@ (800dbcc <HAL_RCC_GetSysClockFreq+0x200>)
 800da0e:	685b      	ldr	r3, [r3, #4]
 800da10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800da14:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800da16:	4b6d      	ldr	r3, [pc, #436]	@ (800dbcc <HAL_RCC_GetSysClockFreq+0x200>)
 800da18:	685b      	ldr	r3, [r3, #4]
 800da1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d063      	beq.n	800daea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800da22:	4b6a      	ldr	r3, [pc, #424]	@ (800dbcc <HAL_RCC_GetSysClockFreq+0x200>)
 800da24:	685b      	ldr	r3, [r3, #4]
 800da26:	099b      	lsrs	r3, r3, #6
 800da28:	2200      	movs	r2, #0
 800da2a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800da2c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800da2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da34:	633b      	str	r3, [r7, #48]	@ 0x30
 800da36:	2300      	movs	r3, #0
 800da38:	637b      	str	r3, [r7, #52]	@ 0x34
 800da3a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800da3e:	4622      	mov	r2, r4
 800da40:	462b      	mov	r3, r5
 800da42:	f04f 0000 	mov.w	r0, #0
 800da46:	f04f 0100 	mov.w	r1, #0
 800da4a:	0159      	lsls	r1, r3, #5
 800da4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800da50:	0150      	lsls	r0, r2, #5
 800da52:	4602      	mov	r2, r0
 800da54:	460b      	mov	r3, r1
 800da56:	4621      	mov	r1, r4
 800da58:	1a51      	subs	r1, r2, r1
 800da5a:	6139      	str	r1, [r7, #16]
 800da5c:	4629      	mov	r1, r5
 800da5e:	eb63 0301 	sbc.w	r3, r3, r1
 800da62:	617b      	str	r3, [r7, #20]
 800da64:	f04f 0200 	mov.w	r2, #0
 800da68:	f04f 0300 	mov.w	r3, #0
 800da6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800da70:	4659      	mov	r1, fp
 800da72:	018b      	lsls	r3, r1, #6
 800da74:	4651      	mov	r1, sl
 800da76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800da7a:	4651      	mov	r1, sl
 800da7c:	018a      	lsls	r2, r1, #6
 800da7e:	4651      	mov	r1, sl
 800da80:	ebb2 0801 	subs.w	r8, r2, r1
 800da84:	4659      	mov	r1, fp
 800da86:	eb63 0901 	sbc.w	r9, r3, r1
 800da8a:	f04f 0200 	mov.w	r2, #0
 800da8e:	f04f 0300 	mov.w	r3, #0
 800da92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800da96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800da9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800da9e:	4690      	mov	r8, r2
 800daa0:	4699      	mov	r9, r3
 800daa2:	4623      	mov	r3, r4
 800daa4:	eb18 0303 	adds.w	r3, r8, r3
 800daa8:	60bb      	str	r3, [r7, #8]
 800daaa:	462b      	mov	r3, r5
 800daac:	eb49 0303 	adc.w	r3, r9, r3
 800dab0:	60fb      	str	r3, [r7, #12]
 800dab2:	f04f 0200 	mov.w	r2, #0
 800dab6:	f04f 0300 	mov.w	r3, #0
 800daba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800dabe:	4629      	mov	r1, r5
 800dac0:	024b      	lsls	r3, r1, #9
 800dac2:	4621      	mov	r1, r4
 800dac4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800dac8:	4621      	mov	r1, r4
 800daca:	024a      	lsls	r2, r1, #9
 800dacc:	4610      	mov	r0, r2
 800dace:	4619      	mov	r1, r3
 800dad0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dad2:	2200      	movs	r2, #0
 800dad4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800dad6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800dad8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800dadc:	f7fb f86c 	bl	8008bb8 <__aeabi_uldivmod>
 800dae0:	4602      	mov	r2, r0
 800dae2:	460b      	mov	r3, r1
 800dae4:	4613      	mov	r3, r2
 800dae6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dae8:	e058      	b.n	800db9c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800daea:	4b38      	ldr	r3, [pc, #224]	@ (800dbcc <HAL_RCC_GetSysClockFreq+0x200>)
 800daec:	685b      	ldr	r3, [r3, #4]
 800daee:	099b      	lsrs	r3, r3, #6
 800daf0:	2200      	movs	r2, #0
 800daf2:	4618      	mov	r0, r3
 800daf4:	4611      	mov	r1, r2
 800daf6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800dafa:	623b      	str	r3, [r7, #32]
 800dafc:	2300      	movs	r3, #0
 800dafe:	627b      	str	r3, [r7, #36]	@ 0x24
 800db00:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800db04:	4642      	mov	r2, r8
 800db06:	464b      	mov	r3, r9
 800db08:	f04f 0000 	mov.w	r0, #0
 800db0c:	f04f 0100 	mov.w	r1, #0
 800db10:	0159      	lsls	r1, r3, #5
 800db12:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800db16:	0150      	lsls	r0, r2, #5
 800db18:	4602      	mov	r2, r0
 800db1a:	460b      	mov	r3, r1
 800db1c:	4641      	mov	r1, r8
 800db1e:	ebb2 0a01 	subs.w	sl, r2, r1
 800db22:	4649      	mov	r1, r9
 800db24:	eb63 0b01 	sbc.w	fp, r3, r1
 800db28:	f04f 0200 	mov.w	r2, #0
 800db2c:	f04f 0300 	mov.w	r3, #0
 800db30:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800db34:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800db38:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800db3c:	ebb2 040a 	subs.w	r4, r2, sl
 800db40:	eb63 050b 	sbc.w	r5, r3, fp
 800db44:	f04f 0200 	mov.w	r2, #0
 800db48:	f04f 0300 	mov.w	r3, #0
 800db4c:	00eb      	lsls	r3, r5, #3
 800db4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800db52:	00e2      	lsls	r2, r4, #3
 800db54:	4614      	mov	r4, r2
 800db56:	461d      	mov	r5, r3
 800db58:	4643      	mov	r3, r8
 800db5a:	18e3      	adds	r3, r4, r3
 800db5c:	603b      	str	r3, [r7, #0]
 800db5e:	464b      	mov	r3, r9
 800db60:	eb45 0303 	adc.w	r3, r5, r3
 800db64:	607b      	str	r3, [r7, #4]
 800db66:	f04f 0200 	mov.w	r2, #0
 800db6a:	f04f 0300 	mov.w	r3, #0
 800db6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 800db72:	4629      	mov	r1, r5
 800db74:	028b      	lsls	r3, r1, #10
 800db76:	4621      	mov	r1, r4
 800db78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800db7c:	4621      	mov	r1, r4
 800db7e:	028a      	lsls	r2, r1, #10
 800db80:	4610      	mov	r0, r2
 800db82:	4619      	mov	r1, r3
 800db84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800db86:	2200      	movs	r2, #0
 800db88:	61bb      	str	r3, [r7, #24]
 800db8a:	61fa      	str	r2, [r7, #28]
 800db8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800db90:	f7fb f812 	bl	8008bb8 <__aeabi_uldivmod>
 800db94:	4602      	mov	r2, r0
 800db96:	460b      	mov	r3, r1
 800db98:	4613      	mov	r3, r2
 800db9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800db9c:	4b0b      	ldr	r3, [pc, #44]	@ (800dbcc <HAL_RCC_GetSysClockFreq+0x200>)
 800db9e:	685b      	ldr	r3, [r3, #4]
 800dba0:	0c1b      	lsrs	r3, r3, #16
 800dba2:	f003 0303 	and.w	r3, r3, #3
 800dba6:	3301      	adds	r3, #1
 800dba8:	005b      	lsls	r3, r3, #1
 800dbaa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800dbac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800dbae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dbb0:	fbb2 f3f3 	udiv	r3, r2, r3
 800dbb4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800dbb6:	e002      	b.n	800dbbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800dbb8:	4b05      	ldr	r3, [pc, #20]	@ (800dbd0 <HAL_RCC_GetSysClockFreq+0x204>)
 800dbba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800dbbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 800dbbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	3750      	adds	r7, #80	@ 0x50
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dbca:	bf00      	nop
 800dbcc:	40023800 	.word	0x40023800
 800dbd0:	00f42400 	.word	0x00f42400
 800dbd4:	007a1200 	.word	0x007a1200

0800dbd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800dbd8:	b480      	push	{r7}
 800dbda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800dbdc:	4b03      	ldr	r3, [pc, #12]	@ (800dbec <HAL_RCC_GetHCLKFreq+0x14>)
 800dbde:	681b      	ldr	r3, [r3, #0]
}
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	46bd      	mov	sp, r7
 800dbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe8:	4770      	bx	lr
 800dbea:	bf00      	nop
 800dbec:	20000008 	.word	0x20000008

0800dbf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800dbf0:	b580      	push	{r7, lr}
 800dbf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800dbf4:	f7ff fff0 	bl	800dbd8 <HAL_RCC_GetHCLKFreq>
 800dbf8:	4602      	mov	r2, r0
 800dbfa:	4b05      	ldr	r3, [pc, #20]	@ (800dc10 <HAL_RCC_GetPCLK1Freq+0x20>)
 800dbfc:	689b      	ldr	r3, [r3, #8]
 800dbfe:	0a9b      	lsrs	r3, r3, #10
 800dc00:	f003 0307 	and.w	r3, r3, #7
 800dc04:	4903      	ldr	r1, [pc, #12]	@ (800dc14 <HAL_RCC_GetPCLK1Freq+0x24>)
 800dc06:	5ccb      	ldrb	r3, [r1, r3]
 800dc08:	fa22 f303 	lsr.w	r3, r2, r3
}
 800dc0c:	4618      	mov	r0, r3
 800dc0e:	bd80      	pop	{r7, pc}
 800dc10:	40023800 	.word	0x40023800
 800dc14:	080162f0 	.word	0x080162f0

0800dc18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800dc1c:	f7ff ffdc 	bl	800dbd8 <HAL_RCC_GetHCLKFreq>
 800dc20:	4602      	mov	r2, r0
 800dc22:	4b05      	ldr	r3, [pc, #20]	@ (800dc38 <HAL_RCC_GetPCLK2Freq+0x20>)
 800dc24:	689b      	ldr	r3, [r3, #8]
 800dc26:	0b5b      	lsrs	r3, r3, #13
 800dc28:	f003 0307 	and.w	r3, r3, #7
 800dc2c:	4903      	ldr	r1, [pc, #12]	@ (800dc3c <HAL_RCC_GetPCLK2Freq+0x24>)
 800dc2e:	5ccb      	ldrb	r3, [r1, r3]
 800dc30:	fa22 f303 	lsr.w	r3, r2, r3
}
 800dc34:	4618      	mov	r0, r3
 800dc36:	bd80      	pop	{r7, pc}
 800dc38:	40023800 	.word	0x40023800
 800dc3c:	080162f0 	.word	0x080162f0

0800dc40 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 800dc40:	b580      	push	{r7, lr}
 800dc42:	b082      	sub	sp, #8
 800dc44:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800dc46:	f7fc fc3f 	bl	800a4c8 <HAL_GetTick>
 800dc4a:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800dc4c:	4b5d      	ldr	r3, [pc, #372]	@ (800ddc4 <HAL_RCC_DeInit+0x184>)
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	4a5c      	ldr	r2, [pc, #368]	@ (800ddc4 <HAL_RCC_DeInit+0x184>)
 800dc52:	f043 0301 	orr.w	r3, r3, #1
 800dc56:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800dc58:	e008      	b.n	800dc6c <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800dc5a:	f7fc fc35 	bl	800a4c8 <HAL_GetTick>
 800dc5e:	4602      	mov	r2, r0
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	1ad3      	subs	r3, r2, r3
 800dc64:	2b02      	cmp	r3, #2
 800dc66:	d901      	bls.n	800dc6c <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 800dc68:	2303      	movs	r3, #3
 800dc6a:	e0a7      	b.n	800ddbc <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800dc6c:	4b55      	ldr	r3, [pc, #340]	@ (800ddc4 <HAL_RCC_DeInit+0x184>)
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	f003 0302 	and.w	r3, r3, #2
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d0f0      	beq.n	800dc5a <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 800dc78:	4b52      	ldr	r3, [pc, #328]	@ (800ddc4 <HAL_RCC_DeInit+0x184>)
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	4a51      	ldr	r2, [pc, #324]	@ (800ddc4 <HAL_RCC_DeInit+0x184>)
 800dc7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dc82:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800dc84:	f7fc fc20 	bl	800a4c8 <HAL_GetTick>
 800dc88:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 800dc8a:	4b4e      	ldr	r3, [pc, #312]	@ (800ddc4 <HAL_RCC_DeInit+0x184>)
 800dc8c:	2200      	movs	r2, #0
 800dc8e:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 800dc90:	e00a      	b.n	800dca8 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800dc92:	f7fc fc19 	bl	800a4c8 <HAL_GetTick>
 800dc96:	4602      	mov	r2, r0
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	1ad3      	subs	r3, r2, r3
 800dc9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dca0:	4293      	cmp	r3, r2
 800dca2:	d901      	bls.n	800dca8 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 800dca4:	2303      	movs	r3, #3
 800dca6:	e089      	b.n	800ddbc <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 800dca8:	4b46      	ldr	r3, [pc, #280]	@ (800ddc4 <HAL_RCC_DeInit+0x184>)
 800dcaa:	689b      	ldr	r3, [r3, #8]
 800dcac:	f003 030c 	and.w	r3, r3, #12
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d1ee      	bne.n	800dc92 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800dcb4:	f7fc fc08 	bl	800a4c8 <HAL_GetTick>
 800dcb8:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 800dcba:	4b42      	ldr	r3, [pc, #264]	@ (800ddc4 <HAL_RCC_DeInit+0x184>)
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	4a41      	ldr	r2, [pc, #260]	@ (800ddc4 <HAL_RCC_DeInit+0x184>)
 800dcc0:	f423 2350 	bic.w	r3, r3, #851968	@ 0xd0000
 800dcc4:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800dcc6:	e008      	b.n	800dcda <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800dcc8:	f7fc fbfe 	bl	800a4c8 <HAL_GetTick>
 800dccc:	4602      	mov	r2, r0
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	1ad3      	subs	r3, r2, r3
 800dcd2:	2b64      	cmp	r3, #100	@ 0x64
 800dcd4:	d901      	bls.n	800dcda <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 800dcd6:	2303      	movs	r3, #3
 800dcd8:	e070      	b.n	800ddbc <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800dcda:	4b3a      	ldr	r3, [pc, #232]	@ (800ddc4 <HAL_RCC_DeInit+0x184>)
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d1f0      	bne.n	800dcc8 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800dce6:	f7fc fbef 	bl	800a4c8 <HAL_GetTick>
 800dcea:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800dcec:	4b35      	ldr	r3, [pc, #212]	@ (800ddc4 <HAL_RCC_DeInit+0x184>)
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	4a34      	ldr	r2, [pc, #208]	@ (800ddc4 <HAL_RCC_DeInit+0x184>)
 800dcf2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800dcf6:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800dcf8:	e008      	b.n	800dd0c <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800dcfa:	f7fc fbe5 	bl	800a4c8 <HAL_GetTick>
 800dcfe:	4602      	mov	r2, r0
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	1ad3      	subs	r3, r2, r3
 800dd04:	2b02      	cmp	r3, #2
 800dd06:	d901      	bls.n	800dd0c <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 800dd08:	2303      	movs	r3, #3
 800dd0a:	e057      	b.n	800ddbc <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800dd0c:	4b2d      	ldr	r3, [pc, #180]	@ (800ddc4 <HAL_RCC_DeInit+0x184>)
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d1f0      	bne.n	800dcfa <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800dd18:	f7fc fbd6 	bl	800a4c8 <HAL_GetTick>
 800dd1c:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 800dd1e:	4b29      	ldr	r3, [pc, #164]	@ (800ddc4 <HAL_RCC_DeInit+0x184>)
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	4a28      	ldr	r2, [pc, #160]	@ (800ddc4 <HAL_RCC_DeInit+0x184>)
 800dd24:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800dd28:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 800dd2a:	e008      	b.n	800dd3e <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800dd2c:	f7fc fbcc 	bl	800a4c8 <HAL_GetTick>
 800dd30:	4602      	mov	r2, r0
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	1ad3      	subs	r3, r2, r3
 800dd36:	2b02      	cmp	r3, #2
 800dd38:	d901      	bls.n	800dd3e <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 800dd3a:	2303      	movs	r3, #3
 800dd3c:	e03e      	b.n	800ddbc <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 800dd3e:	4b21      	ldr	r3, [pc, #132]	@ (800ddc4 <HAL_RCC_DeInit+0x184>)
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d1f0      	bne.n	800dd2c <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 800dd4a:	4b1e      	ldr	r3, [pc, #120]	@ (800ddc4 <HAL_RCC_DeInit+0x184>)
 800dd4c:	4a1e      	ldr	r2, [pc, #120]	@ (800ddc8 <HAL_RCC_DeInit+0x188>)
 800dd4e:	605a      	str	r2, [r3, #4]
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F411xE)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 800dd50:	4b1c      	ldr	r3, [pc, #112]	@ (800ddc4 <HAL_RCC_DeInit+0x184>)
 800dd52:	4a1e      	ldr	r2, [pc, #120]	@ (800ddcc <HAL_RCC_DeInit+0x18c>)
 800dd54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 800dd58:	4b1a      	ldr	r3, [pc, #104]	@ (800ddc4 <HAL_RCC_DeInit+0x184>)
 800dd5a:	68db      	ldr	r3, [r3, #12]
 800dd5c:	4a19      	ldr	r2, [pc, #100]	@ (800ddc4 <HAL_RCC_DeInit+0x184>)
 800dd5e:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 800dd62:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 800dd64:	4b17      	ldr	r3, [pc, #92]	@ (800ddc4 <HAL_RCC_DeInit+0x184>)
 800dd66:	68db      	ldr	r3, [r3, #12]
 800dd68:	4a16      	ldr	r2, [pc, #88]	@ (800ddc4 <HAL_RCC_DeInit+0x184>)
 800dd6a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800dd6e:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC |
 800dd70:	4b14      	ldr	r3, [pc, #80]	@ (800ddc4 <HAL_RCC_DeInit+0x184>)
 800dd72:	68db      	ldr	r3, [r3, #12]
 800dd74:	4a13      	ldr	r2, [pc, #76]	@ (800ddc4 <HAL_RCC_DeInit+0x184>)
 800dd76:	f443 031f 	orr.w	r3, r3, #10420224	@ 0x9f0000
 800dd7a:	60d3      	str	r3, [r2, #12]
          RCC_CIR_CSSC);

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 800dd7c:	4b11      	ldr	r3, [pc, #68]	@ (800ddc4 <HAL_RCC_DeInit+0x184>)
 800dd7e:	68db      	ldr	r3, [r3, #12]
 800dd80:	4a10      	ldr	r2, [pc, #64]	@ (800ddc4 <HAL_RCC_DeInit+0x184>)
 800dd82:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800dd86:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800dd88:	4b0e      	ldr	r3, [pc, #56]	@ (800ddc4 <HAL_RCC_DeInit+0x184>)
 800dd8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dd8c:	4a0d      	ldr	r2, [pc, #52]	@ (800ddc4 <HAL_RCC_DeInit+0x184>)
 800dd8e:	f023 0301 	bic.w	r3, r3, #1
 800dd92:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 800dd94:	4b0b      	ldr	r3, [pc, #44]	@ (800ddc4 <HAL_RCC_DeInit+0x184>)
 800dd96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dd98:	4a0a      	ldr	r2, [pc, #40]	@ (800ddc4 <HAL_RCC_DeInit+0x184>)
 800dd9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800dd9e:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 800dda0:	4b0b      	ldr	r3, [pc, #44]	@ (800ddd0 <HAL_RCC_DeInit+0x190>)
 800dda2:	4a0c      	ldr	r2, [pc, #48]	@ (800ddd4 <HAL_RCC_DeInit+0x194>)
 800dda4:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800dda6:	4b0c      	ldr	r3, [pc, #48]	@ (800ddd8 <HAL_RCC_DeInit+0x198>)
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	4618      	mov	r0, r3
 800ddac:	f7fc fb48 	bl	800a440 <HAL_InitTick>
 800ddb0:	4603      	mov	r3, r0
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d001      	beq.n	800ddba <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 800ddb6:	2301      	movs	r3, #1
 800ddb8:	e000      	b.n	800ddbc <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 800ddba:	2300      	movs	r3, #0
  }
}
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	3708      	adds	r7, #8
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	bd80      	pop	{r7, pc}
 800ddc4:	40023800 	.word	0x40023800
 800ddc8:	04003010 	.word	0x04003010
 800ddcc:	20003010 	.word	0x20003010
 800ddd0:	20000008 	.word	0x20000008
 800ddd4:	00f42400 	.word	0x00f42400
 800ddd8:	2000000c 	.word	0x2000000c

0800dddc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b082      	sub	sp, #8
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d101      	bne.n	800ddee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ddea:	2301      	movs	r3, #1
 800ddec:	e041      	b.n	800de72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ddf4:	b2db      	uxtb	r3, r3
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d106      	bne.n	800de08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	2200      	movs	r2, #0
 800ddfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800de02:	6878      	ldr	r0, [r7, #4]
 800de04:	f7fc f986 	bl	800a114 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	2202      	movs	r2, #2
 800de0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	681a      	ldr	r2, [r3, #0]
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	3304      	adds	r3, #4
 800de18:	4619      	mov	r1, r3
 800de1a:	4610      	mov	r0, r2
 800de1c:	f000 fb32 	bl	800e484 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	2201      	movs	r2, #1
 800de24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	2201      	movs	r2, #1
 800de2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	2201      	movs	r2, #1
 800de34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	2201      	movs	r2, #1
 800de3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	2201      	movs	r2, #1
 800de44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	2201      	movs	r2, #1
 800de4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	2201      	movs	r2, #1
 800de54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	2201      	movs	r2, #1
 800de5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	2201      	movs	r2, #1
 800de64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	2201      	movs	r2, #1
 800de6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800de70:	2300      	movs	r3, #0
}
 800de72:	4618      	mov	r0, r3
 800de74:	3708      	adds	r7, #8
 800de76:	46bd      	mov	sp, r7
 800de78:	bd80      	pop	{r7, pc}

0800de7a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800de7a:	b580      	push	{r7, lr}
 800de7c:	b082      	sub	sp, #8
 800de7e:	af00      	add	r7, sp, #0
 800de80:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	2b00      	cmp	r3, #0
 800de86:	d101      	bne.n	800de8c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800de88:	2301      	movs	r3, #1
 800de8a:	e041      	b.n	800df10 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800de92:	b2db      	uxtb	r3, r3
 800de94:	2b00      	cmp	r3, #0
 800de96:	d106      	bne.n	800dea6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	2200      	movs	r2, #0
 800de9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800dea0:	6878      	ldr	r0, [r7, #4]
 800dea2:	f000 f839 	bl	800df18 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	2202      	movs	r2, #2
 800deaa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	681a      	ldr	r2, [r3, #0]
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	3304      	adds	r3, #4
 800deb6:	4619      	mov	r1, r3
 800deb8:	4610      	mov	r0, r2
 800deba:	f000 fae3 	bl	800e484 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	2201      	movs	r2, #1
 800dec2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	2201      	movs	r2, #1
 800deca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	2201      	movs	r2, #1
 800ded2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	2201      	movs	r2, #1
 800deda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	2201      	movs	r2, #1
 800dee2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	2201      	movs	r2, #1
 800deea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	2201      	movs	r2, #1
 800def2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	2201      	movs	r2, #1
 800defa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	2201      	movs	r2, #1
 800df02:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	2201      	movs	r2, #1
 800df0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800df0e:	2300      	movs	r3, #0
}
 800df10:	4618      	mov	r0, r3
 800df12:	3708      	adds	r7, #8
 800df14:	46bd      	mov	sp, r7
 800df16:	bd80      	pop	{r7, pc}

0800df18 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800df18:	b480      	push	{r7}
 800df1a:	b083      	sub	sp, #12
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800df20:	bf00      	nop
 800df22:	370c      	adds	r7, #12
 800df24:	46bd      	mov	sp, r7
 800df26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df2a:	4770      	bx	lr

0800df2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800df2c:	b580      	push	{r7, lr}
 800df2e:	b084      	sub	sp, #16
 800df30:	af00      	add	r7, sp, #0
 800df32:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	68db      	ldr	r3, [r3, #12]
 800df3a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	691b      	ldr	r3, [r3, #16]
 800df42:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800df44:	68bb      	ldr	r3, [r7, #8]
 800df46:	f003 0302 	and.w	r3, r3, #2
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d020      	beq.n	800df90 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	f003 0302 	and.w	r3, r3, #2
 800df54:	2b00      	cmp	r3, #0
 800df56:	d01b      	beq.n	800df90 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	f06f 0202 	mvn.w	r2, #2
 800df60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	2201      	movs	r2, #1
 800df66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	699b      	ldr	r3, [r3, #24]
 800df6e:	f003 0303 	and.w	r3, r3, #3
 800df72:	2b00      	cmp	r3, #0
 800df74:	d003      	beq.n	800df7e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800df76:	6878      	ldr	r0, [r7, #4]
 800df78:	f000 fa65 	bl	800e446 <HAL_TIM_IC_CaptureCallback>
 800df7c:	e005      	b.n	800df8a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800df7e:	6878      	ldr	r0, [r7, #4]
 800df80:	f000 fa57 	bl	800e432 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800df84:	6878      	ldr	r0, [r7, #4]
 800df86:	f000 fa68 	bl	800e45a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	2200      	movs	r2, #0
 800df8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800df90:	68bb      	ldr	r3, [r7, #8]
 800df92:	f003 0304 	and.w	r3, r3, #4
 800df96:	2b00      	cmp	r3, #0
 800df98:	d020      	beq.n	800dfdc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	f003 0304 	and.w	r3, r3, #4
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d01b      	beq.n	800dfdc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	f06f 0204 	mvn.w	r2, #4
 800dfac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	2202      	movs	r2, #2
 800dfb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	699b      	ldr	r3, [r3, #24]
 800dfba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d003      	beq.n	800dfca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dfc2:	6878      	ldr	r0, [r7, #4]
 800dfc4:	f000 fa3f 	bl	800e446 <HAL_TIM_IC_CaptureCallback>
 800dfc8:	e005      	b.n	800dfd6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dfca:	6878      	ldr	r0, [r7, #4]
 800dfcc:	f000 fa31 	bl	800e432 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dfd0:	6878      	ldr	r0, [r7, #4]
 800dfd2:	f000 fa42 	bl	800e45a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	2200      	movs	r2, #0
 800dfda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800dfdc:	68bb      	ldr	r3, [r7, #8]
 800dfde:	f003 0308 	and.w	r3, r3, #8
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d020      	beq.n	800e028 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	f003 0308 	and.w	r3, r3, #8
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d01b      	beq.n	800e028 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	f06f 0208 	mvn.w	r2, #8
 800dff8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	2204      	movs	r2, #4
 800dffe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	69db      	ldr	r3, [r3, #28]
 800e006:	f003 0303 	and.w	r3, r3, #3
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d003      	beq.n	800e016 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e00e:	6878      	ldr	r0, [r7, #4]
 800e010:	f000 fa19 	bl	800e446 <HAL_TIM_IC_CaptureCallback>
 800e014:	e005      	b.n	800e022 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e016:	6878      	ldr	r0, [r7, #4]
 800e018:	f000 fa0b 	bl	800e432 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e01c:	6878      	ldr	r0, [r7, #4]
 800e01e:	f000 fa1c 	bl	800e45a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	2200      	movs	r2, #0
 800e026:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800e028:	68bb      	ldr	r3, [r7, #8]
 800e02a:	f003 0310 	and.w	r3, r3, #16
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d020      	beq.n	800e074 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	f003 0310 	and.w	r3, r3, #16
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d01b      	beq.n	800e074 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	f06f 0210 	mvn.w	r2, #16
 800e044:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	2208      	movs	r2, #8
 800e04a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	69db      	ldr	r3, [r3, #28]
 800e052:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e056:	2b00      	cmp	r3, #0
 800e058:	d003      	beq.n	800e062 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e05a:	6878      	ldr	r0, [r7, #4]
 800e05c:	f000 f9f3 	bl	800e446 <HAL_TIM_IC_CaptureCallback>
 800e060:	e005      	b.n	800e06e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e062:	6878      	ldr	r0, [r7, #4]
 800e064:	f000 f9e5 	bl	800e432 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e068:	6878      	ldr	r0, [r7, #4]
 800e06a:	f000 f9f6 	bl	800e45a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	2200      	movs	r2, #0
 800e072:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800e074:	68bb      	ldr	r3, [r7, #8]
 800e076:	f003 0301 	and.w	r3, r3, #1
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d00c      	beq.n	800e098 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	f003 0301 	and.w	r3, r3, #1
 800e084:	2b00      	cmp	r3, #0
 800e086:	d007      	beq.n	800e098 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	f06f 0201 	mvn.w	r2, #1
 800e090:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e092:	6878      	ldr	r0, [r7, #4]
 800e094:	f000 f9c3 	bl	800e41e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800e098:	68bb      	ldr	r3, [r7, #8]
 800e09a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d00c      	beq.n	800e0bc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d007      	beq.n	800e0bc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800e0b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e0b6:	6878      	ldr	r0, [r7, #4]
 800e0b8:	f000 fd5a 	bl	800eb70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800e0bc:	68bb      	ldr	r3, [r7, #8]
 800e0be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d00c      	beq.n	800e0e0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d007      	beq.n	800e0e0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800e0d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e0da:	6878      	ldr	r0, [r7, #4]
 800e0dc:	f000 f9c7 	bl	800e46e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800e0e0:	68bb      	ldr	r3, [r7, #8]
 800e0e2:	f003 0320 	and.w	r3, r3, #32
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d00c      	beq.n	800e104 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	f003 0320 	and.w	r3, r3, #32
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d007      	beq.n	800e104 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	f06f 0220 	mvn.w	r2, #32
 800e0fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e0fe:	6878      	ldr	r0, [r7, #4]
 800e100:	f000 fd2c 	bl	800eb5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e104:	bf00      	nop
 800e106:	3710      	adds	r7, #16
 800e108:	46bd      	mov	sp, r7
 800e10a:	bd80      	pop	{r7, pc}

0800e10c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e10c:	b580      	push	{r7, lr}
 800e10e:	b086      	sub	sp, #24
 800e110:	af00      	add	r7, sp, #0
 800e112:	60f8      	str	r0, [r7, #12]
 800e114:	60b9      	str	r1, [r7, #8]
 800e116:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e118:	2300      	movs	r3, #0
 800e11a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e122:	2b01      	cmp	r3, #1
 800e124:	d101      	bne.n	800e12a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e126:	2302      	movs	r3, #2
 800e128:	e0ae      	b.n	800e288 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	2201      	movs	r2, #1
 800e12e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	2b0c      	cmp	r3, #12
 800e136:	f200 809f 	bhi.w	800e278 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800e13a:	a201      	add	r2, pc, #4	@ (adr r2, 800e140 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e13c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e140:	0800e175 	.word	0x0800e175
 800e144:	0800e279 	.word	0x0800e279
 800e148:	0800e279 	.word	0x0800e279
 800e14c:	0800e279 	.word	0x0800e279
 800e150:	0800e1b5 	.word	0x0800e1b5
 800e154:	0800e279 	.word	0x0800e279
 800e158:	0800e279 	.word	0x0800e279
 800e15c:	0800e279 	.word	0x0800e279
 800e160:	0800e1f7 	.word	0x0800e1f7
 800e164:	0800e279 	.word	0x0800e279
 800e168:	0800e279 	.word	0x0800e279
 800e16c:	0800e279 	.word	0x0800e279
 800e170:	0800e237 	.word	0x0800e237
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	68b9      	ldr	r1, [r7, #8]
 800e17a:	4618      	mov	r0, r3
 800e17c:	f000 fa08 	bl	800e590 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	699a      	ldr	r2, [r3, #24]
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	f042 0208 	orr.w	r2, r2, #8
 800e18e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	699a      	ldr	r2, [r3, #24]
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	f022 0204 	bic.w	r2, r2, #4
 800e19e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	6999      	ldr	r1, [r3, #24]
 800e1a6:	68bb      	ldr	r3, [r7, #8]
 800e1a8:	691a      	ldr	r2, [r3, #16]
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	430a      	orrs	r2, r1
 800e1b0:	619a      	str	r2, [r3, #24]
      break;
 800e1b2:	e064      	b.n	800e27e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	68b9      	ldr	r1, [r7, #8]
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	f000 fa4e 	bl	800e65c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	699a      	ldr	r2, [r3, #24]
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e1ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	699a      	ldr	r2, [r3, #24]
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e1de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	6999      	ldr	r1, [r3, #24]
 800e1e6:	68bb      	ldr	r3, [r7, #8]
 800e1e8:	691b      	ldr	r3, [r3, #16]
 800e1ea:	021a      	lsls	r2, r3, #8
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	430a      	orrs	r2, r1
 800e1f2:	619a      	str	r2, [r3, #24]
      break;
 800e1f4:	e043      	b.n	800e27e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	68b9      	ldr	r1, [r7, #8]
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	f000 fa99 	bl	800e734 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	69da      	ldr	r2, [r3, #28]
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	f042 0208 	orr.w	r2, r2, #8
 800e210:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	69da      	ldr	r2, [r3, #28]
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	f022 0204 	bic.w	r2, r2, #4
 800e220:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	69d9      	ldr	r1, [r3, #28]
 800e228:	68bb      	ldr	r3, [r7, #8]
 800e22a:	691a      	ldr	r2, [r3, #16]
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	430a      	orrs	r2, r1
 800e232:	61da      	str	r2, [r3, #28]
      break;
 800e234:	e023      	b.n	800e27e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	68b9      	ldr	r1, [r7, #8]
 800e23c:	4618      	mov	r0, r3
 800e23e:	f000 fae3 	bl	800e808 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	69da      	ldr	r2, [r3, #28]
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e250:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	69da      	ldr	r2, [r3, #28]
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e260:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	69d9      	ldr	r1, [r3, #28]
 800e268:	68bb      	ldr	r3, [r7, #8]
 800e26a:	691b      	ldr	r3, [r3, #16]
 800e26c:	021a      	lsls	r2, r3, #8
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	430a      	orrs	r2, r1
 800e274:	61da      	str	r2, [r3, #28]
      break;
 800e276:	e002      	b.n	800e27e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800e278:	2301      	movs	r3, #1
 800e27a:	75fb      	strb	r3, [r7, #23]
      break;
 800e27c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	2200      	movs	r2, #0
 800e282:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e286:	7dfb      	ldrb	r3, [r7, #23]
}
 800e288:	4618      	mov	r0, r3
 800e28a:	3718      	adds	r7, #24
 800e28c:	46bd      	mov	sp, r7
 800e28e:	bd80      	pop	{r7, pc}

0800e290 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e290:	b580      	push	{r7, lr}
 800e292:	b084      	sub	sp, #16
 800e294:	af00      	add	r7, sp, #0
 800e296:	6078      	str	r0, [r7, #4]
 800e298:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e29a:	2300      	movs	r3, #0
 800e29c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e2a4:	2b01      	cmp	r3, #1
 800e2a6:	d101      	bne.n	800e2ac <HAL_TIM_ConfigClockSource+0x1c>
 800e2a8:	2302      	movs	r3, #2
 800e2aa:	e0b4      	b.n	800e416 <HAL_TIM_ConfigClockSource+0x186>
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	2201      	movs	r2, #1
 800e2b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	2202      	movs	r2, #2
 800e2b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	689b      	ldr	r3, [r3, #8]
 800e2c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e2c4:	68bb      	ldr	r3, [r7, #8]
 800e2c6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800e2ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e2cc:	68bb      	ldr	r3, [r7, #8]
 800e2ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e2d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	68ba      	ldr	r2, [r7, #8]
 800e2da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e2dc:	683b      	ldr	r3, [r7, #0]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e2e4:	d03e      	beq.n	800e364 <HAL_TIM_ConfigClockSource+0xd4>
 800e2e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e2ea:	f200 8087 	bhi.w	800e3fc <HAL_TIM_ConfigClockSource+0x16c>
 800e2ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e2f2:	f000 8086 	beq.w	800e402 <HAL_TIM_ConfigClockSource+0x172>
 800e2f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e2fa:	d87f      	bhi.n	800e3fc <HAL_TIM_ConfigClockSource+0x16c>
 800e2fc:	2b70      	cmp	r3, #112	@ 0x70
 800e2fe:	d01a      	beq.n	800e336 <HAL_TIM_ConfigClockSource+0xa6>
 800e300:	2b70      	cmp	r3, #112	@ 0x70
 800e302:	d87b      	bhi.n	800e3fc <HAL_TIM_ConfigClockSource+0x16c>
 800e304:	2b60      	cmp	r3, #96	@ 0x60
 800e306:	d050      	beq.n	800e3aa <HAL_TIM_ConfigClockSource+0x11a>
 800e308:	2b60      	cmp	r3, #96	@ 0x60
 800e30a:	d877      	bhi.n	800e3fc <HAL_TIM_ConfigClockSource+0x16c>
 800e30c:	2b50      	cmp	r3, #80	@ 0x50
 800e30e:	d03c      	beq.n	800e38a <HAL_TIM_ConfigClockSource+0xfa>
 800e310:	2b50      	cmp	r3, #80	@ 0x50
 800e312:	d873      	bhi.n	800e3fc <HAL_TIM_ConfigClockSource+0x16c>
 800e314:	2b40      	cmp	r3, #64	@ 0x40
 800e316:	d058      	beq.n	800e3ca <HAL_TIM_ConfigClockSource+0x13a>
 800e318:	2b40      	cmp	r3, #64	@ 0x40
 800e31a:	d86f      	bhi.n	800e3fc <HAL_TIM_ConfigClockSource+0x16c>
 800e31c:	2b30      	cmp	r3, #48	@ 0x30
 800e31e:	d064      	beq.n	800e3ea <HAL_TIM_ConfigClockSource+0x15a>
 800e320:	2b30      	cmp	r3, #48	@ 0x30
 800e322:	d86b      	bhi.n	800e3fc <HAL_TIM_ConfigClockSource+0x16c>
 800e324:	2b20      	cmp	r3, #32
 800e326:	d060      	beq.n	800e3ea <HAL_TIM_ConfigClockSource+0x15a>
 800e328:	2b20      	cmp	r3, #32
 800e32a:	d867      	bhi.n	800e3fc <HAL_TIM_ConfigClockSource+0x16c>
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d05c      	beq.n	800e3ea <HAL_TIM_ConfigClockSource+0x15a>
 800e330:	2b10      	cmp	r3, #16
 800e332:	d05a      	beq.n	800e3ea <HAL_TIM_ConfigClockSource+0x15a>
 800e334:	e062      	b.n	800e3fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e33a:	683b      	ldr	r3, [r7, #0]
 800e33c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e33e:	683b      	ldr	r3, [r7, #0]
 800e340:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e342:	683b      	ldr	r3, [r7, #0]
 800e344:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e346:	f000 fb29 	bl	800e99c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	689b      	ldr	r3, [r3, #8]
 800e350:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e352:	68bb      	ldr	r3, [r7, #8]
 800e354:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800e358:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	68ba      	ldr	r2, [r7, #8]
 800e360:	609a      	str	r2, [r3, #8]
      break;
 800e362:	e04f      	b.n	800e404 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e368:	683b      	ldr	r3, [r7, #0]
 800e36a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e36c:	683b      	ldr	r3, [r7, #0]
 800e36e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e370:	683b      	ldr	r3, [r7, #0]
 800e372:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e374:	f000 fb12 	bl	800e99c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	689a      	ldr	r2, [r3, #8]
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800e386:	609a      	str	r2, [r3, #8]
      break;
 800e388:	e03c      	b.n	800e404 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e38e:	683b      	ldr	r3, [r7, #0]
 800e390:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e392:	683b      	ldr	r3, [r7, #0]
 800e394:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e396:	461a      	mov	r2, r3
 800e398:	f000 fa86 	bl	800e8a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	2150      	movs	r1, #80	@ 0x50
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	f000 fadf 	bl	800e966 <TIM_ITRx_SetConfig>
      break;
 800e3a8:	e02c      	b.n	800e404 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e3ae:	683b      	ldr	r3, [r7, #0]
 800e3b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e3b2:	683b      	ldr	r3, [r7, #0]
 800e3b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e3b6:	461a      	mov	r2, r3
 800e3b8:	f000 faa5 	bl	800e906 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	2160      	movs	r1, #96	@ 0x60
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	f000 facf 	bl	800e966 <TIM_ITRx_SetConfig>
      break;
 800e3c8:	e01c      	b.n	800e404 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e3ce:	683b      	ldr	r3, [r7, #0]
 800e3d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e3d2:	683b      	ldr	r3, [r7, #0]
 800e3d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e3d6:	461a      	mov	r2, r3
 800e3d8:	f000 fa66 	bl	800e8a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	2140      	movs	r1, #64	@ 0x40
 800e3e2:	4618      	mov	r0, r3
 800e3e4:	f000 fabf 	bl	800e966 <TIM_ITRx_SetConfig>
      break;
 800e3e8:	e00c      	b.n	800e404 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	681a      	ldr	r2, [r3, #0]
 800e3ee:	683b      	ldr	r3, [r7, #0]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	4619      	mov	r1, r3
 800e3f4:	4610      	mov	r0, r2
 800e3f6:	f000 fab6 	bl	800e966 <TIM_ITRx_SetConfig>
      break;
 800e3fa:	e003      	b.n	800e404 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800e3fc:	2301      	movs	r3, #1
 800e3fe:	73fb      	strb	r3, [r7, #15]
      break;
 800e400:	e000      	b.n	800e404 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800e402:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	2201      	movs	r2, #1
 800e408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	2200      	movs	r2, #0
 800e410:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e414:	7bfb      	ldrb	r3, [r7, #15]
}
 800e416:	4618      	mov	r0, r3
 800e418:	3710      	adds	r7, #16
 800e41a:	46bd      	mov	sp, r7
 800e41c:	bd80      	pop	{r7, pc}

0800e41e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e41e:	b480      	push	{r7}
 800e420:	b083      	sub	sp, #12
 800e422:	af00      	add	r7, sp, #0
 800e424:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800e426:	bf00      	nop
 800e428:	370c      	adds	r7, #12
 800e42a:	46bd      	mov	sp, r7
 800e42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e430:	4770      	bx	lr

0800e432 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e432:	b480      	push	{r7}
 800e434:	b083      	sub	sp, #12
 800e436:	af00      	add	r7, sp, #0
 800e438:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e43a:	bf00      	nop
 800e43c:	370c      	adds	r7, #12
 800e43e:	46bd      	mov	sp, r7
 800e440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e444:	4770      	bx	lr

0800e446 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e446:	b480      	push	{r7}
 800e448:	b083      	sub	sp, #12
 800e44a:	af00      	add	r7, sp, #0
 800e44c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e44e:	bf00      	nop
 800e450:	370c      	adds	r7, #12
 800e452:	46bd      	mov	sp, r7
 800e454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e458:	4770      	bx	lr

0800e45a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e45a:	b480      	push	{r7}
 800e45c:	b083      	sub	sp, #12
 800e45e:	af00      	add	r7, sp, #0
 800e460:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e462:	bf00      	nop
 800e464:	370c      	adds	r7, #12
 800e466:	46bd      	mov	sp, r7
 800e468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e46c:	4770      	bx	lr

0800e46e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e46e:	b480      	push	{r7}
 800e470:	b083      	sub	sp, #12
 800e472:	af00      	add	r7, sp, #0
 800e474:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e476:	bf00      	nop
 800e478:	370c      	adds	r7, #12
 800e47a:	46bd      	mov	sp, r7
 800e47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e480:	4770      	bx	lr
	...

0800e484 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e484:	b480      	push	{r7}
 800e486:	b085      	sub	sp, #20
 800e488:	af00      	add	r7, sp, #0
 800e48a:	6078      	str	r0, [r7, #4]
 800e48c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	4a37      	ldr	r2, [pc, #220]	@ (800e574 <TIM_Base_SetConfig+0xf0>)
 800e498:	4293      	cmp	r3, r2
 800e49a:	d00f      	beq.n	800e4bc <TIM_Base_SetConfig+0x38>
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e4a2:	d00b      	beq.n	800e4bc <TIM_Base_SetConfig+0x38>
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	4a34      	ldr	r2, [pc, #208]	@ (800e578 <TIM_Base_SetConfig+0xf4>)
 800e4a8:	4293      	cmp	r3, r2
 800e4aa:	d007      	beq.n	800e4bc <TIM_Base_SetConfig+0x38>
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	4a33      	ldr	r2, [pc, #204]	@ (800e57c <TIM_Base_SetConfig+0xf8>)
 800e4b0:	4293      	cmp	r3, r2
 800e4b2:	d003      	beq.n	800e4bc <TIM_Base_SetConfig+0x38>
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	4a32      	ldr	r2, [pc, #200]	@ (800e580 <TIM_Base_SetConfig+0xfc>)
 800e4b8:	4293      	cmp	r3, r2
 800e4ba:	d108      	bne.n	800e4ce <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e4c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e4c4:	683b      	ldr	r3, [r7, #0]
 800e4c6:	685b      	ldr	r3, [r3, #4]
 800e4c8:	68fa      	ldr	r2, [r7, #12]
 800e4ca:	4313      	orrs	r3, r2
 800e4cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	4a28      	ldr	r2, [pc, #160]	@ (800e574 <TIM_Base_SetConfig+0xf0>)
 800e4d2:	4293      	cmp	r3, r2
 800e4d4:	d01b      	beq.n	800e50e <TIM_Base_SetConfig+0x8a>
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e4dc:	d017      	beq.n	800e50e <TIM_Base_SetConfig+0x8a>
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	4a25      	ldr	r2, [pc, #148]	@ (800e578 <TIM_Base_SetConfig+0xf4>)
 800e4e2:	4293      	cmp	r3, r2
 800e4e4:	d013      	beq.n	800e50e <TIM_Base_SetConfig+0x8a>
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	4a24      	ldr	r2, [pc, #144]	@ (800e57c <TIM_Base_SetConfig+0xf8>)
 800e4ea:	4293      	cmp	r3, r2
 800e4ec:	d00f      	beq.n	800e50e <TIM_Base_SetConfig+0x8a>
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	4a23      	ldr	r2, [pc, #140]	@ (800e580 <TIM_Base_SetConfig+0xfc>)
 800e4f2:	4293      	cmp	r3, r2
 800e4f4:	d00b      	beq.n	800e50e <TIM_Base_SetConfig+0x8a>
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	4a22      	ldr	r2, [pc, #136]	@ (800e584 <TIM_Base_SetConfig+0x100>)
 800e4fa:	4293      	cmp	r3, r2
 800e4fc:	d007      	beq.n	800e50e <TIM_Base_SetConfig+0x8a>
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	4a21      	ldr	r2, [pc, #132]	@ (800e588 <TIM_Base_SetConfig+0x104>)
 800e502:	4293      	cmp	r3, r2
 800e504:	d003      	beq.n	800e50e <TIM_Base_SetConfig+0x8a>
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	4a20      	ldr	r2, [pc, #128]	@ (800e58c <TIM_Base_SetConfig+0x108>)
 800e50a:	4293      	cmp	r3, r2
 800e50c:	d108      	bne.n	800e520 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e514:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e516:	683b      	ldr	r3, [r7, #0]
 800e518:	68db      	ldr	r3, [r3, #12]
 800e51a:	68fa      	ldr	r2, [r7, #12]
 800e51c:	4313      	orrs	r3, r2
 800e51e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e526:	683b      	ldr	r3, [r7, #0]
 800e528:	695b      	ldr	r3, [r3, #20]
 800e52a:	4313      	orrs	r3, r2
 800e52c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e52e:	683b      	ldr	r3, [r7, #0]
 800e530:	689a      	ldr	r2, [r3, #8]
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e536:	683b      	ldr	r3, [r7, #0]
 800e538:	681a      	ldr	r2, [r3, #0]
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	4a0c      	ldr	r2, [pc, #48]	@ (800e574 <TIM_Base_SetConfig+0xf0>)
 800e542:	4293      	cmp	r3, r2
 800e544:	d103      	bne.n	800e54e <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e546:	683b      	ldr	r3, [r7, #0]
 800e548:	691a      	ldr	r2, [r3, #16]
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	f043 0204 	orr.w	r2, r3, #4
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	2201      	movs	r2, #1
 800e55e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	68fa      	ldr	r2, [r7, #12]
 800e564:	601a      	str	r2, [r3, #0]
}
 800e566:	bf00      	nop
 800e568:	3714      	adds	r7, #20
 800e56a:	46bd      	mov	sp, r7
 800e56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e570:	4770      	bx	lr
 800e572:	bf00      	nop
 800e574:	40010000 	.word	0x40010000
 800e578:	40000400 	.word	0x40000400
 800e57c:	40000800 	.word	0x40000800
 800e580:	40000c00 	.word	0x40000c00
 800e584:	40014000 	.word	0x40014000
 800e588:	40014400 	.word	0x40014400
 800e58c:	40014800 	.word	0x40014800

0800e590 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e590:	b480      	push	{r7}
 800e592:	b087      	sub	sp, #28
 800e594:	af00      	add	r7, sp, #0
 800e596:	6078      	str	r0, [r7, #4]
 800e598:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	6a1b      	ldr	r3, [r3, #32]
 800e59e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	6a1b      	ldr	r3, [r3, #32]
 800e5a4:	f023 0201 	bic.w	r2, r3, #1
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	685b      	ldr	r3, [r3, #4]
 800e5b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	699b      	ldr	r3, [r3, #24]
 800e5b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e5be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	f023 0303 	bic.w	r3, r3, #3
 800e5c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e5c8:	683b      	ldr	r3, [r7, #0]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	68fa      	ldr	r2, [r7, #12]
 800e5ce:	4313      	orrs	r3, r2
 800e5d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e5d2:	697b      	ldr	r3, [r7, #20]
 800e5d4:	f023 0302 	bic.w	r3, r3, #2
 800e5d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e5da:	683b      	ldr	r3, [r7, #0]
 800e5dc:	689b      	ldr	r3, [r3, #8]
 800e5de:	697a      	ldr	r2, [r7, #20]
 800e5e0:	4313      	orrs	r3, r2
 800e5e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	4a1c      	ldr	r2, [pc, #112]	@ (800e658 <TIM_OC1_SetConfig+0xc8>)
 800e5e8:	4293      	cmp	r3, r2
 800e5ea:	d10c      	bne.n	800e606 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e5ec:	697b      	ldr	r3, [r7, #20]
 800e5ee:	f023 0308 	bic.w	r3, r3, #8
 800e5f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e5f4:	683b      	ldr	r3, [r7, #0]
 800e5f6:	68db      	ldr	r3, [r3, #12]
 800e5f8:	697a      	ldr	r2, [r7, #20]
 800e5fa:	4313      	orrs	r3, r2
 800e5fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e5fe:	697b      	ldr	r3, [r7, #20]
 800e600:	f023 0304 	bic.w	r3, r3, #4
 800e604:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	4a13      	ldr	r2, [pc, #76]	@ (800e658 <TIM_OC1_SetConfig+0xc8>)
 800e60a:	4293      	cmp	r3, r2
 800e60c:	d111      	bne.n	800e632 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e60e:	693b      	ldr	r3, [r7, #16]
 800e610:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e614:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e616:	693b      	ldr	r3, [r7, #16]
 800e618:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e61c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e61e:	683b      	ldr	r3, [r7, #0]
 800e620:	695b      	ldr	r3, [r3, #20]
 800e622:	693a      	ldr	r2, [r7, #16]
 800e624:	4313      	orrs	r3, r2
 800e626:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e628:	683b      	ldr	r3, [r7, #0]
 800e62a:	699b      	ldr	r3, [r3, #24]
 800e62c:	693a      	ldr	r2, [r7, #16]
 800e62e:	4313      	orrs	r3, r2
 800e630:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	693a      	ldr	r2, [r7, #16]
 800e636:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	68fa      	ldr	r2, [r7, #12]
 800e63c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e63e:	683b      	ldr	r3, [r7, #0]
 800e640:	685a      	ldr	r2, [r3, #4]
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	697a      	ldr	r2, [r7, #20]
 800e64a:	621a      	str	r2, [r3, #32]
}
 800e64c:	bf00      	nop
 800e64e:	371c      	adds	r7, #28
 800e650:	46bd      	mov	sp, r7
 800e652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e656:	4770      	bx	lr
 800e658:	40010000 	.word	0x40010000

0800e65c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e65c:	b480      	push	{r7}
 800e65e:	b087      	sub	sp, #28
 800e660:	af00      	add	r7, sp, #0
 800e662:	6078      	str	r0, [r7, #4]
 800e664:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	6a1b      	ldr	r3, [r3, #32]
 800e66a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	6a1b      	ldr	r3, [r3, #32]
 800e670:	f023 0210 	bic.w	r2, r3, #16
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	685b      	ldr	r3, [r3, #4]
 800e67c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	699b      	ldr	r3, [r3, #24]
 800e682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e68a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e692:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e694:	683b      	ldr	r3, [r7, #0]
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	021b      	lsls	r3, r3, #8
 800e69a:	68fa      	ldr	r2, [r7, #12]
 800e69c:	4313      	orrs	r3, r2
 800e69e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e6a0:	697b      	ldr	r3, [r7, #20]
 800e6a2:	f023 0320 	bic.w	r3, r3, #32
 800e6a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e6a8:	683b      	ldr	r3, [r7, #0]
 800e6aa:	689b      	ldr	r3, [r3, #8]
 800e6ac:	011b      	lsls	r3, r3, #4
 800e6ae:	697a      	ldr	r2, [r7, #20]
 800e6b0:	4313      	orrs	r3, r2
 800e6b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	4a1e      	ldr	r2, [pc, #120]	@ (800e730 <TIM_OC2_SetConfig+0xd4>)
 800e6b8:	4293      	cmp	r3, r2
 800e6ba:	d10d      	bne.n	800e6d8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e6bc:	697b      	ldr	r3, [r7, #20]
 800e6be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e6c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e6c4:	683b      	ldr	r3, [r7, #0]
 800e6c6:	68db      	ldr	r3, [r3, #12]
 800e6c8:	011b      	lsls	r3, r3, #4
 800e6ca:	697a      	ldr	r2, [r7, #20]
 800e6cc:	4313      	orrs	r3, r2
 800e6ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e6d0:	697b      	ldr	r3, [r7, #20]
 800e6d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e6d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	4a15      	ldr	r2, [pc, #84]	@ (800e730 <TIM_OC2_SetConfig+0xd4>)
 800e6dc:	4293      	cmp	r3, r2
 800e6de:	d113      	bne.n	800e708 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e6e0:	693b      	ldr	r3, [r7, #16]
 800e6e2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e6e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e6e8:	693b      	ldr	r3, [r7, #16]
 800e6ea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e6ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e6f0:	683b      	ldr	r3, [r7, #0]
 800e6f2:	695b      	ldr	r3, [r3, #20]
 800e6f4:	009b      	lsls	r3, r3, #2
 800e6f6:	693a      	ldr	r2, [r7, #16]
 800e6f8:	4313      	orrs	r3, r2
 800e6fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e6fc:	683b      	ldr	r3, [r7, #0]
 800e6fe:	699b      	ldr	r3, [r3, #24]
 800e700:	009b      	lsls	r3, r3, #2
 800e702:	693a      	ldr	r2, [r7, #16]
 800e704:	4313      	orrs	r3, r2
 800e706:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	693a      	ldr	r2, [r7, #16]
 800e70c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	68fa      	ldr	r2, [r7, #12]
 800e712:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e714:	683b      	ldr	r3, [r7, #0]
 800e716:	685a      	ldr	r2, [r3, #4]
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	697a      	ldr	r2, [r7, #20]
 800e720:	621a      	str	r2, [r3, #32]
}
 800e722:	bf00      	nop
 800e724:	371c      	adds	r7, #28
 800e726:	46bd      	mov	sp, r7
 800e728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e72c:	4770      	bx	lr
 800e72e:	bf00      	nop
 800e730:	40010000 	.word	0x40010000

0800e734 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e734:	b480      	push	{r7}
 800e736:	b087      	sub	sp, #28
 800e738:	af00      	add	r7, sp, #0
 800e73a:	6078      	str	r0, [r7, #4]
 800e73c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	6a1b      	ldr	r3, [r3, #32]
 800e742:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	6a1b      	ldr	r3, [r3, #32]
 800e748:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	685b      	ldr	r3, [r3, #4]
 800e754:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	69db      	ldr	r3, [r3, #28]
 800e75a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e762:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	f023 0303 	bic.w	r3, r3, #3
 800e76a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e76c:	683b      	ldr	r3, [r7, #0]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	68fa      	ldr	r2, [r7, #12]
 800e772:	4313      	orrs	r3, r2
 800e774:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e776:	697b      	ldr	r3, [r7, #20]
 800e778:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e77c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e77e:	683b      	ldr	r3, [r7, #0]
 800e780:	689b      	ldr	r3, [r3, #8]
 800e782:	021b      	lsls	r3, r3, #8
 800e784:	697a      	ldr	r2, [r7, #20]
 800e786:	4313      	orrs	r3, r2
 800e788:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	4a1d      	ldr	r2, [pc, #116]	@ (800e804 <TIM_OC3_SetConfig+0xd0>)
 800e78e:	4293      	cmp	r3, r2
 800e790:	d10d      	bne.n	800e7ae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e792:	697b      	ldr	r3, [r7, #20]
 800e794:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e798:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e79a:	683b      	ldr	r3, [r7, #0]
 800e79c:	68db      	ldr	r3, [r3, #12]
 800e79e:	021b      	lsls	r3, r3, #8
 800e7a0:	697a      	ldr	r2, [r7, #20]
 800e7a2:	4313      	orrs	r3, r2
 800e7a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e7a6:	697b      	ldr	r3, [r7, #20]
 800e7a8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e7ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	4a14      	ldr	r2, [pc, #80]	@ (800e804 <TIM_OC3_SetConfig+0xd0>)
 800e7b2:	4293      	cmp	r3, r2
 800e7b4:	d113      	bne.n	800e7de <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e7b6:	693b      	ldr	r3, [r7, #16]
 800e7b8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e7bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e7be:	693b      	ldr	r3, [r7, #16]
 800e7c0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e7c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e7c6:	683b      	ldr	r3, [r7, #0]
 800e7c8:	695b      	ldr	r3, [r3, #20]
 800e7ca:	011b      	lsls	r3, r3, #4
 800e7cc:	693a      	ldr	r2, [r7, #16]
 800e7ce:	4313      	orrs	r3, r2
 800e7d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e7d2:	683b      	ldr	r3, [r7, #0]
 800e7d4:	699b      	ldr	r3, [r3, #24]
 800e7d6:	011b      	lsls	r3, r3, #4
 800e7d8:	693a      	ldr	r2, [r7, #16]
 800e7da:	4313      	orrs	r3, r2
 800e7dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	693a      	ldr	r2, [r7, #16]
 800e7e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	68fa      	ldr	r2, [r7, #12]
 800e7e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e7ea:	683b      	ldr	r3, [r7, #0]
 800e7ec:	685a      	ldr	r2, [r3, #4]
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	697a      	ldr	r2, [r7, #20]
 800e7f6:	621a      	str	r2, [r3, #32]
}
 800e7f8:	bf00      	nop
 800e7fa:	371c      	adds	r7, #28
 800e7fc:	46bd      	mov	sp, r7
 800e7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e802:	4770      	bx	lr
 800e804:	40010000 	.word	0x40010000

0800e808 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e808:	b480      	push	{r7}
 800e80a:	b087      	sub	sp, #28
 800e80c:	af00      	add	r7, sp, #0
 800e80e:	6078      	str	r0, [r7, #4]
 800e810:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	6a1b      	ldr	r3, [r3, #32]
 800e816:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	6a1b      	ldr	r3, [r3, #32]
 800e81c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	685b      	ldr	r3, [r3, #4]
 800e828:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	69db      	ldr	r3, [r3, #28]
 800e82e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e836:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e83e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e840:	683b      	ldr	r3, [r7, #0]
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	021b      	lsls	r3, r3, #8
 800e846:	68fa      	ldr	r2, [r7, #12]
 800e848:	4313      	orrs	r3, r2
 800e84a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e84c:	693b      	ldr	r3, [r7, #16]
 800e84e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e852:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e854:	683b      	ldr	r3, [r7, #0]
 800e856:	689b      	ldr	r3, [r3, #8]
 800e858:	031b      	lsls	r3, r3, #12
 800e85a:	693a      	ldr	r2, [r7, #16]
 800e85c:	4313      	orrs	r3, r2
 800e85e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	4a10      	ldr	r2, [pc, #64]	@ (800e8a4 <TIM_OC4_SetConfig+0x9c>)
 800e864:	4293      	cmp	r3, r2
 800e866:	d109      	bne.n	800e87c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e868:	697b      	ldr	r3, [r7, #20]
 800e86a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e86e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e870:	683b      	ldr	r3, [r7, #0]
 800e872:	695b      	ldr	r3, [r3, #20]
 800e874:	019b      	lsls	r3, r3, #6
 800e876:	697a      	ldr	r2, [r7, #20]
 800e878:	4313      	orrs	r3, r2
 800e87a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	697a      	ldr	r2, [r7, #20]
 800e880:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	68fa      	ldr	r2, [r7, #12]
 800e886:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e888:	683b      	ldr	r3, [r7, #0]
 800e88a:	685a      	ldr	r2, [r3, #4]
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	693a      	ldr	r2, [r7, #16]
 800e894:	621a      	str	r2, [r3, #32]
}
 800e896:	bf00      	nop
 800e898:	371c      	adds	r7, #28
 800e89a:	46bd      	mov	sp, r7
 800e89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a0:	4770      	bx	lr
 800e8a2:	bf00      	nop
 800e8a4:	40010000 	.word	0x40010000

0800e8a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e8a8:	b480      	push	{r7}
 800e8aa:	b087      	sub	sp, #28
 800e8ac:	af00      	add	r7, sp, #0
 800e8ae:	60f8      	str	r0, [r7, #12]
 800e8b0:	60b9      	str	r1, [r7, #8]
 800e8b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	6a1b      	ldr	r3, [r3, #32]
 800e8b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	6a1b      	ldr	r3, [r3, #32]
 800e8be:	f023 0201 	bic.w	r2, r3, #1
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	699b      	ldr	r3, [r3, #24]
 800e8ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e8cc:	693b      	ldr	r3, [r7, #16]
 800e8ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800e8d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	011b      	lsls	r3, r3, #4
 800e8d8:	693a      	ldr	r2, [r7, #16]
 800e8da:	4313      	orrs	r3, r2
 800e8dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e8de:	697b      	ldr	r3, [r7, #20]
 800e8e0:	f023 030a 	bic.w	r3, r3, #10
 800e8e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e8e6:	697a      	ldr	r2, [r7, #20]
 800e8e8:	68bb      	ldr	r3, [r7, #8]
 800e8ea:	4313      	orrs	r3, r2
 800e8ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	693a      	ldr	r2, [r7, #16]
 800e8f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	697a      	ldr	r2, [r7, #20]
 800e8f8:	621a      	str	r2, [r3, #32]
}
 800e8fa:	bf00      	nop
 800e8fc:	371c      	adds	r7, #28
 800e8fe:	46bd      	mov	sp, r7
 800e900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e904:	4770      	bx	lr

0800e906 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e906:	b480      	push	{r7}
 800e908:	b087      	sub	sp, #28
 800e90a:	af00      	add	r7, sp, #0
 800e90c:	60f8      	str	r0, [r7, #12]
 800e90e:	60b9      	str	r1, [r7, #8]
 800e910:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	6a1b      	ldr	r3, [r3, #32]
 800e916:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	6a1b      	ldr	r3, [r3, #32]
 800e91c:	f023 0210 	bic.w	r2, r3, #16
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	699b      	ldr	r3, [r3, #24]
 800e928:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e92a:	693b      	ldr	r3, [r7, #16]
 800e92c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800e930:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	031b      	lsls	r3, r3, #12
 800e936:	693a      	ldr	r2, [r7, #16]
 800e938:	4313      	orrs	r3, r2
 800e93a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e93c:	697b      	ldr	r3, [r7, #20]
 800e93e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800e942:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e944:	68bb      	ldr	r3, [r7, #8]
 800e946:	011b      	lsls	r3, r3, #4
 800e948:	697a      	ldr	r2, [r7, #20]
 800e94a:	4313      	orrs	r3, r2
 800e94c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	693a      	ldr	r2, [r7, #16]
 800e952:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	697a      	ldr	r2, [r7, #20]
 800e958:	621a      	str	r2, [r3, #32]
}
 800e95a:	bf00      	nop
 800e95c:	371c      	adds	r7, #28
 800e95e:	46bd      	mov	sp, r7
 800e960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e964:	4770      	bx	lr

0800e966 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e966:	b480      	push	{r7}
 800e968:	b085      	sub	sp, #20
 800e96a:	af00      	add	r7, sp, #0
 800e96c:	6078      	str	r0, [r7, #4]
 800e96e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	689b      	ldr	r3, [r3, #8]
 800e974:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e97c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e97e:	683a      	ldr	r2, [r7, #0]
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	4313      	orrs	r3, r2
 800e984:	f043 0307 	orr.w	r3, r3, #7
 800e988:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	68fa      	ldr	r2, [r7, #12]
 800e98e:	609a      	str	r2, [r3, #8]
}
 800e990:	bf00      	nop
 800e992:	3714      	adds	r7, #20
 800e994:	46bd      	mov	sp, r7
 800e996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e99a:	4770      	bx	lr

0800e99c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e99c:	b480      	push	{r7}
 800e99e:	b087      	sub	sp, #28
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	60f8      	str	r0, [r7, #12]
 800e9a4:	60b9      	str	r1, [r7, #8]
 800e9a6:	607a      	str	r2, [r7, #4]
 800e9a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	689b      	ldr	r3, [r3, #8]
 800e9ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e9b0:	697b      	ldr	r3, [r7, #20]
 800e9b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e9b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e9b8:	683b      	ldr	r3, [r7, #0]
 800e9ba:	021a      	lsls	r2, r3, #8
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	431a      	orrs	r2, r3
 800e9c0:	68bb      	ldr	r3, [r7, #8]
 800e9c2:	4313      	orrs	r3, r2
 800e9c4:	697a      	ldr	r2, [r7, #20]
 800e9c6:	4313      	orrs	r3, r2
 800e9c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	697a      	ldr	r2, [r7, #20]
 800e9ce:	609a      	str	r2, [r3, #8]
}
 800e9d0:	bf00      	nop
 800e9d2:	371c      	adds	r7, #28
 800e9d4:	46bd      	mov	sp, r7
 800e9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9da:	4770      	bx	lr

0800e9dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e9dc:	b480      	push	{r7}
 800e9de:	b085      	sub	sp, #20
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	6078      	str	r0, [r7, #4]
 800e9e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e9ec:	2b01      	cmp	r3, #1
 800e9ee:	d101      	bne.n	800e9f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e9f0:	2302      	movs	r3, #2
 800e9f2:	e050      	b.n	800ea96 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	2201      	movs	r2, #1
 800e9f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	2202      	movs	r2, #2
 800ea00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	685b      	ldr	r3, [r3, #4]
 800ea0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	689b      	ldr	r3, [r3, #8]
 800ea12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ea1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ea1c:	683b      	ldr	r3, [r7, #0]
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	68fa      	ldr	r2, [r7, #12]
 800ea22:	4313      	orrs	r3, r2
 800ea24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	68fa      	ldr	r2, [r7, #12]
 800ea2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	4a1c      	ldr	r2, [pc, #112]	@ (800eaa4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800ea34:	4293      	cmp	r3, r2
 800ea36:	d018      	beq.n	800ea6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ea40:	d013      	beq.n	800ea6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	4a18      	ldr	r2, [pc, #96]	@ (800eaa8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800ea48:	4293      	cmp	r3, r2
 800ea4a:	d00e      	beq.n	800ea6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	4a16      	ldr	r2, [pc, #88]	@ (800eaac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800ea52:	4293      	cmp	r3, r2
 800ea54:	d009      	beq.n	800ea6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	4a15      	ldr	r2, [pc, #84]	@ (800eab0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800ea5c:	4293      	cmp	r3, r2
 800ea5e:	d004      	beq.n	800ea6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	4a13      	ldr	r2, [pc, #76]	@ (800eab4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800ea66:	4293      	cmp	r3, r2
 800ea68:	d10c      	bne.n	800ea84 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ea6a:	68bb      	ldr	r3, [r7, #8]
 800ea6c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ea70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ea72:	683b      	ldr	r3, [r7, #0]
 800ea74:	685b      	ldr	r3, [r3, #4]
 800ea76:	68ba      	ldr	r2, [r7, #8]
 800ea78:	4313      	orrs	r3, r2
 800ea7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	68ba      	ldr	r2, [r7, #8]
 800ea82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	2201      	movs	r2, #1
 800ea88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	2200      	movs	r2, #0
 800ea90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ea94:	2300      	movs	r3, #0
}
 800ea96:	4618      	mov	r0, r3
 800ea98:	3714      	adds	r7, #20
 800ea9a:	46bd      	mov	sp, r7
 800ea9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa0:	4770      	bx	lr
 800eaa2:	bf00      	nop
 800eaa4:	40010000 	.word	0x40010000
 800eaa8:	40000400 	.word	0x40000400
 800eaac:	40000800 	.word	0x40000800
 800eab0:	40000c00 	.word	0x40000c00
 800eab4:	40014000 	.word	0x40014000

0800eab8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800eab8:	b480      	push	{r7}
 800eaba:	b085      	sub	sp, #20
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	6078      	str	r0, [r7, #4]
 800eac0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800eac2:	2300      	movs	r3, #0
 800eac4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800eacc:	2b01      	cmp	r3, #1
 800eace:	d101      	bne.n	800ead4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ead0:	2302      	movs	r3, #2
 800ead2:	e03d      	b.n	800eb50 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	2201      	movs	r2, #1
 800ead8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800eae2:	683b      	ldr	r3, [r7, #0]
 800eae4:	68db      	ldr	r3, [r3, #12]
 800eae6:	4313      	orrs	r3, r2
 800eae8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800eaf0:	683b      	ldr	r3, [r7, #0]
 800eaf2:	689b      	ldr	r3, [r3, #8]
 800eaf4:	4313      	orrs	r3, r2
 800eaf6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800eafe:	683b      	ldr	r3, [r7, #0]
 800eb00:	685b      	ldr	r3, [r3, #4]
 800eb02:	4313      	orrs	r3, r2
 800eb04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800eb0c:	683b      	ldr	r3, [r7, #0]
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	4313      	orrs	r3, r2
 800eb12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800eb1a:	683b      	ldr	r3, [r7, #0]
 800eb1c:	691b      	ldr	r3, [r3, #16]
 800eb1e:	4313      	orrs	r3, r2
 800eb20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800eb28:	683b      	ldr	r3, [r7, #0]
 800eb2a:	695b      	ldr	r3, [r3, #20]
 800eb2c:	4313      	orrs	r3, r2
 800eb2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800eb36:	683b      	ldr	r3, [r7, #0]
 800eb38:	69db      	ldr	r3, [r3, #28]
 800eb3a:	4313      	orrs	r3, r2
 800eb3c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	68fa      	ldr	r2, [r7, #12]
 800eb44:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	2200      	movs	r2, #0
 800eb4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800eb4e:	2300      	movs	r3, #0
}
 800eb50:	4618      	mov	r0, r3
 800eb52:	3714      	adds	r7, #20
 800eb54:	46bd      	mov	sp, r7
 800eb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb5a:	4770      	bx	lr

0800eb5c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800eb5c:	b480      	push	{r7}
 800eb5e:	b083      	sub	sp, #12
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800eb64:	bf00      	nop
 800eb66:	370c      	adds	r7, #12
 800eb68:	46bd      	mov	sp, r7
 800eb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb6e:	4770      	bx	lr

0800eb70 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800eb70:	b480      	push	{r7}
 800eb72:	b083      	sub	sp, #12
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800eb78:	bf00      	nop
 800eb7a:	370c      	adds	r7, #12
 800eb7c:	46bd      	mov	sp, r7
 800eb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb82:	4770      	bx	lr

0800eb84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800eb84:	b580      	push	{r7, lr}
 800eb86:	b082      	sub	sp, #8
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d101      	bne.n	800eb96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800eb92:	2301      	movs	r3, #1
 800eb94:	e042      	b.n	800ec1c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800eb9c:	b2db      	uxtb	r3, r3
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d106      	bne.n	800ebb0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	2200      	movs	r2, #0
 800eba6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ebaa:	6878      	ldr	r0, [r7, #4]
 800ebac:	f7fb fb7e 	bl	800a2ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	2224      	movs	r2, #36	@ 0x24
 800ebb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	68da      	ldr	r2, [r3, #12]
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800ebc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ebc8:	6878      	ldr	r0, [r7, #4]
 800ebca:	f000 f973 	bl	800eeb4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	691a      	ldr	r2, [r3, #16]
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ebdc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	695a      	ldr	r2, [r3, #20]
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ebec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	68da      	ldr	r2, [r3, #12]
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800ebfc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	2200      	movs	r2, #0
 800ec02:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	2220      	movs	r2, #32
 800ec08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	2220      	movs	r2, #32
 800ec10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	2200      	movs	r2, #0
 800ec18:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800ec1a:	2300      	movs	r3, #0
}
 800ec1c:	4618      	mov	r0, r3
 800ec1e:	3708      	adds	r7, #8
 800ec20:	46bd      	mov	sp, r7
 800ec22:	bd80      	pop	{r7, pc}

0800ec24 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ec24:	b580      	push	{r7, lr}
 800ec26:	b08a      	sub	sp, #40	@ 0x28
 800ec28:	af02      	add	r7, sp, #8
 800ec2a:	60f8      	str	r0, [r7, #12]
 800ec2c:	60b9      	str	r1, [r7, #8]
 800ec2e:	603b      	str	r3, [r7, #0]
 800ec30:	4613      	mov	r3, r2
 800ec32:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800ec34:	2300      	movs	r3, #0
 800ec36:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ec3e:	b2db      	uxtb	r3, r3
 800ec40:	2b20      	cmp	r3, #32
 800ec42:	d175      	bne.n	800ed30 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800ec44:	68bb      	ldr	r3, [r7, #8]
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d002      	beq.n	800ec50 <HAL_UART_Transmit+0x2c>
 800ec4a:	88fb      	ldrh	r3, [r7, #6]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d101      	bne.n	800ec54 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800ec50:	2301      	movs	r3, #1
 800ec52:	e06e      	b.n	800ed32 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	2200      	movs	r2, #0
 800ec58:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	2221      	movs	r2, #33	@ 0x21
 800ec5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ec62:	f7fb fc31 	bl	800a4c8 <HAL_GetTick>
 800ec66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	88fa      	ldrh	r2, [r7, #6]
 800ec6c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	88fa      	ldrh	r2, [r7, #6]
 800ec72:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	689b      	ldr	r3, [r3, #8]
 800ec78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ec7c:	d108      	bne.n	800ec90 <HAL_UART_Transmit+0x6c>
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	691b      	ldr	r3, [r3, #16]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d104      	bne.n	800ec90 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800ec86:	2300      	movs	r3, #0
 800ec88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ec8a:	68bb      	ldr	r3, [r7, #8]
 800ec8c:	61bb      	str	r3, [r7, #24]
 800ec8e:	e003      	b.n	800ec98 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800ec90:	68bb      	ldr	r3, [r7, #8]
 800ec92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ec94:	2300      	movs	r3, #0
 800ec96:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ec98:	e02e      	b.n	800ecf8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ec9a:	683b      	ldr	r3, [r7, #0]
 800ec9c:	9300      	str	r3, [sp, #0]
 800ec9e:	697b      	ldr	r3, [r7, #20]
 800eca0:	2200      	movs	r2, #0
 800eca2:	2180      	movs	r1, #128	@ 0x80
 800eca4:	68f8      	ldr	r0, [r7, #12]
 800eca6:	f000 f848 	bl	800ed3a <UART_WaitOnFlagUntilTimeout>
 800ecaa:	4603      	mov	r3, r0
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d005      	beq.n	800ecbc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	2220      	movs	r2, #32
 800ecb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800ecb8:	2303      	movs	r3, #3
 800ecba:	e03a      	b.n	800ed32 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800ecbc:	69fb      	ldr	r3, [r7, #28]
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d10b      	bne.n	800ecda <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ecc2:	69bb      	ldr	r3, [r7, #24]
 800ecc4:	881b      	ldrh	r3, [r3, #0]
 800ecc6:	461a      	mov	r2, r3
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ecd0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800ecd2:	69bb      	ldr	r3, [r7, #24]
 800ecd4:	3302      	adds	r3, #2
 800ecd6:	61bb      	str	r3, [r7, #24]
 800ecd8:	e007      	b.n	800ecea <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800ecda:	69fb      	ldr	r3, [r7, #28]
 800ecdc:	781a      	ldrb	r2, [r3, #0]
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800ece4:	69fb      	ldr	r3, [r7, #28]
 800ece6:	3301      	adds	r3, #1
 800ece8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800ecee:	b29b      	uxth	r3, r3
 800ecf0:	3b01      	subs	r3, #1
 800ecf2:	b29a      	uxth	r2, r3
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800ecfc:	b29b      	uxth	r3, r3
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d1cb      	bne.n	800ec9a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ed02:	683b      	ldr	r3, [r7, #0]
 800ed04:	9300      	str	r3, [sp, #0]
 800ed06:	697b      	ldr	r3, [r7, #20]
 800ed08:	2200      	movs	r2, #0
 800ed0a:	2140      	movs	r1, #64	@ 0x40
 800ed0c:	68f8      	ldr	r0, [r7, #12]
 800ed0e:	f000 f814 	bl	800ed3a <UART_WaitOnFlagUntilTimeout>
 800ed12:	4603      	mov	r3, r0
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d005      	beq.n	800ed24 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	2220      	movs	r2, #32
 800ed1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800ed20:	2303      	movs	r3, #3
 800ed22:	e006      	b.n	800ed32 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	2220      	movs	r2, #32
 800ed28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800ed2c:	2300      	movs	r3, #0
 800ed2e:	e000      	b.n	800ed32 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800ed30:	2302      	movs	r3, #2
  }
}
 800ed32:	4618      	mov	r0, r3
 800ed34:	3720      	adds	r7, #32
 800ed36:	46bd      	mov	sp, r7
 800ed38:	bd80      	pop	{r7, pc}

0800ed3a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800ed3a:	b580      	push	{r7, lr}
 800ed3c:	b086      	sub	sp, #24
 800ed3e:	af00      	add	r7, sp, #0
 800ed40:	60f8      	str	r0, [r7, #12]
 800ed42:	60b9      	str	r1, [r7, #8]
 800ed44:	603b      	str	r3, [r7, #0]
 800ed46:	4613      	mov	r3, r2
 800ed48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ed4a:	e03b      	b.n	800edc4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ed4c:	6a3b      	ldr	r3, [r7, #32]
 800ed4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed52:	d037      	beq.n	800edc4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ed54:	f7fb fbb8 	bl	800a4c8 <HAL_GetTick>
 800ed58:	4602      	mov	r2, r0
 800ed5a:	683b      	ldr	r3, [r7, #0]
 800ed5c:	1ad3      	subs	r3, r2, r3
 800ed5e:	6a3a      	ldr	r2, [r7, #32]
 800ed60:	429a      	cmp	r2, r3
 800ed62:	d302      	bcc.n	800ed6a <UART_WaitOnFlagUntilTimeout+0x30>
 800ed64:	6a3b      	ldr	r3, [r7, #32]
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d101      	bne.n	800ed6e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ed6a:	2303      	movs	r3, #3
 800ed6c:	e03a      	b.n	800ede4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	68db      	ldr	r3, [r3, #12]
 800ed74:	f003 0304 	and.w	r3, r3, #4
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d023      	beq.n	800edc4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800ed7c:	68bb      	ldr	r3, [r7, #8]
 800ed7e:	2b80      	cmp	r3, #128	@ 0x80
 800ed80:	d020      	beq.n	800edc4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800ed82:	68bb      	ldr	r3, [r7, #8]
 800ed84:	2b40      	cmp	r3, #64	@ 0x40
 800ed86:	d01d      	beq.n	800edc4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	f003 0308 	and.w	r3, r3, #8
 800ed92:	2b08      	cmp	r3, #8
 800ed94:	d116      	bne.n	800edc4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800ed96:	2300      	movs	r3, #0
 800ed98:	617b      	str	r3, [r7, #20]
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	617b      	str	r3, [r7, #20]
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	685b      	ldr	r3, [r3, #4]
 800eda8:	617b      	str	r3, [r7, #20]
 800edaa:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800edac:	68f8      	ldr	r0, [r7, #12]
 800edae:	f000 f81d 	bl	800edec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	2208      	movs	r2, #8
 800edb6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	2200      	movs	r2, #0
 800edbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800edc0:	2301      	movs	r3, #1
 800edc2:	e00f      	b.n	800ede4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	681a      	ldr	r2, [r3, #0]
 800edca:	68bb      	ldr	r3, [r7, #8]
 800edcc:	4013      	ands	r3, r2
 800edce:	68ba      	ldr	r2, [r7, #8]
 800edd0:	429a      	cmp	r2, r3
 800edd2:	bf0c      	ite	eq
 800edd4:	2301      	moveq	r3, #1
 800edd6:	2300      	movne	r3, #0
 800edd8:	b2db      	uxtb	r3, r3
 800edda:	461a      	mov	r2, r3
 800eddc:	79fb      	ldrb	r3, [r7, #7]
 800edde:	429a      	cmp	r2, r3
 800ede0:	d0b4      	beq.n	800ed4c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ede2:	2300      	movs	r3, #0
}
 800ede4:	4618      	mov	r0, r3
 800ede6:	3718      	adds	r7, #24
 800ede8:	46bd      	mov	sp, r7
 800edea:	bd80      	pop	{r7, pc}

0800edec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800edec:	b480      	push	{r7}
 800edee:	b095      	sub	sp, #84	@ 0x54
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	330c      	adds	r3, #12
 800edfa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800edfe:	e853 3f00 	ldrex	r3, [r3]
 800ee02:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ee04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee06:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ee0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	330c      	adds	r3, #12
 800ee12:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ee14:	643a      	str	r2, [r7, #64]	@ 0x40
 800ee16:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee18:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ee1a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ee1c:	e841 2300 	strex	r3, r2, [r1]
 800ee20:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ee22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d1e5      	bne.n	800edf4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	3314      	adds	r3, #20
 800ee2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee30:	6a3b      	ldr	r3, [r7, #32]
 800ee32:	e853 3f00 	ldrex	r3, [r3]
 800ee36:	61fb      	str	r3, [r7, #28]
   return(result);
 800ee38:	69fb      	ldr	r3, [r7, #28]
 800ee3a:	f023 0301 	bic.w	r3, r3, #1
 800ee3e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	3314      	adds	r3, #20
 800ee46:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ee48:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ee4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ee4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ee50:	e841 2300 	strex	r3, r2, [r1]
 800ee54:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ee56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d1e5      	bne.n	800ee28 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ee60:	2b01      	cmp	r3, #1
 800ee62:	d119      	bne.n	800ee98 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	330c      	adds	r3, #12
 800ee6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	e853 3f00 	ldrex	r3, [r3]
 800ee72:	60bb      	str	r3, [r7, #8]
   return(result);
 800ee74:	68bb      	ldr	r3, [r7, #8]
 800ee76:	f023 0310 	bic.w	r3, r3, #16
 800ee7a:	647b      	str	r3, [r7, #68]	@ 0x44
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	330c      	adds	r3, #12
 800ee82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ee84:	61ba      	str	r2, [r7, #24]
 800ee86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee88:	6979      	ldr	r1, [r7, #20]
 800ee8a:	69ba      	ldr	r2, [r7, #24]
 800ee8c:	e841 2300 	strex	r3, r2, [r1]
 800ee90:	613b      	str	r3, [r7, #16]
   return(result);
 800ee92:	693b      	ldr	r3, [r7, #16]
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d1e5      	bne.n	800ee64 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	2220      	movs	r2, #32
 800ee9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	2200      	movs	r2, #0
 800eea4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800eea6:	bf00      	nop
 800eea8:	3754      	adds	r7, #84	@ 0x54
 800eeaa:	46bd      	mov	sp, r7
 800eeac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeb0:	4770      	bx	lr
	...

0800eeb4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800eeb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800eeb8:	b0c0      	sub	sp, #256	@ 0x100
 800eeba:	af00      	add	r7, sp, #0
 800eebc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800eec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	691b      	ldr	r3, [r3, #16]
 800eec8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800eecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800eed0:	68d9      	ldr	r1, [r3, #12]
 800eed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800eed6:	681a      	ldr	r2, [r3, #0]
 800eed8:	ea40 0301 	orr.w	r3, r0, r1
 800eedc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800eede:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800eee2:	689a      	ldr	r2, [r3, #8]
 800eee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800eee8:	691b      	ldr	r3, [r3, #16]
 800eeea:	431a      	orrs	r2, r3
 800eeec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800eef0:	695b      	ldr	r3, [r3, #20]
 800eef2:	431a      	orrs	r2, r3
 800eef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800eef8:	69db      	ldr	r3, [r3, #28]
 800eefa:	4313      	orrs	r3, r2
 800eefc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800ef00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	68db      	ldr	r3, [r3, #12]
 800ef08:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800ef0c:	f021 010c 	bic.w	r1, r1, #12
 800ef10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ef14:	681a      	ldr	r2, [r3, #0]
 800ef16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800ef1a:	430b      	orrs	r3, r1
 800ef1c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ef1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	695b      	ldr	r3, [r3, #20]
 800ef26:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800ef2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ef2e:	6999      	ldr	r1, [r3, #24]
 800ef30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ef34:	681a      	ldr	r2, [r3, #0]
 800ef36:	ea40 0301 	orr.w	r3, r0, r1
 800ef3a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ef3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ef40:	681a      	ldr	r2, [r3, #0]
 800ef42:	4b8f      	ldr	r3, [pc, #572]	@ (800f180 <UART_SetConfig+0x2cc>)
 800ef44:	429a      	cmp	r2, r3
 800ef46:	d005      	beq.n	800ef54 <UART_SetConfig+0xa0>
 800ef48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ef4c:	681a      	ldr	r2, [r3, #0]
 800ef4e:	4b8d      	ldr	r3, [pc, #564]	@ (800f184 <UART_SetConfig+0x2d0>)
 800ef50:	429a      	cmp	r2, r3
 800ef52:	d104      	bne.n	800ef5e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ef54:	f7fe fe60 	bl	800dc18 <HAL_RCC_GetPCLK2Freq>
 800ef58:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800ef5c:	e003      	b.n	800ef66 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ef5e:	f7fe fe47 	bl	800dbf0 <HAL_RCC_GetPCLK1Freq>
 800ef62:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ef66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ef6a:	69db      	ldr	r3, [r3, #28]
 800ef6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ef70:	f040 810c 	bne.w	800f18c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ef74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ef78:	2200      	movs	r2, #0
 800ef7a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800ef7e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800ef82:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800ef86:	4622      	mov	r2, r4
 800ef88:	462b      	mov	r3, r5
 800ef8a:	1891      	adds	r1, r2, r2
 800ef8c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800ef8e:	415b      	adcs	r3, r3
 800ef90:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ef92:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800ef96:	4621      	mov	r1, r4
 800ef98:	eb12 0801 	adds.w	r8, r2, r1
 800ef9c:	4629      	mov	r1, r5
 800ef9e:	eb43 0901 	adc.w	r9, r3, r1
 800efa2:	f04f 0200 	mov.w	r2, #0
 800efa6:	f04f 0300 	mov.w	r3, #0
 800efaa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800efae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800efb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800efb6:	4690      	mov	r8, r2
 800efb8:	4699      	mov	r9, r3
 800efba:	4623      	mov	r3, r4
 800efbc:	eb18 0303 	adds.w	r3, r8, r3
 800efc0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800efc4:	462b      	mov	r3, r5
 800efc6:	eb49 0303 	adc.w	r3, r9, r3
 800efca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800efce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800efd2:	685b      	ldr	r3, [r3, #4]
 800efd4:	2200      	movs	r2, #0
 800efd6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800efda:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800efde:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800efe2:	460b      	mov	r3, r1
 800efe4:	18db      	adds	r3, r3, r3
 800efe6:	653b      	str	r3, [r7, #80]	@ 0x50
 800efe8:	4613      	mov	r3, r2
 800efea:	eb42 0303 	adc.w	r3, r2, r3
 800efee:	657b      	str	r3, [r7, #84]	@ 0x54
 800eff0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800eff4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800eff8:	f7f9 fdde 	bl	8008bb8 <__aeabi_uldivmod>
 800effc:	4602      	mov	r2, r0
 800effe:	460b      	mov	r3, r1
 800f000:	4b61      	ldr	r3, [pc, #388]	@ (800f188 <UART_SetConfig+0x2d4>)
 800f002:	fba3 2302 	umull	r2, r3, r3, r2
 800f006:	095b      	lsrs	r3, r3, #5
 800f008:	011c      	lsls	r4, r3, #4
 800f00a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800f00e:	2200      	movs	r2, #0
 800f010:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800f014:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800f018:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800f01c:	4642      	mov	r2, r8
 800f01e:	464b      	mov	r3, r9
 800f020:	1891      	adds	r1, r2, r2
 800f022:	64b9      	str	r1, [r7, #72]	@ 0x48
 800f024:	415b      	adcs	r3, r3
 800f026:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f028:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800f02c:	4641      	mov	r1, r8
 800f02e:	eb12 0a01 	adds.w	sl, r2, r1
 800f032:	4649      	mov	r1, r9
 800f034:	eb43 0b01 	adc.w	fp, r3, r1
 800f038:	f04f 0200 	mov.w	r2, #0
 800f03c:	f04f 0300 	mov.w	r3, #0
 800f040:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800f044:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800f048:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f04c:	4692      	mov	sl, r2
 800f04e:	469b      	mov	fp, r3
 800f050:	4643      	mov	r3, r8
 800f052:	eb1a 0303 	adds.w	r3, sl, r3
 800f056:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800f05a:	464b      	mov	r3, r9
 800f05c:	eb4b 0303 	adc.w	r3, fp, r3
 800f060:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800f064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800f068:	685b      	ldr	r3, [r3, #4]
 800f06a:	2200      	movs	r2, #0
 800f06c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800f070:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800f074:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800f078:	460b      	mov	r3, r1
 800f07a:	18db      	adds	r3, r3, r3
 800f07c:	643b      	str	r3, [r7, #64]	@ 0x40
 800f07e:	4613      	mov	r3, r2
 800f080:	eb42 0303 	adc.w	r3, r2, r3
 800f084:	647b      	str	r3, [r7, #68]	@ 0x44
 800f086:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800f08a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800f08e:	f7f9 fd93 	bl	8008bb8 <__aeabi_uldivmod>
 800f092:	4602      	mov	r2, r0
 800f094:	460b      	mov	r3, r1
 800f096:	4611      	mov	r1, r2
 800f098:	4b3b      	ldr	r3, [pc, #236]	@ (800f188 <UART_SetConfig+0x2d4>)
 800f09a:	fba3 2301 	umull	r2, r3, r3, r1
 800f09e:	095b      	lsrs	r3, r3, #5
 800f0a0:	2264      	movs	r2, #100	@ 0x64
 800f0a2:	fb02 f303 	mul.w	r3, r2, r3
 800f0a6:	1acb      	subs	r3, r1, r3
 800f0a8:	00db      	lsls	r3, r3, #3
 800f0aa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800f0ae:	4b36      	ldr	r3, [pc, #216]	@ (800f188 <UART_SetConfig+0x2d4>)
 800f0b0:	fba3 2302 	umull	r2, r3, r3, r2
 800f0b4:	095b      	lsrs	r3, r3, #5
 800f0b6:	005b      	lsls	r3, r3, #1
 800f0b8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800f0bc:	441c      	add	r4, r3
 800f0be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800f0c2:	2200      	movs	r2, #0
 800f0c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800f0c8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800f0cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800f0d0:	4642      	mov	r2, r8
 800f0d2:	464b      	mov	r3, r9
 800f0d4:	1891      	adds	r1, r2, r2
 800f0d6:	63b9      	str	r1, [r7, #56]	@ 0x38
 800f0d8:	415b      	adcs	r3, r3
 800f0da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f0dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800f0e0:	4641      	mov	r1, r8
 800f0e2:	1851      	adds	r1, r2, r1
 800f0e4:	6339      	str	r1, [r7, #48]	@ 0x30
 800f0e6:	4649      	mov	r1, r9
 800f0e8:	414b      	adcs	r3, r1
 800f0ea:	637b      	str	r3, [r7, #52]	@ 0x34
 800f0ec:	f04f 0200 	mov.w	r2, #0
 800f0f0:	f04f 0300 	mov.w	r3, #0
 800f0f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800f0f8:	4659      	mov	r1, fp
 800f0fa:	00cb      	lsls	r3, r1, #3
 800f0fc:	4651      	mov	r1, sl
 800f0fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800f102:	4651      	mov	r1, sl
 800f104:	00ca      	lsls	r2, r1, #3
 800f106:	4610      	mov	r0, r2
 800f108:	4619      	mov	r1, r3
 800f10a:	4603      	mov	r3, r0
 800f10c:	4642      	mov	r2, r8
 800f10e:	189b      	adds	r3, r3, r2
 800f110:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800f114:	464b      	mov	r3, r9
 800f116:	460a      	mov	r2, r1
 800f118:	eb42 0303 	adc.w	r3, r2, r3
 800f11c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800f120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800f124:	685b      	ldr	r3, [r3, #4]
 800f126:	2200      	movs	r2, #0
 800f128:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800f12c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800f130:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800f134:	460b      	mov	r3, r1
 800f136:	18db      	adds	r3, r3, r3
 800f138:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f13a:	4613      	mov	r3, r2
 800f13c:	eb42 0303 	adc.w	r3, r2, r3
 800f140:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f142:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800f146:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800f14a:	f7f9 fd35 	bl	8008bb8 <__aeabi_uldivmod>
 800f14e:	4602      	mov	r2, r0
 800f150:	460b      	mov	r3, r1
 800f152:	4b0d      	ldr	r3, [pc, #52]	@ (800f188 <UART_SetConfig+0x2d4>)
 800f154:	fba3 1302 	umull	r1, r3, r3, r2
 800f158:	095b      	lsrs	r3, r3, #5
 800f15a:	2164      	movs	r1, #100	@ 0x64
 800f15c:	fb01 f303 	mul.w	r3, r1, r3
 800f160:	1ad3      	subs	r3, r2, r3
 800f162:	00db      	lsls	r3, r3, #3
 800f164:	3332      	adds	r3, #50	@ 0x32
 800f166:	4a08      	ldr	r2, [pc, #32]	@ (800f188 <UART_SetConfig+0x2d4>)
 800f168:	fba2 2303 	umull	r2, r3, r2, r3
 800f16c:	095b      	lsrs	r3, r3, #5
 800f16e:	f003 0207 	and.w	r2, r3, #7
 800f172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	4422      	add	r2, r4
 800f17a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800f17c:	e106      	b.n	800f38c <UART_SetConfig+0x4d8>
 800f17e:	bf00      	nop
 800f180:	40011000 	.word	0x40011000
 800f184:	40011400 	.word	0x40011400
 800f188:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f18c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800f190:	2200      	movs	r2, #0
 800f192:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800f196:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800f19a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800f19e:	4642      	mov	r2, r8
 800f1a0:	464b      	mov	r3, r9
 800f1a2:	1891      	adds	r1, r2, r2
 800f1a4:	6239      	str	r1, [r7, #32]
 800f1a6:	415b      	adcs	r3, r3
 800f1a8:	627b      	str	r3, [r7, #36]	@ 0x24
 800f1aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f1ae:	4641      	mov	r1, r8
 800f1b0:	1854      	adds	r4, r2, r1
 800f1b2:	4649      	mov	r1, r9
 800f1b4:	eb43 0501 	adc.w	r5, r3, r1
 800f1b8:	f04f 0200 	mov.w	r2, #0
 800f1bc:	f04f 0300 	mov.w	r3, #0
 800f1c0:	00eb      	lsls	r3, r5, #3
 800f1c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800f1c6:	00e2      	lsls	r2, r4, #3
 800f1c8:	4614      	mov	r4, r2
 800f1ca:	461d      	mov	r5, r3
 800f1cc:	4643      	mov	r3, r8
 800f1ce:	18e3      	adds	r3, r4, r3
 800f1d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800f1d4:	464b      	mov	r3, r9
 800f1d6:	eb45 0303 	adc.w	r3, r5, r3
 800f1da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800f1de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800f1e2:	685b      	ldr	r3, [r3, #4]
 800f1e4:	2200      	movs	r2, #0
 800f1e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800f1ea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800f1ee:	f04f 0200 	mov.w	r2, #0
 800f1f2:	f04f 0300 	mov.w	r3, #0
 800f1f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800f1fa:	4629      	mov	r1, r5
 800f1fc:	008b      	lsls	r3, r1, #2
 800f1fe:	4621      	mov	r1, r4
 800f200:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800f204:	4621      	mov	r1, r4
 800f206:	008a      	lsls	r2, r1, #2
 800f208:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800f20c:	f7f9 fcd4 	bl	8008bb8 <__aeabi_uldivmod>
 800f210:	4602      	mov	r2, r0
 800f212:	460b      	mov	r3, r1
 800f214:	4b60      	ldr	r3, [pc, #384]	@ (800f398 <UART_SetConfig+0x4e4>)
 800f216:	fba3 2302 	umull	r2, r3, r3, r2
 800f21a:	095b      	lsrs	r3, r3, #5
 800f21c:	011c      	lsls	r4, r3, #4
 800f21e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800f222:	2200      	movs	r2, #0
 800f224:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800f228:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800f22c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800f230:	4642      	mov	r2, r8
 800f232:	464b      	mov	r3, r9
 800f234:	1891      	adds	r1, r2, r2
 800f236:	61b9      	str	r1, [r7, #24]
 800f238:	415b      	adcs	r3, r3
 800f23a:	61fb      	str	r3, [r7, #28]
 800f23c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f240:	4641      	mov	r1, r8
 800f242:	1851      	adds	r1, r2, r1
 800f244:	6139      	str	r1, [r7, #16]
 800f246:	4649      	mov	r1, r9
 800f248:	414b      	adcs	r3, r1
 800f24a:	617b      	str	r3, [r7, #20]
 800f24c:	f04f 0200 	mov.w	r2, #0
 800f250:	f04f 0300 	mov.w	r3, #0
 800f254:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800f258:	4659      	mov	r1, fp
 800f25a:	00cb      	lsls	r3, r1, #3
 800f25c:	4651      	mov	r1, sl
 800f25e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800f262:	4651      	mov	r1, sl
 800f264:	00ca      	lsls	r2, r1, #3
 800f266:	4610      	mov	r0, r2
 800f268:	4619      	mov	r1, r3
 800f26a:	4603      	mov	r3, r0
 800f26c:	4642      	mov	r2, r8
 800f26e:	189b      	adds	r3, r3, r2
 800f270:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800f274:	464b      	mov	r3, r9
 800f276:	460a      	mov	r2, r1
 800f278:	eb42 0303 	adc.w	r3, r2, r3
 800f27c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800f280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800f284:	685b      	ldr	r3, [r3, #4]
 800f286:	2200      	movs	r2, #0
 800f288:	67bb      	str	r3, [r7, #120]	@ 0x78
 800f28a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800f28c:	f04f 0200 	mov.w	r2, #0
 800f290:	f04f 0300 	mov.w	r3, #0
 800f294:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800f298:	4649      	mov	r1, r9
 800f29a:	008b      	lsls	r3, r1, #2
 800f29c:	4641      	mov	r1, r8
 800f29e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800f2a2:	4641      	mov	r1, r8
 800f2a4:	008a      	lsls	r2, r1, #2
 800f2a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800f2aa:	f7f9 fc85 	bl	8008bb8 <__aeabi_uldivmod>
 800f2ae:	4602      	mov	r2, r0
 800f2b0:	460b      	mov	r3, r1
 800f2b2:	4611      	mov	r1, r2
 800f2b4:	4b38      	ldr	r3, [pc, #224]	@ (800f398 <UART_SetConfig+0x4e4>)
 800f2b6:	fba3 2301 	umull	r2, r3, r3, r1
 800f2ba:	095b      	lsrs	r3, r3, #5
 800f2bc:	2264      	movs	r2, #100	@ 0x64
 800f2be:	fb02 f303 	mul.w	r3, r2, r3
 800f2c2:	1acb      	subs	r3, r1, r3
 800f2c4:	011b      	lsls	r3, r3, #4
 800f2c6:	3332      	adds	r3, #50	@ 0x32
 800f2c8:	4a33      	ldr	r2, [pc, #204]	@ (800f398 <UART_SetConfig+0x4e4>)
 800f2ca:	fba2 2303 	umull	r2, r3, r2, r3
 800f2ce:	095b      	lsrs	r3, r3, #5
 800f2d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f2d4:	441c      	add	r4, r3
 800f2d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800f2da:	2200      	movs	r2, #0
 800f2dc:	673b      	str	r3, [r7, #112]	@ 0x70
 800f2de:	677a      	str	r2, [r7, #116]	@ 0x74
 800f2e0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800f2e4:	4642      	mov	r2, r8
 800f2e6:	464b      	mov	r3, r9
 800f2e8:	1891      	adds	r1, r2, r2
 800f2ea:	60b9      	str	r1, [r7, #8]
 800f2ec:	415b      	adcs	r3, r3
 800f2ee:	60fb      	str	r3, [r7, #12]
 800f2f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f2f4:	4641      	mov	r1, r8
 800f2f6:	1851      	adds	r1, r2, r1
 800f2f8:	6039      	str	r1, [r7, #0]
 800f2fa:	4649      	mov	r1, r9
 800f2fc:	414b      	adcs	r3, r1
 800f2fe:	607b      	str	r3, [r7, #4]
 800f300:	f04f 0200 	mov.w	r2, #0
 800f304:	f04f 0300 	mov.w	r3, #0
 800f308:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800f30c:	4659      	mov	r1, fp
 800f30e:	00cb      	lsls	r3, r1, #3
 800f310:	4651      	mov	r1, sl
 800f312:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800f316:	4651      	mov	r1, sl
 800f318:	00ca      	lsls	r2, r1, #3
 800f31a:	4610      	mov	r0, r2
 800f31c:	4619      	mov	r1, r3
 800f31e:	4603      	mov	r3, r0
 800f320:	4642      	mov	r2, r8
 800f322:	189b      	adds	r3, r3, r2
 800f324:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f326:	464b      	mov	r3, r9
 800f328:	460a      	mov	r2, r1
 800f32a:	eb42 0303 	adc.w	r3, r2, r3
 800f32e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800f330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800f334:	685b      	ldr	r3, [r3, #4]
 800f336:	2200      	movs	r2, #0
 800f338:	663b      	str	r3, [r7, #96]	@ 0x60
 800f33a:	667a      	str	r2, [r7, #100]	@ 0x64
 800f33c:	f04f 0200 	mov.w	r2, #0
 800f340:	f04f 0300 	mov.w	r3, #0
 800f344:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800f348:	4649      	mov	r1, r9
 800f34a:	008b      	lsls	r3, r1, #2
 800f34c:	4641      	mov	r1, r8
 800f34e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800f352:	4641      	mov	r1, r8
 800f354:	008a      	lsls	r2, r1, #2
 800f356:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800f35a:	f7f9 fc2d 	bl	8008bb8 <__aeabi_uldivmod>
 800f35e:	4602      	mov	r2, r0
 800f360:	460b      	mov	r3, r1
 800f362:	4b0d      	ldr	r3, [pc, #52]	@ (800f398 <UART_SetConfig+0x4e4>)
 800f364:	fba3 1302 	umull	r1, r3, r3, r2
 800f368:	095b      	lsrs	r3, r3, #5
 800f36a:	2164      	movs	r1, #100	@ 0x64
 800f36c:	fb01 f303 	mul.w	r3, r1, r3
 800f370:	1ad3      	subs	r3, r2, r3
 800f372:	011b      	lsls	r3, r3, #4
 800f374:	3332      	adds	r3, #50	@ 0x32
 800f376:	4a08      	ldr	r2, [pc, #32]	@ (800f398 <UART_SetConfig+0x4e4>)
 800f378:	fba2 2303 	umull	r2, r3, r2, r3
 800f37c:	095b      	lsrs	r3, r3, #5
 800f37e:	f003 020f 	and.w	r2, r3, #15
 800f382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	4422      	add	r2, r4
 800f38a:	609a      	str	r2, [r3, #8]
}
 800f38c:	bf00      	nop
 800f38e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800f392:	46bd      	mov	sp, r7
 800f394:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f398:	51eb851f 	.word	0x51eb851f

0800f39c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f39c:	b084      	sub	sp, #16
 800f39e:	b580      	push	{r7, lr}
 800f3a0:	b084      	sub	sp, #16
 800f3a2:	af00      	add	r7, sp, #0
 800f3a4:	6078      	str	r0, [r7, #4]
 800f3a6:	f107 001c 	add.w	r0, r7, #28
 800f3aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f3ae:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800f3b2:	2b01      	cmp	r3, #1
 800f3b4:	d123      	bne.n	800f3fe <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f3ba:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	68db      	ldr	r3, [r3, #12]
 800f3c6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800f3ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f3ce:	687a      	ldr	r2, [r7, #4]
 800f3d0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	68db      	ldr	r3, [r3, #12]
 800f3d6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800f3de:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800f3e2:	2b01      	cmp	r3, #1
 800f3e4:	d105      	bne.n	800f3f2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	68db      	ldr	r3, [r3, #12]
 800f3ea:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f3f2:	6878      	ldr	r0, [r7, #4]
 800f3f4:	f001 fae8 	bl	80109c8 <USB_CoreReset>
 800f3f8:	4603      	mov	r3, r0
 800f3fa:	73fb      	strb	r3, [r7, #15]
 800f3fc:	e01b      	b.n	800f436 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	68db      	ldr	r3, [r3, #12]
 800f402:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f40a:	6878      	ldr	r0, [r7, #4]
 800f40c:	f001 fadc 	bl	80109c8 <USB_CoreReset>
 800f410:	4603      	mov	r3, r0
 800f412:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800f414:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d106      	bne.n	800f42a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f420:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	639a      	str	r2, [r3, #56]	@ 0x38
 800f428:	e005      	b.n	800f436 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f42e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800f436:	7fbb      	ldrb	r3, [r7, #30]
 800f438:	2b01      	cmp	r3, #1
 800f43a:	d10b      	bne.n	800f454 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	689b      	ldr	r3, [r3, #8]
 800f440:	f043 0206 	orr.w	r2, r3, #6
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	689b      	ldr	r3, [r3, #8]
 800f44c:	f043 0220 	orr.w	r2, r3, #32
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800f454:	7bfb      	ldrb	r3, [r7, #15]
}
 800f456:	4618      	mov	r0, r3
 800f458:	3710      	adds	r7, #16
 800f45a:	46bd      	mov	sp, r7
 800f45c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f460:	b004      	add	sp, #16
 800f462:	4770      	bx	lr

0800f464 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800f464:	b480      	push	{r7}
 800f466:	b087      	sub	sp, #28
 800f468:	af00      	add	r7, sp, #0
 800f46a:	60f8      	str	r0, [r7, #12]
 800f46c:	60b9      	str	r1, [r7, #8]
 800f46e:	4613      	mov	r3, r2
 800f470:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800f472:	79fb      	ldrb	r3, [r7, #7]
 800f474:	2b02      	cmp	r3, #2
 800f476:	d165      	bne.n	800f544 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800f478:	68bb      	ldr	r3, [r7, #8]
 800f47a:	4a41      	ldr	r2, [pc, #260]	@ (800f580 <USB_SetTurnaroundTime+0x11c>)
 800f47c:	4293      	cmp	r3, r2
 800f47e:	d906      	bls.n	800f48e <USB_SetTurnaroundTime+0x2a>
 800f480:	68bb      	ldr	r3, [r7, #8]
 800f482:	4a40      	ldr	r2, [pc, #256]	@ (800f584 <USB_SetTurnaroundTime+0x120>)
 800f484:	4293      	cmp	r3, r2
 800f486:	d202      	bcs.n	800f48e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800f488:	230f      	movs	r3, #15
 800f48a:	617b      	str	r3, [r7, #20]
 800f48c:	e062      	b.n	800f554 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800f48e:	68bb      	ldr	r3, [r7, #8]
 800f490:	4a3c      	ldr	r2, [pc, #240]	@ (800f584 <USB_SetTurnaroundTime+0x120>)
 800f492:	4293      	cmp	r3, r2
 800f494:	d306      	bcc.n	800f4a4 <USB_SetTurnaroundTime+0x40>
 800f496:	68bb      	ldr	r3, [r7, #8]
 800f498:	4a3b      	ldr	r2, [pc, #236]	@ (800f588 <USB_SetTurnaroundTime+0x124>)
 800f49a:	4293      	cmp	r3, r2
 800f49c:	d202      	bcs.n	800f4a4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800f49e:	230e      	movs	r3, #14
 800f4a0:	617b      	str	r3, [r7, #20]
 800f4a2:	e057      	b.n	800f554 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800f4a4:	68bb      	ldr	r3, [r7, #8]
 800f4a6:	4a38      	ldr	r2, [pc, #224]	@ (800f588 <USB_SetTurnaroundTime+0x124>)
 800f4a8:	4293      	cmp	r3, r2
 800f4aa:	d306      	bcc.n	800f4ba <USB_SetTurnaroundTime+0x56>
 800f4ac:	68bb      	ldr	r3, [r7, #8]
 800f4ae:	4a37      	ldr	r2, [pc, #220]	@ (800f58c <USB_SetTurnaroundTime+0x128>)
 800f4b0:	4293      	cmp	r3, r2
 800f4b2:	d202      	bcs.n	800f4ba <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800f4b4:	230d      	movs	r3, #13
 800f4b6:	617b      	str	r3, [r7, #20]
 800f4b8:	e04c      	b.n	800f554 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800f4ba:	68bb      	ldr	r3, [r7, #8]
 800f4bc:	4a33      	ldr	r2, [pc, #204]	@ (800f58c <USB_SetTurnaroundTime+0x128>)
 800f4be:	4293      	cmp	r3, r2
 800f4c0:	d306      	bcc.n	800f4d0 <USB_SetTurnaroundTime+0x6c>
 800f4c2:	68bb      	ldr	r3, [r7, #8]
 800f4c4:	4a32      	ldr	r2, [pc, #200]	@ (800f590 <USB_SetTurnaroundTime+0x12c>)
 800f4c6:	4293      	cmp	r3, r2
 800f4c8:	d802      	bhi.n	800f4d0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800f4ca:	230c      	movs	r3, #12
 800f4cc:	617b      	str	r3, [r7, #20]
 800f4ce:	e041      	b.n	800f554 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800f4d0:	68bb      	ldr	r3, [r7, #8]
 800f4d2:	4a2f      	ldr	r2, [pc, #188]	@ (800f590 <USB_SetTurnaroundTime+0x12c>)
 800f4d4:	4293      	cmp	r3, r2
 800f4d6:	d906      	bls.n	800f4e6 <USB_SetTurnaroundTime+0x82>
 800f4d8:	68bb      	ldr	r3, [r7, #8]
 800f4da:	4a2e      	ldr	r2, [pc, #184]	@ (800f594 <USB_SetTurnaroundTime+0x130>)
 800f4dc:	4293      	cmp	r3, r2
 800f4de:	d802      	bhi.n	800f4e6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800f4e0:	230b      	movs	r3, #11
 800f4e2:	617b      	str	r3, [r7, #20]
 800f4e4:	e036      	b.n	800f554 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800f4e6:	68bb      	ldr	r3, [r7, #8]
 800f4e8:	4a2a      	ldr	r2, [pc, #168]	@ (800f594 <USB_SetTurnaroundTime+0x130>)
 800f4ea:	4293      	cmp	r3, r2
 800f4ec:	d906      	bls.n	800f4fc <USB_SetTurnaroundTime+0x98>
 800f4ee:	68bb      	ldr	r3, [r7, #8]
 800f4f0:	4a29      	ldr	r2, [pc, #164]	@ (800f598 <USB_SetTurnaroundTime+0x134>)
 800f4f2:	4293      	cmp	r3, r2
 800f4f4:	d802      	bhi.n	800f4fc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800f4f6:	230a      	movs	r3, #10
 800f4f8:	617b      	str	r3, [r7, #20]
 800f4fa:	e02b      	b.n	800f554 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800f4fc:	68bb      	ldr	r3, [r7, #8]
 800f4fe:	4a26      	ldr	r2, [pc, #152]	@ (800f598 <USB_SetTurnaroundTime+0x134>)
 800f500:	4293      	cmp	r3, r2
 800f502:	d906      	bls.n	800f512 <USB_SetTurnaroundTime+0xae>
 800f504:	68bb      	ldr	r3, [r7, #8]
 800f506:	4a25      	ldr	r2, [pc, #148]	@ (800f59c <USB_SetTurnaroundTime+0x138>)
 800f508:	4293      	cmp	r3, r2
 800f50a:	d202      	bcs.n	800f512 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800f50c:	2309      	movs	r3, #9
 800f50e:	617b      	str	r3, [r7, #20]
 800f510:	e020      	b.n	800f554 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800f512:	68bb      	ldr	r3, [r7, #8]
 800f514:	4a21      	ldr	r2, [pc, #132]	@ (800f59c <USB_SetTurnaroundTime+0x138>)
 800f516:	4293      	cmp	r3, r2
 800f518:	d306      	bcc.n	800f528 <USB_SetTurnaroundTime+0xc4>
 800f51a:	68bb      	ldr	r3, [r7, #8]
 800f51c:	4a20      	ldr	r2, [pc, #128]	@ (800f5a0 <USB_SetTurnaroundTime+0x13c>)
 800f51e:	4293      	cmp	r3, r2
 800f520:	d802      	bhi.n	800f528 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800f522:	2308      	movs	r3, #8
 800f524:	617b      	str	r3, [r7, #20]
 800f526:	e015      	b.n	800f554 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800f528:	68bb      	ldr	r3, [r7, #8]
 800f52a:	4a1d      	ldr	r2, [pc, #116]	@ (800f5a0 <USB_SetTurnaroundTime+0x13c>)
 800f52c:	4293      	cmp	r3, r2
 800f52e:	d906      	bls.n	800f53e <USB_SetTurnaroundTime+0xda>
 800f530:	68bb      	ldr	r3, [r7, #8]
 800f532:	4a1c      	ldr	r2, [pc, #112]	@ (800f5a4 <USB_SetTurnaroundTime+0x140>)
 800f534:	4293      	cmp	r3, r2
 800f536:	d202      	bcs.n	800f53e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800f538:	2307      	movs	r3, #7
 800f53a:	617b      	str	r3, [r7, #20]
 800f53c:	e00a      	b.n	800f554 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800f53e:	2306      	movs	r3, #6
 800f540:	617b      	str	r3, [r7, #20]
 800f542:	e007      	b.n	800f554 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800f544:	79fb      	ldrb	r3, [r7, #7]
 800f546:	2b00      	cmp	r3, #0
 800f548:	d102      	bne.n	800f550 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800f54a:	2309      	movs	r3, #9
 800f54c:	617b      	str	r3, [r7, #20]
 800f54e:	e001      	b.n	800f554 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800f550:	2309      	movs	r3, #9
 800f552:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	68db      	ldr	r3, [r3, #12]
 800f558:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	68da      	ldr	r2, [r3, #12]
 800f564:	697b      	ldr	r3, [r7, #20]
 800f566:	029b      	lsls	r3, r3, #10
 800f568:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800f56c:	431a      	orrs	r2, r3
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800f572:	2300      	movs	r3, #0
}
 800f574:	4618      	mov	r0, r3
 800f576:	371c      	adds	r7, #28
 800f578:	46bd      	mov	sp, r7
 800f57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f57e:	4770      	bx	lr
 800f580:	00d8acbf 	.word	0x00d8acbf
 800f584:	00e4e1c0 	.word	0x00e4e1c0
 800f588:	00f42400 	.word	0x00f42400
 800f58c:	01067380 	.word	0x01067380
 800f590:	011a499f 	.word	0x011a499f
 800f594:	01312cff 	.word	0x01312cff
 800f598:	014ca43f 	.word	0x014ca43f
 800f59c:	016e3600 	.word	0x016e3600
 800f5a0:	01a6ab1f 	.word	0x01a6ab1f
 800f5a4:	01e84800 	.word	0x01e84800

0800f5a8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f5a8:	b480      	push	{r7}
 800f5aa:	b083      	sub	sp, #12
 800f5ac:	af00      	add	r7, sp, #0
 800f5ae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	689b      	ldr	r3, [r3, #8]
 800f5b4:	f043 0201 	orr.w	r2, r3, #1
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f5bc:	2300      	movs	r3, #0
}
 800f5be:	4618      	mov	r0, r3
 800f5c0:	370c      	adds	r7, #12
 800f5c2:	46bd      	mov	sp, r7
 800f5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c8:	4770      	bx	lr

0800f5ca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f5ca:	b480      	push	{r7}
 800f5cc:	b083      	sub	sp, #12
 800f5ce:	af00      	add	r7, sp, #0
 800f5d0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	689b      	ldr	r3, [r3, #8]
 800f5d6:	f023 0201 	bic.w	r2, r3, #1
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f5de:	2300      	movs	r3, #0
}
 800f5e0:	4618      	mov	r0, r3
 800f5e2:	370c      	adds	r7, #12
 800f5e4:	46bd      	mov	sp, r7
 800f5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ea:	4770      	bx	lr

0800f5ec <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800f5ec:	b580      	push	{r7, lr}
 800f5ee:	b084      	sub	sp, #16
 800f5f0:	af00      	add	r7, sp, #0
 800f5f2:	6078      	str	r0, [r7, #4]
 800f5f4:	460b      	mov	r3, r1
 800f5f6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800f5f8:	2300      	movs	r3, #0
 800f5fa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	68db      	ldr	r3, [r3, #12]
 800f600:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800f608:	78fb      	ldrb	r3, [r7, #3]
 800f60a:	2b01      	cmp	r3, #1
 800f60c:	d115      	bne.n	800f63a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	68db      	ldr	r3, [r3, #12]
 800f612:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800f61a:	200a      	movs	r0, #10
 800f61c:	f7fa ff60 	bl	800a4e0 <HAL_Delay>
      ms += 10U;
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	330a      	adds	r3, #10
 800f624:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800f626:	6878      	ldr	r0, [r7, #4]
 800f628:	f001 f93f 	bl	80108aa <USB_GetMode>
 800f62c:	4603      	mov	r3, r0
 800f62e:	2b01      	cmp	r3, #1
 800f630:	d01e      	beq.n	800f670 <USB_SetCurrentMode+0x84>
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	2bc7      	cmp	r3, #199	@ 0xc7
 800f636:	d9f0      	bls.n	800f61a <USB_SetCurrentMode+0x2e>
 800f638:	e01a      	b.n	800f670 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800f63a:	78fb      	ldrb	r3, [r7, #3]
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d115      	bne.n	800f66c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	68db      	ldr	r3, [r3, #12]
 800f644:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800f64c:	200a      	movs	r0, #10
 800f64e:	f7fa ff47 	bl	800a4e0 <HAL_Delay>
      ms += 10U;
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	330a      	adds	r3, #10
 800f656:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800f658:	6878      	ldr	r0, [r7, #4]
 800f65a:	f001 f926 	bl	80108aa <USB_GetMode>
 800f65e:	4603      	mov	r3, r0
 800f660:	2b00      	cmp	r3, #0
 800f662:	d005      	beq.n	800f670 <USB_SetCurrentMode+0x84>
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	2bc7      	cmp	r3, #199	@ 0xc7
 800f668:	d9f0      	bls.n	800f64c <USB_SetCurrentMode+0x60>
 800f66a:	e001      	b.n	800f670 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800f66c:	2301      	movs	r3, #1
 800f66e:	e005      	b.n	800f67c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	2bc8      	cmp	r3, #200	@ 0xc8
 800f674:	d101      	bne.n	800f67a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800f676:	2301      	movs	r3, #1
 800f678:	e000      	b.n	800f67c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800f67a:	2300      	movs	r3, #0
}
 800f67c:	4618      	mov	r0, r3
 800f67e:	3710      	adds	r7, #16
 800f680:	46bd      	mov	sp, r7
 800f682:	bd80      	pop	{r7, pc}

0800f684 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f684:	b084      	sub	sp, #16
 800f686:	b580      	push	{r7, lr}
 800f688:	b086      	sub	sp, #24
 800f68a:	af00      	add	r7, sp, #0
 800f68c:	6078      	str	r0, [r7, #4]
 800f68e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800f692:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800f696:	2300      	movs	r3, #0
 800f698:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800f69e:	2300      	movs	r3, #0
 800f6a0:	613b      	str	r3, [r7, #16]
 800f6a2:	e009      	b.n	800f6b8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800f6a4:	687a      	ldr	r2, [r7, #4]
 800f6a6:	693b      	ldr	r3, [r7, #16]
 800f6a8:	3340      	adds	r3, #64	@ 0x40
 800f6aa:	009b      	lsls	r3, r3, #2
 800f6ac:	4413      	add	r3, r2
 800f6ae:	2200      	movs	r2, #0
 800f6b0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800f6b2:	693b      	ldr	r3, [r7, #16]
 800f6b4:	3301      	adds	r3, #1
 800f6b6:	613b      	str	r3, [r7, #16]
 800f6b8:	693b      	ldr	r3, [r7, #16]
 800f6ba:	2b0e      	cmp	r3, #14
 800f6bc:	d9f2      	bls.n	800f6a4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800f6be:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d11c      	bne.n	800f700 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f6cc:	685b      	ldr	r3, [r3, #4]
 800f6ce:	68fa      	ldr	r2, [r7, #12]
 800f6d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f6d4:	f043 0302 	orr.w	r3, r3, #2
 800f6d8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f6de:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f6ea:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f6f6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	639a      	str	r2, [r3, #56]	@ 0x38
 800f6fe:	e00b      	b.n	800f718 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f704:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f710:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f71e:	461a      	mov	r2, r3
 800f720:	2300      	movs	r3, #0
 800f722:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f724:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800f728:	2b01      	cmp	r3, #1
 800f72a:	d10d      	bne.n	800f748 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800f72c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f730:	2b00      	cmp	r3, #0
 800f732:	d104      	bne.n	800f73e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800f734:	2100      	movs	r1, #0
 800f736:	6878      	ldr	r0, [r7, #4]
 800f738:	f000 f968 	bl	800fa0c <USB_SetDevSpeed>
 800f73c:	e008      	b.n	800f750 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800f73e:	2101      	movs	r1, #1
 800f740:	6878      	ldr	r0, [r7, #4]
 800f742:	f000 f963 	bl	800fa0c <USB_SetDevSpeed>
 800f746:	e003      	b.n	800f750 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800f748:	2103      	movs	r1, #3
 800f74a:	6878      	ldr	r0, [r7, #4]
 800f74c:	f000 f95e 	bl	800fa0c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800f750:	2110      	movs	r1, #16
 800f752:	6878      	ldr	r0, [r7, #4]
 800f754:	f000 f8fa 	bl	800f94c <USB_FlushTxFifo>
 800f758:	4603      	mov	r3, r0
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d001      	beq.n	800f762 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800f75e:	2301      	movs	r3, #1
 800f760:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800f762:	6878      	ldr	r0, [r7, #4]
 800f764:	f000 f924 	bl	800f9b0 <USB_FlushRxFifo>
 800f768:	4603      	mov	r3, r0
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d001      	beq.n	800f772 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800f76e:	2301      	movs	r3, #1
 800f770:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f778:	461a      	mov	r2, r3
 800f77a:	2300      	movs	r3, #0
 800f77c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f784:	461a      	mov	r2, r3
 800f786:	2300      	movs	r3, #0
 800f788:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f790:	461a      	mov	r2, r3
 800f792:	2300      	movs	r3, #0
 800f794:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f796:	2300      	movs	r3, #0
 800f798:	613b      	str	r3, [r7, #16]
 800f79a:	e043      	b.n	800f824 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f79c:	693b      	ldr	r3, [r7, #16]
 800f79e:	015a      	lsls	r2, r3, #5
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	4413      	add	r3, r2
 800f7a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f7ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f7b2:	d118      	bne.n	800f7e6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 800f7b4:	693b      	ldr	r3, [r7, #16]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d10a      	bne.n	800f7d0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800f7ba:	693b      	ldr	r3, [r7, #16]
 800f7bc:	015a      	lsls	r2, r3, #5
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	4413      	add	r3, r2
 800f7c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f7c6:	461a      	mov	r2, r3
 800f7c8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800f7cc:	6013      	str	r3, [r2, #0]
 800f7ce:	e013      	b.n	800f7f8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800f7d0:	693b      	ldr	r3, [r7, #16]
 800f7d2:	015a      	lsls	r2, r3, #5
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	4413      	add	r3, r2
 800f7d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f7dc:	461a      	mov	r2, r3
 800f7de:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800f7e2:	6013      	str	r3, [r2, #0]
 800f7e4:	e008      	b.n	800f7f8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800f7e6:	693b      	ldr	r3, [r7, #16]
 800f7e8:	015a      	lsls	r2, r3, #5
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	4413      	add	r3, r2
 800f7ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f7f2:	461a      	mov	r2, r3
 800f7f4:	2300      	movs	r3, #0
 800f7f6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800f7f8:	693b      	ldr	r3, [r7, #16]
 800f7fa:	015a      	lsls	r2, r3, #5
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	4413      	add	r3, r2
 800f800:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f804:	461a      	mov	r2, r3
 800f806:	2300      	movs	r3, #0
 800f808:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800f80a:	693b      	ldr	r3, [r7, #16]
 800f80c:	015a      	lsls	r2, r3, #5
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	4413      	add	r3, r2
 800f812:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f816:	461a      	mov	r2, r3
 800f818:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800f81c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f81e:	693b      	ldr	r3, [r7, #16]
 800f820:	3301      	adds	r3, #1
 800f822:	613b      	str	r3, [r7, #16]
 800f824:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800f828:	461a      	mov	r2, r3
 800f82a:	693b      	ldr	r3, [r7, #16]
 800f82c:	4293      	cmp	r3, r2
 800f82e:	d3b5      	bcc.n	800f79c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f830:	2300      	movs	r3, #0
 800f832:	613b      	str	r3, [r7, #16]
 800f834:	e043      	b.n	800f8be <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f836:	693b      	ldr	r3, [r7, #16]
 800f838:	015a      	lsls	r2, r3, #5
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	4413      	add	r3, r2
 800f83e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f848:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f84c:	d118      	bne.n	800f880 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800f84e:	693b      	ldr	r3, [r7, #16]
 800f850:	2b00      	cmp	r3, #0
 800f852:	d10a      	bne.n	800f86a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800f854:	693b      	ldr	r3, [r7, #16]
 800f856:	015a      	lsls	r2, r3, #5
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	4413      	add	r3, r2
 800f85c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f860:	461a      	mov	r2, r3
 800f862:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800f866:	6013      	str	r3, [r2, #0]
 800f868:	e013      	b.n	800f892 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800f86a:	693b      	ldr	r3, [r7, #16]
 800f86c:	015a      	lsls	r2, r3, #5
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	4413      	add	r3, r2
 800f872:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f876:	461a      	mov	r2, r3
 800f878:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800f87c:	6013      	str	r3, [r2, #0]
 800f87e:	e008      	b.n	800f892 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800f880:	693b      	ldr	r3, [r7, #16]
 800f882:	015a      	lsls	r2, r3, #5
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	4413      	add	r3, r2
 800f888:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f88c:	461a      	mov	r2, r3
 800f88e:	2300      	movs	r3, #0
 800f890:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800f892:	693b      	ldr	r3, [r7, #16]
 800f894:	015a      	lsls	r2, r3, #5
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	4413      	add	r3, r2
 800f89a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f89e:	461a      	mov	r2, r3
 800f8a0:	2300      	movs	r3, #0
 800f8a2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800f8a4:	693b      	ldr	r3, [r7, #16]
 800f8a6:	015a      	lsls	r2, r3, #5
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	4413      	add	r3, r2
 800f8ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f8b0:	461a      	mov	r2, r3
 800f8b2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800f8b6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f8b8:	693b      	ldr	r3, [r7, #16]
 800f8ba:	3301      	adds	r3, #1
 800f8bc:	613b      	str	r3, [r7, #16]
 800f8be:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800f8c2:	461a      	mov	r2, r3
 800f8c4:	693b      	ldr	r3, [r7, #16]
 800f8c6:	4293      	cmp	r3, r2
 800f8c8:	d3b5      	bcc.n	800f836 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f8d0:	691b      	ldr	r3, [r3, #16]
 800f8d2:	68fa      	ldr	r2, [r7, #12]
 800f8d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f8d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f8dc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	2200      	movs	r2, #0
 800f8e2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800f8ea:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800f8ec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d105      	bne.n	800f900 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	699b      	ldr	r3, [r3, #24]
 800f8f8:	f043 0210 	orr.w	r2, r3, #16
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	699a      	ldr	r2, [r3, #24]
 800f904:	4b10      	ldr	r3, [pc, #64]	@ (800f948 <USB_DevInit+0x2c4>)
 800f906:	4313      	orrs	r3, r2
 800f908:	687a      	ldr	r2, [r7, #4]
 800f90a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800f90c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800f910:	2b00      	cmp	r3, #0
 800f912:	d005      	beq.n	800f920 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	699b      	ldr	r3, [r3, #24]
 800f918:	f043 0208 	orr.w	r2, r3, #8
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800f920:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800f924:	2b01      	cmp	r3, #1
 800f926:	d107      	bne.n	800f938 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	699b      	ldr	r3, [r3, #24]
 800f92c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f930:	f043 0304 	orr.w	r3, r3, #4
 800f934:	687a      	ldr	r2, [r7, #4]
 800f936:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800f938:	7dfb      	ldrb	r3, [r7, #23]
}
 800f93a:	4618      	mov	r0, r3
 800f93c:	3718      	adds	r7, #24
 800f93e:	46bd      	mov	sp, r7
 800f940:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f944:	b004      	add	sp, #16
 800f946:	4770      	bx	lr
 800f948:	803c3800 	.word	0x803c3800

0800f94c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800f94c:	b480      	push	{r7}
 800f94e:	b085      	sub	sp, #20
 800f950:	af00      	add	r7, sp, #0
 800f952:	6078      	str	r0, [r7, #4]
 800f954:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800f956:	2300      	movs	r3, #0
 800f958:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	3301      	adds	r3, #1
 800f95e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f966:	d901      	bls.n	800f96c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800f968:	2303      	movs	r3, #3
 800f96a:	e01b      	b.n	800f9a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	691b      	ldr	r3, [r3, #16]
 800f970:	2b00      	cmp	r3, #0
 800f972:	daf2      	bge.n	800f95a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800f974:	2300      	movs	r3, #0
 800f976:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800f978:	683b      	ldr	r3, [r7, #0]
 800f97a:	019b      	lsls	r3, r3, #6
 800f97c:	f043 0220 	orr.w	r2, r3, #32
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	3301      	adds	r3, #1
 800f988:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f990:	d901      	bls.n	800f996 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800f992:	2303      	movs	r3, #3
 800f994:	e006      	b.n	800f9a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	691b      	ldr	r3, [r3, #16]
 800f99a:	f003 0320 	and.w	r3, r3, #32
 800f99e:	2b20      	cmp	r3, #32
 800f9a0:	d0f0      	beq.n	800f984 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800f9a2:	2300      	movs	r3, #0
}
 800f9a4:	4618      	mov	r0, r3
 800f9a6:	3714      	adds	r7, #20
 800f9a8:	46bd      	mov	sp, r7
 800f9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ae:	4770      	bx	lr

0800f9b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800f9b0:	b480      	push	{r7}
 800f9b2:	b085      	sub	sp, #20
 800f9b4:	af00      	add	r7, sp, #0
 800f9b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f9b8:	2300      	movs	r3, #0
 800f9ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	3301      	adds	r3, #1
 800f9c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f9c8:	d901      	bls.n	800f9ce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800f9ca:	2303      	movs	r3, #3
 800f9cc:	e018      	b.n	800fa00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	691b      	ldr	r3, [r3, #16]
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	daf2      	bge.n	800f9bc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800f9d6:	2300      	movs	r3, #0
 800f9d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	2210      	movs	r2, #16
 800f9de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	3301      	adds	r3, #1
 800f9e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f9ec:	d901      	bls.n	800f9f2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800f9ee:	2303      	movs	r3, #3
 800f9f0:	e006      	b.n	800fa00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	691b      	ldr	r3, [r3, #16]
 800f9f6:	f003 0310 	and.w	r3, r3, #16
 800f9fa:	2b10      	cmp	r3, #16
 800f9fc:	d0f0      	beq.n	800f9e0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800f9fe:	2300      	movs	r3, #0
}
 800fa00:	4618      	mov	r0, r3
 800fa02:	3714      	adds	r7, #20
 800fa04:	46bd      	mov	sp, r7
 800fa06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa0a:	4770      	bx	lr

0800fa0c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800fa0c:	b480      	push	{r7}
 800fa0e:	b085      	sub	sp, #20
 800fa10:	af00      	add	r7, sp, #0
 800fa12:	6078      	str	r0, [r7, #4]
 800fa14:	460b      	mov	r3, r1
 800fa16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fa22:	681a      	ldr	r2, [r3, #0]
 800fa24:	78fb      	ldrb	r3, [r7, #3]
 800fa26:	68f9      	ldr	r1, [r7, #12]
 800fa28:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800fa2c:	4313      	orrs	r3, r2
 800fa2e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800fa30:	2300      	movs	r3, #0
}
 800fa32:	4618      	mov	r0, r3
 800fa34:	3714      	adds	r7, #20
 800fa36:	46bd      	mov	sp, r7
 800fa38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa3c:	4770      	bx	lr

0800fa3e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800fa3e:	b480      	push	{r7}
 800fa40:	b087      	sub	sp, #28
 800fa42:	af00      	add	r7, sp, #0
 800fa44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800fa4a:	693b      	ldr	r3, [r7, #16]
 800fa4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fa50:	689b      	ldr	r3, [r3, #8]
 800fa52:	f003 0306 	and.w	r3, r3, #6
 800fa56:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d102      	bne.n	800fa64 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800fa5e:	2300      	movs	r3, #0
 800fa60:	75fb      	strb	r3, [r7, #23]
 800fa62:	e00a      	b.n	800fa7a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	2b02      	cmp	r3, #2
 800fa68:	d002      	beq.n	800fa70 <USB_GetDevSpeed+0x32>
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	2b06      	cmp	r3, #6
 800fa6e:	d102      	bne.n	800fa76 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800fa70:	2302      	movs	r3, #2
 800fa72:	75fb      	strb	r3, [r7, #23]
 800fa74:	e001      	b.n	800fa7a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800fa76:	230f      	movs	r3, #15
 800fa78:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800fa7a:	7dfb      	ldrb	r3, [r7, #23]
}
 800fa7c:	4618      	mov	r0, r3
 800fa7e:	371c      	adds	r7, #28
 800fa80:	46bd      	mov	sp, r7
 800fa82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa86:	4770      	bx	lr

0800fa88 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800fa88:	b480      	push	{r7}
 800fa8a:	b085      	sub	sp, #20
 800fa8c:	af00      	add	r7, sp, #0
 800fa8e:	6078      	str	r0, [r7, #4]
 800fa90:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fa96:	683b      	ldr	r3, [r7, #0]
 800fa98:	781b      	ldrb	r3, [r3, #0]
 800fa9a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800fa9c:	683b      	ldr	r3, [r7, #0]
 800fa9e:	785b      	ldrb	r3, [r3, #1]
 800faa0:	2b01      	cmp	r3, #1
 800faa2:	d13a      	bne.n	800fb1a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800faaa:	69da      	ldr	r2, [r3, #28]
 800faac:	683b      	ldr	r3, [r7, #0]
 800faae:	781b      	ldrb	r3, [r3, #0]
 800fab0:	f003 030f 	and.w	r3, r3, #15
 800fab4:	2101      	movs	r1, #1
 800fab6:	fa01 f303 	lsl.w	r3, r1, r3
 800faba:	b29b      	uxth	r3, r3
 800fabc:	68f9      	ldr	r1, [r7, #12]
 800fabe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800fac2:	4313      	orrs	r3, r2
 800fac4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800fac6:	68bb      	ldr	r3, [r7, #8]
 800fac8:	015a      	lsls	r2, r3, #5
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	4413      	add	r3, r2
 800face:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d155      	bne.n	800fb88 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800fadc:	68bb      	ldr	r3, [r7, #8]
 800fade:	015a      	lsls	r2, r3, #5
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	4413      	add	r3, r2
 800fae4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fae8:	681a      	ldr	r2, [r3, #0]
 800faea:	683b      	ldr	r3, [r7, #0]
 800faec:	689b      	ldr	r3, [r3, #8]
 800faee:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800faf2:	683b      	ldr	r3, [r7, #0]
 800faf4:	791b      	ldrb	r3, [r3, #4]
 800faf6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800faf8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800fafa:	68bb      	ldr	r3, [r7, #8]
 800fafc:	059b      	lsls	r3, r3, #22
 800fafe:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800fb00:	4313      	orrs	r3, r2
 800fb02:	68ba      	ldr	r2, [r7, #8]
 800fb04:	0151      	lsls	r1, r2, #5
 800fb06:	68fa      	ldr	r2, [r7, #12]
 800fb08:	440a      	add	r2, r1
 800fb0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fb0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800fb12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fb16:	6013      	str	r3, [r2, #0]
 800fb18:	e036      	b.n	800fb88 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fb20:	69da      	ldr	r2, [r3, #28]
 800fb22:	683b      	ldr	r3, [r7, #0]
 800fb24:	781b      	ldrb	r3, [r3, #0]
 800fb26:	f003 030f 	and.w	r3, r3, #15
 800fb2a:	2101      	movs	r1, #1
 800fb2c:	fa01 f303 	lsl.w	r3, r1, r3
 800fb30:	041b      	lsls	r3, r3, #16
 800fb32:	68f9      	ldr	r1, [r7, #12]
 800fb34:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800fb38:	4313      	orrs	r3, r2
 800fb3a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800fb3c:	68bb      	ldr	r3, [r7, #8]
 800fb3e:	015a      	lsls	r2, r3, #5
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	4413      	add	r3, r2
 800fb44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d11a      	bne.n	800fb88 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800fb52:	68bb      	ldr	r3, [r7, #8]
 800fb54:	015a      	lsls	r2, r3, #5
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	4413      	add	r3, r2
 800fb5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fb5e:	681a      	ldr	r2, [r3, #0]
 800fb60:	683b      	ldr	r3, [r7, #0]
 800fb62:	689b      	ldr	r3, [r3, #8]
 800fb64:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800fb68:	683b      	ldr	r3, [r7, #0]
 800fb6a:	791b      	ldrb	r3, [r3, #4]
 800fb6c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800fb6e:	430b      	orrs	r3, r1
 800fb70:	4313      	orrs	r3, r2
 800fb72:	68ba      	ldr	r2, [r7, #8]
 800fb74:	0151      	lsls	r1, r2, #5
 800fb76:	68fa      	ldr	r2, [r7, #12]
 800fb78:	440a      	add	r2, r1
 800fb7a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800fb7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800fb82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fb86:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800fb88:	2300      	movs	r3, #0
}
 800fb8a:	4618      	mov	r0, r3
 800fb8c:	3714      	adds	r7, #20
 800fb8e:	46bd      	mov	sp, r7
 800fb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb94:	4770      	bx	lr
	...

0800fb98 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800fb98:	b480      	push	{r7}
 800fb9a:	b085      	sub	sp, #20
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	6078      	str	r0, [r7, #4]
 800fba0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fba6:	683b      	ldr	r3, [r7, #0]
 800fba8:	781b      	ldrb	r3, [r3, #0]
 800fbaa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800fbac:	683b      	ldr	r3, [r7, #0]
 800fbae:	785b      	ldrb	r3, [r3, #1]
 800fbb0:	2b01      	cmp	r3, #1
 800fbb2:	d161      	bne.n	800fc78 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800fbb4:	68bb      	ldr	r3, [r7, #8]
 800fbb6:	015a      	lsls	r2, r3, #5
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	4413      	add	r3, r2
 800fbbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800fbc6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800fbca:	d11f      	bne.n	800fc0c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800fbcc:	68bb      	ldr	r3, [r7, #8]
 800fbce:	015a      	lsls	r2, r3, #5
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	4413      	add	r3, r2
 800fbd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	68ba      	ldr	r2, [r7, #8]
 800fbdc:	0151      	lsls	r1, r2, #5
 800fbde:	68fa      	ldr	r2, [r7, #12]
 800fbe0:	440a      	add	r2, r1
 800fbe2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fbe6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800fbea:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800fbec:	68bb      	ldr	r3, [r7, #8]
 800fbee:	015a      	lsls	r2, r3, #5
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	4413      	add	r3, r2
 800fbf4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	68ba      	ldr	r2, [r7, #8]
 800fbfc:	0151      	lsls	r1, r2, #5
 800fbfe:	68fa      	ldr	r2, [r7, #12]
 800fc00:	440a      	add	r2, r1
 800fc02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fc06:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800fc0a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fc12:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800fc14:	683b      	ldr	r3, [r7, #0]
 800fc16:	781b      	ldrb	r3, [r3, #0]
 800fc18:	f003 030f 	and.w	r3, r3, #15
 800fc1c:	2101      	movs	r1, #1
 800fc1e:	fa01 f303 	lsl.w	r3, r1, r3
 800fc22:	b29b      	uxth	r3, r3
 800fc24:	43db      	mvns	r3, r3
 800fc26:	68f9      	ldr	r1, [r7, #12]
 800fc28:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800fc2c:	4013      	ands	r3, r2
 800fc2e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fc36:	69da      	ldr	r2, [r3, #28]
 800fc38:	683b      	ldr	r3, [r7, #0]
 800fc3a:	781b      	ldrb	r3, [r3, #0]
 800fc3c:	f003 030f 	and.w	r3, r3, #15
 800fc40:	2101      	movs	r1, #1
 800fc42:	fa01 f303 	lsl.w	r3, r1, r3
 800fc46:	b29b      	uxth	r3, r3
 800fc48:	43db      	mvns	r3, r3
 800fc4a:	68f9      	ldr	r1, [r7, #12]
 800fc4c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800fc50:	4013      	ands	r3, r2
 800fc52:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800fc54:	68bb      	ldr	r3, [r7, #8]
 800fc56:	015a      	lsls	r2, r3, #5
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	4413      	add	r3, r2
 800fc5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fc60:	681a      	ldr	r2, [r3, #0]
 800fc62:	68bb      	ldr	r3, [r7, #8]
 800fc64:	0159      	lsls	r1, r3, #5
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	440b      	add	r3, r1
 800fc6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fc6e:	4619      	mov	r1, r3
 800fc70:	4b35      	ldr	r3, [pc, #212]	@ (800fd48 <USB_DeactivateEndpoint+0x1b0>)
 800fc72:	4013      	ands	r3, r2
 800fc74:	600b      	str	r3, [r1, #0]
 800fc76:	e060      	b.n	800fd3a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fc78:	68bb      	ldr	r3, [r7, #8]
 800fc7a:	015a      	lsls	r2, r3, #5
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	4413      	add	r3, r2
 800fc80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800fc8a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800fc8e:	d11f      	bne.n	800fcd0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800fc90:	68bb      	ldr	r3, [r7, #8]
 800fc92:	015a      	lsls	r2, r3, #5
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	4413      	add	r3, r2
 800fc98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	68ba      	ldr	r2, [r7, #8]
 800fca0:	0151      	lsls	r1, r2, #5
 800fca2:	68fa      	ldr	r2, [r7, #12]
 800fca4:	440a      	add	r2, r1
 800fca6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800fcaa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800fcae:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800fcb0:	68bb      	ldr	r3, [r7, #8]
 800fcb2:	015a      	lsls	r2, r3, #5
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	4413      	add	r3, r2
 800fcb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	68ba      	ldr	r2, [r7, #8]
 800fcc0:	0151      	lsls	r1, r2, #5
 800fcc2:	68fa      	ldr	r2, [r7, #12]
 800fcc4:	440a      	add	r2, r1
 800fcc6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800fcca:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800fcce:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fcd6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800fcd8:	683b      	ldr	r3, [r7, #0]
 800fcda:	781b      	ldrb	r3, [r3, #0]
 800fcdc:	f003 030f 	and.w	r3, r3, #15
 800fce0:	2101      	movs	r1, #1
 800fce2:	fa01 f303 	lsl.w	r3, r1, r3
 800fce6:	041b      	lsls	r3, r3, #16
 800fce8:	43db      	mvns	r3, r3
 800fcea:	68f9      	ldr	r1, [r7, #12]
 800fcec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800fcf0:	4013      	ands	r3, r2
 800fcf2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fcfa:	69da      	ldr	r2, [r3, #28]
 800fcfc:	683b      	ldr	r3, [r7, #0]
 800fcfe:	781b      	ldrb	r3, [r3, #0]
 800fd00:	f003 030f 	and.w	r3, r3, #15
 800fd04:	2101      	movs	r1, #1
 800fd06:	fa01 f303 	lsl.w	r3, r1, r3
 800fd0a:	041b      	lsls	r3, r3, #16
 800fd0c:	43db      	mvns	r3, r3
 800fd0e:	68f9      	ldr	r1, [r7, #12]
 800fd10:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800fd14:	4013      	ands	r3, r2
 800fd16:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800fd18:	68bb      	ldr	r3, [r7, #8]
 800fd1a:	015a      	lsls	r2, r3, #5
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	4413      	add	r3, r2
 800fd20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fd24:	681a      	ldr	r2, [r3, #0]
 800fd26:	68bb      	ldr	r3, [r7, #8]
 800fd28:	0159      	lsls	r1, r3, #5
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	440b      	add	r3, r1
 800fd2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fd32:	4619      	mov	r1, r3
 800fd34:	4b05      	ldr	r3, [pc, #20]	@ (800fd4c <USB_DeactivateEndpoint+0x1b4>)
 800fd36:	4013      	ands	r3, r2
 800fd38:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800fd3a:	2300      	movs	r3, #0
}
 800fd3c:	4618      	mov	r0, r3
 800fd3e:	3714      	adds	r7, #20
 800fd40:	46bd      	mov	sp, r7
 800fd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd46:	4770      	bx	lr
 800fd48:	ec337800 	.word	0xec337800
 800fd4c:	eff37800 	.word	0xeff37800

0800fd50 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800fd50:	b580      	push	{r7, lr}
 800fd52:	b08a      	sub	sp, #40	@ 0x28
 800fd54:	af02      	add	r7, sp, #8
 800fd56:	60f8      	str	r0, [r7, #12]
 800fd58:	60b9      	str	r1, [r7, #8]
 800fd5a:	4613      	mov	r3, r2
 800fd5c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800fd62:	68bb      	ldr	r3, [r7, #8]
 800fd64:	781b      	ldrb	r3, [r3, #0]
 800fd66:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800fd68:	68bb      	ldr	r3, [r7, #8]
 800fd6a:	785b      	ldrb	r3, [r3, #1]
 800fd6c:	2b01      	cmp	r3, #1
 800fd6e:	f040 817f 	bne.w	8010070 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800fd72:	68bb      	ldr	r3, [r7, #8]
 800fd74:	691b      	ldr	r3, [r3, #16]
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d132      	bne.n	800fde0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800fd7a:	69bb      	ldr	r3, [r7, #24]
 800fd7c:	015a      	lsls	r2, r3, #5
 800fd7e:	69fb      	ldr	r3, [r7, #28]
 800fd80:	4413      	add	r3, r2
 800fd82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fd86:	691b      	ldr	r3, [r3, #16]
 800fd88:	69ba      	ldr	r2, [r7, #24]
 800fd8a:	0151      	lsls	r1, r2, #5
 800fd8c:	69fa      	ldr	r2, [r7, #28]
 800fd8e:	440a      	add	r2, r1
 800fd90:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fd94:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800fd98:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800fd9c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800fd9e:	69bb      	ldr	r3, [r7, #24]
 800fda0:	015a      	lsls	r2, r3, #5
 800fda2:	69fb      	ldr	r3, [r7, #28]
 800fda4:	4413      	add	r3, r2
 800fda6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fdaa:	691b      	ldr	r3, [r3, #16]
 800fdac:	69ba      	ldr	r2, [r7, #24]
 800fdae:	0151      	lsls	r1, r2, #5
 800fdb0:	69fa      	ldr	r2, [r7, #28]
 800fdb2:	440a      	add	r2, r1
 800fdb4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fdb8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800fdbc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800fdbe:	69bb      	ldr	r3, [r7, #24]
 800fdc0:	015a      	lsls	r2, r3, #5
 800fdc2:	69fb      	ldr	r3, [r7, #28]
 800fdc4:	4413      	add	r3, r2
 800fdc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fdca:	691b      	ldr	r3, [r3, #16]
 800fdcc:	69ba      	ldr	r2, [r7, #24]
 800fdce:	0151      	lsls	r1, r2, #5
 800fdd0:	69fa      	ldr	r2, [r7, #28]
 800fdd2:	440a      	add	r2, r1
 800fdd4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fdd8:	0cdb      	lsrs	r3, r3, #19
 800fdda:	04db      	lsls	r3, r3, #19
 800fddc:	6113      	str	r3, [r2, #16]
 800fdde:	e097      	b.n	800ff10 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800fde0:	69bb      	ldr	r3, [r7, #24]
 800fde2:	015a      	lsls	r2, r3, #5
 800fde4:	69fb      	ldr	r3, [r7, #28]
 800fde6:	4413      	add	r3, r2
 800fde8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fdec:	691b      	ldr	r3, [r3, #16]
 800fdee:	69ba      	ldr	r2, [r7, #24]
 800fdf0:	0151      	lsls	r1, r2, #5
 800fdf2:	69fa      	ldr	r2, [r7, #28]
 800fdf4:	440a      	add	r2, r1
 800fdf6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fdfa:	0cdb      	lsrs	r3, r3, #19
 800fdfc:	04db      	lsls	r3, r3, #19
 800fdfe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800fe00:	69bb      	ldr	r3, [r7, #24]
 800fe02:	015a      	lsls	r2, r3, #5
 800fe04:	69fb      	ldr	r3, [r7, #28]
 800fe06:	4413      	add	r3, r2
 800fe08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fe0c:	691b      	ldr	r3, [r3, #16]
 800fe0e:	69ba      	ldr	r2, [r7, #24]
 800fe10:	0151      	lsls	r1, r2, #5
 800fe12:	69fa      	ldr	r2, [r7, #28]
 800fe14:	440a      	add	r2, r1
 800fe16:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fe1a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800fe1e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800fe22:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800fe24:	69bb      	ldr	r3, [r7, #24]
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d11a      	bne.n	800fe60 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800fe2a:	68bb      	ldr	r3, [r7, #8]
 800fe2c:	691a      	ldr	r2, [r3, #16]
 800fe2e:	68bb      	ldr	r3, [r7, #8]
 800fe30:	689b      	ldr	r3, [r3, #8]
 800fe32:	429a      	cmp	r2, r3
 800fe34:	d903      	bls.n	800fe3e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800fe36:	68bb      	ldr	r3, [r7, #8]
 800fe38:	689a      	ldr	r2, [r3, #8]
 800fe3a:	68bb      	ldr	r3, [r7, #8]
 800fe3c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800fe3e:	69bb      	ldr	r3, [r7, #24]
 800fe40:	015a      	lsls	r2, r3, #5
 800fe42:	69fb      	ldr	r3, [r7, #28]
 800fe44:	4413      	add	r3, r2
 800fe46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fe4a:	691b      	ldr	r3, [r3, #16]
 800fe4c:	69ba      	ldr	r2, [r7, #24]
 800fe4e:	0151      	lsls	r1, r2, #5
 800fe50:	69fa      	ldr	r2, [r7, #28]
 800fe52:	440a      	add	r2, r1
 800fe54:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fe58:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800fe5c:	6113      	str	r3, [r2, #16]
 800fe5e:	e044      	b.n	800feea <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800fe60:	68bb      	ldr	r3, [r7, #8]
 800fe62:	691a      	ldr	r2, [r3, #16]
 800fe64:	68bb      	ldr	r3, [r7, #8]
 800fe66:	689b      	ldr	r3, [r3, #8]
 800fe68:	4413      	add	r3, r2
 800fe6a:	1e5a      	subs	r2, r3, #1
 800fe6c:	68bb      	ldr	r3, [r7, #8]
 800fe6e:	689b      	ldr	r3, [r3, #8]
 800fe70:	fbb2 f3f3 	udiv	r3, r2, r3
 800fe74:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800fe76:	69bb      	ldr	r3, [r7, #24]
 800fe78:	015a      	lsls	r2, r3, #5
 800fe7a:	69fb      	ldr	r3, [r7, #28]
 800fe7c:	4413      	add	r3, r2
 800fe7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fe82:	691a      	ldr	r2, [r3, #16]
 800fe84:	8afb      	ldrh	r3, [r7, #22]
 800fe86:	04d9      	lsls	r1, r3, #19
 800fe88:	4ba4      	ldr	r3, [pc, #656]	@ (801011c <USB_EPStartXfer+0x3cc>)
 800fe8a:	400b      	ands	r3, r1
 800fe8c:	69b9      	ldr	r1, [r7, #24]
 800fe8e:	0148      	lsls	r0, r1, #5
 800fe90:	69f9      	ldr	r1, [r7, #28]
 800fe92:	4401      	add	r1, r0
 800fe94:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800fe98:	4313      	orrs	r3, r2
 800fe9a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800fe9c:	68bb      	ldr	r3, [r7, #8]
 800fe9e:	791b      	ldrb	r3, [r3, #4]
 800fea0:	2b01      	cmp	r3, #1
 800fea2:	d122      	bne.n	800feea <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800fea4:	69bb      	ldr	r3, [r7, #24]
 800fea6:	015a      	lsls	r2, r3, #5
 800fea8:	69fb      	ldr	r3, [r7, #28]
 800feaa:	4413      	add	r3, r2
 800feac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800feb0:	691b      	ldr	r3, [r3, #16]
 800feb2:	69ba      	ldr	r2, [r7, #24]
 800feb4:	0151      	lsls	r1, r2, #5
 800feb6:	69fa      	ldr	r2, [r7, #28]
 800feb8:	440a      	add	r2, r1
 800feba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800febe:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800fec2:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800fec4:	69bb      	ldr	r3, [r7, #24]
 800fec6:	015a      	lsls	r2, r3, #5
 800fec8:	69fb      	ldr	r3, [r7, #28]
 800feca:	4413      	add	r3, r2
 800fecc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fed0:	691a      	ldr	r2, [r3, #16]
 800fed2:	8afb      	ldrh	r3, [r7, #22]
 800fed4:	075b      	lsls	r3, r3, #29
 800fed6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800feda:	69b9      	ldr	r1, [r7, #24]
 800fedc:	0148      	lsls	r0, r1, #5
 800fede:	69f9      	ldr	r1, [r7, #28]
 800fee0:	4401      	add	r1, r0
 800fee2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800fee6:	4313      	orrs	r3, r2
 800fee8:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800feea:	69bb      	ldr	r3, [r7, #24]
 800feec:	015a      	lsls	r2, r3, #5
 800feee:	69fb      	ldr	r3, [r7, #28]
 800fef0:	4413      	add	r3, r2
 800fef2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fef6:	691a      	ldr	r2, [r3, #16]
 800fef8:	68bb      	ldr	r3, [r7, #8]
 800fefa:	691b      	ldr	r3, [r3, #16]
 800fefc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ff00:	69b9      	ldr	r1, [r7, #24]
 800ff02:	0148      	lsls	r0, r1, #5
 800ff04:	69f9      	ldr	r1, [r7, #28]
 800ff06:	4401      	add	r1, r0
 800ff08:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800ff0c:	4313      	orrs	r3, r2
 800ff0e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ff10:	79fb      	ldrb	r3, [r7, #7]
 800ff12:	2b01      	cmp	r3, #1
 800ff14:	d14b      	bne.n	800ffae <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ff16:	68bb      	ldr	r3, [r7, #8]
 800ff18:	69db      	ldr	r3, [r3, #28]
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d009      	beq.n	800ff32 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ff1e:	69bb      	ldr	r3, [r7, #24]
 800ff20:	015a      	lsls	r2, r3, #5
 800ff22:	69fb      	ldr	r3, [r7, #28]
 800ff24:	4413      	add	r3, r2
 800ff26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ff2a:	461a      	mov	r2, r3
 800ff2c:	68bb      	ldr	r3, [r7, #8]
 800ff2e:	69db      	ldr	r3, [r3, #28]
 800ff30:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800ff32:	68bb      	ldr	r3, [r7, #8]
 800ff34:	791b      	ldrb	r3, [r3, #4]
 800ff36:	2b01      	cmp	r3, #1
 800ff38:	d128      	bne.n	800ff8c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ff3a:	69fb      	ldr	r3, [r7, #28]
 800ff3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ff40:	689b      	ldr	r3, [r3, #8]
 800ff42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d110      	bne.n	800ff6c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ff4a:	69bb      	ldr	r3, [r7, #24]
 800ff4c:	015a      	lsls	r2, r3, #5
 800ff4e:	69fb      	ldr	r3, [r7, #28]
 800ff50:	4413      	add	r3, r2
 800ff52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ff56:	681b      	ldr	r3, [r3, #0]
 800ff58:	69ba      	ldr	r2, [r7, #24]
 800ff5a:	0151      	lsls	r1, r2, #5
 800ff5c:	69fa      	ldr	r2, [r7, #28]
 800ff5e:	440a      	add	r2, r1
 800ff60:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ff64:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ff68:	6013      	str	r3, [r2, #0]
 800ff6a:	e00f      	b.n	800ff8c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ff6c:	69bb      	ldr	r3, [r7, #24]
 800ff6e:	015a      	lsls	r2, r3, #5
 800ff70:	69fb      	ldr	r3, [r7, #28]
 800ff72:	4413      	add	r3, r2
 800ff74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	69ba      	ldr	r2, [r7, #24]
 800ff7c:	0151      	lsls	r1, r2, #5
 800ff7e:	69fa      	ldr	r2, [r7, #28]
 800ff80:	440a      	add	r2, r1
 800ff82:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ff86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ff8a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ff8c:	69bb      	ldr	r3, [r7, #24]
 800ff8e:	015a      	lsls	r2, r3, #5
 800ff90:	69fb      	ldr	r3, [r7, #28]
 800ff92:	4413      	add	r3, r2
 800ff94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	69ba      	ldr	r2, [r7, #24]
 800ff9c:	0151      	lsls	r1, r2, #5
 800ff9e:	69fa      	ldr	r2, [r7, #28]
 800ffa0:	440a      	add	r2, r1
 800ffa2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ffa6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ffaa:	6013      	str	r3, [r2, #0]
 800ffac:	e166      	b.n	801027c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ffae:	69bb      	ldr	r3, [r7, #24]
 800ffb0:	015a      	lsls	r2, r3, #5
 800ffb2:	69fb      	ldr	r3, [r7, #28]
 800ffb4:	4413      	add	r3, r2
 800ffb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	69ba      	ldr	r2, [r7, #24]
 800ffbe:	0151      	lsls	r1, r2, #5
 800ffc0:	69fa      	ldr	r2, [r7, #28]
 800ffc2:	440a      	add	r2, r1
 800ffc4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ffc8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ffcc:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ffce:	68bb      	ldr	r3, [r7, #8]
 800ffd0:	791b      	ldrb	r3, [r3, #4]
 800ffd2:	2b01      	cmp	r3, #1
 800ffd4:	d015      	beq.n	8010002 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800ffd6:	68bb      	ldr	r3, [r7, #8]
 800ffd8:	691b      	ldr	r3, [r3, #16]
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	f000 814e 	beq.w	801027c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ffe0:	69fb      	ldr	r3, [r7, #28]
 800ffe2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ffe6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ffe8:	68bb      	ldr	r3, [r7, #8]
 800ffea:	781b      	ldrb	r3, [r3, #0]
 800ffec:	f003 030f 	and.w	r3, r3, #15
 800fff0:	2101      	movs	r1, #1
 800fff2:	fa01 f303 	lsl.w	r3, r1, r3
 800fff6:	69f9      	ldr	r1, [r7, #28]
 800fff8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800fffc:	4313      	orrs	r3, r2
 800fffe:	634b      	str	r3, [r1, #52]	@ 0x34
 8010000:	e13c      	b.n	801027c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010002:	69fb      	ldr	r3, [r7, #28]
 8010004:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010008:	689b      	ldr	r3, [r3, #8]
 801000a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801000e:	2b00      	cmp	r3, #0
 8010010:	d110      	bne.n	8010034 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8010012:	69bb      	ldr	r3, [r7, #24]
 8010014:	015a      	lsls	r2, r3, #5
 8010016:	69fb      	ldr	r3, [r7, #28]
 8010018:	4413      	add	r3, r2
 801001a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	69ba      	ldr	r2, [r7, #24]
 8010022:	0151      	lsls	r1, r2, #5
 8010024:	69fa      	ldr	r2, [r7, #28]
 8010026:	440a      	add	r2, r1
 8010028:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801002c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8010030:	6013      	str	r3, [r2, #0]
 8010032:	e00f      	b.n	8010054 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8010034:	69bb      	ldr	r3, [r7, #24]
 8010036:	015a      	lsls	r2, r3, #5
 8010038:	69fb      	ldr	r3, [r7, #28]
 801003a:	4413      	add	r3, r2
 801003c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	69ba      	ldr	r2, [r7, #24]
 8010044:	0151      	lsls	r1, r2, #5
 8010046:	69fa      	ldr	r2, [r7, #28]
 8010048:	440a      	add	r2, r1
 801004a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801004e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010052:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8010054:	68bb      	ldr	r3, [r7, #8]
 8010056:	68d9      	ldr	r1, [r3, #12]
 8010058:	68bb      	ldr	r3, [r7, #8]
 801005a:	781a      	ldrb	r2, [r3, #0]
 801005c:	68bb      	ldr	r3, [r7, #8]
 801005e:	691b      	ldr	r3, [r3, #16]
 8010060:	b298      	uxth	r0, r3
 8010062:	79fb      	ldrb	r3, [r7, #7]
 8010064:	9300      	str	r3, [sp, #0]
 8010066:	4603      	mov	r3, r0
 8010068:	68f8      	ldr	r0, [r7, #12]
 801006a:	f000 f9b9 	bl	80103e0 <USB_WritePacket>
 801006e:	e105      	b.n	801027c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8010070:	69bb      	ldr	r3, [r7, #24]
 8010072:	015a      	lsls	r2, r3, #5
 8010074:	69fb      	ldr	r3, [r7, #28]
 8010076:	4413      	add	r3, r2
 8010078:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801007c:	691b      	ldr	r3, [r3, #16]
 801007e:	69ba      	ldr	r2, [r7, #24]
 8010080:	0151      	lsls	r1, r2, #5
 8010082:	69fa      	ldr	r2, [r7, #28]
 8010084:	440a      	add	r2, r1
 8010086:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801008a:	0cdb      	lsrs	r3, r3, #19
 801008c:	04db      	lsls	r3, r3, #19
 801008e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8010090:	69bb      	ldr	r3, [r7, #24]
 8010092:	015a      	lsls	r2, r3, #5
 8010094:	69fb      	ldr	r3, [r7, #28]
 8010096:	4413      	add	r3, r2
 8010098:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801009c:	691b      	ldr	r3, [r3, #16]
 801009e:	69ba      	ldr	r2, [r7, #24]
 80100a0:	0151      	lsls	r1, r2, #5
 80100a2:	69fa      	ldr	r2, [r7, #28]
 80100a4:	440a      	add	r2, r1
 80100a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80100aa:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80100ae:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80100b2:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80100b4:	69bb      	ldr	r3, [r7, #24]
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d132      	bne.n	8010120 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80100ba:	68bb      	ldr	r3, [r7, #8]
 80100bc:	691b      	ldr	r3, [r3, #16]
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d003      	beq.n	80100ca <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80100c2:	68bb      	ldr	r3, [r7, #8]
 80100c4:	689a      	ldr	r2, [r3, #8]
 80100c6:	68bb      	ldr	r3, [r7, #8]
 80100c8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80100ca:	68bb      	ldr	r3, [r7, #8]
 80100cc:	689a      	ldr	r2, [r3, #8]
 80100ce:	68bb      	ldr	r3, [r7, #8]
 80100d0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80100d2:	69bb      	ldr	r3, [r7, #24]
 80100d4:	015a      	lsls	r2, r3, #5
 80100d6:	69fb      	ldr	r3, [r7, #28]
 80100d8:	4413      	add	r3, r2
 80100da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80100de:	691a      	ldr	r2, [r3, #16]
 80100e0:	68bb      	ldr	r3, [r7, #8]
 80100e2:	6a1b      	ldr	r3, [r3, #32]
 80100e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80100e8:	69b9      	ldr	r1, [r7, #24]
 80100ea:	0148      	lsls	r0, r1, #5
 80100ec:	69f9      	ldr	r1, [r7, #28]
 80100ee:	4401      	add	r1, r0
 80100f0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80100f4:	4313      	orrs	r3, r2
 80100f6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80100f8:	69bb      	ldr	r3, [r7, #24]
 80100fa:	015a      	lsls	r2, r3, #5
 80100fc:	69fb      	ldr	r3, [r7, #28]
 80100fe:	4413      	add	r3, r2
 8010100:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010104:	691b      	ldr	r3, [r3, #16]
 8010106:	69ba      	ldr	r2, [r7, #24]
 8010108:	0151      	lsls	r1, r2, #5
 801010a:	69fa      	ldr	r2, [r7, #28]
 801010c:	440a      	add	r2, r1
 801010e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010112:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8010116:	6113      	str	r3, [r2, #16]
 8010118:	e062      	b.n	80101e0 <USB_EPStartXfer+0x490>
 801011a:	bf00      	nop
 801011c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8010120:	68bb      	ldr	r3, [r7, #8]
 8010122:	691b      	ldr	r3, [r3, #16]
 8010124:	2b00      	cmp	r3, #0
 8010126:	d123      	bne.n	8010170 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8010128:	69bb      	ldr	r3, [r7, #24]
 801012a:	015a      	lsls	r2, r3, #5
 801012c:	69fb      	ldr	r3, [r7, #28]
 801012e:	4413      	add	r3, r2
 8010130:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010134:	691a      	ldr	r2, [r3, #16]
 8010136:	68bb      	ldr	r3, [r7, #8]
 8010138:	689b      	ldr	r3, [r3, #8]
 801013a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801013e:	69b9      	ldr	r1, [r7, #24]
 8010140:	0148      	lsls	r0, r1, #5
 8010142:	69f9      	ldr	r1, [r7, #28]
 8010144:	4401      	add	r1, r0
 8010146:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 801014a:	4313      	orrs	r3, r2
 801014c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801014e:	69bb      	ldr	r3, [r7, #24]
 8010150:	015a      	lsls	r2, r3, #5
 8010152:	69fb      	ldr	r3, [r7, #28]
 8010154:	4413      	add	r3, r2
 8010156:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801015a:	691b      	ldr	r3, [r3, #16]
 801015c:	69ba      	ldr	r2, [r7, #24]
 801015e:	0151      	lsls	r1, r2, #5
 8010160:	69fa      	ldr	r2, [r7, #28]
 8010162:	440a      	add	r2, r1
 8010164:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010168:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801016c:	6113      	str	r3, [r2, #16]
 801016e:	e037      	b.n	80101e0 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8010170:	68bb      	ldr	r3, [r7, #8]
 8010172:	691a      	ldr	r2, [r3, #16]
 8010174:	68bb      	ldr	r3, [r7, #8]
 8010176:	689b      	ldr	r3, [r3, #8]
 8010178:	4413      	add	r3, r2
 801017a:	1e5a      	subs	r2, r3, #1
 801017c:	68bb      	ldr	r3, [r7, #8]
 801017e:	689b      	ldr	r3, [r3, #8]
 8010180:	fbb2 f3f3 	udiv	r3, r2, r3
 8010184:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8010186:	68bb      	ldr	r3, [r7, #8]
 8010188:	689b      	ldr	r3, [r3, #8]
 801018a:	8afa      	ldrh	r2, [r7, #22]
 801018c:	fb03 f202 	mul.w	r2, r3, r2
 8010190:	68bb      	ldr	r3, [r7, #8]
 8010192:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8010194:	69bb      	ldr	r3, [r7, #24]
 8010196:	015a      	lsls	r2, r3, #5
 8010198:	69fb      	ldr	r3, [r7, #28]
 801019a:	4413      	add	r3, r2
 801019c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80101a0:	691a      	ldr	r2, [r3, #16]
 80101a2:	8afb      	ldrh	r3, [r7, #22]
 80101a4:	04d9      	lsls	r1, r3, #19
 80101a6:	4b38      	ldr	r3, [pc, #224]	@ (8010288 <USB_EPStartXfer+0x538>)
 80101a8:	400b      	ands	r3, r1
 80101aa:	69b9      	ldr	r1, [r7, #24]
 80101ac:	0148      	lsls	r0, r1, #5
 80101ae:	69f9      	ldr	r1, [r7, #28]
 80101b0:	4401      	add	r1, r0
 80101b2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80101b6:	4313      	orrs	r3, r2
 80101b8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80101ba:	69bb      	ldr	r3, [r7, #24]
 80101bc:	015a      	lsls	r2, r3, #5
 80101be:	69fb      	ldr	r3, [r7, #28]
 80101c0:	4413      	add	r3, r2
 80101c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80101c6:	691a      	ldr	r2, [r3, #16]
 80101c8:	68bb      	ldr	r3, [r7, #8]
 80101ca:	6a1b      	ldr	r3, [r3, #32]
 80101cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80101d0:	69b9      	ldr	r1, [r7, #24]
 80101d2:	0148      	lsls	r0, r1, #5
 80101d4:	69f9      	ldr	r1, [r7, #28]
 80101d6:	4401      	add	r1, r0
 80101d8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80101dc:	4313      	orrs	r3, r2
 80101de:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80101e0:	79fb      	ldrb	r3, [r7, #7]
 80101e2:	2b01      	cmp	r3, #1
 80101e4:	d10d      	bne.n	8010202 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80101e6:	68bb      	ldr	r3, [r7, #8]
 80101e8:	68db      	ldr	r3, [r3, #12]
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d009      	beq.n	8010202 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80101ee:	68bb      	ldr	r3, [r7, #8]
 80101f0:	68d9      	ldr	r1, [r3, #12]
 80101f2:	69bb      	ldr	r3, [r7, #24]
 80101f4:	015a      	lsls	r2, r3, #5
 80101f6:	69fb      	ldr	r3, [r7, #28]
 80101f8:	4413      	add	r3, r2
 80101fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80101fe:	460a      	mov	r2, r1
 8010200:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8010202:	68bb      	ldr	r3, [r7, #8]
 8010204:	791b      	ldrb	r3, [r3, #4]
 8010206:	2b01      	cmp	r3, #1
 8010208:	d128      	bne.n	801025c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801020a:	69fb      	ldr	r3, [r7, #28]
 801020c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010210:	689b      	ldr	r3, [r3, #8]
 8010212:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010216:	2b00      	cmp	r3, #0
 8010218:	d110      	bne.n	801023c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 801021a:	69bb      	ldr	r3, [r7, #24]
 801021c:	015a      	lsls	r2, r3, #5
 801021e:	69fb      	ldr	r3, [r7, #28]
 8010220:	4413      	add	r3, r2
 8010222:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	69ba      	ldr	r2, [r7, #24]
 801022a:	0151      	lsls	r1, r2, #5
 801022c:	69fa      	ldr	r2, [r7, #28]
 801022e:	440a      	add	r2, r1
 8010230:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010234:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8010238:	6013      	str	r3, [r2, #0]
 801023a:	e00f      	b.n	801025c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 801023c:	69bb      	ldr	r3, [r7, #24]
 801023e:	015a      	lsls	r2, r3, #5
 8010240:	69fb      	ldr	r3, [r7, #28]
 8010242:	4413      	add	r3, r2
 8010244:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	69ba      	ldr	r2, [r7, #24]
 801024c:	0151      	lsls	r1, r2, #5
 801024e:	69fa      	ldr	r2, [r7, #28]
 8010250:	440a      	add	r2, r1
 8010252:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010256:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801025a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801025c:	69bb      	ldr	r3, [r7, #24]
 801025e:	015a      	lsls	r2, r3, #5
 8010260:	69fb      	ldr	r3, [r7, #28]
 8010262:	4413      	add	r3, r2
 8010264:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	69ba      	ldr	r2, [r7, #24]
 801026c:	0151      	lsls	r1, r2, #5
 801026e:	69fa      	ldr	r2, [r7, #28]
 8010270:	440a      	add	r2, r1
 8010272:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010276:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 801027a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801027c:	2300      	movs	r3, #0
}
 801027e:	4618      	mov	r0, r3
 8010280:	3720      	adds	r7, #32
 8010282:	46bd      	mov	sp, r7
 8010284:	bd80      	pop	{r7, pc}
 8010286:	bf00      	nop
 8010288:	1ff80000 	.word	0x1ff80000

0801028c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801028c:	b480      	push	{r7}
 801028e:	b087      	sub	sp, #28
 8010290:	af00      	add	r7, sp, #0
 8010292:	6078      	str	r0, [r7, #4]
 8010294:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8010296:	2300      	movs	r3, #0
 8010298:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 801029a:	2300      	movs	r3, #0
 801029c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80102a2:	683b      	ldr	r3, [r7, #0]
 80102a4:	785b      	ldrb	r3, [r3, #1]
 80102a6:	2b01      	cmp	r3, #1
 80102a8:	d14a      	bne.n	8010340 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80102aa:	683b      	ldr	r3, [r7, #0]
 80102ac:	781b      	ldrb	r3, [r3, #0]
 80102ae:	015a      	lsls	r2, r3, #5
 80102b0:	693b      	ldr	r3, [r7, #16]
 80102b2:	4413      	add	r3, r2
 80102b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80102be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80102c2:	f040 8086 	bne.w	80103d2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80102c6:	683b      	ldr	r3, [r7, #0]
 80102c8:	781b      	ldrb	r3, [r3, #0]
 80102ca:	015a      	lsls	r2, r3, #5
 80102cc:	693b      	ldr	r3, [r7, #16]
 80102ce:	4413      	add	r3, r2
 80102d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	683a      	ldr	r2, [r7, #0]
 80102d8:	7812      	ldrb	r2, [r2, #0]
 80102da:	0151      	lsls	r1, r2, #5
 80102dc:	693a      	ldr	r2, [r7, #16]
 80102de:	440a      	add	r2, r1
 80102e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80102e4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80102e8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80102ea:	683b      	ldr	r3, [r7, #0]
 80102ec:	781b      	ldrb	r3, [r3, #0]
 80102ee:	015a      	lsls	r2, r3, #5
 80102f0:	693b      	ldr	r3, [r7, #16]
 80102f2:	4413      	add	r3, r2
 80102f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	683a      	ldr	r2, [r7, #0]
 80102fc:	7812      	ldrb	r2, [r2, #0]
 80102fe:	0151      	lsls	r1, r2, #5
 8010300:	693a      	ldr	r2, [r7, #16]
 8010302:	440a      	add	r2, r1
 8010304:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010308:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801030c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	3301      	adds	r3, #1
 8010312:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8010314:	68fb      	ldr	r3, [r7, #12]
 8010316:	f242 7210 	movw	r2, #10000	@ 0x2710
 801031a:	4293      	cmp	r3, r2
 801031c:	d902      	bls.n	8010324 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 801031e:	2301      	movs	r3, #1
 8010320:	75fb      	strb	r3, [r7, #23]
          break;
 8010322:	e056      	b.n	80103d2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8010324:	683b      	ldr	r3, [r7, #0]
 8010326:	781b      	ldrb	r3, [r3, #0]
 8010328:	015a      	lsls	r2, r3, #5
 801032a:	693b      	ldr	r3, [r7, #16]
 801032c:	4413      	add	r3, r2
 801032e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010338:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801033c:	d0e7      	beq.n	801030e <USB_EPStopXfer+0x82>
 801033e:	e048      	b.n	80103d2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010340:	683b      	ldr	r3, [r7, #0]
 8010342:	781b      	ldrb	r3, [r3, #0]
 8010344:	015a      	lsls	r2, r3, #5
 8010346:	693b      	ldr	r3, [r7, #16]
 8010348:	4413      	add	r3, r2
 801034a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010354:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010358:	d13b      	bne.n	80103d2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 801035a:	683b      	ldr	r3, [r7, #0]
 801035c:	781b      	ldrb	r3, [r3, #0]
 801035e:	015a      	lsls	r2, r3, #5
 8010360:	693b      	ldr	r3, [r7, #16]
 8010362:	4413      	add	r3, r2
 8010364:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	683a      	ldr	r2, [r7, #0]
 801036c:	7812      	ldrb	r2, [r2, #0]
 801036e:	0151      	lsls	r1, r2, #5
 8010370:	693a      	ldr	r2, [r7, #16]
 8010372:	440a      	add	r2, r1
 8010374:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010378:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801037c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 801037e:	683b      	ldr	r3, [r7, #0]
 8010380:	781b      	ldrb	r3, [r3, #0]
 8010382:	015a      	lsls	r2, r3, #5
 8010384:	693b      	ldr	r3, [r7, #16]
 8010386:	4413      	add	r3, r2
 8010388:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	683a      	ldr	r2, [r7, #0]
 8010390:	7812      	ldrb	r2, [r2, #0]
 8010392:	0151      	lsls	r1, r2, #5
 8010394:	693a      	ldr	r2, [r7, #16]
 8010396:	440a      	add	r2, r1
 8010398:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801039c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80103a0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	3301      	adds	r3, #1
 80103a6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	f242 7210 	movw	r2, #10000	@ 0x2710
 80103ae:	4293      	cmp	r3, r2
 80103b0:	d902      	bls.n	80103b8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80103b2:	2301      	movs	r3, #1
 80103b4:	75fb      	strb	r3, [r7, #23]
          break;
 80103b6:	e00c      	b.n	80103d2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80103b8:	683b      	ldr	r3, [r7, #0]
 80103ba:	781b      	ldrb	r3, [r3, #0]
 80103bc:	015a      	lsls	r2, r3, #5
 80103be:	693b      	ldr	r3, [r7, #16]
 80103c0:	4413      	add	r3, r2
 80103c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80103cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80103d0:	d0e7      	beq.n	80103a2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80103d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80103d4:	4618      	mov	r0, r3
 80103d6:	371c      	adds	r7, #28
 80103d8:	46bd      	mov	sp, r7
 80103da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103de:	4770      	bx	lr

080103e0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80103e0:	b480      	push	{r7}
 80103e2:	b089      	sub	sp, #36	@ 0x24
 80103e4:	af00      	add	r7, sp, #0
 80103e6:	60f8      	str	r0, [r7, #12]
 80103e8:	60b9      	str	r1, [r7, #8]
 80103ea:	4611      	mov	r1, r2
 80103ec:	461a      	mov	r2, r3
 80103ee:	460b      	mov	r3, r1
 80103f0:	71fb      	strb	r3, [r7, #7]
 80103f2:	4613      	mov	r3, r2
 80103f4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80103fa:	68bb      	ldr	r3, [r7, #8]
 80103fc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80103fe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8010402:	2b00      	cmp	r3, #0
 8010404:	d123      	bne.n	801044e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8010406:	88bb      	ldrh	r3, [r7, #4]
 8010408:	3303      	adds	r3, #3
 801040a:	089b      	lsrs	r3, r3, #2
 801040c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 801040e:	2300      	movs	r3, #0
 8010410:	61bb      	str	r3, [r7, #24]
 8010412:	e018      	b.n	8010446 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8010414:	79fb      	ldrb	r3, [r7, #7]
 8010416:	031a      	lsls	r2, r3, #12
 8010418:	697b      	ldr	r3, [r7, #20]
 801041a:	4413      	add	r3, r2
 801041c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8010420:	461a      	mov	r2, r3
 8010422:	69fb      	ldr	r3, [r7, #28]
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	6013      	str	r3, [r2, #0]
      pSrc++;
 8010428:	69fb      	ldr	r3, [r7, #28]
 801042a:	3301      	adds	r3, #1
 801042c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801042e:	69fb      	ldr	r3, [r7, #28]
 8010430:	3301      	adds	r3, #1
 8010432:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8010434:	69fb      	ldr	r3, [r7, #28]
 8010436:	3301      	adds	r3, #1
 8010438:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801043a:	69fb      	ldr	r3, [r7, #28]
 801043c:	3301      	adds	r3, #1
 801043e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8010440:	69bb      	ldr	r3, [r7, #24]
 8010442:	3301      	adds	r3, #1
 8010444:	61bb      	str	r3, [r7, #24]
 8010446:	69ba      	ldr	r2, [r7, #24]
 8010448:	693b      	ldr	r3, [r7, #16]
 801044a:	429a      	cmp	r2, r3
 801044c:	d3e2      	bcc.n	8010414 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801044e:	2300      	movs	r3, #0
}
 8010450:	4618      	mov	r0, r3
 8010452:	3724      	adds	r7, #36	@ 0x24
 8010454:	46bd      	mov	sp, r7
 8010456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801045a:	4770      	bx	lr

0801045c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 801045c:	b480      	push	{r7}
 801045e:	b08b      	sub	sp, #44	@ 0x2c
 8010460:	af00      	add	r7, sp, #0
 8010462:	60f8      	str	r0, [r7, #12]
 8010464:	60b9      	str	r1, [r7, #8]
 8010466:	4613      	mov	r3, r2
 8010468:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 801046e:	68bb      	ldr	r3, [r7, #8]
 8010470:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8010472:	88fb      	ldrh	r3, [r7, #6]
 8010474:	089b      	lsrs	r3, r3, #2
 8010476:	b29b      	uxth	r3, r3
 8010478:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801047a:	88fb      	ldrh	r3, [r7, #6]
 801047c:	f003 0303 	and.w	r3, r3, #3
 8010480:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8010482:	2300      	movs	r3, #0
 8010484:	623b      	str	r3, [r7, #32]
 8010486:	e014      	b.n	80104b2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8010488:	69bb      	ldr	r3, [r7, #24]
 801048a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801048e:	681a      	ldr	r2, [r3, #0]
 8010490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010492:	601a      	str	r2, [r3, #0]
    pDest++;
 8010494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010496:	3301      	adds	r3, #1
 8010498:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 801049a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801049c:	3301      	adds	r3, #1
 801049e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80104a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104a2:	3301      	adds	r3, #1
 80104a4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80104a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104a8:	3301      	adds	r3, #1
 80104aa:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80104ac:	6a3b      	ldr	r3, [r7, #32]
 80104ae:	3301      	adds	r3, #1
 80104b0:	623b      	str	r3, [r7, #32]
 80104b2:	6a3a      	ldr	r2, [r7, #32]
 80104b4:	697b      	ldr	r3, [r7, #20]
 80104b6:	429a      	cmp	r2, r3
 80104b8:	d3e6      	bcc.n	8010488 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80104ba:	8bfb      	ldrh	r3, [r7, #30]
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d01e      	beq.n	80104fe <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80104c0:	2300      	movs	r3, #0
 80104c2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80104c4:	69bb      	ldr	r3, [r7, #24]
 80104c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80104ca:	461a      	mov	r2, r3
 80104cc:	f107 0310 	add.w	r3, r7, #16
 80104d0:	6812      	ldr	r2, [r2, #0]
 80104d2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80104d4:	693a      	ldr	r2, [r7, #16]
 80104d6:	6a3b      	ldr	r3, [r7, #32]
 80104d8:	b2db      	uxtb	r3, r3
 80104da:	00db      	lsls	r3, r3, #3
 80104dc:	fa22 f303 	lsr.w	r3, r2, r3
 80104e0:	b2da      	uxtb	r2, r3
 80104e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104e4:	701a      	strb	r2, [r3, #0]
      i++;
 80104e6:	6a3b      	ldr	r3, [r7, #32]
 80104e8:	3301      	adds	r3, #1
 80104ea:	623b      	str	r3, [r7, #32]
      pDest++;
 80104ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104ee:	3301      	adds	r3, #1
 80104f0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80104f2:	8bfb      	ldrh	r3, [r7, #30]
 80104f4:	3b01      	subs	r3, #1
 80104f6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80104f8:	8bfb      	ldrh	r3, [r7, #30]
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d1ea      	bne.n	80104d4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80104fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8010500:	4618      	mov	r0, r3
 8010502:	372c      	adds	r7, #44	@ 0x2c
 8010504:	46bd      	mov	sp, r7
 8010506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801050a:	4770      	bx	lr

0801050c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 801050c:	b480      	push	{r7}
 801050e:	b085      	sub	sp, #20
 8010510:	af00      	add	r7, sp, #0
 8010512:	6078      	str	r0, [r7, #4]
 8010514:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801051a:	683b      	ldr	r3, [r7, #0]
 801051c:	781b      	ldrb	r3, [r3, #0]
 801051e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010520:	683b      	ldr	r3, [r7, #0]
 8010522:	785b      	ldrb	r3, [r3, #1]
 8010524:	2b01      	cmp	r3, #1
 8010526:	d12c      	bne.n	8010582 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8010528:	68bb      	ldr	r3, [r7, #8]
 801052a:	015a      	lsls	r2, r3, #5
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	4413      	add	r3, r2
 8010530:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	2b00      	cmp	r3, #0
 8010538:	db12      	blt.n	8010560 <USB_EPSetStall+0x54>
 801053a:	68bb      	ldr	r3, [r7, #8]
 801053c:	2b00      	cmp	r3, #0
 801053e:	d00f      	beq.n	8010560 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8010540:	68bb      	ldr	r3, [r7, #8]
 8010542:	015a      	lsls	r2, r3, #5
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	4413      	add	r3, r2
 8010548:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	68ba      	ldr	r2, [r7, #8]
 8010550:	0151      	lsls	r1, r2, #5
 8010552:	68fa      	ldr	r2, [r7, #12]
 8010554:	440a      	add	r2, r1
 8010556:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801055a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 801055e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8010560:	68bb      	ldr	r3, [r7, #8]
 8010562:	015a      	lsls	r2, r3, #5
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	4413      	add	r3, r2
 8010568:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801056c:	681b      	ldr	r3, [r3, #0]
 801056e:	68ba      	ldr	r2, [r7, #8]
 8010570:	0151      	lsls	r1, r2, #5
 8010572:	68fa      	ldr	r2, [r7, #12]
 8010574:	440a      	add	r2, r1
 8010576:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801057a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 801057e:	6013      	str	r3, [r2, #0]
 8010580:	e02b      	b.n	80105da <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8010582:	68bb      	ldr	r3, [r7, #8]
 8010584:	015a      	lsls	r2, r3, #5
 8010586:	68fb      	ldr	r3, [r7, #12]
 8010588:	4413      	add	r3, r2
 801058a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	2b00      	cmp	r3, #0
 8010592:	db12      	blt.n	80105ba <USB_EPSetStall+0xae>
 8010594:	68bb      	ldr	r3, [r7, #8]
 8010596:	2b00      	cmp	r3, #0
 8010598:	d00f      	beq.n	80105ba <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 801059a:	68bb      	ldr	r3, [r7, #8]
 801059c:	015a      	lsls	r2, r3, #5
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	4413      	add	r3, r2
 80105a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	68ba      	ldr	r2, [r7, #8]
 80105aa:	0151      	lsls	r1, r2, #5
 80105ac:	68fa      	ldr	r2, [r7, #12]
 80105ae:	440a      	add	r2, r1
 80105b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80105b4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80105b8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80105ba:	68bb      	ldr	r3, [r7, #8]
 80105bc:	015a      	lsls	r2, r3, #5
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	4413      	add	r3, r2
 80105c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	68ba      	ldr	r2, [r7, #8]
 80105ca:	0151      	lsls	r1, r2, #5
 80105cc:	68fa      	ldr	r2, [r7, #12]
 80105ce:	440a      	add	r2, r1
 80105d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80105d4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80105d8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80105da:	2300      	movs	r3, #0
}
 80105dc:	4618      	mov	r0, r3
 80105de:	3714      	adds	r7, #20
 80105e0:	46bd      	mov	sp, r7
 80105e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105e6:	4770      	bx	lr

080105e8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80105e8:	b480      	push	{r7}
 80105ea:	b085      	sub	sp, #20
 80105ec:	af00      	add	r7, sp, #0
 80105ee:	6078      	str	r0, [r7, #4]
 80105f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80105f6:	683b      	ldr	r3, [r7, #0]
 80105f8:	781b      	ldrb	r3, [r3, #0]
 80105fa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80105fc:	683b      	ldr	r3, [r7, #0]
 80105fe:	785b      	ldrb	r3, [r3, #1]
 8010600:	2b01      	cmp	r3, #1
 8010602:	d128      	bne.n	8010656 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8010604:	68bb      	ldr	r3, [r7, #8]
 8010606:	015a      	lsls	r2, r3, #5
 8010608:	68fb      	ldr	r3, [r7, #12]
 801060a:	4413      	add	r3, r2
 801060c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	68ba      	ldr	r2, [r7, #8]
 8010614:	0151      	lsls	r1, r2, #5
 8010616:	68fa      	ldr	r2, [r7, #12]
 8010618:	440a      	add	r2, r1
 801061a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801061e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8010622:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010624:	683b      	ldr	r3, [r7, #0]
 8010626:	791b      	ldrb	r3, [r3, #4]
 8010628:	2b03      	cmp	r3, #3
 801062a:	d003      	beq.n	8010634 <USB_EPClearStall+0x4c>
 801062c:	683b      	ldr	r3, [r7, #0]
 801062e:	791b      	ldrb	r3, [r3, #4]
 8010630:	2b02      	cmp	r3, #2
 8010632:	d138      	bne.n	80106a6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010634:	68bb      	ldr	r3, [r7, #8]
 8010636:	015a      	lsls	r2, r3, #5
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	4413      	add	r3, r2
 801063c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	68ba      	ldr	r2, [r7, #8]
 8010644:	0151      	lsls	r1, r2, #5
 8010646:	68fa      	ldr	r2, [r7, #12]
 8010648:	440a      	add	r2, r1
 801064a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801064e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010652:	6013      	str	r3, [r2, #0]
 8010654:	e027      	b.n	80106a6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8010656:	68bb      	ldr	r3, [r7, #8]
 8010658:	015a      	lsls	r2, r3, #5
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	4413      	add	r3, r2
 801065e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	68ba      	ldr	r2, [r7, #8]
 8010666:	0151      	lsls	r1, r2, #5
 8010668:	68fa      	ldr	r2, [r7, #12]
 801066a:	440a      	add	r2, r1
 801066c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010670:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8010674:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010676:	683b      	ldr	r3, [r7, #0]
 8010678:	791b      	ldrb	r3, [r3, #4]
 801067a:	2b03      	cmp	r3, #3
 801067c:	d003      	beq.n	8010686 <USB_EPClearStall+0x9e>
 801067e:	683b      	ldr	r3, [r7, #0]
 8010680:	791b      	ldrb	r3, [r3, #4]
 8010682:	2b02      	cmp	r3, #2
 8010684:	d10f      	bne.n	80106a6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010686:	68bb      	ldr	r3, [r7, #8]
 8010688:	015a      	lsls	r2, r3, #5
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	4413      	add	r3, r2
 801068e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	68ba      	ldr	r2, [r7, #8]
 8010696:	0151      	lsls	r1, r2, #5
 8010698:	68fa      	ldr	r2, [r7, #12]
 801069a:	440a      	add	r2, r1
 801069c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80106a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80106a4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80106a6:	2300      	movs	r3, #0
}
 80106a8:	4618      	mov	r0, r3
 80106aa:	3714      	adds	r7, #20
 80106ac:	46bd      	mov	sp, r7
 80106ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106b2:	4770      	bx	lr

080106b4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80106b4:	b480      	push	{r7}
 80106b6:	b085      	sub	sp, #20
 80106b8:	af00      	add	r7, sp, #0
 80106ba:	6078      	str	r0, [r7, #4]
 80106bc:	460b      	mov	r3, r1
 80106be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	68fa      	ldr	r2, [r7, #12]
 80106ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80106d2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80106d6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80106de:	681a      	ldr	r2, [r3, #0]
 80106e0:	78fb      	ldrb	r3, [r7, #3]
 80106e2:	011b      	lsls	r3, r3, #4
 80106e4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80106e8:	68f9      	ldr	r1, [r7, #12]
 80106ea:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80106ee:	4313      	orrs	r3, r2
 80106f0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80106f2:	2300      	movs	r3, #0
}
 80106f4:	4618      	mov	r0, r3
 80106f6:	3714      	adds	r7, #20
 80106f8:	46bd      	mov	sp, r7
 80106fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106fe:	4770      	bx	lr

08010700 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8010700:	b480      	push	{r7}
 8010702:	b085      	sub	sp, #20
 8010704:	af00      	add	r7, sp, #0
 8010706:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	68fa      	ldr	r2, [r7, #12]
 8010716:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801071a:	f023 0303 	bic.w	r3, r3, #3
 801071e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010726:	685b      	ldr	r3, [r3, #4]
 8010728:	68fa      	ldr	r2, [r7, #12]
 801072a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801072e:	f023 0302 	bic.w	r3, r3, #2
 8010732:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010734:	2300      	movs	r3, #0
}
 8010736:	4618      	mov	r0, r3
 8010738:	3714      	adds	r7, #20
 801073a:	46bd      	mov	sp, r7
 801073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010740:	4770      	bx	lr

08010742 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8010742:	b480      	push	{r7}
 8010744:	b085      	sub	sp, #20
 8010746:	af00      	add	r7, sp, #0
 8010748:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8010754:	681b      	ldr	r3, [r3, #0]
 8010756:	68fa      	ldr	r2, [r7, #12]
 8010758:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801075c:	f023 0303 	bic.w	r3, r3, #3
 8010760:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010768:	685b      	ldr	r3, [r3, #4]
 801076a:	68fa      	ldr	r2, [r7, #12]
 801076c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010770:	f043 0302 	orr.w	r3, r3, #2
 8010774:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010776:	2300      	movs	r3, #0
}
 8010778:	4618      	mov	r0, r3
 801077a:	3714      	adds	r7, #20
 801077c:	46bd      	mov	sp, r7
 801077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010782:	4770      	bx	lr

08010784 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8010784:	b480      	push	{r7}
 8010786:	b085      	sub	sp, #20
 8010788:	af00      	add	r7, sp, #0
 801078a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	695b      	ldr	r3, [r3, #20]
 8010790:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	699b      	ldr	r3, [r3, #24]
 8010796:	68fa      	ldr	r2, [r7, #12]
 8010798:	4013      	ands	r3, r2
 801079a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 801079c:	68fb      	ldr	r3, [r7, #12]
}
 801079e:	4618      	mov	r0, r3
 80107a0:	3714      	adds	r7, #20
 80107a2:	46bd      	mov	sp, r7
 80107a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107a8:	4770      	bx	lr

080107aa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80107aa:	b480      	push	{r7}
 80107ac:	b085      	sub	sp, #20
 80107ae:	af00      	add	r7, sp, #0
 80107b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80107bc:	699b      	ldr	r3, [r3, #24]
 80107be:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80107c6:	69db      	ldr	r3, [r3, #28]
 80107c8:	68ba      	ldr	r2, [r7, #8]
 80107ca:	4013      	ands	r3, r2
 80107cc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80107ce:	68bb      	ldr	r3, [r7, #8]
 80107d0:	0c1b      	lsrs	r3, r3, #16
}
 80107d2:	4618      	mov	r0, r3
 80107d4:	3714      	adds	r7, #20
 80107d6:	46bd      	mov	sp, r7
 80107d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107dc:	4770      	bx	lr

080107de <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80107de:	b480      	push	{r7}
 80107e0:	b085      	sub	sp, #20
 80107e2:	af00      	add	r7, sp, #0
 80107e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80107ea:	68fb      	ldr	r3, [r7, #12]
 80107ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80107f0:	699b      	ldr	r3, [r3, #24]
 80107f2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80107fa:	69db      	ldr	r3, [r3, #28]
 80107fc:	68ba      	ldr	r2, [r7, #8]
 80107fe:	4013      	ands	r3, r2
 8010800:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8010802:	68bb      	ldr	r3, [r7, #8]
 8010804:	b29b      	uxth	r3, r3
}
 8010806:	4618      	mov	r0, r3
 8010808:	3714      	adds	r7, #20
 801080a:	46bd      	mov	sp, r7
 801080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010810:	4770      	bx	lr

08010812 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010812:	b480      	push	{r7}
 8010814:	b085      	sub	sp, #20
 8010816:	af00      	add	r7, sp, #0
 8010818:	6078      	str	r0, [r7, #4]
 801081a:	460b      	mov	r3, r1
 801081c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8010822:	78fb      	ldrb	r3, [r7, #3]
 8010824:	015a      	lsls	r2, r3, #5
 8010826:	68fb      	ldr	r3, [r7, #12]
 8010828:	4413      	add	r3, r2
 801082a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801082e:	689b      	ldr	r3, [r3, #8]
 8010830:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8010832:	68fb      	ldr	r3, [r7, #12]
 8010834:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010838:	695b      	ldr	r3, [r3, #20]
 801083a:	68ba      	ldr	r2, [r7, #8]
 801083c:	4013      	ands	r3, r2
 801083e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010840:	68bb      	ldr	r3, [r7, #8]
}
 8010842:	4618      	mov	r0, r3
 8010844:	3714      	adds	r7, #20
 8010846:	46bd      	mov	sp, r7
 8010848:	f85d 7b04 	ldr.w	r7, [sp], #4
 801084c:	4770      	bx	lr

0801084e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801084e:	b480      	push	{r7}
 8010850:	b087      	sub	sp, #28
 8010852:	af00      	add	r7, sp, #0
 8010854:	6078      	str	r0, [r7, #4]
 8010856:	460b      	mov	r3, r1
 8010858:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 801085e:	697b      	ldr	r3, [r7, #20]
 8010860:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010864:	691b      	ldr	r3, [r3, #16]
 8010866:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8010868:	697b      	ldr	r3, [r7, #20]
 801086a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801086e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010870:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8010872:	78fb      	ldrb	r3, [r7, #3]
 8010874:	f003 030f 	and.w	r3, r3, #15
 8010878:	68fa      	ldr	r2, [r7, #12]
 801087a:	fa22 f303 	lsr.w	r3, r2, r3
 801087e:	01db      	lsls	r3, r3, #7
 8010880:	b2db      	uxtb	r3, r3
 8010882:	693a      	ldr	r2, [r7, #16]
 8010884:	4313      	orrs	r3, r2
 8010886:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8010888:	78fb      	ldrb	r3, [r7, #3]
 801088a:	015a      	lsls	r2, r3, #5
 801088c:	697b      	ldr	r3, [r7, #20]
 801088e:	4413      	add	r3, r2
 8010890:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010894:	689b      	ldr	r3, [r3, #8]
 8010896:	693a      	ldr	r2, [r7, #16]
 8010898:	4013      	ands	r3, r2
 801089a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801089c:	68bb      	ldr	r3, [r7, #8]
}
 801089e:	4618      	mov	r0, r3
 80108a0:	371c      	adds	r7, #28
 80108a2:	46bd      	mov	sp, r7
 80108a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108a8:	4770      	bx	lr

080108aa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80108aa:	b480      	push	{r7}
 80108ac:	b083      	sub	sp, #12
 80108ae:	af00      	add	r7, sp, #0
 80108b0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	695b      	ldr	r3, [r3, #20]
 80108b6:	f003 0301 	and.w	r3, r3, #1
}
 80108ba:	4618      	mov	r0, r3
 80108bc:	370c      	adds	r7, #12
 80108be:	46bd      	mov	sp, r7
 80108c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108c4:	4770      	bx	lr

080108c6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80108c6:	b480      	push	{r7}
 80108c8:	b085      	sub	sp, #20
 80108ca:	af00      	add	r7, sp, #0
 80108cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80108d2:	68fb      	ldr	r3, [r7, #12]
 80108d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80108d8:	681b      	ldr	r3, [r3, #0]
 80108da:	68fa      	ldr	r2, [r7, #12]
 80108dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80108e0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80108e4:	f023 0307 	bic.w	r3, r3, #7
 80108e8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80108f0:	685b      	ldr	r3, [r3, #4]
 80108f2:	68fa      	ldr	r2, [r7, #12]
 80108f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80108f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80108fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80108fe:	2300      	movs	r3, #0
}
 8010900:	4618      	mov	r0, r3
 8010902:	3714      	adds	r7, #20
 8010904:	46bd      	mov	sp, r7
 8010906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801090a:	4770      	bx	lr

0801090c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 801090c:	b480      	push	{r7}
 801090e:	b087      	sub	sp, #28
 8010910:	af00      	add	r7, sp, #0
 8010912:	60f8      	str	r0, [r7, #12]
 8010914:	460b      	mov	r3, r1
 8010916:	607a      	str	r2, [r7, #4]
 8010918:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	333c      	adds	r3, #60	@ 0x3c
 8010922:	3304      	adds	r3, #4
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8010928:	693b      	ldr	r3, [r7, #16]
 801092a:	4a26      	ldr	r2, [pc, #152]	@ (80109c4 <USB_EP0_OutStart+0xb8>)
 801092c:	4293      	cmp	r3, r2
 801092e:	d90a      	bls.n	8010946 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010930:	697b      	ldr	r3, [r7, #20]
 8010932:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801093c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010940:	d101      	bne.n	8010946 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8010942:	2300      	movs	r3, #0
 8010944:	e037      	b.n	80109b6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8010946:	697b      	ldr	r3, [r7, #20]
 8010948:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801094c:	461a      	mov	r2, r3
 801094e:	2300      	movs	r3, #0
 8010950:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010952:	697b      	ldr	r3, [r7, #20]
 8010954:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010958:	691b      	ldr	r3, [r3, #16]
 801095a:	697a      	ldr	r2, [r7, #20]
 801095c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010960:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8010964:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8010966:	697b      	ldr	r3, [r7, #20]
 8010968:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801096c:	691b      	ldr	r3, [r3, #16]
 801096e:	697a      	ldr	r2, [r7, #20]
 8010970:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010974:	f043 0318 	orr.w	r3, r3, #24
 8010978:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801097a:	697b      	ldr	r3, [r7, #20]
 801097c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010980:	691b      	ldr	r3, [r3, #16]
 8010982:	697a      	ldr	r2, [r7, #20]
 8010984:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010988:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 801098c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801098e:	7afb      	ldrb	r3, [r7, #11]
 8010990:	2b01      	cmp	r3, #1
 8010992:	d10f      	bne.n	80109b4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8010994:	697b      	ldr	r3, [r7, #20]
 8010996:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801099a:	461a      	mov	r2, r3
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80109a0:	697b      	ldr	r3, [r7, #20]
 80109a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	697a      	ldr	r2, [r7, #20]
 80109aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80109ae:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80109b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80109b4:	2300      	movs	r3, #0
}
 80109b6:	4618      	mov	r0, r3
 80109b8:	371c      	adds	r7, #28
 80109ba:	46bd      	mov	sp, r7
 80109bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109c0:	4770      	bx	lr
 80109c2:	bf00      	nop
 80109c4:	4f54300a 	.word	0x4f54300a

080109c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80109c8:	b480      	push	{r7}
 80109ca:	b085      	sub	sp, #20
 80109cc:	af00      	add	r7, sp, #0
 80109ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80109d0:	2300      	movs	r3, #0
 80109d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	3301      	adds	r3, #1
 80109d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80109e0:	d901      	bls.n	80109e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80109e2:	2303      	movs	r3, #3
 80109e4:	e022      	b.n	8010a2c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	691b      	ldr	r3, [r3, #16]
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	daf2      	bge.n	80109d4 <USB_CoreReset+0xc>

  count = 10U;
 80109ee:	230a      	movs	r3, #10
 80109f0:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80109f2:	e002      	b.n	80109fa <USB_CoreReset+0x32>
  {
    count--;
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	3b01      	subs	r3, #1
 80109f8:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80109fa:	68fb      	ldr	r3, [r7, #12]
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d1f9      	bne.n	80109f4 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	691b      	ldr	r3, [r3, #16]
 8010a04:	f043 0201 	orr.w	r2, r3, #1
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	3301      	adds	r3, #1
 8010a10:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010a12:	68fb      	ldr	r3, [r7, #12]
 8010a14:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010a18:	d901      	bls.n	8010a1e <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8010a1a:	2303      	movs	r3, #3
 8010a1c:	e006      	b.n	8010a2c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	691b      	ldr	r3, [r3, #16]
 8010a22:	f003 0301 	and.w	r3, r3, #1
 8010a26:	2b01      	cmp	r3, #1
 8010a28:	d0f0      	beq.n	8010a0c <USB_CoreReset+0x44>

  return HAL_OK;
 8010a2a:	2300      	movs	r3, #0
}
 8010a2c:	4618      	mov	r0, r3
 8010a2e:	3714      	adds	r7, #20
 8010a30:	46bd      	mov	sp, r7
 8010a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a36:	4770      	bx	lr

08010a38 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010a38:	b580      	push	{r7, lr}
 8010a3a:	b084      	sub	sp, #16
 8010a3c:	af00      	add	r7, sp, #0
 8010a3e:	6078      	str	r0, [r7, #4]
 8010a40:	460b      	mov	r3, r1
 8010a42:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8010a44:	2010      	movs	r0, #16
 8010a46:	f002 f909 	bl	8012c5c <USBD_static_malloc>
 8010a4a:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d109      	bne.n	8010a66 <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	32b0      	adds	r2, #176	@ 0xb0
 8010a5c:	2100      	movs	r1, #0
 8010a5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8010a62:	2302      	movs	r3, #2
 8010a64:	e048      	b.n	8010af8 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	32b0      	adds	r2, #176	@ 0xb0
 8010a70:	68f9      	ldr	r1, [r7, #12]
 8010a72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	32b0      	adds	r2, #176	@ 0xb0
 8010a80:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	7c1b      	ldrb	r3, [r3, #16]
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d10d      	bne.n	8010aae <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8010a92:	4b1b      	ldr	r3, [pc, #108]	@ (8010b00 <USBD_HID_Init+0xc8>)
 8010a94:	781b      	ldrb	r3, [r3, #0]
 8010a96:	f003 020f 	and.w	r2, r3, #15
 8010a9a:	6879      	ldr	r1, [r7, #4]
 8010a9c:	4613      	mov	r3, r2
 8010a9e:	009b      	lsls	r3, r3, #2
 8010aa0:	4413      	add	r3, r2
 8010aa2:	009b      	lsls	r3, r3, #2
 8010aa4:	440b      	add	r3, r1
 8010aa6:	331c      	adds	r3, #28
 8010aa8:	2207      	movs	r2, #7
 8010aaa:	601a      	str	r2, [r3, #0]
 8010aac:	e00c      	b.n	8010ac8 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8010aae:	4b14      	ldr	r3, [pc, #80]	@ (8010b00 <USBD_HID_Init+0xc8>)
 8010ab0:	781b      	ldrb	r3, [r3, #0]
 8010ab2:	f003 020f 	and.w	r2, r3, #15
 8010ab6:	6879      	ldr	r1, [r7, #4]
 8010ab8:	4613      	mov	r3, r2
 8010aba:	009b      	lsls	r3, r3, #2
 8010abc:	4413      	add	r3, r2
 8010abe:	009b      	lsls	r3, r3, #2
 8010ac0:	440b      	add	r3, r1
 8010ac2:	331c      	adds	r3, #28
 8010ac4:	220a      	movs	r2, #10
 8010ac6:	601a      	str	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8010ac8:	4b0d      	ldr	r3, [pc, #52]	@ (8010b00 <USBD_HID_Init+0xc8>)
 8010aca:	7819      	ldrb	r1, [r3, #0]
 8010acc:	2304      	movs	r3, #4
 8010ace:	2203      	movs	r2, #3
 8010ad0:	6878      	ldr	r0, [r7, #4]
 8010ad2:	f001 ffb2 	bl	8012a3a <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8010ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8010b00 <USBD_HID_Init+0xc8>)
 8010ad8:	781b      	ldrb	r3, [r3, #0]
 8010ada:	f003 020f 	and.w	r2, r3, #15
 8010ade:	6879      	ldr	r1, [r7, #4]
 8010ae0:	4613      	mov	r3, r2
 8010ae2:	009b      	lsls	r3, r3, #2
 8010ae4:	4413      	add	r3, r2
 8010ae6:	009b      	lsls	r3, r3, #2
 8010ae8:	440b      	add	r3, r1
 8010aea:	3323      	adds	r3, #35	@ 0x23
 8010aec:	2201      	movs	r2, #1
 8010aee:	701a      	strb	r2, [r3, #0]

  hhid->state = USBD_HID_IDLE;
 8010af0:	68fb      	ldr	r3, [r7, #12]
 8010af2:	2200      	movs	r2, #0
 8010af4:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8010af6:	2300      	movs	r3, #0
}
 8010af8:	4618      	mov	r0, r3
 8010afa:	3710      	adds	r7, #16
 8010afc:	46bd      	mov	sp, r7
 8010afe:	bd80      	pop	{r7, pc}
 8010b00:	200000d2 	.word	0x200000d2

08010b04 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010b04:	b580      	push	{r7, lr}
 8010b06:	b082      	sub	sp, #8
 8010b08:	af00      	add	r7, sp, #0
 8010b0a:	6078      	str	r0, [r7, #4]
 8010b0c:	460b      	mov	r3, r1
 8010b0e:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8010b10:	4b1f      	ldr	r3, [pc, #124]	@ (8010b90 <USBD_HID_DeInit+0x8c>)
 8010b12:	781b      	ldrb	r3, [r3, #0]
 8010b14:	4619      	mov	r1, r3
 8010b16:	6878      	ldr	r0, [r7, #4]
 8010b18:	f001 ffb5 	bl	8012a86 <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8010b1c:	4b1c      	ldr	r3, [pc, #112]	@ (8010b90 <USBD_HID_DeInit+0x8c>)
 8010b1e:	781b      	ldrb	r3, [r3, #0]
 8010b20:	f003 020f 	and.w	r2, r3, #15
 8010b24:	6879      	ldr	r1, [r7, #4]
 8010b26:	4613      	mov	r3, r2
 8010b28:	009b      	lsls	r3, r3, #2
 8010b2a:	4413      	add	r3, r2
 8010b2c:	009b      	lsls	r3, r3, #2
 8010b2e:	440b      	add	r3, r1
 8010b30:	3323      	adds	r3, #35	@ 0x23
 8010b32:	2200      	movs	r2, #0
 8010b34:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8010b36:	4b16      	ldr	r3, [pc, #88]	@ (8010b90 <USBD_HID_DeInit+0x8c>)
 8010b38:	781b      	ldrb	r3, [r3, #0]
 8010b3a:	f003 020f 	and.w	r2, r3, #15
 8010b3e:	6879      	ldr	r1, [r7, #4]
 8010b40:	4613      	mov	r3, r2
 8010b42:	009b      	lsls	r3, r3, #2
 8010b44:	4413      	add	r3, r2
 8010b46:	009b      	lsls	r3, r3, #2
 8010b48:	440b      	add	r3, r1
 8010b4a:	331c      	adds	r3, #28
 8010b4c:	2200      	movs	r2, #0
 8010b4e:	601a      	str	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	32b0      	adds	r2, #176	@ 0xb0
 8010b5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d011      	beq.n	8010b86 <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	32b0      	adds	r2, #176	@ 0xb0
 8010b6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010b70:	4618      	mov	r0, r3
 8010b72:	f002 f881 	bl	8012c78 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	32b0      	adds	r2, #176	@ 0xb0
 8010b80:	2100      	movs	r1, #0
 8010b82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 8010b86:	2300      	movs	r3, #0
}
 8010b88:	4618      	mov	r0, r3
 8010b8a:	3708      	adds	r7, #8
 8010b8c:	46bd      	mov	sp, r7
 8010b8e:	bd80      	pop	{r7, pc}
 8010b90:	200000d2 	.word	0x200000d2

08010b94 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010b94:	b580      	push	{r7, lr}
 8010b96:	b086      	sub	sp, #24
 8010b98:	af00      	add	r7, sp, #0
 8010b9a:	6078      	str	r0, [r7, #4]
 8010b9c:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	32b0      	adds	r2, #176	@ 0xb0
 8010ba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010bac:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8010bae:	2300      	movs	r3, #0
 8010bb0:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8010bb2:	2300      	movs	r3, #0
 8010bb4:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d101      	bne.n	8010bc0 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8010bbc:	2303      	movs	r3, #3
 8010bbe:	e0e8      	b.n	8010d92 <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010bc0:	683b      	ldr	r3, [r7, #0]
 8010bc2:	781b      	ldrb	r3, [r3, #0]
 8010bc4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d046      	beq.n	8010c5a <USBD_HID_Setup+0xc6>
 8010bcc:	2b20      	cmp	r3, #32
 8010bce:	f040 80d8 	bne.w	8010d82 <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8010bd2:	683b      	ldr	r3, [r7, #0]
 8010bd4:	785b      	ldrb	r3, [r3, #1]
 8010bd6:	3b02      	subs	r3, #2
 8010bd8:	2b09      	cmp	r3, #9
 8010bda:	d836      	bhi.n	8010c4a <USBD_HID_Setup+0xb6>
 8010bdc:	a201      	add	r2, pc, #4	@ (adr r2, 8010be4 <USBD_HID_Setup+0x50>)
 8010bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010be2:	bf00      	nop
 8010be4:	08010c3b 	.word	0x08010c3b
 8010be8:	08010c1b 	.word	0x08010c1b
 8010bec:	08010c4b 	.word	0x08010c4b
 8010bf0:	08010c4b 	.word	0x08010c4b
 8010bf4:	08010c4b 	.word	0x08010c4b
 8010bf8:	08010c4b 	.word	0x08010c4b
 8010bfc:	08010c4b 	.word	0x08010c4b
 8010c00:	08010c4b 	.word	0x08010c4b
 8010c04:	08010c29 	.word	0x08010c29
 8010c08:	08010c0d 	.word	0x08010c0d
      {
        case USBD_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8010c0c:	683b      	ldr	r3, [r7, #0]
 8010c0e:	885b      	ldrh	r3, [r3, #2]
 8010c10:	b2db      	uxtb	r3, r3
 8010c12:	461a      	mov	r2, r3
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	601a      	str	r2, [r3, #0]
          break;
 8010c18:	e01e      	b.n	8010c58 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	2201      	movs	r2, #1
 8010c1e:	4619      	mov	r1, r3
 8010c20:	6878      	ldr	r0, [r7, #4]
 8010c22:	f001 fbcb 	bl	80123bc <USBD_CtlSendData>
          break;
 8010c26:	e017      	b.n	8010c58 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8010c28:	683b      	ldr	r3, [r7, #0]
 8010c2a:	885b      	ldrh	r3, [r3, #2]
 8010c2c:	0a1b      	lsrs	r3, r3, #8
 8010c2e:	b29b      	uxth	r3, r3
 8010c30:	b2db      	uxtb	r3, r3
 8010c32:	461a      	mov	r2, r3
 8010c34:	68fb      	ldr	r3, [r7, #12]
 8010c36:	605a      	str	r2, [r3, #4]
          break;
 8010c38:	e00e      	b.n	8010c58 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8010c3a:	68fb      	ldr	r3, [r7, #12]
 8010c3c:	3304      	adds	r3, #4
 8010c3e:	2201      	movs	r2, #1
 8010c40:	4619      	mov	r1, r3
 8010c42:	6878      	ldr	r0, [r7, #4]
 8010c44:	f001 fbba 	bl	80123bc <USBD_CtlSendData>
          break;
 8010c48:	e006      	b.n	8010c58 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8010c4a:	6839      	ldr	r1, [r7, #0]
 8010c4c:	6878      	ldr	r0, [r7, #4]
 8010c4e:	f001 fb38 	bl	80122c2 <USBD_CtlError>
          ret = USBD_FAIL;
 8010c52:	2303      	movs	r3, #3
 8010c54:	75fb      	strb	r3, [r7, #23]
          break;
 8010c56:	bf00      	nop
      }
      break;
 8010c58:	e09a      	b.n	8010d90 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010c5a:	683b      	ldr	r3, [r7, #0]
 8010c5c:	785b      	ldrb	r3, [r3, #1]
 8010c5e:	2b0b      	cmp	r3, #11
 8010c60:	f200 8086 	bhi.w	8010d70 <USBD_HID_Setup+0x1dc>
 8010c64:	a201      	add	r2, pc, #4	@ (adr r2, 8010c6c <USBD_HID_Setup+0xd8>)
 8010c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c6a:	bf00      	nop
 8010c6c:	08010c9d 	.word	0x08010c9d
 8010c70:	08010d7f 	.word	0x08010d7f
 8010c74:	08010d71 	.word	0x08010d71
 8010c78:	08010d71 	.word	0x08010d71
 8010c7c:	08010d71 	.word	0x08010d71
 8010c80:	08010d71 	.word	0x08010d71
 8010c84:	08010cc7 	.word	0x08010cc7
 8010c88:	08010d71 	.word	0x08010d71
 8010c8c:	08010d71 	.word	0x08010d71
 8010c90:	08010d71 	.word	0x08010d71
 8010c94:	08010d1f 	.word	0x08010d1f
 8010c98:	08010d49 	.word	0x08010d49
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010ca2:	b2db      	uxtb	r3, r3
 8010ca4:	2b03      	cmp	r3, #3
 8010ca6:	d107      	bne.n	8010cb8 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8010ca8:	f107 030a 	add.w	r3, r7, #10
 8010cac:	2202      	movs	r2, #2
 8010cae:	4619      	mov	r1, r3
 8010cb0:	6878      	ldr	r0, [r7, #4]
 8010cb2:	f001 fb83 	bl	80123bc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010cb6:	e063      	b.n	8010d80 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8010cb8:	6839      	ldr	r1, [r7, #0]
 8010cba:	6878      	ldr	r0, [r7, #4]
 8010cbc:	f001 fb01 	bl	80122c2 <USBD_CtlError>
            ret = USBD_FAIL;
 8010cc0:	2303      	movs	r3, #3
 8010cc2:	75fb      	strb	r3, [r7, #23]
          break;
 8010cc4:	e05c      	b.n	8010d80 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8010cc6:	683b      	ldr	r3, [r7, #0]
 8010cc8:	885b      	ldrh	r3, [r3, #2]
 8010cca:	0a1b      	lsrs	r3, r3, #8
 8010ccc:	b29b      	uxth	r3, r3
 8010cce:	2b22      	cmp	r3, #34	@ 0x22
 8010cd0:	d108      	bne.n	8010ce4 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8010cd2:	683b      	ldr	r3, [r7, #0]
 8010cd4:	88db      	ldrh	r3, [r3, #6]
 8010cd6:	2b4a      	cmp	r3, #74	@ 0x4a
 8010cd8:	bf28      	it	cs
 8010cda:	234a      	movcs	r3, #74	@ 0x4a
 8010cdc:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8010cde:	4b2f      	ldr	r3, [pc, #188]	@ (8010d9c <USBD_HID_Setup+0x208>)
 8010ce0:	613b      	str	r3, [r7, #16]
 8010ce2:	e015      	b.n	8010d10 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8010ce4:	683b      	ldr	r3, [r7, #0]
 8010ce6:	885b      	ldrh	r3, [r3, #2]
 8010ce8:	0a1b      	lsrs	r3, r3, #8
 8010cea:	b29b      	uxth	r3, r3
 8010cec:	2b21      	cmp	r3, #33	@ 0x21
 8010cee:	d108      	bne.n	8010d02 <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8010cf0:	4b2b      	ldr	r3, [pc, #172]	@ (8010da0 <USBD_HID_Setup+0x20c>)
 8010cf2:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8010cf4:	683b      	ldr	r3, [r7, #0]
 8010cf6:	88db      	ldrh	r3, [r3, #6]
 8010cf8:	2b09      	cmp	r3, #9
 8010cfa:	bf28      	it	cs
 8010cfc:	2309      	movcs	r3, #9
 8010cfe:	82bb      	strh	r3, [r7, #20]
 8010d00:	e006      	b.n	8010d10 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8010d02:	6839      	ldr	r1, [r7, #0]
 8010d04:	6878      	ldr	r0, [r7, #4]
 8010d06:	f001 fadc 	bl	80122c2 <USBD_CtlError>
            ret = USBD_FAIL;
 8010d0a:	2303      	movs	r3, #3
 8010d0c:	75fb      	strb	r3, [r7, #23]
            break;
 8010d0e:	e037      	b.n	8010d80 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8010d10:	8abb      	ldrh	r3, [r7, #20]
 8010d12:	461a      	mov	r2, r3
 8010d14:	6939      	ldr	r1, [r7, #16]
 8010d16:	6878      	ldr	r0, [r7, #4]
 8010d18:	f001 fb50 	bl	80123bc <USBD_CtlSendData>
          break;
 8010d1c:	e030      	b.n	8010d80 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010d24:	b2db      	uxtb	r3, r3
 8010d26:	2b03      	cmp	r3, #3
 8010d28:	d107      	bne.n	8010d3a <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8010d2a:	68fb      	ldr	r3, [r7, #12]
 8010d2c:	3308      	adds	r3, #8
 8010d2e:	2201      	movs	r2, #1
 8010d30:	4619      	mov	r1, r3
 8010d32:	6878      	ldr	r0, [r7, #4]
 8010d34:	f001 fb42 	bl	80123bc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010d38:	e022      	b.n	8010d80 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8010d3a:	6839      	ldr	r1, [r7, #0]
 8010d3c:	6878      	ldr	r0, [r7, #4]
 8010d3e:	f001 fac0 	bl	80122c2 <USBD_CtlError>
            ret = USBD_FAIL;
 8010d42:	2303      	movs	r3, #3
 8010d44:	75fb      	strb	r3, [r7, #23]
          break;
 8010d46:	e01b      	b.n	8010d80 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010d4e:	b2db      	uxtb	r3, r3
 8010d50:	2b03      	cmp	r3, #3
 8010d52:	d106      	bne.n	8010d62 <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8010d54:	683b      	ldr	r3, [r7, #0]
 8010d56:	885b      	ldrh	r3, [r3, #2]
 8010d58:	b2db      	uxtb	r3, r3
 8010d5a:	461a      	mov	r2, r3
 8010d5c:	68fb      	ldr	r3, [r7, #12]
 8010d5e:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010d60:	e00e      	b.n	8010d80 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8010d62:	6839      	ldr	r1, [r7, #0]
 8010d64:	6878      	ldr	r0, [r7, #4]
 8010d66:	f001 faac 	bl	80122c2 <USBD_CtlError>
            ret = USBD_FAIL;
 8010d6a:	2303      	movs	r3, #3
 8010d6c:	75fb      	strb	r3, [r7, #23]
          break;
 8010d6e:	e007      	b.n	8010d80 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8010d70:	6839      	ldr	r1, [r7, #0]
 8010d72:	6878      	ldr	r0, [r7, #4]
 8010d74:	f001 faa5 	bl	80122c2 <USBD_CtlError>
          ret = USBD_FAIL;
 8010d78:	2303      	movs	r3, #3
 8010d7a:	75fb      	strb	r3, [r7, #23]
          break;
 8010d7c:	e000      	b.n	8010d80 <USBD_HID_Setup+0x1ec>
          break;
 8010d7e:	bf00      	nop
      }
      break;
 8010d80:	e006      	b.n	8010d90 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8010d82:	6839      	ldr	r1, [r7, #0]
 8010d84:	6878      	ldr	r0, [r7, #4]
 8010d86:	f001 fa9c 	bl	80122c2 <USBD_CtlError>
      ret = USBD_FAIL;
 8010d8a:	2303      	movs	r3, #3
 8010d8c:	75fb      	strb	r3, [r7, #23]
      break;
 8010d8e:	bf00      	nop
  }

  return (uint8_t)ret;
 8010d90:	7dfb      	ldrb	r3, [r7, #23]
}
 8010d92:	4618      	mov	r0, r3
 8010d94:	3718      	adds	r7, #24
 8010d96:	46bd      	mov	sp, r7
 8010d98:	bd80      	pop	{r7, pc}
 8010d9a:	bf00      	nop
 8010d9c:	20000088 	.word	0x20000088
 8010da0:	20000070 	.word	0x20000070

08010da4 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8010da4:	b580      	push	{r7, lr}
 8010da6:	b084      	sub	sp, #16
 8010da8:	af00      	add	r7, sp, #0
 8010daa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8010dac:	2181      	movs	r1, #129	@ 0x81
 8010dae:	4809      	ldr	r0, [pc, #36]	@ (8010dd4 <USBD_HID_GetFSCfgDesc+0x30>)
 8010db0:	f000 fc4e 	bl	8011650 <USBD_GetEpDesc>
 8010db4:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8010db6:	68fb      	ldr	r3, [r7, #12]
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d002      	beq.n	8010dc2 <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8010dbc:	68fb      	ldr	r3, [r7, #12]
 8010dbe:	220a      	movs	r2, #10
 8010dc0:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	2222      	movs	r2, #34	@ 0x22
 8010dc6:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8010dc8:	4b02      	ldr	r3, [pc, #8]	@ (8010dd4 <USBD_HID_GetFSCfgDesc+0x30>)
}
 8010dca:	4618      	mov	r0, r3
 8010dcc:	3710      	adds	r7, #16
 8010dce:	46bd      	mov	sp, r7
 8010dd0:	bd80      	pop	{r7, pc}
 8010dd2:	bf00      	nop
 8010dd4:	2000004c 	.word	0x2000004c

08010dd8 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8010dd8:	b580      	push	{r7, lr}
 8010dda:	b084      	sub	sp, #16
 8010ddc:	af00      	add	r7, sp, #0
 8010dde:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8010de0:	2181      	movs	r1, #129	@ 0x81
 8010de2:	4809      	ldr	r0, [pc, #36]	@ (8010e08 <USBD_HID_GetHSCfgDesc+0x30>)
 8010de4:	f000 fc34 	bl	8011650 <USBD_GetEpDesc>
 8010de8:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d002      	beq.n	8010df6 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8010df0:	68fb      	ldr	r3, [r7, #12]
 8010df2:	2207      	movs	r2, #7
 8010df4:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	2222      	movs	r2, #34	@ 0x22
 8010dfa:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8010dfc:	4b02      	ldr	r3, [pc, #8]	@ (8010e08 <USBD_HID_GetHSCfgDesc+0x30>)
}
 8010dfe:	4618      	mov	r0, r3
 8010e00:	3710      	adds	r7, #16
 8010e02:	46bd      	mov	sp, r7
 8010e04:	bd80      	pop	{r7, pc}
 8010e06:	bf00      	nop
 8010e08:	2000004c 	.word	0x2000004c

08010e0c <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8010e0c:	b580      	push	{r7, lr}
 8010e0e:	b084      	sub	sp, #16
 8010e10:	af00      	add	r7, sp, #0
 8010e12:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8010e14:	2181      	movs	r1, #129	@ 0x81
 8010e16:	4809      	ldr	r0, [pc, #36]	@ (8010e3c <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8010e18:	f000 fc1a 	bl	8011650 <USBD_GetEpDesc>
 8010e1c:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8010e1e:	68fb      	ldr	r3, [r7, #12]
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d002      	beq.n	8010e2a <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8010e24:	68fb      	ldr	r3, [r7, #12]
 8010e26:	220a      	movs	r2, #10
 8010e28:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	2222      	movs	r2, #34	@ 0x22
 8010e2e:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8010e30:	4b02      	ldr	r3, [pc, #8]	@ (8010e3c <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 8010e32:	4618      	mov	r0, r3
 8010e34:	3710      	adds	r7, #16
 8010e36:	46bd      	mov	sp, r7
 8010e38:	bd80      	pop	{r7, pc}
 8010e3a:	bf00      	nop
 8010e3c:	2000004c 	.word	0x2000004c

08010e40 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010e40:	b480      	push	{r7}
 8010e42:	b083      	sub	sp, #12
 8010e44:	af00      	add	r7, sp, #0
 8010e46:	6078      	str	r0, [r7, #4]
 8010e48:	460b      	mov	r3, r1
 8010e4a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	32b0      	adds	r2, #176	@ 0xb0
 8010e56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010e5a:	2200      	movs	r2, #0
 8010e5c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8010e5e:	2300      	movs	r3, #0
}
 8010e60:	4618      	mov	r0, r3
 8010e62:	370c      	adds	r7, #12
 8010e64:	46bd      	mov	sp, r7
 8010e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e6a:	4770      	bx	lr

08010e6c <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8010e6c:	b480      	push	{r7}
 8010e6e:	b083      	sub	sp, #12
 8010e70:	af00      	add	r7, sp, #0
 8010e72:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	220a      	movs	r2, #10
 8010e78:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8010e7a:	4b03      	ldr	r3, [pc, #12]	@ (8010e88 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8010e7c:	4618      	mov	r0, r3
 8010e7e:	370c      	adds	r7, #12
 8010e80:	46bd      	mov	sp, r7
 8010e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e86:	4770      	bx	lr
 8010e88:	2000007c 	.word	0x2000007c

08010e8c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8010e8c:	b580      	push	{r7, lr}
 8010e8e:	b086      	sub	sp, #24
 8010e90:	af00      	add	r7, sp, #0
 8010e92:	60f8      	str	r0, [r7, #12]
 8010e94:	60b9      	str	r1, [r7, #8]
 8010e96:	4613      	mov	r3, r2
 8010e98:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8010e9a:	68fb      	ldr	r3, [r7, #12]
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d101      	bne.n	8010ea4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8010ea0:	2303      	movs	r3, #3
 8010ea2:	e01f      	b.n	8010ee4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8010ea4:	68fb      	ldr	r3, [r7, #12]
 8010ea6:	2200      	movs	r2, #0
 8010ea8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8010eac:	68fb      	ldr	r3, [r7, #12]
 8010eae:	2200      	movs	r2, #0
 8010eb0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8010eb4:	68fb      	ldr	r3, [r7, #12]
 8010eb6:	2200      	movs	r2, #0
 8010eb8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8010ebc:	68bb      	ldr	r3, [r7, #8]
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d003      	beq.n	8010eca <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8010ec2:	68fb      	ldr	r3, [r7, #12]
 8010ec4:	68ba      	ldr	r2, [r7, #8]
 8010ec6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010eca:	68fb      	ldr	r3, [r7, #12]
 8010ecc:	2201      	movs	r2, #1
 8010ece:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8010ed2:	68fb      	ldr	r3, [r7, #12]
 8010ed4:	79fa      	ldrb	r2, [r7, #7]
 8010ed6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8010ed8:	68f8      	ldr	r0, [r7, #12]
 8010eda:	f001 fd47 	bl	801296c <USBD_LL_Init>
 8010ede:	4603      	mov	r3, r0
 8010ee0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8010ee2:	7dfb      	ldrb	r3, [r7, #23]
}
 8010ee4:	4618      	mov	r0, r3
 8010ee6:	3718      	adds	r7, #24
 8010ee8:	46bd      	mov	sp, r7
 8010eea:	bd80      	pop	{r7, pc}

08010eec <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8010eec:	b580      	push	{r7, lr}
 8010eee:	b084      	sub	sp, #16
 8010ef0:	af00      	add	r7, sp, #0
 8010ef2:	6078      	str	r0, [r7, #4]
 8010ef4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010ef6:	2300      	movs	r3, #0
 8010ef8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8010efa:	683b      	ldr	r3, [r7, #0]
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d101      	bne.n	8010f04 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8010f00:	2303      	movs	r3, #3
 8010f02:	e025      	b.n	8010f50 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	683a      	ldr	r2, [r7, #0]
 8010f08:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	32ae      	adds	r2, #174	@ 0xae
 8010f16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d00f      	beq.n	8010f40 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	32ae      	adds	r2, #174	@ 0xae
 8010f2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f30:	f107 020e 	add.w	r2, r7, #14
 8010f34:	4610      	mov	r0, r2
 8010f36:	4798      	blx	r3
 8010f38:	4602      	mov	r2, r0
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010f46:	1c5a      	adds	r2, r3, #1
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8010f4e:	2300      	movs	r3, #0
}
 8010f50:	4618      	mov	r0, r3
 8010f52:	3710      	adds	r7, #16
 8010f54:	46bd      	mov	sp, r7
 8010f56:	bd80      	pop	{r7, pc}

08010f58 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8010f58:	b580      	push	{r7, lr}
 8010f5a:	b082      	sub	sp, #8
 8010f5c:	af00      	add	r7, sp, #0
 8010f5e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8010f60:	6878      	ldr	r0, [r7, #4]
 8010f62:	f001 fd4f 	bl	8012a04 <USBD_LL_Start>
 8010f66:	4603      	mov	r3, r0
}
 8010f68:	4618      	mov	r0, r3
 8010f6a:	3708      	adds	r7, #8
 8010f6c:	46bd      	mov	sp, r7
 8010f6e:	bd80      	pop	{r7, pc}

08010f70 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8010f70:	b480      	push	{r7}
 8010f72:	b083      	sub	sp, #12
 8010f74:	af00      	add	r7, sp, #0
 8010f76:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010f78:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8010f7a:	4618      	mov	r0, r3
 8010f7c:	370c      	adds	r7, #12
 8010f7e:	46bd      	mov	sp, r7
 8010f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f84:	4770      	bx	lr

08010f86 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010f86:	b580      	push	{r7, lr}
 8010f88:	b084      	sub	sp, #16
 8010f8a:	af00      	add	r7, sp, #0
 8010f8c:	6078      	str	r0, [r7, #4]
 8010f8e:	460b      	mov	r3, r1
 8010f90:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8010f92:	2300      	movs	r3, #0
 8010f94:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d009      	beq.n	8010fb4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	78fa      	ldrb	r2, [r7, #3]
 8010faa:	4611      	mov	r1, r2
 8010fac:	6878      	ldr	r0, [r7, #4]
 8010fae:	4798      	blx	r3
 8010fb0:	4603      	mov	r3, r0
 8010fb2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8010fb6:	4618      	mov	r0, r3
 8010fb8:	3710      	adds	r7, #16
 8010fba:	46bd      	mov	sp, r7
 8010fbc:	bd80      	pop	{r7, pc}

08010fbe <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010fbe:	b580      	push	{r7, lr}
 8010fc0:	b084      	sub	sp, #16
 8010fc2:	af00      	add	r7, sp, #0
 8010fc4:	6078      	str	r0, [r7, #4]
 8010fc6:	460b      	mov	r3, r1
 8010fc8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8010fca:	2300      	movs	r3, #0
 8010fcc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010fd4:	685b      	ldr	r3, [r3, #4]
 8010fd6:	78fa      	ldrb	r2, [r7, #3]
 8010fd8:	4611      	mov	r1, r2
 8010fda:	6878      	ldr	r0, [r7, #4]
 8010fdc:	4798      	blx	r3
 8010fde:	4603      	mov	r3, r0
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d001      	beq.n	8010fe8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8010fe4:	2303      	movs	r3, #3
 8010fe6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8010fea:	4618      	mov	r0, r3
 8010fec:	3710      	adds	r7, #16
 8010fee:	46bd      	mov	sp, r7
 8010ff0:	bd80      	pop	{r7, pc}

08010ff2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8010ff2:	b580      	push	{r7, lr}
 8010ff4:	b084      	sub	sp, #16
 8010ff6:	af00      	add	r7, sp, #0
 8010ff8:	6078      	str	r0, [r7, #4]
 8010ffa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8011002:	6839      	ldr	r1, [r7, #0]
 8011004:	4618      	mov	r0, r3
 8011006:	f001 f922 	bl	801224e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	2201      	movs	r2, #1
 801100e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8011018:	461a      	mov	r2, r3
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8011026:	f003 031f 	and.w	r3, r3, #31
 801102a:	2b02      	cmp	r3, #2
 801102c:	d01a      	beq.n	8011064 <USBD_LL_SetupStage+0x72>
 801102e:	2b02      	cmp	r3, #2
 8011030:	d822      	bhi.n	8011078 <USBD_LL_SetupStage+0x86>
 8011032:	2b00      	cmp	r3, #0
 8011034:	d002      	beq.n	801103c <USBD_LL_SetupStage+0x4a>
 8011036:	2b01      	cmp	r3, #1
 8011038:	d00a      	beq.n	8011050 <USBD_LL_SetupStage+0x5e>
 801103a:	e01d      	b.n	8011078 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8011042:	4619      	mov	r1, r3
 8011044:	6878      	ldr	r0, [r7, #4]
 8011046:	f000 fb77 	bl	8011738 <USBD_StdDevReq>
 801104a:	4603      	mov	r3, r0
 801104c:	73fb      	strb	r3, [r7, #15]
      break;
 801104e:	e020      	b.n	8011092 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8011056:	4619      	mov	r1, r3
 8011058:	6878      	ldr	r0, [r7, #4]
 801105a:	f000 fbdf 	bl	801181c <USBD_StdItfReq>
 801105e:	4603      	mov	r3, r0
 8011060:	73fb      	strb	r3, [r7, #15]
      break;
 8011062:	e016      	b.n	8011092 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801106a:	4619      	mov	r1, r3
 801106c:	6878      	ldr	r0, [r7, #4]
 801106e:	f000 fc41 	bl	80118f4 <USBD_StdEPReq>
 8011072:	4603      	mov	r3, r0
 8011074:	73fb      	strb	r3, [r7, #15]
      break;
 8011076:	e00c      	b.n	8011092 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801107e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8011082:	b2db      	uxtb	r3, r3
 8011084:	4619      	mov	r1, r3
 8011086:	6878      	ldr	r0, [r7, #4]
 8011088:	f001 fd1c 	bl	8012ac4 <USBD_LL_StallEP>
 801108c:	4603      	mov	r3, r0
 801108e:	73fb      	strb	r3, [r7, #15]
      break;
 8011090:	bf00      	nop
  }

  return ret;
 8011092:	7bfb      	ldrb	r3, [r7, #15]
}
 8011094:	4618      	mov	r0, r3
 8011096:	3710      	adds	r7, #16
 8011098:	46bd      	mov	sp, r7
 801109a:	bd80      	pop	{r7, pc}

0801109c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801109c:	b580      	push	{r7, lr}
 801109e:	b086      	sub	sp, #24
 80110a0:	af00      	add	r7, sp, #0
 80110a2:	60f8      	str	r0, [r7, #12]
 80110a4:	460b      	mov	r3, r1
 80110a6:	607a      	str	r2, [r7, #4]
 80110a8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80110aa:	2300      	movs	r3, #0
 80110ac:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 80110ae:	7afb      	ldrb	r3, [r7, #11]
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d177      	bne.n	80111a4 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 80110b4:	68fb      	ldr	r3, [r7, #12]
 80110b6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80110ba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80110bc:	68fb      	ldr	r3, [r7, #12]
 80110be:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80110c2:	2b03      	cmp	r3, #3
 80110c4:	f040 80a1 	bne.w	801120a <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 80110c8:	693b      	ldr	r3, [r7, #16]
 80110ca:	685b      	ldr	r3, [r3, #4]
 80110cc:	693a      	ldr	r2, [r7, #16]
 80110ce:	8992      	ldrh	r2, [r2, #12]
 80110d0:	4293      	cmp	r3, r2
 80110d2:	d91c      	bls.n	801110e <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 80110d4:	693b      	ldr	r3, [r7, #16]
 80110d6:	685b      	ldr	r3, [r3, #4]
 80110d8:	693a      	ldr	r2, [r7, #16]
 80110da:	8992      	ldrh	r2, [r2, #12]
 80110dc:	1a9a      	subs	r2, r3, r2
 80110de:	693b      	ldr	r3, [r7, #16]
 80110e0:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 80110e2:	693b      	ldr	r3, [r7, #16]
 80110e4:	691b      	ldr	r3, [r3, #16]
 80110e6:	693a      	ldr	r2, [r7, #16]
 80110e8:	8992      	ldrh	r2, [r2, #12]
 80110ea:	441a      	add	r2, r3
 80110ec:	693b      	ldr	r3, [r7, #16]
 80110ee:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 80110f0:	693b      	ldr	r3, [r7, #16]
 80110f2:	6919      	ldr	r1, [r3, #16]
 80110f4:	693b      	ldr	r3, [r7, #16]
 80110f6:	899b      	ldrh	r3, [r3, #12]
 80110f8:	461a      	mov	r2, r3
 80110fa:	693b      	ldr	r3, [r7, #16]
 80110fc:	685b      	ldr	r3, [r3, #4]
 80110fe:	4293      	cmp	r3, r2
 8011100:	bf38      	it	cc
 8011102:	4613      	movcc	r3, r2
 8011104:	461a      	mov	r2, r3
 8011106:	68f8      	ldr	r0, [r7, #12]
 8011108:	f001 f987 	bl	801241a <USBD_CtlContinueRx>
 801110c:	e07d      	b.n	801120a <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 801110e:	68fb      	ldr	r3, [r7, #12]
 8011110:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8011114:	f003 031f 	and.w	r3, r3, #31
 8011118:	2b02      	cmp	r3, #2
 801111a:	d014      	beq.n	8011146 <USBD_LL_DataOutStage+0xaa>
 801111c:	2b02      	cmp	r3, #2
 801111e:	d81d      	bhi.n	801115c <USBD_LL_DataOutStage+0xc0>
 8011120:	2b00      	cmp	r3, #0
 8011122:	d002      	beq.n	801112a <USBD_LL_DataOutStage+0x8e>
 8011124:	2b01      	cmp	r3, #1
 8011126:	d003      	beq.n	8011130 <USBD_LL_DataOutStage+0x94>
 8011128:	e018      	b.n	801115c <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 801112a:	2300      	movs	r3, #0
 801112c:	75bb      	strb	r3, [r7, #22]
            break;
 801112e:	e018      	b.n	8011162 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8011136:	b2db      	uxtb	r3, r3
 8011138:	4619      	mov	r1, r3
 801113a:	68f8      	ldr	r0, [r7, #12]
 801113c:	f000 fa6e 	bl	801161c <USBD_CoreFindIF>
 8011140:	4603      	mov	r3, r0
 8011142:	75bb      	strb	r3, [r7, #22]
            break;
 8011144:	e00d      	b.n	8011162 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8011146:	68fb      	ldr	r3, [r7, #12]
 8011148:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 801114c:	b2db      	uxtb	r3, r3
 801114e:	4619      	mov	r1, r3
 8011150:	68f8      	ldr	r0, [r7, #12]
 8011152:	f000 fa70 	bl	8011636 <USBD_CoreFindEP>
 8011156:	4603      	mov	r3, r0
 8011158:	75bb      	strb	r3, [r7, #22]
            break;
 801115a:	e002      	b.n	8011162 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 801115c:	2300      	movs	r3, #0
 801115e:	75bb      	strb	r3, [r7, #22]
            break;
 8011160:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8011162:	7dbb      	ldrb	r3, [r7, #22]
 8011164:	2b00      	cmp	r3, #0
 8011166:	d119      	bne.n	801119c <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801116e:	b2db      	uxtb	r3, r3
 8011170:	2b03      	cmp	r3, #3
 8011172:	d113      	bne.n	801119c <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8011174:	7dba      	ldrb	r2, [r7, #22]
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	32ae      	adds	r2, #174	@ 0xae
 801117a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801117e:	691b      	ldr	r3, [r3, #16]
 8011180:	2b00      	cmp	r3, #0
 8011182:	d00b      	beq.n	801119c <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8011184:	7dba      	ldrb	r2, [r7, #22]
 8011186:	68fb      	ldr	r3, [r7, #12]
 8011188:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 801118c:	7dba      	ldrb	r2, [r7, #22]
 801118e:	68fb      	ldr	r3, [r7, #12]
 8011190:	32ae      	adds	r2, #174	@ 0xae
 8011192:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011196:	691b      	ldr	r3, [r3, #16]
 8011198:	68f8      	ldr	r0, [r7, #12]
 801119a:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801119c:	68f8      	ldr	r0, [r7, #12]
 801119e:	f001 f94d 	bl	801243c <USBD_CtlSendStatus>
 80111a2:	e032      	b.n	801120a <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80111a4:	7afb      	ldrb	r3, [r7, #11]
 80111a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80111aa:	b2db      	uxtb	r3, r3
 80111ac:	4619      	mov	r1, r3
 80111ae:	68f8      	ldr	r0, [r7, #12]
 80111b0:	f000 fa41 	bl	8011636 <USBD_CoreFindEP>
 80111b4:	4603      	mov	r3, r0
 80111b6:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80111b8:	7dbb      	ldrb	r3, [r7, #22]
 80111ba:	2bff      	cmp	r3, #255	@ 0xff
 80111bc:	d025      	beq.n	801120a <USBD_LL_DataOutStage+0x16e>
 80111be:	7dbb      	ldrb	r3, [r7, #22]
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d122      	bne.n	801120a <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80111c4:	68fb      	ldr	r3, [r7, #12]
 80111c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80111ca:	b2db      	uxtb	r3, r3
 80111cc:	2b03      	cmp	r3, #3
 80111ce:	d117      	bne.n	8011200 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80111d0:	7dba      	ldrb	r2, [r7, #22]
 80111d2:	68fb      	ldr	r3, [r7, #12]
 80111d4:	32ae      	adds	r2, #174	@ 0xae
 80111d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80111da:	699b      	ldr	r3, [r3, #24]
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d00f      	beq.n	8011200 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 80111e0:	7dba      	ldrb	r2, [r7, #22]
 80111e2:	68fb      	ldr	r3, [r7, #12]
 80111e4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80111e8:	7dba      	ldrb	r2, [r7, #22]
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	32ae      	adds	r2, #174	@ 0xae
 80111ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80111f2:	699b      	ldr	r3, [r3, #24]
 80111f4:	7afa      	ldrb	r2, [r7, #11]
 80111f6:	4611      	mov	r1, r2
 80111f8:	68f8      	ldr	r0, [r7, #12]
 80111fa:	4798      	blx	r3
 80111fc:	4603      	mov	r3, r0
 80111fe:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8011200:	7dfb      	ldrb	r3, [r7, #23]
 8011202:	2b00      	cmp	r3, #0
 8011204:	d001      	beq.n	801120a <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 8011206:	7dfb      	ldrb	r3, [r7, #23]
 8011208:	e000      	b.n	801120c <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 801120a:	2300      	movs	r3, #0
}
 801120c:	4618      	mov	r0, r3
 801120e:	3718      	adds	r7, #24
 8011210:	46bd      	mov	sp, r7
 8011212:	bd80      	pop	{r7, pc}

08011214 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8011214:	b580      	push	{r7, lr}
 8011216:	b086      	sub	sp, #24
 8011218:	af00      	add	r7, sp, #0
 801121a:	60f8      	str	r0, [r7, #12]
 801121c:	460b      	mov	r3, r1
 801121e:	607a      	str	r2, [r7, #4]
 8011220:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8011222:	7afb      	ldrb	r3, [r7, #11]
 8011224:	2b00      	cmp	r3, #0
 8011226:	d178      	bne.n	801131a <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8011228:	68fb      	ldr	r3, [r7, #12]
 801122a:	3314      	adds	r3, #20
 801122c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801122e:	68fb      	ldr	r3, [r7, #12]
 8011230:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8011234:	2b02      	cmp	r3, #2
 8011236:	d163      	bne.n	8011300 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8011238:	693b      	ldr	r3, [r7, #16]
 801123a:	685b      	ldr	r3, [r3, #4]
 801123c:	693a      	ldr	r2, [r7, #16]
 801123e:	8992      	ldrh	r2, [r2, #12]
 8011240:	4293      	cmp	r3, r2
 8011242:	d91c      	bls.n	801127e <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8011244:	693b      	ldr	r3, [r7, #16]
 8011246:	685b      	ldr	r3, [r3, #4]
 8011248:	693a      	ldr	r2, [r7, #16]
 801124a:	8992      	ldrh	r2, [r2, #12]
 801124c:	1a9a      	subs	r2, r3, r2
 801124e:	693b      	ldr	r3, [r7, #16]
 8011250:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8011252:	693b      	ldr	r3, [r7, #16]
 8011254:	691b      	ldr	r3, [r3, #16]
 8011256:	693a      	ldr	r2, [r7, #16]
 8011258:	8992      	ldrh	r2, [r2, #12]
 801125a:	441a      	add	r2, r3
 801125c:	693b      	ldr	r3, [r7, #16]
 801125e:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8011260:	693b      	ldr	r3, [r7, #16]
 8011262:	6919      	ldr	r1, [r3, #16]
 8011264:	693b      	ldr	r3, [r7, #16]
 8011266:	685b      	ldr	r3, [r3, #4]
 8011268:	461a      	mov	r2, r3
 801126a:	68f8      	ldr	r0, [r7, #12]
 801126c:	f001 f8c4 	bl	80123f8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011270:	2300      	movs	r3, #0
 8011272:	2200      	movs	r2, #0
 8011274:	2100      	movs	r1, #0
 8011276:	68f8      	ldr	r0, [r7, #12]
 8011278:	f001 fcce 	bl	8012c18 <USBD_LL_PrepareReceive>
 801127c:	e040      	b.n	8011300 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801127e:	693b      	ldr	r3, [r7, #16]
 8011280:	899b      	ldrh	r3, [r3, #12]
 8011282:	461a      	mov	r2, r3
 8011284:	693b      	ldr	r3, [r7, #16]
 8011286:	685b      	ldr	r3, [r3, #4]
 8011288:	429a      	cmp	r2, r3
 801128a:	d11c      	bne.n	80112c6 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 801128c:	693b      	ldr	r3, [r7, #16]
 801128e:	681b      	ldr	r3, [r3, #0]
 8011290:	693a      	ldr	r2, [r7, #16]
 8011292:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8011294:	4293      	cmp	r3, r2
 8011296:	d316      	bcc.n	80112c6 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8011298:	693b      	ldr	r3, [r7, #16]
 801129a:	681a      	ldr	r2, [r3, #0]
 801129c:	68fb      	ldr	r3, [r7, #12]
 801129e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80112a2:	429a      	cmp	r2, r3
 80112a4:	d20f      	bcs.n	80112c6 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80112a6:	2200      	movs	r2, #0
 80112a8:	2100      	movs	r1, #0
 80112aa:	68f8      	ldr	r0, [r7, #12]
 80112ac:	f001 f8a4 	bl	80123f8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80112b0:	68fb      	ldr	r3, [r7, #12]
 80112b2:	2200      	movs	r2, #0
 80112b4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80112b8:	2300      	movs	r3, #0
 80112ba:	2200      	movs	r2, #0
 80112bc:	2100      	movs	r1, #0
 80112be:	68f8      	ldr	r0, [r7, #12]
 80112c0:	f001 fcaa 	bl	8012c18 <USBD_LL_PrepareReceive>
 80112c4:	e01c      	b.n	8011300 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80112c6:	68fb      	ldr	r3, [r7, #12]
 80112c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80112cc:	b2db      	uxtb	r3, r3
 80112ce:	2b03      	cmp	r3, #3
 80112d0:	d10f      	bne.n	80112f2 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80112d2:	68fb      	ldr	r3, [r7, #12]
 80112d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80112d8:	68db      	ldr	r3, [r3, #12]
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d009      	beq.n	80112f2 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	2200      	movs	r2, #0
 80112e2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80112ec:	68db      	ldr	r3, [r3, #12]
 80112ee:	68f8      	ldr	r0, [r7, #12]
 80112f0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80112f2:	2180      	movs	r1, #128	@ 0x80
 80112f4:	68f8      	ldr	r0, [r7, #12]
 80112f6:	f001 fbe5 	bl	8012ac4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80112fa:	68f8      	ldr	r0, [r7, #12]
 80112fc:	f001 f8b1 	bl	8012462 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8011300:	68fb      	ldr	r3, [r7, #12]
 8011302:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8011306:	2b00      	cmp	r3, #0
 8011308:	d03a      	beq.n	8011380 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 801130a:	68f8      	ldr	r0, [r7, #12]
 801130c:	f7ff fe30 	bl	8010f70 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8011310:	68fb      	ldr	r3, [r7, #12]
 8011312:	2200      	movs	r2, #0
 8011314:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8011318:	e032      	b.n	8011380 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 801131a:	7afb      	ldrb	r3, [r7, #11]
 801131c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8011320:	b2db      	uxtb	r3, r3
 8011322:	4619      	mov	r1, r3
 8011324:	68f8      	ldr	r0, [r7, #12]
 8011326:	f000 f986 	bl	8011636 <USBD_CoreFindEP>
 801132a:	4603      	mov	r3, r0
 801132c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801132e:	7dfb      	ldrb	r3, [r7, #23]
 8011330:	2bff      	cmp	r3, #255	@ 0xff
 8011332:	d025      	beq.n	8011380 <USBD_LL_DataInStage+0x16c>
 8011334:	7dfb      	ldrb	r3, [r7, #23]
 8011336:	2b00      	cmp	r3, #0
 8011338:	d122      	bne.n	8011380 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801133a:	68fb      	ldr	r3, [r7, #12]
 801133c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011340:	b2db      	uxtb	r3, r3
 8011342:	2b03      	cmp	r3, #3
 8011344:	d11c      	bne.n	8011380 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8011346:	7dfa      	ldrb	r2, [r7, #23]
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	32ae      	adds	r2, #174	@ 0xae
 801134c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011350:	695b      	ldr	r3, [r3, #20]
 8011352:	2b00      	cmp	r3, #0
 8011354:	d014      	beq.n	8011380 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 8011356:	7dfa      	ldrb	r2, [r7, #23]
 8011358:	68fb      	ldr	r3, [r7, #12]
 801135a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 801135e:	7dfa      	ldrb	r2, [r7, #23]
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	32ae      	adds	r2, #174	@ 0xae
 8011364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011368:	695b      	ldr	r3, [r3, #20]
 801136a:	7afa      	ldrb	r2, [r7, #11]
 801136c:	4611      	mov	r1, r2
 801136e:	68f8      	ldr	r0, [r7, #12]
 8011370:	4798      	blx	r3
 8011372:	4603      	mov	r3, r0
 8011374:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8011376:	7dbb      	ldrb	r3, [r7, #22]
 8011378:	2b00      	cmp	r3, #0
 801137a:	d001      	beq.n	8011380 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 801137c:	7dbb      	ldrb	r3, [r7, #22]
 801137e:	e000      	b.n	8011382 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8011380:	2300      	movs	r3, #0
}
 8011382:	4618      	mov	r0, r3
 8011384:	3718      	adds	r7, #24
 8011386:	46bd      	mov	sp, r7
 8011388:	bd80      	pop	{r7, pc}

0801138a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801138a:	b580      	push	{r7, lr}
 801138c:	b084      	sub	sp, #16
 801138e:	af00      	add	r7, sp, #0
 8011390:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8011392:	2300      	movs	r3, #0
 8011394:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	2201      	movs	r2, #1
 801139a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	2200      	movs	r2, #0
 80113a2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	2200      	movs	r2, #0
 80113aa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	2200      	movs	r2, #0
 80113b0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	2200      	movs	r2, #0
 80113b8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d014      	beq.n	80113f0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80113cc:	685b      	ldr	r3, [r3, #4]
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d00e      	beq.n	80113f0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80113d8:	685b      	ldr	r3, [r3, #4]
 80113da:	687a      	ldr	r2, [r7, #4]
 80113dc:	6852      	ldr	r2, [r2, #4]
 80113de:	b2d2      	uxtb	r2, r2
 80113e0:	4611      	mov	r1, r2
 80113e2:	6878      	ldr	r0, [r7, #4]
 80113e4:	4798      	blx	r3
 80113e6:	4603      	mov	r3, r0
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d001      	beq.n	80113f0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80113ec:	2303      	movs	r3, #3
 80113ee:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80113f0:	2340      	movs	r3, #64	@ 0x40
 80113f2:	2200      	movs	r2, #0
 80113f4:	2100      	movs	r1, #0
 80113f6:	6878      	ldr	r0, [r7, #4]
 80113f8:	f001 fb1f 	bl	8012a3a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	2201      	movs	r2, #1
 8011400:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	2240      	movs	r2, #64	@ 0x40
 8011408:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801140c:	2340      	movs	r3, #64	@ 0x40
 801140e:	2200      	movs	r2, #0
 8011410:	2180      	movs	r1, #128	@ 0x80
 8011412:	6878      	ldr	r0, [r7, #4]
 8011414:	f001 fb11 	bl	8012a3a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	2201      	movs	r2, #1
 801141c:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	2240      	movs	r2, #64	@ 0x40
 8011424:	841a      	strh	r2, [r3, #32]

  return ret;
 8011426:	7bfb      	ldrb	r3, [r7, #15]
}
 8011428:	4618      	mov	r0, r3
 801142a:	3710      	adds	r7, #16
 801142c:	46bd      	mov	sp, r7
 801142e:	bd80      	pop	{r7, pc}

08011430 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8011430:	b480      	push	{r7}
 8011432:	b083      	sub	sp, #12
 8011434:	af00      	add	r7, sp, #0
 8011436:	6078      	str	r0, [r7, #4]
 8011438:	460b      	mov	r3, r1
 801143a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	78fa      	ldrb	r2, [r7, #3]
 8011440:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8011442:	2300      	movs	r3, #0
}
 8011444:	4618      	mov	r0, r3
 8011446:	370c      	adds	r7, #12
 8011448:	46bd      	mov	sp, r7
 801144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801144e:	4770      	bx	lr

08011450 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8011450:	b480      	push	{r7}
 8011452:	b083      	sub	sp, #12
 8011454:	af00      	add	r7, sp, #0
 8011456:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801145e:	b2db      	uxtb	r3, r3
 8011460:	2b04      	cmp	r3, #4
 8011462:	d006      	beq.n	8011472 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801146a:	b2da      	uxtb	r2, r3
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	2204      	movs	r2, #4
 8011476:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 801147a:	2300      	movs	r3, #0
}
 801147c:	4618      	mov	r0, r3
 801147e:	370c      	adds	r7, #12
 8011480:	46bd      	mov	sp, r7
 8011482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011486:	4770      	bx	lr

08011488 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8011488:	b480      	push	{r7}
 801148a:	b083      	sub	sp, #12
 801148c:	af00      	add	r7, sp, #0
 801148e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011496:	b2db      	uxtb	r3, r3
 8011498:	2b04      	cmp	r3, #4
 801149a:	d106      	bne.n	80114aa <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80114a2:	b2da      	uxtb	r2, r3
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80114aa:	2300      	movs	r3, #0
}
 80114ac:	4618      	mov	r0, r3
 80114ae:	370c      	adds	r7, #12
 80114b0:	46bd      	mov	sp, r7
 80114b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114b6:	4770      	bx	lr

080114b8 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80114b8:	b580      	push	{r7, lr}
 80114ba:	b082      	sub	sp, #8
 80114bc:	af00      	add	r7, sp, #0
 80114be:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80114c6:	b2db      	uxtb	r3, r3
 80114c8:	2b03      	cmp	r3, #3
 80114ca:	d110      	bne.n	80114ee <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d00b      	beq.n	80114ee <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80114dc:	69db      	ldr	r3, [r3, #28]
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d005      	beq.n	80114ee <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80114e8:	69db      	ldr	r3, [r3, #28]
 80114ea:	6878      	ldr	r0, [r7, #4]
 80114ec:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80114ee:	2300      	movs	r3, #0
}
 80114f0:	4618      	mov	r0, r3
 80114f2:	3708      	adds	r7, #8
 80114f4:	46bd      	mov	sp, r7
 80114f6:	bd80      	pop	{r7, pc}

080114f8 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80114f8:	b580      	push	{r7, lr}
 80114fa:	b082      	sub	sp, #8
 80114fc:	af00      	add	r7, sp, #0
 80114fe:	6078      	str	r0, [r7, #4]
 8011500:	460b      	mov	r3, r1
 8011502:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	32ae      	adds	r2, #174	@ 0xae
 801150e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011512:	2b00      	cmp	r3, #0
 8011514:	d101      	bne.n	801151a <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8011516:	2303      	movs	r3, #3
 8011518:	e01c      	b.n	8011554 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011520:	b2db      	uxtb	r3, r3
 8011522:	2b03      	cmp	r3, #3
 8011524:	d115      	bne.n	8011552 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	32ae      	adds	r2, #174	@ 0xae
 8011530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011534:	6a1b      	ldr	r3, [r3, #32]
 8011536:	2b00      	cmp	r3, #0
 8011538:	d00b      	beq.n	8011552 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	32ae      	adds	r2, #174	@ 0xae
 8011544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011548:	6a1b      	ldr	r3, [r3, #32]
 801154a:	78fa      	ldrb	r2, [r7, #3]
 801154c:	4611      	mov	r1, r2
 801154e:	6878      	ldr	r0, [r7, #4]
 8011550:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011552:	2300      	movs	r3, #0
}
 8011554:	4618      	mov	r0, r3
 8011556:	3708      	adds	r7, #8
 8011558:	46bd      	mov	sp, r7
 801155a:	bd80      	pop	{r7, pc}

0801155c <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801155c:	b580      	push	{r7, lr}
 801155e:	b082      	sub	sp, #8
 8011560:	af00      	add	r7, sp, #0
 8011562:	6078      	str	r0, [r7, #4]
 8011564:	460b      	mov	r3, r1
 8011566:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	32ae      	adds	r2, #174	@ 0xae
 8011572:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011576:	2b00      	cmp	r3, #0
 8011578:	d101      	bne.n	801157e <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 801157a:	2303      	movs	r3, #3
 801157c:	e01c      	b.n	80115b8 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011584:	b2db      	uxtb	r3, r3
 8011586:	2b03      	cmp	r3, #3
 8011588:	d115      	bne.n	80115b6 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	32ae      	adds	r2, #174	@ 0xae
 8011594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801159a:	2b00      	cmp	r3, #0
 801159c:	d00b      	beq.n	80115b6 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	32ae      	adds	r2, #174	@ 0xae
 80115a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80115ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80115ae:	78fa      	ldrb	r2, [r7, #3]
 80115b0:	4611      	mov	r1, r2
 80115b2:	6878      	ldr	r0, [r7, #4]
 80115b4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80115b6:	2300      	movs	r3, #0
}
 80115b8:	4618      	mov	r0, r3
 80115ba:	3708      	adds	r7, #8
 80115bc:	46bd      	mov	sp, r7
 80115be:	bd80      	pop	{r7, pc}

080115c0 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80115c0:	b480      	push	{r7}
 80115c2:	b083      	sub	sp, #12
 80115c4:	af00      	add	r7, sp, #0
 80115c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80115c8:	2300      	movs	r3, #0
}
 80115ca:	4618      	mov	r0, r3
 80115cc:	370c      	adds	r7, #12
 80115ce:	46bd      	mov	sp, r7
 80115d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115d4:	4770      	bx	lr

080115d6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80115d6:	b580      	push	{r7, lr}
 80115d8:	b084      	sub	sp, #16
 80115da:	af00      	add	r7, sp, #0
 80115dc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80115de:	2300      	movs	r3, #0
 80115e0:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	2201      	movs	r2, #1
 80115e6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	d00e      	beq.n	8011612 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80115fa:	685b      	ldr	r3, [r3, #4]
 80115fc:	687a      	ldr	r2, [r7, #4]
 80115fe:	6852      	ldr	r2, [r2, #4]
 8011600:	b2d2      	uxtb	r2, r2
 8011602:	4611      	mov	r1, r2
 8011604:	6878      	ldr	r0, [r7, #4]
 8011606:	4798      	blx	r3
 8011608:	4603      	mov	r3, r0
 801160a:	2b00      	cmp	r3, #0
 801160c:	d001      	beq.n	8011612 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 801160e:	2303      	movs	r3, #3
 8011610:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8011612:	7bfb      	ldrb	r3, [r7, #15]
}
 8011614:	4618      	mov	r0, r3
 8011616:	3710      	adds	r7, #16
 8011618:	46bd      	mov	sp, r7
 801161a:	bd80      	pop	{r7, pc}

0801161c <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801161c:	b480      	push	{r7}
 801161e:	b083      	sub	sp, #12
 8011620:	af00      	add	r7, sp, #0
 8011622:	6078      	str	r0, [r7, #4]
 8011624:	460b      	mov	r3, r1
 8011626:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8011628:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801162a:	4618      	mov	r0, r3
 801162c:	370c      	adds	r7, #12
 801162e:	46bd      	mov	sp, r7
 8011630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011634:	4770      	bx	lr

08011636 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8011636:	b480      	push	{r7}
 8011638:	b083      	sub	sp, #12
 801163a:	af00      	add	r7, sp, #0
 801163c:	6078      	str	r0, [r7, #4]
 801163e:	460b      	mov	r3, r1
 8011640:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8011642:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8011644:	4618      	mov	r0, r3
 8011646:	370c      	adds	r7, #12
 8011648:	46bd      	mov	sp, r7
 801164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801164e:	4770      	bx	lr

08011650 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8011650:	b580      	push	{r7, lr}
 8011652:	b086      	sub	sp, #24
 8011654:	af00      	add	r7, sp, #0
 8011656:	6078      	str	r0, [r7, #4]
 8011658:	460b      	mov	r3, r1
 801165a:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8011664:	2300      	movs	r3, #0
 8011666:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8011668:	68fb      	ldr	r3, [r7, #12]
 801166a:	885b      	ldrh	r3, [r3, #2]
 801166c:	b29b      	uxth	r3, r3
 801166e:	68fa      	ldr	r2, [r7, #12]
 8011670:	7812      	ldrb	r2, [r2, #0]
 8011672:	4293      	cmp	r3, r2
 8011674:	d91f      	bls.n	80116b6 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8011676:	68fb      	ldr	r3, [r7, #12]
 8011678:	781b      	ldrb	r3, [r3, #0]
 801167a:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 801167c:	e013      	b.n	80116a6 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 801167e:	f107 030a 	add.w	r3, r7, #10
 8011682:	4619      	mov	r1, r3
 8011684:	6978      	ldr	r0, [r7, #20]
 8011686:	f000 f81b 	bl	80116c0 <USBD_GetNextDesc>
 801168a:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 801168c:	697b      	ldr	r3, [r7, #20]
 801168e:	785b      	ldrb	r3, [r3, #1]
 8011690:	2b05      	cmp	r3, #5
 8011692:	d108      	bne.n	80116a6 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8011694:	697b      	ldr	r3, [r7, #20]
 8011696:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8011698:	693b      	ldr	r3, [r7, #16]
 801169a:	789b      	ldrb	r3, [r3, #2]
 801169c:	78fa      	ldrb	r2, [r7, #3]
 801169e:	429a      	cmp	r2, r3
 80116a0:	d008      	beq.n	80116b4 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80116a2:	2300      	movs	r3, #0
 80116a4:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	885b      	ldrh	r3, [r3, #2]
 80116aa:	b29a      	uxth	r2, r3
 80116ac:	897b      	ldrh	r3, [r7, #10]
 80116ae:	429a      	cmp	r2, r3
 80116b0:	d8e5      	bhi.n	801167e <USBD_GetEpDesc+0x2e>
 80116b2:	e000      	b.n	80116b6 <USBD_GetEpDesc+0x66>
          break;
 80116b4:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80116b6:	693b      	ldr	r3, [r7, #16]
}
 80116b8:	4618      	mov	r0, r3
 80116ba:	3718      	adds	r7, #24
 80116bc:	46bd      	mov	sp, r7
 80116be:	bd80      	pop	{r7, pc}

080116c0 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80116c0:	b480      	push	{r7}
 80116c2:	b085      	sub	sp, #20
 80116c4:	af00      	add	r7, sp, #0
 80116c6:	6078      	str	r0, [r7, #4]
 80116c8:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80116ce:	683b      	ldr	r3, [r7, #0]
 80116d0:	881b      	ldrh	r3, [r3, #0]
 80116d2:	68fa      	ldr	r2, [r7, #12]
 80116d4:	7812      	ldrb	r2, [r2, #0]
 80116d6:	4413      	add	r3, r2
 80116d8:	b29a      	uxth	r2, r3
 80116da:	683b      	ldr	r3, [r7, #0]
 80116dc:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	781b      	ldrb	r3, [r3, #0]
 80116e2:	461a      	mov	r2, r3
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	4413      	add	r3, r2
 80116e8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80116ea:	68fb      	ldr	r3, [r7, #12]
}
 80116ec:	4618      	mov	r0, r3
 80116ee:	3714      	adds	r7, #20
 80116f0:	46bd      	mov	sp, r7
 80116f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116f6:	4770      	bx	lr

080116f8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80116f8:	b480      	push	{r7}
 80116fa:	b087      	sub	sp, #28
 80116fc:	af00      	add	r7, sp, #0
 80116fe:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8011704:	697b      	ldr	r3, [r7, #20]
 8011706:	781b      	ldrb	r3, [r3, #0]
 8011708:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801170a:	697b      	ldr	r3, [r7, #20]
 801170c:	3301      	adds	r3, #1
 801170e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8011710:	697b      	ldr	r3, [r7, #20]
 8011712:	781b      	ldrb	r3, [r3, #0]
 8011714:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8011716:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801171a:	021b      	lsls	r3, r3, #8
 801171c:	b21a      	sxth	r2, r3
 801171e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011722:	4313      	orrs	r3, r2
 8011724:	b21b      	sxth	r3, r3
 8011726:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8011728:	89fb      	ldrh	r3, [r7, #14]
}
 801172a:	4618      	mov	r0, r3
 801172c:	371c      	adds	r7, #28
 801172e:	46bd      	mov	sp, r7
 8011730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011734:	4770      	bx	lr
	...

08011738 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011738:	b580      	push	{r7, lr}
 801173a:	b084      	sub	sp, #16
 801173c:	af00      	add	r7, sp, #0
 801173e:	6078      	str	r0, [r7, #4]
 8011740:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011742:	2300      	movs	r3, #0
 8011744:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011746:	683b      	ldr	r3, [r7, #0]
 8011748:	781b      	ldrb	r3, [r3, #0]
 801174a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801174e:	2b40      	cmp	r3, #64	@ 0x40
 8011750:	d005      	beq.n	801175e <USBD_StdDevReq+0x26>
 8011752:	2b40      	cmp	r3, #64	@ 0x40
 8011754:	d857      	bhi.n	8011806 <USBD_StdDevReq+0xce>
 8011756:	2b00      	cmp	r3, #0
 8011758:	d00f      	beq.n	801177a <USBD_StdDevReq+0x42>
 801175a:	2b20      	cmp	r3, #32
 801175c:	d153      	bne.n	8011806 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	32ae      	adds	r2, #174	@ 0xae
 8011768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801176c:	689b      	ldr	r3, [r3, #8]
 801176e:	6839      	ldr	r1, [r7, #0]
 8011770:	6878      	ldr	r0, [r7, #4]
 8011772:	4798      	blx	r3
 8011774:	4603      	mov	r3, r0
 8011776:	73fb      	strb	r3, [r7, #15]
      break;
 8011778:	e04a      	b.n	8011810 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801177a:	683b      	ldr	r3, [r7, #0]
 801177c:	785b      	ldrb	r3, [r3, #1]
 801177e:	2b09      	cmp	r3, #9
 8011780:	d83b      	bhi.n	80117fa <USBD_StdDevReq+0xc2>
 8011782:	a201      	add	r2, pc, #4	@ (adr r2, 8011788 <USBD_StdDevReq+0x50>)
 8011784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011788:	080117dd 	.word	0x080117dd
 801178c:	080117f1 	.word	0x080117f1
 8011790:	080117fb 	.word	0x080117fb
 8011794:	080117e7 	.word	0x080117e7
 8011798:	080117fb 	.word	0x080117fb
 801179c:	080117bb 	.word	0x080117bb
 80117a0:	080117b1 	.word	0x080117b1
 80117a4:	080117fb 	.word	0x080117fb
 80117a8:	080117d3 	.word	0x080117d3
 80117ac:	080117c5 	.word	0x080117c5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80117b0:	6839      	ldr	r1, [r7, #0]
 80117b2:	6878      	ldr	r0, [r7, #4]
 80117b4:	f000 fa3e 	bl	8011c34 <USBD_GetDescriptor>
          break;
 80117b8:	e024      	b.n	8011804 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80117ba:	6839      	ldr	r1, [r7, #0]
 80117bc:	6878      	ldr	r0, [r7, #4]
 80117be:	f000 fba3 	bl	8011f08 <USBD_SetAddress>
          break;
 80117c2:	e01f      	b.n	8011804 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80117c4:	6839      	ldr	r1, [r7, #0]
 80117c6:	6878      	ldr	r0, [r7, #4]
 80117c8:	f000 fbe2 	bl	8011f90 <USBD_SetConfig>
 80117cc:	4603      	mov	r3, r0
 80117ce:	73fb      	strb	r3, [r7, #15]
          break;
 80117d0:	e018      	b.n	8011804 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80117d2:	6839      	ldr	r1, [r7, #0]
 80117d4:	6878      	ldr	r0, [r7, #4]
 80117d6:	f000 fc85 	bl	80120e4 <USBD_GetConfig>
          break;
 80117da:	e013      	b.n	8011804 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80117dc:	6839      	ldr	r1, [r7, #0]
 80117de:	6878      	ldr	r0, [r7, #4]
 80117e0:	f000 fcb6 	bl	8012150 <USBD_GetStatus>
          break;
 80117e4:	e00e      	b.n	8011804 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80117e6:	6839      	ldr	r1, [r7, #0]
 80117e8:	6878      	ldr	r0, [r7, #4]
 80117ea:	f000 fce5 	bl	80121b8 <USBD_SetFeature>
          break;
 80117ee:	e009      	b.n	8011804 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80117f0:	6839      	ldr	r1, [r7, #0]
 80117f2:	6878      	ldr	r0, [r7, #4]
 80117f4:	f000 fd09 	bl	801220a <USBD_ClrFeature>
          break;
 80117f8:	e004      	b.n	8011804 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80117fa:	6839      	ldr	r1, [r7, #0]
 80117fc:	6878      	ldr	r0, [r7, #4]
 80117fe:	f000 fd60 	bl	80122c2 <USBD_CtlError>
          break;
 8011802:	bf00      	nop
      }
      break;
 8011804:	e004      	b.n	8011810 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8011806:	6839      	ldr	r1, [r7, #0]
 8011808:	6878      	ldr	r0, [r7, #4]
 801180a:	f000 fd5a 	bl	80122c2 <USBD_CtlError>
      break;
 801180e:	bf00      	nop
  }

  return ret;
 8011810:	7bfb      	ldrb	r3, [r7, #15]
}
 8011812:	4618      	mov	r0, r3
 8011814:	3710      	adds	r7, #16
 8011816:	46bd      	mov	sp, r7
 8011818:	bd80      	pop	{r7, pc}
 801181a:	bf00      	nop

0801181c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801181c:	b580      	push	{r7, lr}
 801181e:	b084      	sub	sp, #16
 8011820:	af00      	add	r7, sp, #0
 8011822:	6078      	str	r0, [r7, #4]
 8011824:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011826:	2300      	movs	r3, #0
 8011828:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801182a:	683b      	ldr	r3, [r7, #0]
 801182c:	781b      	ldrb	r3, [r3, #0]
 801182e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011832:	2b40      	cmp	r3, #64	@ 0x40
 8011834:	d005      	beq.n	8011842 <USBD_StdItfReq+0x26>
 8011836:	2b40      	cmp	r3, #64	@ 0x40
 8011838:	d852      	bhi.n	80118e0 <USBD_StdItfReq+0xc4>
 801183a:	2b00      	cmp	r3, #0
 801183c:	d001      	beq.n	8011842 <USBD_StdItfReq+0x26>
 801183e:	2b20      	cmp	r3, #32
 8011840:	d14e      	bne.n	80118e0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011848:	b2db      	uxtb	r3, r3
 801184a:	3b01      	subs	r3, #1
 801184c:	2b02      	cmp	r3, #2
 801184e:	d840      	bhi.n	80118d2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8011850:	683b      	ldr	r3, [r7, #0]
 8011852:	889b      	ldrh	r3, [r3, #4]
 8011854:	b2db      	uxtb	r3, r3
 8011856:	2b01      	cmp	r3, #1
 8011858:	d836      	bhi.n	80118c8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 801185a:	683b      	ldr	r3, [r7, #0]
 801185c:	889b      	ldrh	r3, [r3, #4]
 801185e:	b2db      	uxtb	r3, r3
 8011860:	4619      	mov	r1, r3
 8011862:	6878      	ldr	r0, [r7, #4]
 8011864:	f7ff feda 	bl	801161c <USBD_CoreFindIF>
 8011868:	4603      	mov	r3, r0
 801186a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801186c:	7bbb      	ldrb	r3, [r7, #14]
 801186e:	2bff      	cmp	r3, #255	@ 0xff
 8011870:	d01d      	beq.n	80118ae <USBD_StdItfReq+0x92>
 8011872:	7bbb      	ldrb	r3, [r7, #14]
 8011874:	2b00      	cmp	r3, #0
 8011876:	d11a      	bne.n	80118ae <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8011878:	7bba      	ldrb	r2, [r7, #14]
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	32ae      	adds	r2, #174	@ 0xae
 801187e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011882:	689b      	ldr	r3, [r3, #8]
 8011884:	2b00      	cmp	r3, #0
 8011886:	d00f      	beq.n	80118a8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8011888:	7bba      	ldrb	r2, [r7, #14]
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8011890:	7bba      	ldrb	r2, [r7, #14]
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	32ae      	adds	r2, #174	@ 0xae
 8011896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801189a:	689b      	ldr	r3, [r3, #8]
 801189c:	6839      	ldr	r1, [r7, #0]
 801189e:	6878      	ldr	r0, [r7, #4]
 80118a0:	4798      	blx	r3
 80118a2:	4603      	mov	r3, r0
 80118a4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80118a6:	e004      	b.n	80118b2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80118a8:	2303      	movs	r3, #3
 80118aa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80118ac:	e001      	b.n	80118b2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80118ae:	2303      	movs	r3, #3
 80118b0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80118b2:	683b      	ldr	r3, [r7, #0]
 80118b4:	88db      	ldrh	r3, [r3, #6]
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	d110      	bne.n	80118dc <USBD_StdItfReq+0xc0>
 80118ba:	7bfb      	ldrb	r3, [r7, #15]
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d10d      	bne.n	80118dc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80118c0:	6878      	ldr	r0, [r7, #4]
 80118c2:	f000 fdbb 	bl	801243c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80118c6:	e009      	b.n	80118dc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80118c8:	6839      	ldr	r1, [r7, #0]
 80118ca:	6878      	ldr	r0, [r7, #4]
 80118cc:	f000 fcf9 	bl	80122c2 <USBD_CtlError>
          break;
 80118d0:	e004      	b.n	80118dc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80118d2:	6839      	ldr	r1, [r7, #0]
 80118d4:	6878      	ldr	r0, [r7, #4]
 80118d6:	f000 fcf4 	bl	80122c2 <USBD_CtlError>
          break;
 80118da:	e000      	b.n	80118de <USBD_StdItfReq+0xc2>
          break;
 80118dc:	bf00      	nop
      }
      break;
 80118de:	e004      	b.n	80118ea <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80118e0:	6839      	ldr	r1, [r7, #0]
 80118e2:	6878      	ldr	r0, [r7, #4]
 80118e4:	f000 fced 	bl	80122c2 <USBD_CtlError>
      break;
 80118e8:	bf00      	nop
  }

  return ret;
 80118ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80118ec:	4618      	mov	r0, r3
 80118ee:	3710      	adds	r7, #16
 80118f0:	46bd      	mov	sp, r7
 80118f2:	bd80      	pop	{r7, pc}

080118f4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80118f4:	b580      	push	{r7, lr}
 80118f6:	b084      	sub	sp, #16
 80118f8:	af00      	add	r7, sp, #0
 80118fa:	6078      	str	r0, [r7, #4]
 80118fc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80118fe:	2300      	movs	r3, #0
 8011900:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8011902:	683b      	ldr	r3, [r7, #0]
 8011904:	889b      	ldrh	r3, [r3, #4]
 8011906:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011908:	683b      	ldr	r3, [r7, #0]
 801190a:	781b      	ldrb	r3, [r3, #0]
 801190c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011910:	2b40      	cmp	r3, #64	@ 0x40
 8011912:	d007      	beq.n	8011924 <USBD_StdEPReq+0x30>
 8011914:	2b40      	cmp	r3, #64	@ 0x40
 8011916:	f200 8181 	bhi.w	8011c1c <USBD_StdEPReq+0x328>
 801191a:	2b00      	cmp	r3, #0
 801191c:	d02a      	beq.n	8011974 <USBD_StdEPReq+0x80>
 801191e:	2b20      	cmp	r3, #32
 8011920:	f040 817c 	bne.w	8011c1c <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8011924:	7bbb      	ldrb	r3, [r7, #14]
 8011926:	4619      	mov	r1, r3
 8011928:	6878      	ldr	r0, [r7, #4]
 801192a:	f7ff fe84 	bl	8011636 <USBD_CoreFindEP>
 801192e:	4603      	mov	r3, r0
 8011930:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011932:	7b7b      	ldrb	r3, [r7, #13]
 8011934:	2bff      	cmp	r3, #255	@ 0xff
 8011936:	f000 8176 	beq.w	8011c26 <USBD_StdEPReq+0x332>
 801193a:	7b7b      	ldrb	r3, [r7, #13]
 801193c:	2b00      	cmp	r3, #0
 801193e:	f040 8172 	bne.w	8011c26 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 8011942:	7b7a      	ldrb	r2, [r7, #13]
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 801194a:	7b7a      	ldrb	r2, [r7, #13]
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	32ae      	adds	r2, #174	@ 0xae
 8011950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011954:	689b      	ldr	r3, [r3, #8]
 8011956:	2b00      	cmp	r3, #0
 8011958:	f000 8165 	beq.w	8011c26 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 801195c:	7b7a      	ldrb	r2, [r7, #13]
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	32ae      	adds	r2, #174	@ 0xae
 8011962:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011966:	689b      	ldr	r3, [r3, #8]
 8011968:	6839      	ldr	r1, [r7, #0]
 801196a:	6878      	ldr	r0, [r7, #4]
 801196c:	4798      	blx	r3
 801196e:	4603      	mov	r3, r0
 8011970:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8011972:	e158      	b.n	8011c26 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011974:	683b      	ldr	r3, [r7, #0]
 8011976:	785b      	ldrb	r3, [r3, #1]
 8011978:	2b03      	cmp	r3, #3
 801197a:	d008      	beq.n	801198e <USBD_StdEPReq+0x9a>
 801197c:	2b03      	cmp	r3, #3
 801197e:	f300 8147 	bgt.w	8011c10 <USBD_StdEPReq+0x31c>
 8011982:	2b00      	cmp	r3, #0
 8011984:	f000 809b 	beq.w	8011abe <USBD_StdEPReq+0x1ca>
 8011988:	2b01      	cmp	r3, #1
 801198a:	d03c      	beq.n	8011a06 <USBD_StdEPReq+0x112>
 801198c:	e140      	b.n	8011c10 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011994:	b2db      	uxtb	r3, r3
 8011996:	2b02      	cmp	r3, #2
 8011998:	d002      	beq.n	80119a0 <USBD_StdEPReq+0xac>
 801199a:	2b03      	cmp	r3, #3
 801199c:	d016      	beq.n	80119cc <USBD_StdEPReq+0xd8>
 801199e:	e02c      	b.n	80119fa <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80119a0:	7bbb      	ldrb	r3, [r7, #14]
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d00d      	beq.n	80119c2 <USBD_StdEPReq+0xce>
 80119a6:	7bbb      	ldrb	r3, [r7, #14]
 80119a8:	2b80      	cmp	r3, #128	@ 0x80
 80119aa:	d00a      	beq.n	80119c2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80119ac:	7bbb      	ldrb	r3, [r7, #14]
 80119ae:	4619      	mov	r1, r3
 80119b0:	6878      	ldr	r0, [r7, #4]
 80119b2:	f001 f887 	bl	8012ac4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80119b6:	2180      	movs	r1, #128	@ 0x80
 80119b8:	6878      	ldr	r0, [r7, #4]
 80119ba:	f001 f883 	bl	8012ac4 <USBD_LL_StallEP>
 80119be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80119c0:	e020      	b.n	8011a04 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80119c2:	6839      	ldr	r1, [r7, #0]
 80119c4:	6878      	ldr	r0, [r7, #4]
 80119c6:	f000 fc7c 	bl	80122c2 <USBD_CtlError>
              break;
 80119ca:	e01b      	b.n	8011a04 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80119cc:	683b      	ldr	r3, [r7, #0]
 80119ce:	885b      	ldrh	r3, [r3, #2]
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	d10e      	bne.n	80119f2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80119d4:	7bbb      	ldrb	r3, [r7, #14]
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d00b      	beq.n	80119f2 <USBD_StdEPReq+0xfe>
 80119da:	7bbb      	ldrb	r3, [r7, #14]
 80119dc:	2b80      	cmp	r3, #128	@ 0x80
 80119de:	d008      	beq.n	80119f2 <USBD_StdEPReq+0xfe>
 80119e0:	683b      	ldr	r3, [r7, #0]
 80119e2:	88db      	ldrh	r3, [r3, #6]
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d104      	bne.n	80119f2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80119e8:	7bbb      	ldrb	r3, [r7, #14]
 80119ea:	4619      	mov	r1, r3
 80119ec:	6878      	ldr	r0, [r7, #4]
 80119ee:	f001 f869 	bl	8012ac4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80119f2:	6878      	ldr	r0, [r7, #4]
 80119f4:	f000 fd22 	bl	801243c <USBD_CtlSendStatus>

              break;
 80119f8:	e004      	b.n	8011a04 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80119fa:	6839      	ldr	r1, [r7, #0]
 80119fc:	6878      	ldr	r0, [r7, #4]
 80119fe:	f000 fc60 	bl	80122c2 <USBD_CtlError>
              break;
 8011a02:	bf00      	nop
          }
          break;
 8011a04:	e109      	b.n	8011c1a <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011a0c:	b2db      	uxtb	r3, r3
 8011a0e:	2b02      	cmp	r3, #2
 8011a10:	d002      	beq.n	8011a18 <USBD_StdEPReq+0x124>
 8011a12:	2b03      	cmp	r3, #3
 8011a14:	d016      	beq.n	8011a44 <USBD_StdEPReq+0x150>
 8011a16:	e04b      	b.n	8011ab0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011a18:	7bbb      	ldrb	r3, [r7, #14]
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d00d      	beq.n	8011a3a <USBD_StdEPReq+0x146>
 8011a1e:	7bbb      	ldrb	r3, [r7, #14]
 8011a20:	2b80      	cmp	r3, #128	@ 0x80
 8011a22:	d00a      	beq.n	8011a3a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011a24:	7bbb      	ldrb	r3, [r7, #14]
 8011a26:	4619      	mov	r1, r3
 8011a28:	6878      	ldr	r0, [r7, #4]
 8011a2a:	f001 f84b 	bl	8012ac4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8011a2e:	2180      	movs	r1, #128	@ 0x80
 8011a30:	6878      	ldr	r0, [r7, #4]
 8011a32:	f001 f847 	bl	8012ac4 <USBD_LL_StallEP>
 8011a36:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011a38:	e040      	b.n	8011abc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8011a3a:	6839      	ldr	r1, [r7, #0]
 8011a3c:	6878      	ldr	r0, [r7, #4]
 8011a3e:	f000 fc40 	bl	80122c2 <USBD_CtlError>
              break;
 8011a42:	e03b      	b.n	8011abc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011a44:	683b      	ldr	r3, [r7, #0]
 8011a46:	885b      	ldrh	r3, [r3, #2]
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d136      	bne.n	8011aba <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8011a4c:	7bbb      	ldrb	r3, [r7, #14]
 8011a4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d004      	beq.n	8011a60 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8011a56:	7bbb      	ldrb	r3, [r7, #14]
 8011a58:	4619      	mov	r1, r3
 8011a5a:	6878      	ldr	r0, [r7, #4]
 8011a5c:	f001 f851 	bl	8012b02 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8011a60:	6878      	ldr	r0, [r7, #4]
 8011a62:	f000 fceb 	bl	801243c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8011a66:	7bbb      	ldrb	r3, [r7, #14]
 8011a68:	4619      	mov	r1, r3
 8011a6a:	6878      	ldr	r0, [r7, #4]
 8011a6c:	f7ff fde3 	bl	8011636 <USBD_CoreFindEP>
 8011a70:	4603      	mov	r3, r0
 8011a72:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011a74:	7b7b      	ldrb	r3, [r7, #13]
 8011a76:	2bff      	cmp	r3, #255	@ 0xff
 8011a78:	d01f      	beq.n	8011aba <USBD_StdEPReq+0x1c6>
 8011a7a:	7b7b      	ldrb	r3, [r7, #13]
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d11c      	bne.n	8011aba <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8011a80:	7b7a      	ldrb	r2, [r7, #13]
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8011a88:	7b7a      	ldrb	r2, [r7, #13]
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	32ae      	adds	r2, #174	@ 0xae
 8011a8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a92:	689b      	ldr	r3, [r3, #8]
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d010      	beq.n	8011aba <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8011a98:	7b7a      	ldrb	r2, [r7, #13]
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	32ae      	adds	r2, #174	@ 0xae
 8011a9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011aa2:	689b      	ldr	r3, [r3, #8]
 8011aa4:	6839      	ldr	r1, [r7, #0]
 8011aa6:	6878      	ldr	r0, [r7, #4]
 8011aa8:	4798      	blx	r3
 8011aaa:	4603      	mov	r3, r0
 8011aac:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8011aae:	e004      	b.n	8011aba <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8011ab0:	6839      	ldr	r1, [r7, #0]
 8011ab2:	6878      	ldr	r0, [r7, #4]
 8011ab4:	f000 fc05 	bl	80122c2 <USBD_CtlError>
              break;
 8011ab8:	e000      	b.n	8011abc <USBD_StdEPReq+0x1c8>
              break;
 8011aba:	bf00      	nop
          }
          break;
 8011abc:	e0ad      	b.n	8011c1a <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011ac4:	b2db      	uxtb	r3, r3
 8011ac6:	2b02      	cmp	r3, #2
 8011ac8:	d002      	beq.n	8011ad0 <USBD_StdEPReq+0x1dc>
 8011aca:	2b03      	cmp	r3, #3
 8011acc:	d033      	beq.n	8011b36 <USBD_StdEPReq+0x242>
 8011ace:	e099      	b.n	8011c04 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011ad0:	7bbb      	ldrb	r3, [r7, #14]
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d007      	beq.n	8011ae6 <USBD_StdEPReq+0x1f2>
 8011ad6:	7bbb      	ldrb	r3, [r7, #14]
 8011ad8:	2b80      	cmp	r3, #128	@ 0x80
 8011ada:	d004      	beq.n	8011ae6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8011adc:	6839      	ldr	r1, [r7, #0]
 8011ade:	6878      	ldr	r0, [r7, #4]
 8011ae0:	f000 fbef 	bl	80122c2 <USBD_CtlError>
                break;
 8011ae4:	e093      	b.n	8011c0e <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011ae6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	da0b      	bge.n	8011b06 <USBD_StdEPReq+0x212>
 8011aee:	7bbb      	ldrb	r3, [r7, #14]
 8011af0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011af4:	4613      	mov	r3, r2
 8011af6:	009b      	lsls	r3, r3, #2
 8011af8:	4413      	add	r3, r2
 8011afa:	009b      	lsls	r3, r3, #2
 8011afc:	3310      	adds	r3, #16
 8011afe:	687a      	ldr	r2, [r7, #4]
 8011b00:	4413      	add	r3, r2
 8011b02:	3304      	adds	r3, #4
 8011b04:	e00b      	b.n	8011b1e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011b06:	7bbb      	ldrb	r3, [r7, #14]
 8011b08:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011b0c:	4613      	mov	r3, r2
 8011b0e:	009b      	lsls	r3, r3, #2
 8011b10:	4413      	add	r3, r2
 8011b12:	009b      	lsls	r3, r3, #2
 8011b14:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8011b18:	687a      	ldr	r2, [r7, #4]
 8011b1a:	4413      	add	r3, r2
 8011b1c:	3304      	adds	r3, #4
 8011b1e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8011b20:	68bb      	ldr	r3, [r7, #8]
 8011b22:	2200      	movs	r2, #0
 8011b24:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011b26:	68bb      	ldr	r3, [r7, #8]
 8011b28:	330e      	adds	r3, #14
 8011b2a:	2202      	movs	r2, #2
 8011b2c:	4619      	mov	r1, r3
 8011b2e:	6878      	ldr	r0, [r7, #4]
 8011b30:	f000 fc44 	bl	80123bc <USBD_CtlSendData>
              break;
 8011b34:	e06b      	b.n	8011c0e <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8011b36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	da11      	bge.n	8011b62 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8011b3e:	7bbb      	ldrb	r3, [r7, #14]
 8011b40:	f003 020f 	and.w	r2, r3, #15
 8011b44:	6879      	ldr	r1, [r7, #4]
 8011b46:	4613      	mov	r3, r2
 8011b48:	009b      	lsls	r3, r3, #2
 8011b4a:	4413      	add	r3, r2
 8011b4c:	009b      	lsls	r3, r3, #2
 8011b4e:	440b      	add	r3, r1
 8011b50:	3323      	adds	r3, #35	@ 0x23
 8011b52:	781b      	ldrb	r3, [r3, #0]
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d117      	bne.n	8011b88 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8011b58:	6839      	ldr	r1, [r7, #0]
 8011b5a:	6878      	ldr	r0, [r7, #4]
 8011b5c:	f000 fbb1 	bl	80122c2 <USBD_CtlError>
                  break;
 8011b60:	e055      	b.n	8011c0e <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8011b62:	7bbb      	ldrb	r3, [r7, #14]
 8011b64:	f003 020f 	and.w	r2, r3, #15
 8011b68:	6879      	ldr	r1, [r7, #4]
 8011b6a:	4613      	mov	r3, r2
 8011b6c:	009b      	lsls	r3, r3, #2
 8011b6e:	4413      	add	r3, r2
 8011b70:	009b      	lsls	r3, r3, #2
 8011b72:	440b      	add	r3, r1
 8011b74:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8011b78:	781b      	ldrb	r3, [r3, #0]
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d104      	bne.n	8011b88 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8011b7e:	6839      	ldr	r1, [r7, #0]
 8011b80:	6878      	ldr	r0, [r7, #4]
 8011b82:	f000 fb9e 	bl	80122c2 <USBD_CtlError>
                  break;
 8011b86:	e042      	b.n	8011c0e <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011b88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	da0b      	bge.n	8011ba8 <USBD_StdEPReq+0x2b4>
 8011b90:	7bbb      	ldrb	r3, [r7, #14]
 8011b92:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011b96:	4613      	mov	r3, r2
 8011b98:	009b      	lsls	r3, r3, #2
 8011b9a:	4413      	add	r3, r2
 8011b9c:	009b      	lsls	r3, r3, #2
 8011b9e:	3310      	adds	r3, #16
 8011ba0:	687a      	ldr	r2, [r7, #4]
 8011ba2:	4413      	add	r3, r2
 8011ba4:	3304      	adds	r3, #4
 8011ba6:	e00b      	b.n	8011bc0 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011ba8:	7bbb      	ldrb	r3, [r7, #14]
 8011baa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011bae:	4613      	mov	r3, r2
 8011bb0:	009b      	lsls	r3, r3, #2
 8011bb2:	4413      	add	r3, r2
 8011bb4:	009b      	lsls	r3, r3, #2
 8011bb6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8011bba:	687a      	ldr	r2, [r7, #4]
 8011bbc:	4413      	add	r3, r2
 8011bbe:	3304      	adds	r3, #4
 8011bc0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8011bc2:	7bbb      	ldrb	r3, [r7, #14]
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	d002      	beq.n	8011bce <USBD_StdEPReq+0x2da>
 8011bc8:	7bbb      	ldrb	r3, [r7, #14]
 8011bca:	2b80      	cmp	r3, #128	@ 0x80
 8011bcc:	d103      	bne.n	8011bd6 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 8011bce:	68bb      	ldr	r3, [r7, #8]
 8011bd0:	2200      	movs	r2, #0
 8011bd2:	739a      	strb	r2, [r3, #14]
 8011bd4:	e00e      	b.n	8011bf4 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8011bd6:	7bbb      	ldrb	r3, [r7, #14]
 8011bd8:	4619      	mov	r1, r3
 8011bda:	6878      	ldr	r0, [r7, #4]
 8011bdc:	f000 ffb0 	bl	8012b40 <USBD_LL_IsStallEP>
 8011be0:	4603      	mov	r3, r0
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d003      	beq.n	8011bee <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8011be6:	68bb      	ldr	r3, [r7, #8]
 8011be8:	2201      	movs	r2, #1
 8011bea:	739a      	strb	r2, [r3, #14]
 8011bec:	e002      	b.n	8011bf4 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 8011bee:	68bb      	ldr	r3, [r7, #8]
 8011bf0:	2200      	movs	r2, #0
 8011bf2:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011bf4:	68bb      	ldr	r3, [r7, #8]
 8011bf6:	330e      	adds	r3, #14
 8011bf8:	2202      	movs	r2, #2
 8011bfa:	4619      	mov	r1, r3
 8011bfc:	6878      	ldr	r0, [r7, #4]
 8011bfe:	f000 fbdd 	bl	80123bc <USBD_CtlSendData>
              break;
 8011c02:	e004      	b.n	8011c0e <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8011c04:	6839      	ldr	r1, [r7, #0]
 8011c06:	6878      	ldr	r0, [r7, #4]
 8011c08:	f000 fb5b 	bl	80122c2 <USBD_CtlError>
              break;
 8011c0c:	bf00      	nop
          }
          break;
 8011c0e:	e004      	b.n	8011c1a <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8011c10:	6839      	ldr	r1, [r7, #0]
 8011c12:	6878      	ldr	r0, [r7, #4]
 8011c14:	f000 fb55 	bl	80122c2 <USBD_CtlError>
          break;
 8011c18:	bf00      	nop
      }
      break;
 8011c1a:	e005      	b.n	8011c28 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 8011c1c:	6839      	ldr	r1, [r7, #0]
 8011c1e:	6878      	ldr	r0, [r7, #4]
 8011c20:	f000 fb4f 	bl	80122c2 <USBD_CtlError>
      break;
 8011c24:	e000      	b.n	8011c28 <USBD_StdEPReq+0x334>
      break;
 8011c26:	bf00      	nop
  }

  return ret;
 8011c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c2a:	4618      	mov	r0, r3
 8011c2c:	3710      	adds	r7, #16
 8011c2e:	46bd      	mov	sp, r7
 8011c30:	bd80      	pop	{r7, pc}
	...

08011c34 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011c34:	b580      	push	{r7, lr}
 8011c36:	b084      	sub	sp, #16
 8011c38:	af00      	add	r7, sp, #0
 8011c3a:	6078      	str	r0, [r7, #4]
 8011c3c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011c3e:	2300      	movs	r3, #0
 8011c40:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8011c42:	2300      	movs	r3, #0
 8011c44:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8011c46:	2300      	movs	r3, #0
 8011c48:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8011c4a:	683b      	ldr	r3, [r7, #0]
 8011c4c:	885b      	ldrh	r3, [r3, #2]
 8011c4e:	0a1b      	lsrs	r3, r3, #8
 8011c50:	b29b      	uxth	r3, r3
 8011c52:	3b01      	subs	r3, #1
 8011c54:	2b06      	cmp	r3, #6
 8011c56:	f200 8128 	bhi.w	8011eaa <USBD_GetDescriptor+0x276>
 8011c5a:	a201      	add	r2, pc, #4	@ (adr r2, 8011c60 <USBD_GetDescriptor+0x2c>)
 8011c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c60:	08011c7d 	.word	0x08011c7d
 8011c64:	08011c95 	.word	0x08011c95
 8011c68:	08011cd5 	.word	0x08011cd5
 8011c6c:	08011eab 	.word	0x08011eab
 8011c70:	08011eab 	.word	0x08011eab
 8011c74:	08011e4b 	.word	0x08011e4b
 8011c78:	08011e77 	.word	0x08011e77
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	687a      	ldr	r2, [r7, #4]
 8011c86:	7c12      	ldrb	r2, [r2, #16]
 8011c88:	f107 0108 	add.w	r1, r7, #8
 8011c8c:	4610      	mov	r0, r2
 8011c8e:	4798      	blx	r3
 8011c90:	60f8      	str	r0, [r7, #12]
      break;
 8011c92:	e112      	b.n	8011eba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	7c1b      	ldrb	r3, [r3, #16]
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d10d      	bne.n	8011cb8 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011ca4:	f107 0208 	add.w	r2, r7, #8
 8011ca8:	4610      	mov	r0, r2
 8011caa:	4798      	blx	r3
 8011cac:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011cae:	68fb      	ldr	r3, [r7, #12]
 8011cb0:	3301      	adds	r3, #1
 8011cb2:	2202      	movs	r2, #2
 8011cb4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8011cb6:	e100      	b.n	8011eba <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011cc0:	f107 0208 	add.w	r2, r7, #8
 8011cc4:	4610      	mov	r0, r2
 8011cc6:	4798      	blx	r3
 8011cc8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011cca:	68fb      	ldr	r3, [r7, #12]
 8011ccc:	3301      	adds	r3, #1
 8011cce:	2202      	movs	r2, #2
 8011cd0:	701a      	strb	r2, [r3, #0]
      break;
 8011cd2:	e0f2      	b.n	8011eba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8011cd4:	683b      	ldr	r3, [r7, #0]
 8011cd6:	885b      	ldrh	r3, [r3, #2]
 8011cd8:	b2db      	uxtb	r3, r3
 8011cda:	2b05      	cmp	r3, #5
 8011cdc:	f200 80ac 	bhi.w	8011e38 <USBD_GetDescriptor+0x204>
 8011ce0:	a201      	add	r2, pc, #4	@ (adr r2, 8011ce8 <USBD_GetDescriptor+0xb4>)
 8011ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ce6:	bf00      	nop
 8011ce8:	08011d01 	.word	0x08011d01
 8011cec:	08011d35 	.word	0x08011d35
 8011cf0:	08011d69 	.word	0x08011d69
 8011cf4:	08011d9d 	.word	0x08011d9d
 8011cf8:	08011dd1 	.word	0x08011dd1
 8011cfc:	08011e05 	.word	0x08011e05
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011d06:	685b      	ldr	r3, [r3, #4]
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d00b      	beq.n	8011d24 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011d12:	685b      	ldr	r3, [r3, #4]
 8011d14:	687a      	ldr	r2, [r7, #4]
 8011d16:	7c12      	ldrb	r2, [r2, #16]
 8011d18:	f107 0108 	add.w	r1, r7, #8
 8011d1c:	4610      	mov	r0, r2
 8011d1e:	4798      	blx	r3
 8011d20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011d22:	e091      	b.n	8011e48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011d24:	6839      	ldr	r1, [r7, #0]
 8011d26:	6878      	ldr	r0, [r7, #4]
 8011d28:	f000 facb 	bl	80122c2 <USBD_CtlError>
            err++;
 8011d2c:	7afb      	ldrb	r3, [r7, #11]
 8011d2e:	3301      	adds	r3, #1
 8011d30:	72fb      	strb	r3, [r7, #11]
          break;
 8011d32:	e089      	b.n	8011e48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011d3a:	689b      	ldr	r3, [r3, #8]
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	d00b      	beq.n	8011d58 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011d46:	689b      	ldr	r3, [r3, #8]
 8011d48:	687a      	ldr	r2, [r7, #4]
 8011d4a:	7c12      	ldrb	r2, [r2, #16]
 8011d4c:	f107 0108 	add.w	r1, r7, #8
 8011d50:	4610      	mov	r0, r2
 8011d52:	4798      	blx	r3
 8011d54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011d56:	e077      	b.n	8011e48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011d58:	6839      	ldr	r1, [r7, #0]
 8011d5a:	6878      	ldr	r0, [r7, #4]
 8011d5c:	f000 fab1 	bl	80122c2 <USBD_CtlError>
            err++;
 8011d60:	7afb      	ldrb	r3, [r7, #11]
 8011d62:	3301      	adds	r3, #1
 8011d64:	72fb      	strb	r3, [r7, #11]
          break;
 8011d66:	e06f      	b.n	8011e48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011d6e:	68db      	ldr	r3, [r3, #12]
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d00b      	beq.n	8011d8c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011d7a:	68db      	ldr	r3, [r3, #12]
 8011d7c:	687a      	ldr	r2, [r7, #4]
 8011d7e:	7c12      	ldrb	r2, [r2, #16]
 8011d80:	f107 0108 	add.w	r1, r7, #8
 8011d84:	4610      	mov	r0, r2
 8011d86:	4798      	blx	r3
 8011d88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011d8a:	e05d      	b.n	8011e48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011d8c:	6839      	ldr	r1, [r7, #0]
 8011d8e:	6878      	ldr	r0, [r7, #4]
 8011d90:	f000 fa97 	bl	80122c2 <USBD_CtlError>
            err++;
 8011d94:	7afb      	ldrb	r3, [r7, #11]
 8011d96:	3301      	adds	r3, #1
 8011d98:	72fb      	strb	r3, [r7, #11]
          break;
 8011d9a:	e055      	b.n	8011e48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011da2:	691b      	ldr	r3, [r3, #16]
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d00b      	beq.n	8011dc0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011dae:	691b      	ldr	r3, [r3, #16]
 8011db0:	687a      	ldr	r2, [r7, #4]
 8011db2:	7c12      	ldrb	r2, [r2, #16]
 8011db4:	f107 0108 	add.w	r1, r7, #8
 8011db8:	4610      	mov	r0, r2
 8011dba:	4798      	blx	r3
 8011dbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011dbe:	e043      	b.n	8011e48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011dc0:	6839      	ldr	r1, [r7, #0]
 8011dc2:	6878      	ldr	r0, [r7, #4]
 8011dc4:	f000 fa7d 	bl	80122c2 <USBD_CtlError>
            err++;
 8011dc8:	7afb      	ldrb	r3, [r7, #11]
 8011dca:	3301      	adds	r3, #1
 8011dcc:	72fb      	strb	r3, [r7, #11]
          break;
 8011dce:	e03b      	b.n	8011e48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011dd6:	695b      	ldr	r3, [r3, #20]
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d00b      	beq.n	8011df4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011de2:	695b      	ldr	r3, [r3, #20]
 8011de4:	687a      	ldr	r2, [r7, #4]
 8011de6:	7c12      	ldrb	r2, [r2, #16]
 8011de8:	f107 0108 	add.w	r1, r7, #8
 8011dec:	4610      	mov	r0, r2
 8011dee:	4798      	blx	r3
 8011df0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011df2:	e029      	b.n	8011e48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011df4:	6839      	ldr	r1, [r7, #0]
 8011df6:	6878      	ldr	r0, [r7, #4]
 8011df8:	f000 fa63 	bl	80122c2 <USBD_CtlError>
            err++;
 8011dfc:	7afb      	ldrb	r3, [r7, #11]
 8011dfe:	3301      	adds	r3, #1
 8011e00:	72fb      	strb	r3, [r7, #11]
          break;
 8011e02:	e021      	b.n	8011e48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011e0a:	699b      	ldr	r3, [r3, #24]
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d00b      	beq.n	8011e28 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011e16:	699b      	ldr	r3, [r3, #24]
 8011e18:	687a      	ldr	r2, [r7, #4]
 8011e1a:	7c12      	ldrb	r2, [r2, #16]
 8011e1c:	f107 0108 	add.w	r1, r7, #8
 8011e20:	4610      	mov	r0, r2
 8011e22:	4798      	blx	r3
 8011e24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011e26:	e00f      	b.n	8011e48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011e28:	6839      	ldr	r1, [r7, #0]
 8011e2a:	6878      	ldr	r0, [r7, #4]
 8011e2c:	f000 fa49 	bl	80122c2 <USBD_CtlError>
            err++;
 8011e30:	7afb      	ldrb	r3, [r7, #11]
 8011e32:	3301      	adds	r3, #1
 8011e34:	72fb      	strb	r3, [r7, #11]
          break;
 8011e36:	e007      	b.n	8011e48 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8011e38:	6839      	ldr	r1, [r7, #0]
 8011e3a:	6878      	ldr	r0, [r7, #4]
 8011e3c:	f000 fa41 	bl	80122c2 <USBD_CtlError>
          err++;
 8011e40:	7afb      	ldrb	r3, [r7, #11]
 8011e42:	3301      	adds	r3, #1
 8011e44:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8011e46:	bf00      	nop
      }
      break;
 8011e48:	e037      	b.n	8011eba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	7c1b      	ldrb	r3, [r3, #16]
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	d109      	bne.n	8011e66 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011e58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011e5a:	f107 0208 	add.w	r2, r7, #8
 8011e5e:	4610      	mov	r0, r2
 8011e60:	4798      	blx	r3
 8011e62:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011e64:	e029      	b.n	8011eba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8011e66:	6839      	ldr	r1, [r7, #0]
 8011e68:	6878      	ldr	r0, [r7, #4]
 8011e6a:	f000 fa2a 	bl	80122c2 <USBD_CtlError>
        err++;
 8011e6e:	7afb      	ldrb	r3, [r7, #11]
 8011e70:	3301      	adds	r3, #1
 8011e72:	72fb      	strb	r3, [r7, #11]
      break;
 8011e74:	e021      	b.n	8011eba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	7c1b      	ldrb	r3, [r3, #16]
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d10d      	bne.n	8011e9a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011e86:	f107 0208 	add.w	r2, r7, #8
 8011e8a:	4610      	mov	r0, r2
 8011e8c:	4798      	blx	r3
 8011e8e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8011e90:	68fb      	ldr	r3, [r7, #12]
 8011e92:	3301      	adds	r3, #1
 8011e94:	2207      	movs	r2, #7
 8011e96:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011e98:	e00f      	b.n	8011eba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8011e9a:	6839      	ldr	r1, [r7, #0]
 8011e9c:	6878      	ldr	r0, [r7, #4]
 8011e9e:	f000 fa10 	bl	80122c2 <USBD_CtlError>
        err++;
 8011ea2:	7afb      	ldrb	r3, [r7, #11]
 8011ea4:	3301      	adds	r3, #1
 8011ea6:	72fb      	strb	r3, [r7, #11]
      break;
 8011ea8:	e007      	b.n	8011eba <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8011eaa:	6839      	ldr	r1, [r7, #0]
 8011eac:	6878      	ldr	r0, [r7, #4]
 8011eae:	f000 fa08 	bl	80122c2 <USBD_CtlError>
      err++;
 8011eb2:	7afb      	ldrb	r3, [r7, #11]
 8011eb4:	3301      	adds	r3, #1
 8011eb6:	72fb      	strb	r3, [r7, #11]
      break;
 8011eb8:	bf00      	nop
  }

  if (err != 0U)
 8011eba:	7afb      	ldrb	r3, [r7, #11]
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d11e      	bne.n	8011efe <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8011ec0:	683b      	ldr	r3, [r7, #0]
 8011ec2:	88db      	ldrh	r3, [r3, #6]
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d016      	beq.n	8011ef6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8011ec8:	893b      	ldrh	r3, [r7, #8]
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d00e      	beq.n	8011eec <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8011ece:	683b      	ldr	r3, [r7, #0]
 8011ed0:	88da      	ldrh	r2, [r3, #6]
 8011ed2:	893b      	ldrh	r3, [r7, #8]
 8011ed4:	4293      	cmp	r3, r2
 8011ed6:	bf28      	it	cs
 8011ed8:	4613      	movcs	r3, r2
 8011eda:	b29b      	uxth	r3, r3
 8011edc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8011ede:	893b      	ldrh	r3, [r7, #8]
 8011ee0:	461a      	mov	r2, r3
 8011ee2:	68f9      	ldr	r1, [r7, #12]
 8011ee4:	6878      	ldr	r0, [r7, #4]
 8011ee6:	f000 fa69 	bl	80123bc <USBD_CtlSendData>
 8011eea:	e009      	b.n	8011f00 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8011eec:	6839      	ldr	r1, [r7, #0]
 8011eee:	6878      	ldr	r0, [r7, #4]
 8011ef0:	f000 f9e7 	bl	80122c2 <USBD_CtlError>
 8011ef4:	e004      	b.n	8011f00 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8011ef6:	6878      	ldr	r0, [r7, #4]
 8011ef8:	f000 faa0 	bl	801243c <USBD_CtlSendStatus>
 8011efc:	e000      	b.n	8011f00 <USBD_GetDescriptor+0x2cc>
    return;
 8011efe:	bf00      	nop
  }
}
 8011f00:	3710      	adds	r7, #16
 8011f02:	46bd      	mov	sp, r7
 8011f04:	bd80      	pop	{r7, pc}
 8011f06:	bf00      	nop

08011f08 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011f08:	b580      	push	{r7, lr}
 8011f0a:	b084      	sub	sp, #16
 8011f0c:	af00      	add	r7, sp, #0
 8011f0e:	6078      	str	r0, [r7, #4]
 8011f10:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8011f12:	683b      	ldr	r3, [r7, #0]
 8011f14:	889b      	ldrh	r3, [r3, #4]
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	d131      	bne.n	8011f7e <USBD_SetAddress+0x76>
 8011f1a:	683b      	ldr	r3, [r7, #0]
 8011f1c:	88db      	ldrh	r3, [r3, #6]
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d12d      	bne.n	8011f7e <USBD_SetAddress+0x76>
 8011f22:	683b      	ldr	r3, [r7, #0]
 8011f24:	885b      	ldrh	r3, [r3, #2]
 8011f26:	2b7f      	cmp	r3, #127	@ 0x7f
 8011f28:	d829      	bhi.n	8011f7e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8011f2a:	683b      	ldr	r3, [r7, #0]
 8011f2c:	885b      	ldrh	r3, [r3, #2]
 8011f2e:	b2db      	uxtb	r3, r3
 8011f30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011f34:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011f3c:	b2db      	uxtb	r3, r3
 8011f3e:	2b03      	cmp	r3, #3
 8011f40:	d104      	bne.n	8011f4c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8011f42:	6839      	ldr	r1, [r7, #0]
 8011f44:	6878      	ldr	r0, [r7, #4]
 8011f46:	f000 f9bc 	bl	80122c2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011f4a:	e01d      	b.n	8011f88 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	7bfa      	ldrb	r2, [r7, #15]
 8011f50:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8011f54:	7bfb      	ldrb	r3, [r7, #15]
 8011f56:	4619      	mov	r1, r3
 8011f58:	6878      	ldr	r0, [r7, #4]
 8011f5a:	f000 fe1d 	bl	8012b98 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8011f5e:	6878      	ldr	r0, [r7, #4]
 8011f60:	f000 fa6c 	bl	801243c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8011f64:	7bfb      	ldrb	r3, [r7, #15]
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d004      	beq.n	8011f74 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	2202      	movs	r2, #2
 8011f6e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011f72:	e009      	b.n	8011f88 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	2201      	movs	r2, #1
 8011f78:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011f7c:	e004      	b.n	8011f88 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8011f7e:	6839      	ldr	r1, [r7, #0]
 8011f80:	6878      	ldr	r0, [r7, #4]
 8011f82:	f000 f99e 	bl	80122c2 <USBD_CtlError>
  }
}
 8011f86:	bf00      	nop
 8011f88:	bf00      	nop
 8011f8a:	3710      	adds	r7, #16
 8011f8c:	46bd      	mov	sp, r7
 8011f8e:	bd80      	pop	{r7, pc}

08011f90 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011f90:	b580      	push	{r7, lr}
 8011f92:	b084      	sub	sp, #16
 8011f94:	af00      	add	r7, sp, #0
 8011f96:	6078      	str	r0, [r7, #4]
 8011f98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011f9a:	2300      	movs	r3, #0
 8011f9c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8011f9e:	683b      	ldr	r3, [r7, #0]
 8011fa0:	885b      	ldrh	r3, [r3, #2]
 8011fa2:	b2da      	uxtb	r2, r3
 8011fa4:	4b4e      	ldr	r3, [pc, #312]	@ (80120e0 <USBD_SetConfig+0x150>)
 8011fa6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8011fa8:	4b4d      	ldr	r3, [pc, #308]	@ (80120e0 <USBD_SetConfig+0x150>)
 8011faa:	781b      	ldrb	r3, [r3, #0]
 8011fac:	2b01      	cmp	r3, #1
 8011fae:	d905      	bls.n	8011fbc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8011fb0:	6839      	ldr	r1, [r7, #0]
 8011fb2:	6878      	ldr	r0, [r7, #4]
 8011fb4:	f000 f985 	bl	80122c2 <USBD_CtlError>
    return USBD_FAIL;
 8011fb8:	2303      	movs	r3, #3
 8011fba:	e08c      	b.n	80120d6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011fc2:	b2db      	uxtb	r3, r3
 8011fc4:	2b02      	cmp	r3, #2
 8011fc6:	d002      	beq.n	8011fce <USBD_SetConfig+0x3e>
 8011fc8:	2b03      	cmp	r3, #3
 8011fca:	d029      	beq.n	8012020 <USBD_SetConfig+0x90>
 8011fcc:	e075      	b.n	80120ba <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8011fce:	4b44      	ldr	r3, [pc, #272]	@ (80120e0 <USBD_SetConfig+0x150>)
 8011fd0:	781b      	ldrb	r3, [r3, #0]
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	d020      	beq.n	8012018 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8011fd6:	4b42      	ldr	r3, [pc, #264]	@ (80120e0 <USBD_SetConfig+0x150>)
 8011fd8:	781b      	ldrb	r3, [r3, #0]
 8011fda:	461a      	mov	r2, r3
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011fe0:	4b3f      	ldr	r3, [pc, #252]	@ (80120e0 <USBD_SetConfig+0x150>)
 8011fe2:	781b      	ldrb	r3, [r3, #0]
 8011fe4:	4619      	mov	r1, r3
 8011fe6:	6878      	ldr	r0, [r7, #4]
 8011fe8:	f7fe ffcd 	bl	8010f86 <USBD_SetClassConfig>
 8011fec:	4603      	mov	r3, r0
 8011fee:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8011ff0:	7bfb      	ldrb	r3, [r7, #15]
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d008      	beq.n	8012008 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8011ff6:	6839      	ldr	r1, [r7, #0]
 8011ff8:	6878      	ldr	r0, [r7, #4]
 8011ffa:	f000 f962 	bl	80122c2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	2202      	movs	r2, #2
 8012002:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012006:	e065      	b.n	80120d4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8012008:	6878      	ldr	r0, [r7, #4]
 801200a:	f000 fa17 	bl	801243c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	2203      	movs	r2, #3
 8012012:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8012016:	e05d      	b.n	80120d4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8012018:	6878      	ldr	r0, [r7, #4]
 801201a:	f000 fa0f 	bl	801243c <USBD_CtlSendStatus>
      break;
 801201e:	e059      	b.n	80120d4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8012020:	4b2f      	ldr	r3, [pc, #188]	@ (80120e0 <USBD_SetConfig+0x150>)
 8012022:	781b      	ldrb	r3, [r3, #0]
 8012024:	2b00      	cmp	r3, #0
 8012026:	d112      	bne.n	801204e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	2202      	movs	r2, #2
 801202c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8012030:	4b2b      	ldr	r3, [pc, #172]	@ (80120e0 <USBD_SetConfig+0x150>)
 8012032:	781b      	ldrb	r3, [r3, #0]
 8012034:	461a      	mov	r2, r3
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801203a:	4b29      	ldr	r3, [pc, #164]	@ (80120e0 <USBD_SetConfig+0x150>)
 801203c:	781b      	ldrb	r3, [r3, #0]
 801203e:	4619      	mov	r1, r3
 8012040:	6878      	ldr	r0, [r7, #4]
 8012042:	f7fe ffbc 	bl	8010fbe <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8012046:	6878      	ldr	r0, [r7, #4]
 8012048:	f000 f9f8 	bl	801243c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801204c:	e042      	b.n	80120d4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801204e:	4b24      	ldr	r3, [pc, #144]	@ (80120e0 <USBD_SetConfig+0x150>)
 8012050:	781b      	ldrb	r3, [r3, #0]
 8012052:	461a      	mov	r2, r3
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	685b      	ldr	r3, [r3, #4]
 8012058:	429a      	cmp	r2, r3
 801205a:	d02a      	beq.n	80120b2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	685b      	ldr	r3, [r3, #4]
 8012060:	b2db      	uxtb	r3, r3
 8012062:	4619      	mov	r1, r3
 8012064:	6878      	ldr	r0, [r7, #4]
 8012066:	f7fe ffaa 	bl	8010fbe <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801206a:	4b1d      	ldr	r3, [pc, #116]	@ (80120e0 <USBD_SetConfig+0x150>)
 801206c:	781b      	ldrb	r3, [r3, #0]
 801206e:	461a      	mov	r2, r3
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012074:	4b1a      	ldr	r3, [pc, #104]	@ (80120e0 <USBD_SetConfig+0x150>)
 8012076:	781b      	ldrb	r3, [r3, #0]
 8012078:	4619      	mov	r1, r3
 801207a:	6878      	ldr	r0, [r7, #4]
 801207c:	f7fe ff83 	bl	8010f86 <USBD_SetClassConfig>
 8012080:	4603      	mov	r3, r0
 8012082:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8012084:	7bfb      	ldrb	r3, [r7, #15]
 8012086:	2b00      	cmp	r3, #0
 8012088:	d00f      	beq.n	80120aa <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 801208a:	6839      	ldr	r1, [r7, #0]
 801208c:	6878      	ldr	r0, [r7, #4]
 801208e:	f000 f918 	bl	80122c2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	685b      	ldr	r3, [r3, #4]
 8012096:	b2db      	uxtb	r3, r3
 8012098:	4619      	mov	r1, r3
 801209a:	6878      	ldr	r0, [r7, #4]
 801209c:	f7fe ff8f 	bl	8010fbe <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	2202      	movs	r2, #2
 80120a4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80120a8:	e014      	b.n	80120d4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80120aa:	6878      	ldr	r0, [r7, #4]
 80120ac:	f000 f9c6 	bl	801243c <USBD_CtlSendStatus>
      break;
 80120b0:	e010      	b.n	80120d4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80120b2:	6878      	ldr	r0, [r7, #4]
 80120b4:	f000 f9c2 	bl	801243c <USBD_CtlSendStatus>
      break;
 80120b8:	e00c      	b.n	80120d4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80120ba:	6839      	ldr	r1, [r7, #0]
 80120bc:	6878      	ldr	r0, [r7, #4]
 80120be:	f000 f900 	bl	80122c2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80120c2:	4b07      	ldr	r3, [pc, #28]	@ (80120e0 <USBD_SetConfig+0x150>)
 80120c4:	781b      	ldrb	r3, [r3, #0]
 80120c6:	4619      	mov	r1, r3
 80120c8:	6878      	ldr	r0, [r7, #4]
 80120ca:	f7fe ff78 	bl	8010fbe <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80120ce:	2303      	movs	r3, #3
 80120d0:	73fb      	strb	r3, [r7, #15]
      break;
 80120d2:	bf00      	nop
  }

  return ret;
 80120d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80120d6:	4618      	mov	r0, r3
 80120d8:	3710      	adds	r7, #16
 80120da:	46bd      	mov	sp, r7
 80120dc:	bd80      	pop	{r7, pc}
 80120de:	bf00      	nop
 80120e0:	20000734 	.word	0x20000734

080120e4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80120e4:	b580      	push	{r7, lr}
 80120e6:	b082      	sub	sp, #8
 80120e8:	af00      	add	r7, sp, #0
 80120ea:	6078      	str	r0, [r7, #4]
 80120ec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80120ee:	683b      	ldr	r3, [r7, #0]
 80120f0:	88db      	ldrh	r3, [r3, #6]
 80120f2:	2b01      	cmp	r3, #1
 80120f4:	d004      	beq.n	8012100 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80120f6:	6839      	ldr	r1, [r7, #0]
 80120f8:	6878      	ldr	r0, [r7, #4]
 80120fa:	f000 f8e2 	bl	80122c2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80120fe:	e023      	b.n	8012148 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012106:	b2db      	uxtb	r3, r3
 8012108:	2b02      	cmp	r3, #2
 801210a:	dc02      	bgt.n	8012112 <USBD_GetConfig+0x2e>
 801210c:	2b00      	cmp	r3, #0
 801210e:	dc03      	bgt.n	8012118 <USBD_GetConfig+0x34>
 8012110:	e015      	b.n	801213e <USBD_GetConfig+0x5a>
 8012112:	2b03      	cmp	r3, #3
 8012114:	d00b      	beq.n	801212e <USBD_GetConfig+0x4a>
 8012116:	e012      	b.n	801213e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	2200      	movs	r2, #0
 801211c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	3308      	adds	r3, #8
 8012122:	2201      	movs	r2, #1
 8012124:	4619      	mov	r1, r3
 8012126:	6878      	ldr	r0, [r7, #4]
 8012128:	f000 f948 	bl	80123bc <USBD_CtlSendData>
        break;
 801212c:	e00c      	b.n	8012148 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	3304      	adds	r3, #4
 8012132:	2201      	movs	r2, #1
 8012134:	4619      	mov	r1, r3
 8012136:	6878      	ldr	r0, [r7, #4]
 8012138:	f000 f940 	bl	80123bc <USBD_CtlSendData>
        break;
 801213c:	e004      	b.n	8012148 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801213e:	6839      	ldr	r1, [r7, #0]
 8012140:	6878      	ldr	r0, [r7, #4]
 8012142:	f000 f8be 	bl	80122c2 <USBD_CtlError>
        break;
 8012146:	bf00      	nop
}
 8012148:	bf00      	nop
 801214a:	3708      	adds	r7, #8
 801214c:	46bd      	mov	sp, r7
 801214e:	bd80      	pop	{r7, pc}

08012150 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012150:	b580      	push	{r7, lr}
 8012152:	b082      	sub	sp, #8
 8012154:	af00      	add	r7, sp, #0
 8012156:	6078      	str	r0, [r7, #4]
 8012158:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012160:	b2db      	uxtb	r3, r3
 8012162:	3b01      	subs	r3, #1
 8012164:	2b02      	cmp	r3, #2
 8012166:	d81e      	bhi.n	80121a6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8012168:	683b      	ldr	r3, [r7, #0]
 801216a:	88db      	ldrh	r3, [r3, #6]
 801216c:	2b02      	cmp	r3, #2
 801216e:	d004      	beq.n	801217a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8012170:	6839      	ldr	r1, [r7, #0]
 8012172:	6878      	ldr	r0, [r7, #4]
 8012174:	f000 f8a5 	bl	80122c2 <USBD_CtlError>
        break;
 8012178:	e01a      	b.n	80121b0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	2201      	movs	r2, #1
 801217e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8012186:	2b00      	cmp	r3, #0
 8012188:	d005      	beq.n	8012196 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	68db      	ldr	r3, [r3, #12]
 801218e:	f043 0202 	orr.w	r2, r3, #2
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	330c      	adds	r3, #12
 801219a:	2202      	movs	r2, #2
 801219c:	4619      	mov	r1, r3
 801219e:	6878      	ldr	r0, [r7, #4]
 80121a0:	f000 f90c 	bl	80123bc <USBD_CtlSendData>
      break;
 80121a4:	e004      	b.n	80121b0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80121a6:	6839      	ldr	r1, [r7, #0]
 80121a8:	6878      	ldr	r0, [r7, #4]
 80121aa:	f000 f88a 	bl	80122c2 <USBD_CtlError>
      break;
 80121ae:	bf00      	nop
  }
}
 80121b0:	bf00      	nop
 80121b2:	3708      	adds	r7, #8
 80121b4:	46bd      	mov	sp, r7
 80121b6:	bd80      	pop	{r7, pc}

080121b8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80121b8:	b580      	push	{r7, lr}
 80121ba:	b082      	sub	sp, #8
 80121bc:	af00      	add	r7, sp, #0
 80121be:	6078      	str	r0, [r7, #4]
 80121c0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80121c2:	683b      	ldr	r3, [r7, #0]
 80121c4:	885b      	ldrh	r3, [r3, #2]
 80121c6:	2b01      	cmp	r3, #1
 80121c8:	d107      	bne.n	80121da <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	2201      	movs	r2, #1
 80121ce:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80121d2:	6878      	ldr	r0, [r7, #4]
 80121d4:	f000 f932 	bl	801243c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80121d8:	e013      	b.n	8012202 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80121da:	683b      	ldr	r3, [r7, #0]
 80121dc:	885b      	ldrh	r3, [r3, #2]
 80121de:	2b02      	cmp	r3, #2
 80121e0:	d10b      	bne.n	80121fa <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80121e2:	683b      	ldr	r3, [r7, #0]
 80121e4:	889b      	ldrh	r3, [r3, #4]
 80121e6:	0a1b      	lsrs	r3, r3, #8
 80121e8:	b29b      	uxth	r3, r3
 80121ea:	b2da      	uxtb	r2, r3
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80121f2:	6878      	ldr	r0, [r7, #4]
 80121f4:	f000 f922 	bl	801243c <USBD_CtlSendStatus>
}
 80121f8:	e003      	b.n	8012202 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80121fa:	6839      	ldr	r1, [r7, #0]
 80121fc:	6878      	ldr	r0, [r7, #4]
 80121fe:	f000 f860 	bl	80122c2 <USBD_CtlError>
}
 8012202:	bf00      	nop
 8012204:	3708      	adds	r7, #8
 8012206:	46bd      	mov	sp, r7
 8012208:	bd80      	pop	{r7, pc}

0801220a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801220a:	b580      	push	{r7, lr}
 801220c:	b082      	sub	sp, #8
 801220e:	af00      	add	r7, sp, #0
 8012210:	6078      	str	r0, [r7, #4]
 8012212:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801221a:	b2db      	uxtb	r3, r3
 801221c:	3b01      	subs	r3, #1
 801221e:	2b02      	cmp	r3, #2
 8012220:	d80b      	bhi.n	801223a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012222:	683b      	ldr	r3, [r7, #0]
 8012224:	885b      	ldrh	r3, [r3, #2]
 8012226:	2b01      	cmp	r3, #1
 8012228:	d10c      	bne.n	8012244 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	2200      	movs	r2, #0
 801222e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8012232:	6878      	ldr	r0, [r7, #4]
 8012234:	f000 f902 	bl	801243c <USBD_CtlSendStatus>
      }
      break;
 8012238:	e004      	b.n	8012244 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801223a:	6839      	ldr	r1, [r7, #0]
 801223c:	6878      	ldr	r0, [r7, #4]
 801223e:	f000 f840 	bl	80122c2 <USBD_CtlError>
      break;
 8012242:	e000      	b.n	8012246 <USBD_ClrFeature+0x3c>
      break;
 8012244:	bf00      	nop
  }
}
 8012246:	bf00      	nop
 8012248:	3708      	adds	r7, #8
 801224a:	46bd      	mov	sp, r7
 801224c:	bd80      	pop	{r7, pc}

0801224e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801224e:	b580      	push	{r7, lr}
 8012250:	b084      	sub	sp, #16
 8012252:	af00      	add	r7, sp, #0
 8012254:	6078      	str	r0, [r7, #4]
 8012256:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8012258:	683b      	ldr	r3, [r7, #0]
 801225a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801225c:	68fb      	ldr	r3, [r7, #12]
 801225e:	781a      	ldrb	r2, [r3, #0]
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8012264:	68fb      	ldr	r3, [r7, #12]
 8012266:	3301      	adds	r3, #1
 8012268:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801226a:	68fb      	ldr	r3, [r7, #12]
 801226c:	781a      	ldrb	r2, [r3, #0]
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8012272:	68fb      	ldr	r3, [r7, #12]
 8012274:	3301      	adds	r3, #1
 8012276:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8012278:	68f8      	ldr	r0, [r7, #12]
 801227a:	f7ff fa3d 	bl	80116f8 <SWAPBYTE>
 801227e:	4603      	mov	r3, r0
 8012280:	461a      	mov	r2, r3
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8012286:	68fb      	ldr	r3, [r7, #12]
 8012288:	3301      	adds	r3, #1
 801228a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801228c:	68fb      	ldr	r3, [r7, #12]
 801228e:	3301      	adds	r3, #1
 8012290:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8012292:	68f8      	ldr	r0, [r7, #12]
 8012294:	f7ff fa30 	bl	80116f8 <SWAPBYTE>
 8012298:	4603      	mov	r3, r0
 801229a:	461a      	mov	r2, r3
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80122a0:	68fb      	ldr	r3, [r7, #12]
 80122a2:	3301      	adds	r3, #1
 80122a4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80122a6:	68fb      	ldr	r3, [r7, #12]
 80122a8:	3301      	adds	r3, #1
 80122aa:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80122ac:	68f8      	ldr	r0, [r7, #12]
 80122ae:	f7ff fa23 	bl	80116f8 <SWAPBYTE>
 80122b2:	4603      	mov	r3, r0
 80122b4:	461a      	mov	r2, r3
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	80da      	strh	r2, [r3, #6]
}
 80122ba:	bf00      	nop
 80122bc:	3710      	adds	r7, #16
 80122be:	46bd      	mov	sp, r7
 80122c0:	bd80      	pop	{r7, pc}

080122c2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80122c2:	b580      	push	{r7, lr}
 80122c4:	b082      	sub	sp, #8
 80122c6:	af00      	add	r7, sp, #0
 80122c8:	6078      	str	r0, [r7, #4]
 80122ca:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80122cc:	2180      	movs	r1, #128	@ 0x80
 80122ce:	6878      	ldr	r0, [r7, #4]
 80122d0:	f000 fbf8 	bl	8012ac4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80122d4:	2100      	movs	r1, #0
 80122d6:	6878      	ldr	r0, [r7, #4]
 80122d8:	f000 fbf4 	bl	8012ac4 <USBD_LL_StallEP>
}
 80122dc:	bf00      	nop
 80122de:	3708      	adds	r7, #8
 80122e0:	46bd      	mov	sp, r7
 80122e2:	bd80      	pop	{r7, pc}

080122e4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80122e4:	b580      	push	{r7, lr}
 80122e6:	b086      	sub	sp, #24
 80122e8:	af00      	add	r7, sp, #0
 80122ea:	60f8      	str	r0, [r7, #12]
 80122ec:	60b9      	str	r1, [r7, #8]
 80122ee:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80122f0:	2300      	movs	r3, #0
 80122f2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80122f4:	68fb      	ldr	r3, [r7, #12]
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	d042      	beq.n	8012380 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80122fa:	68fb      	ldr	r3, [r7, #12]
 80122fc:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80122fe:	6938      	ldr	r0, [r7, #16]
 8012300:	f000 f842 	bl	8012388 <USBD_GetLen>
 8012304:	4603      	mov	r3, r0
 8012306:	3301      	adds	r3, #1
 8012308:	005b      	lsls	r3, r3, #1
 801230a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801230e:	d808      	bhi.n	8012322 <USBD_GetString+0x3e>
 8012310:	6938      	ldr	r0, [r7, #16]
 8012312:	f000 f839 	bl	8012388 <USBD_GetLen>
 8012316:	4603      	mov	r3, r0
 8012318:	3301      	adds	r3, #1
 801231a:	b29b      	uxth	r3, r3
 801231c:	005b      	lsls	r3, r3, #1
 801231e:	b29a      	uxth	r2, r3
 8012320:	e001      	b.n	8012326 <USBD_GetString+0x42>
 8012322:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801232a:	7dfb      	ldrb	r3, [r7, #23]
 801232c:	68ba      	ldr	r2, [r7, #8]
 801232e:	4413      	add	r3, r2
 8012330:	687a      	ldr	r2, [r7, #4]
 8012332:	7812      	ldrb	r2, [r2, #0]
 8012334:	701a      	strb	r2, [r3, #0]
  idx++;
 8012336:	7dfb      	ldrb	r3, [r7, #23]
 8012338:	3301      	adds	r3, #1
 801233a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801233c:	7dfb      	ldrb	r3, [r7, #23]
 801233e:	68ba      	ldr	r2, [r7, #8]
 8012340:	4413      	add	r3, r2
 8012342:	2203      	movs	r2, #3
 8012344:	701a      	strb	r2, [r3, #0]
  idx++;
 8012346:	7dfb      	ldrb	r3, [r7, #23]
 8012348:	3301      	adds	r3, #1
 801234a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801234c:	e013      	b.n	8012376 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 801234e:	7dfb      	ldrb	r3, [r7, #23]
 8012350:	68ba      	ldr	r2, [r7, #8]
 8012352:	4413      	add	r3, r2
 8012354:	693a      	ldr	r2, [r7, #16]
 8012356:	7812      	ldrb	r2, [r2, #0]
 8012358:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801235a:	693b      	ldr	r3, [r7, #16]
 801235c:	3301      	adds	r3, #1
 801235e:	613b      	str	r3, [r7, #16]
    idx++;
 8012360:	7dfb      	ldrb	r3, [r7, #23]
 8012362:	3301      	adds	r3, #1
 8012364:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8012366:	7dfb      	ldrb	r3, [r7, #23]
 8012368:	68ba      	ldr	r2, [r7, #8]
 801236a:	4413      	add	r3, r2
 801236c:	2200      	movs	r2, #0
 801236e:	701a      	strb	r2, [r3, #0]
    idx++;
 8012370:	7dfb      	ldrb	r3, [r7, #23]
 8012372:	3301      	adds	r3, #1
 8012374:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8012376:	693b      	ldr	r3, [r7, #16]
 8012378:	781b      	ldrb	r3, [r3, #0]
 801237a:	2b00      	cmp	r3, #0
 801237c:	d1e7      	bne.n	801234e <USBD_GetString+0x6a>
 801237e:	e000      	b.n	8012382 <USBD_GetString+0x9e>
    return;
 8012380:	bf00      	nop
  }
}
 8012382:	3718      	adds	r7, #24
 8012384:	46bd      	mov	sp, r7
 8012386:	bd80      	pop	{r7, pc}

08012388 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8012388:	b480      	push	{r7}
 801238a:	b085      	sub	sp, #20
 801238c:	af00      	add	r7, sp, #0
 801238e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8012390:	2300      	movs	r3, #0
 8012392:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8012398:	e005      	b.n	80123a6 <USBD_GetLen+0x1e>
  {
    len++;
 801239a:	7bfb      	ldrb	r3, [r7, #15]
 801239c:	3301      	adds	r3, #1
 801239e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80123a0:	68bb      	ldr	r3, [r7, #8]
 80123a2:	3301      	adds	r3, #1
 80123a4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80123a6:	68bb      	ldr	r3, [r7, #8]
 80123a8:	781b      	ldrb	r3, [r3, #0]
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	d1f5      	bne.n	801239a <USBD_GetLen+0x12>
  }

  return len;
 80123ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80123b0:	4618      	mov	r0, r3
 80123b2:	3714      	adds	r7, #20
 80123b4:	46bd      	mov	sp, r7
 80123b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123ba:	4770      	bx	lr

080123bc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80123bc:	b580      	push	{r7, lr}
 80123be:	b084      	sub	sp, #16
 80123c0:	af00      	add	r7, sp, #0
 80123c2:	60f8      	str	r0, [r7, #12]
 80123c4:	60b9      	str	r1, [r7, #8]
 80123c6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80123c8:	68fb      	ldr	r3, [r7, #12]
 80123ca:	2202      	movs	r2, #2
 80123cc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80123d0:	68fb      	ldr	r3, [r7, #12]
 80123d2:	687a      	ldr	r2, [r7, #4]
 80123d4:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 80123d6:	68fb      	ldr	r3, [r7, #12]
 80123d8:	68ba      	ldr	r2, [r7, #8]
 80123da:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80123dc:	68fb      	ldr	r3, [r7, #12]
 80123de:	687a      	ldr	r2, [r7, #4]
 80123e0:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	68ba      	ldr	r2, [r7, #8]
 80123e6:	2100      	movs	r1, #0
 80123e8:	68f8      	ldr	r0, [r7, #12]
 80123ea:	f000 fbf4 	bl	8012bd6 <USBD_LL_Transmit>

  return USBD_OK;
 80123ee:	2300      	movs	r3, #0
}
 80123f0:	4618      	mov	r0, r3
 80123f2:	3710      	adds	r7, #16
 80123f4:	46bd      	mov	sp, r7
 80123f6:	bd80      	pop	{r7, pc}

080123f8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80123f8:	b580      	push	{r7, lr}
 80123fa:	b084      	sub	sp, #16
 80123fc:	af00      	add	r7, sp, #0
 80123fe:	60f8      	str	r0, [r7, #12]
 8012400:	60b9      	str	r1, [r7, #8]
 8012402:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	68ba      	ldr	r2, [r7, #8]
 8012408:	2100      	movs	r1, #0
 801240a:	68f8      	ldr	r0, [r7, #12]
 801240c:	f000 fbe3 	bl	8012bd6 <USBD_LL_Transmit>

  return USBD_OK;
 8012410:	2300      	movs	r3, #0
}
 8012412:	4618      	mov	r0, r3
 8012414:	3710      	adds	r7, #16
 8012416:	46bd      	mov	sp, r7
 8012418:	bd80      	pop	{r7, pc}

0801241a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801241a:	b580      	push	{r7, lr}
 801241c:	b084      	sub	sp, #16
 801241e:	af00      	add	r7, sp, #0
 8012420:	60f8      	str	r0, [r7, #12]
 8012422:	60b9      	str	r1, [r7, #8]
 8012424:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	68ba      	ldr	r2, [r7, #8]
 801242a:	2100      	movs	r1, #0
 801242c:	68f8      	ldr	r0, [r7, #12]
 801242e:	f000 fbf3 	bl	8012c18 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012432:	2300      	movs	r3, #0
}
 8012434:	4618      	mov	r0, r3
 8012436:	3710      	adds	r7, #16
 8012438:	46bd      	mov	sp, r7
 801243a:	bd80      	pop	{r7, pc}

0801243c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801243c:	b580      	push	{r7, lr}
 801243e:	b082      	sub	sp, #8
 8012440:	af00      	add	r7, sp, #0
 8012442:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	2204      	movs	r2, #4
 8012448:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801244c:	2300      	movs	r3, #0
 801244e:	2200      	movs	r2, #0
 8012450:	2100      	movs	r1, #0
 8012452:	6878      	ldr	r0, [r7, #4]
 8012454:	f000 fbbf 	bl	8012bd6 <USBD_LL_Transmit>

  return USBD_OK;
 8012458:	2300      	movs	r3, #0
}
 801245a:	4618      	mov	r0, r3
 801245c:	3708      	adds	r7, #8
 801245e:	46bd      	mov	sp, r7
 8012460:	bd80      	pop	{r7, pc}

08012462 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8012462:	b580      	push	{r7, lr}
 8012464:	b082      	sub	sp, #8
 8012466:	af00      	add	r7, sp, #0
 8012468:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	2205      	movs	r2, #5
 801246e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012472:	2300      	movs	r3, #0
 8012474:	2200      	movs	r2, #0
 8012476:	2100      	movs	r1, #0
 8012478:	6878      	ldr	r0, [r7, #4]
 801247a:	f000 fbcd 	bl	8012c18 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801247e:	2300      	movs	r3, #0
}
 8012480:	4618      	mov	r0, r3
 8012482:	3708      	adds	r7, #8
 8012484:	46bd      	mov	sp, r7
 8012486:	bd80      	pop	{r7, pc}

08012488 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8012488:	b580      	push	{r7, lr}
 801248a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801248c:	2200      	movs	r2, #0
 801248e:	490e      	ldr	r1, [pc, #56]	@ (80124c8 <MX_USB_DEVICE_Init+0x40>)
 8012490:	480e      	ldr	r0, [pc, #56]	@ (80124cc <MX_USB_DEVICE_Init+0x44>)
 8012492:	f7fe fcfb 	bl	8010e8c <USBD_Init>
 8012496:	4603      	mov	r3, r0
 8012498:	2b00      	cmp	r3, #0
 801249a:	d001      	beq.n	80124a0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801249c:	f7f7 f846 	bl	800952c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 80124a0:	490b      	ldr	r1, [pc, #44]	@ (80124d0 <MX_USB_DEVICE_Init+0x48>)
 80124a2:	480a      	ldr	r0, [pc, #40]	@ (80124cc <MX_USB_DEVICE_Init+0x44>)
 80124a4:	f7fe fd22 	bl	8010eec <USBD_RegisterClass>
 80124a8:	4603      	mov	r3, r0
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d001      	beq.n	80124b2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80124ae:	f7f7 f83d 	bl	800952c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80124b2:	4806      	ldr	r0, [pc, #24]	@ (80124cc <MX_USB_DEVICE_Init+0x44>)
 80124b4:	f7fe fd50 	bl	8010f58 <USBD_Start>
 80124b8:	4603      	mov	r3, r0
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d001      	beq.n	80124c2 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 80124be:	f7f7 f835 	bl	800952c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80124c2:	bf00      	nop
 80124c4:	bd80      	pop	{r7, pc}
 80124c6:	bf00      	nop
 80124c8:	200000d4 	.word	0x200000d4
 80124cc:	20000738 	.word	0x20000738
 80124d0:	20000014 	.word	0x20000014

080124d4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80124d4:	b480      	push	{r7}
 80124d6:	b083      	sub	sp, #12
 80124d8:	af00      	add	r7, sp, #0
 80124da:	4603      	mov	r3, r0
 80124dc:	6039      	str	r1, [r7, #0]
 80124de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80124e0:	683b      	ldr	r3, [r7, #0]
 80124e2:	2212      	movs	r2, #18
 80124e4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80124e6:	4b03      	ldr	r3, [pc, #12]	@ (80124f4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80124e8:	4618      	mov	r0, r3
 80124ea:	370c      	adds	r7, #12
 80124ec:	46bd      	mov	sp, r7
 80124ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124f2:	4770      	bx	lr
 80124f4:	200000f0 	.word	0x200000f0

080124f8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80124f8:	b480      	push	{r7}
 80124fa:	b083      	sub	sp, #12
 80124fc:	af00      	add	r7, sp, #0
 80124fe:	4603      	mov	r3, r0
 8012500:	6039      	str	r1, [r7, #0]
 8012502:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8012504:	683b      	ldr	r3, [r7, #0]
 8012506:	2204      	movs	r2, #4
 8012508:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801250a:	4b03      	ldr	r3, [pc, #12]	@ (8012518 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801250c:	4618      	mov	r0, r3
 801250e:	370c      	adds	r7, #12
 8012510:	46bd      	mov	sp, r7
 8012512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012516:	4770      	bx	lr
 8012518:	20000104 	.word	0x20000104

0801251c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801251c:	b580      	push	{r7, lr}
 801251e:	b082      	sub	sp, #8
 8012520:	af00      	add	r7, sp, #0
 8012522:	4603      	mov	r3, r0
 8012524:	6039      	str	r1, [r7, #0]
 8012526:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012528:	79fb      	ldrb	r3, [r7, #7]
 801252a:	2b00      	cmp	r3, #0
 801252c:	d105      	bne.n	801253a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801252e:	683a      	ldr	r2, [r7, #0]
 8012530:	4907      	ldr	r1, [pc, #28]	@ (8012550 <USBD_FS_ProductStrDescriptor+0x34>)
 8012532:	4808      	ldr	r0, [pc, #32]	@ (8012554 <USBD_FS_ProductStrDescriptor+0x38>)
 8012534:	f7ff fed6 	bl	80122e4 <USBD_GetString>
 8012538:	e004      	b.n	8012544 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801253a:	683a      	ldr	r2, [r7, #0]
 801253c:	4904      	ldr	r1, [pc, #16]	@ (8012550 <USBD_FS_ProductStrDescriptor+0x34>)
 801253e:	4805      	ldr	r0, [pc, #20]	@ (8012554 <USBD_FS_ProductStrDescriptor+0x38>)
 8012540:	f7ff fed0 	bl	80122e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012544:	4b02      	ldr	r3, [pc, #8]	@ (8012550 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8012546:	4618      	mov	r0, r3
 8012548:	3708      	adds	r7, #8
 801254a:	46bd      	mov	sp, r7
 801254c:	bd80      	pop	{r7, pc}
 801254e:	bf00      	nop
 8012550:	20000a14 	.word	0x20000a14
 8012554:	08015f08 	.word	0x08015f08

08012558 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012558:	b580      	push	{r7, lr}
 801255a:	b082      	sub	sp, #8
 801255c:	af00      	add	r7, sp, #0
 801255e:	4603      	mov	r3, r0
 8012560:	6039      	str	r1, [r7, #0]
 8012562:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8012564:	683a      	ldr	r2, [r7, #0]
 8012566:	4904      	ldr	r1, [pc, #16]	@ (8012578 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8012568:	4804      	ldr	r0, [pc, #16]	@ (801257c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801256a:	f7ff febb 	bl	80122e4 <USBD_GetString>
  return USBD_StrDesc;
 801256e:	4b02      	ldr	r3, [pc, #8]	@ (8012578 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8012570:	4618      	mov	r0, r3
 8012572:	3708      	adds	r7, #8
 8012574:	46bd      	mov	sp, r7
 8012576:	bd80      	pop	{r7, pc}
 8012578:	20000a14 	.word	0x20000a14
 801257c:	08015f08 	.word	0x08015f08

08012580 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012580:	b580      	push	{r7, lr}
 8012582:	b082      	sub	sp, #8
 8012584:	af00      	add	r7, sp, #0
 8012586:	4603      	mov	r3, r0
 8012588:	6039      	str	r1, [r7, #0]
 801258a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801258c:	683b      	ldr	r3, [r7, #0]
 801258e:	221a      	movs	r2, #26
 8012590:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8012592:	f000 f843 	bl	801261c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8012596:	4b02      	ldr	r3, [pc, #8]	@ (80125a0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8012598:	4618      	mov	r0, r3
 801259a:	3708      	adds	r7, #8
 801259c:	46bd      	mov	sp, r7
 801259e:	bd80      	pop	{r7, pc}
 80125a0:	20000108 	.word	0x20000108

080125a4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80125a4:	b580      	push	{r7, lr}
 80125a6:	b082      	sub	sp, #8
 80125a8:	af00      	add	r7, sp, #0
 80125aa:	4603      	mov	r3, r0
 80125ac:	6039      	str	r1, [r7, #0]
 80125ae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80125b0:	79fb      	ldrb	r3, [r7, #7]
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	d105      	bne.n	80125c2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80125b6:	683a      	ldr	r2, [r7, #0]
 80125b8:	4907      	ldr	r1, [pc, #28]	@ (80125d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80125ba:	4808      	ldr	r0, [pc, #32]	@ (80125dc <USBD_FS_ConfigStrDescriptor+0x38>)
 80125bc:	f7ff fe92 	bl	80122e4 <USBD_GetString>
 80125c0:	e004      	b.n	80125cc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80125c2:	683a      	ldr	r2, [r7, #0]
 80125c4:	4904      	ldr	r1, [pc, #16]	@ (80125d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80125c6:	4805      	ldr	r0, [pc, #20]	@ (80125dc <USBD_FS_ConfigStrDescriptor+0x38>)
 80125c8:	f7ff fe8c 	bl	80122e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80125cc:	4b02      	ldr	r3, [pc, #8]	@ (80125d8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80125ce:	4618      	mov	r0, r3
 80125d0:	3708      	adds	r7, #8
 80125d2:	46bd      	mov	sp, r7
 80125d4:	bd80      	pop	{r7, pc}
 80125d6:	bf00      	nop
 80125d8:	20000a14 	.word	0x20000a14
 80125dc:	08015f18 	.word	0x08015f18

080125e0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80125e0:	b580      	push	{r7, lr}
 80125e2:	b082      	sub	sp, #8
 80125e4:	af00      	add	r7, sp, #0
 80125e6:	4603      	mov	r3, r0
 80125e8:	6039      	str	r1, [r7, #0]
 80125ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80125ec:	79fb      	ldrb	r3, [r7, #7]
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d105      	bne.n	80125fe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80125f2:	683a      	ldr	r2, [r7, #0]
 80125f4:	4907      	ldr	r1, [pc, #28]	@ (8012614 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80125f6:	4808      	ldr	r0, [pc, #32]	@ (8012618 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80125f8:	f7ff fe74 	bl	80122e4 <USBD_GetString>
 80125fc:	e004      	b.n	8012608 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80125fe:	683a      	ldr	r2, [r7, #0]
 8012600:	4904      	ldr	r1, [pc, #16]	@ (8012614 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8012602:	4805      	ldr	r0, [pc, #20]	@ (8012618 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012604:	f7ff fe6e 	bl	80122e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012608:	4b02      	ldr	r3, [pc, #8]	@ (8012614 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801260a:	4618      	mov	r0, r3
 801260c:	3708      	adds	r7, #8
 801260e:	46bd      	mov	sp, r7
 8012610:	bd80      	pop	{r7, pc}
 8012612:	bf00      	nop
 8012614:	20000a14 	.word	0x20000a14
 8012618:	08015f24 	.word	0x08015f24

0801261c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801261c:	b580      	push	{r7, lr}
 801261e:	b084      	sub	sp, #16
 8012620:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8012622:	4b0f      	ldr	r3, [pc, #60]	@ (8012660 <Get_SerialNum+0x44>)
 8012624:	681b      	ldr	r3, [r3, #0]
 8012626:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8012628:	4b0e      	ldr	r3, [pc, #56]	@ (8012664 <Get_SerialNum+0x48>)
 801262a:	681b      	ldr	r3, [r3, #0]
 801262c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801262e:	4b0e      	ldr	r3, [pc, #56]	@ (8012668 <Get_SerialNum+0x4c>)
 8012630:	681b      	ldr	r3, [r3, #0]
 8012632:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8012634:	68fa      	ldr	r2, [r7, #12]
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	4413      	add	r3, r2
 801263a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801263c:	68fb      	ldr	r3, [r7, #12]
 801263e:	2b00      	cmp	r3, #0
 8012640:	d009      	beq.n	8012656 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8012642:	2208      	movs	r2, #8
 8012644:	4909      	ldr	r1, [pc, #36]	@ (801266c <Get_SerialNum+0x50>)
 8012646:	68f8      	ldr	r0, [r7, #12]
 8012648:	f000 f814 	bl	8012674 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801264c:	2204      	movs	r2, #4
 801264e:	4908      	ldr	r1, [pc, #32]	@ (8012670 <Get_SerialNum+0x54>)
 8012650:	68b8      	ldr	r0, [r7, #8]
 8012652:	f000 f80f 	bl	8012674 <IntToUnicode>
  }
}
 8012656:	bf00      	nop
 8012658:	3710      	adds	r7, #16
 801265a:	46bd      	mov	sp, r7
 801265c:	bd80      	pop	{r7, pc}
 801265e:	bf00      	nop
 8012660:	1fff7a10 	.word	0x1fff7a10
 8012664:	1fff7a14 	.word	0x1fff7a14
 8012668:	1fff7a18 	.word	0x1fff7a18
 801266c:	2000010a 	.word	0x2000010a
 8012670:	2000011a 	.word	0x2000011a

08012674 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8012674:	b480      	push	{r7}
 8012676:	b087      	sub	sp, #28
 8012678:	af00      	add	r7, sp, #0
 801267a:	60f8      	str	r0, [r7, #12]
 801267c:	60b9      	str	r1, [r7, #8]
 801267e:	4613      	mov	r3, r2
 8012680:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8012682:	2300      	movs	r3, #0
 8012684:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8012686:	2300      	movs	r3, #0
 8012688:	75fb      	strb	r3, [r7, #23]
 801268a:	e027      	b.n	80126dc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801268c:	68fb      	ldr	r3, [r7, #12]
 801268e:	0f1b      	lsrs	r3, r3, #28
 8012690:	2b09      	cmp	r3, #9
 8012692:	d80b      	bhi.n	80126ac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8012694:	68fb      	ldr	r3, [r7, #12]
 8012696:	0f1b      	lsrs	r3, r3, #28
 8012698:	b2da      	uxtb	r2, r3
 801269a:	7dfb      	ldrb	r3, [r7, #23]
 801269c:	005b      	lsls	r3, r3, #1
 801269e:	4619      	mov	r1, r3
 80126a0:	68bb      	ldr	r3, [r7, #8]
 80126a2:	440b      	add	r3, r1
 80126a4:	3230      	adds	r2, #48	@ 0x30
 80126a6:	b2d2      	uxtb	r2, r2
 80126a8:	701a      	strb	r2, [r3, #0]
 80126aa:	e00a      	b.n	80126c2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80126ac:	68fb      	ldr	r3, [r7, #12]
 80126ae:	0f1b      	lsrs	r3, r3, #28
 80126b0:	b2da      	uxtb	r2, r3
 80126b2:	7dfb      	ldrb	r3, [r7, #23]
 80126b4:	005b      	lsls	r3, r3, #1
 80126b6:	4619      	mov	r1, r3
 80126b8:	68bb      	ldr	r3, [r7, #8]
 80126ba:	440b      	add	r3, r1
 80126bc:	3237      	adds	r2, #55	@ 0x37
 80126be:	b2d2      	uxtb	r2, r2
 80126c0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80126c2:	68fb      	ldr	r3, [r7, #12]
 80126c4:	011b      	lsls	r3, r3, #4
 80126c6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80126c8:	7dfb      	ldrb	r3, [r7, #23]
 80126ca:	005b      	lsls	r3, r3, #1
 80126cc:	3301      	adds	r3, #1
 80126ce:	68ba      	ldr	r2, [r7, #8]
 80126d0:	4413      	add	r3, r2
 80126d2:	2200      	movs	r2, #0
 80126d4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80126d6:	7dfb      	ldrb	r3, [r7, #23]
 80126d8:	3301      	adds	r3, #1
 80126da:	75fb      	strb	r3, [r7, #23]
 80126dc:	7dfa      	ldrb	r2, [r7, #23]
 80126de:	79fb      	ldrb	r3, [r7, #7]
 80126e0:	429a      	cmp	r2, r3
 80126e2:	d3d3      	bcc.n	801268c <IntToUnicode+0x18>
  }
}
 80126e4:	bf00      	nop
 80126e6:	bf00      	nop
 80126e8:	371c      	adds	r7, #28
 80126ea:	46bd      	mov	sp, r7
 80126ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126f0:	4770      	bx	lr
	...

080126f4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80126f4:	b580      	push	{r7, lr}
 80126f6:	b08a      	sub	sp, #40	@ 0x28
 80126f8:	af00      	add	r7, sp, #0
 80126fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80126fc:	f107 0314 	add.w	r3, r7, #20
 8012700:	2200      	movs	r2, #0
 8012702:	601a      	str	r2, [r3, #0]
 8012704:	605a      	str	r2, [r3, #4]
 8012706:	609a      	str	r2, [r3, #8]
 8012708:	60da      	str	r2, [r3, #12]
 801270a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	681b      	ldr	r3, [r3, #0]
 8012710:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8012714:	d13a      	bne.n	801278c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012716:	2300      	movs	r3, #0
 8012718:	613b      	str	r3, [r7, #16]
 801271a:	4b1e      	ldr	r3, [pc, #120]	@ (8012794 <HAL_PCD_MspInit+0xa0>)
 801271c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801271e:	4a1d      	ldr	r2, [pc, #116]	@ (8012794 <HAL_PCD_MspInit+0xa0>)
 8012720:	f043 0301 	orr.w	r3, r3, #1
 8012724:	6313      	str	r3, [r2, #48]	@ 0x30
 8012726:	4b1b      	ldr	r3, [pc, #108]	@ (8012794 <HAL_PCD_MspInit+0xa0>)
 8012728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801272a:	f003 0301 	and.w	r3, r3, #1
 801272e:	613b      	str	r3, [r7, #16]
 8012730:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8012732:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8012736:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012738:	2302      	movs	r3, #2
 801273a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801273c:	2300      	movs	r3, #0
 801273e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012740:	2303      	movs	r3, #3
 8012742:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8012744:	230a      	movs	r3, #10
 8012746:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012748:	f107 0314 	add.w	r3, r7, #20
 801274c:	4619      	mov	r1, r3
 801274e:	4812      	ldr	r0, [pc, #72]	@ (8012798 <HAL_PCD_MspInit+0xa4>)
 8012750:	f7f8 fd58 	bl	800b204 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8012754:	4b0f      	ldr	r3, [pc, #60]	@ (8012794 <HAL_PCD_MspInit+0xa0>)
 8012756:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012758:	4a0e      	ldr	r2, [pc, #56]	@ (8012794 <HAL_PCD_MspInit+0xa0>)
 801275a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801275e:	6353      	str	r3, [r2, #52]	@ 0x34
 8012760:	2300      	movs	r3, #0
 8012762:	60fb      	str	r3, [r7, #12]
 8012764:	4b0b      	ldr	r3, [pc, #44]	@ (8012794 <HAL_PCD_MspInit+0xa0>)
 8012766:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012768:	4a0a      	ldr	r2, [pc, #40]	@ (8012794 <HAL_PCD_MspInit+0xa0>)
 801276a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 801276e:	6453      	str	r3, [r2, #68]	@ 0x44
 8012770:	4b08      	ldr	r3, [pc, #32]	@ (8012794 <HAL_PCD_MspInit+0xa0>)
 8012772:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012774:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8012778:	60fb      	str	r3, [r7, #12]
 801277a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801277c:	2200      	movs	r2, #0
 801277e:	2100      	movs	r1, #0
 8012780:	2043      	movs	r0, #67	@ 0x43
 8012782:	f7f8 fa1e 	bl	800abc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8012786:	2043      	movs	r0, #67	@ 0x43
 8012788:	f7f8 fa37 	bl	800abfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801278c:	bf00      	nop
 801278e:	3728      	adds	r7, #40	@ 0x28
 8012790:	46bd      	mov	sp, r7
 8012792:	bd80      	pop	{r7, pc}
 8012794:	40023800 	.word	0x40023800
 8012798:	40020000 	.word	0x40020000

0801279c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801279c:	b580      	push	{r7, lr}
 801279e:	b082      	sub	sp, #8
 80127a0:	af00      	add	r7, sp, #0
 80127a2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80127b0:	4619      	mov	r1, r3
 80127b2:	4610      	mov	r0, r2
 80127b4:	f7fe fc1d 	bl	8010ff2 <USBD_LL_SetupStage>
}
 80127b8:	bf00      	nop
 80127ba:	3708      	adds	r7, #8
 80127bc:	46bd      	mov	sp, r7
 80127be:	bd80      	pop	{r7, pc}

080127c0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80127c0:	b580      	push	{r7, lr}
 80127c2:	b082      	sub	sp, #8
 80127c4:	af00      	add	r7, sp, #0
 80127c6:	6078      	str	r0, [r7, #4]
 80127c8:	460b      	mov	r3, r1
 80127ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80127d2:	78fa      	ldrb	r2, [r7, #3]
 80127d4:	6879      	ldr	r1, [r7, #4]
 80127d6:	4613      	mov	r3, r2
 80127d8:	00db      	lsls	r3, r3, #3
 80127da:	4413      	add	r3, r2
 80127dc:	009b      	lsls	r3, r3, #2
 80127de:	440b      	add	r3, r1
 80127e0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80127e4:	681a      	ldr	r2, [r3, #0]
 80127e6:	78fb      	ldrb	r3, [r7, #3]
 80127e8:	4619      	mov	r1, r3
 80127ea:	f7fe fc57 	bl	801109c <USBD_LL_DataOutStage>
}
 80127ee:	bf00      	nop
 80127f0:	3708      	adds	r7, #8
 80127f2:	46bd      	mov	sp, r7
 80127f4:	bd80      	pop	{r7, pc}

080127f6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80127f6:	b580      	push	{r7, lr}
 80127f8:	b082      	sub	sp, #8
 80127fa:	af00      	add	r7, sp, #0
 80127fc:	6078      	str	r0, [r7, #4]
 80127fe:	460b      	mov	r3, r1
 8012800:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8012808:	78fa      	ldrb	r2, [r7, #3]
 801280a:	6879      	ldr	r1, [r7, #4]
 801280c:	4613      	mov	r3, r2
 801280e:	00db      	lsls	r3, r3, #3
 8012810:	4413      	add	r3, r2
 8012812:	009b      	lsls	r3, r3, #2
 8012814:	440b      	add	r3, r1
 8012816:	3320      	adds	r3, #32
 8012818:	681a      	ldr	r2, [r3, #0]
 801281a:	78fb      	ldrb	r3, [r7, #3]
 801281c:	4619      	mov	r1, r3
 801281e:	f7fe fcf9 	bl	8011214 <USBD_LL_DataInStage>
}
 8012822:	bf00      	nop
 8012824:	3708      	adds	r7, #8
 8012826:	46bd      	mov	sp, r7
 8012828:	bd80      	pop	{r7, pc}

0801282a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801282a:	b580      	push	{r7, lr}
 801282c:	b082      	sub	sp, #8
 801282e:	af00      	add	r7, sp, #0
 8012830:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012838:	4618      	mov	r0, r3
 801283a:	f7fe fe3d 	bl	80114b8 <USBD_LL_SOF>
}
 801283e:	bf00      	nop
 8012840:	3708      	adds	r7, #8
 8012842:	46bd      	mov	sp, r7
 8012844:	bd80      	pop	{r7, pc}

08012846 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012846:	b580      	push	{r7, lr}
 8012848:	b084      	sub	sp, #16
 801284a:	af00      	add	r7, sp, #0
 801284c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801284e:	2301      	movs	r3, #1
 8012850:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	79db      	ldrb	r3, [r3, #7]
 8012856:	2b02      	cmp	r3, #2
 8012858:	d001      	beq.n	801285e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801285a:	f7f6 fe67 	bl	800952c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012864:	7bfa      	ldrb	r2, [r7, #15]
 8012866:	4611      	mov	r1, r2
 8012868:	4618      	mov	r0, r3
 801286a:	f7fe fde1 	bl	8011430 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012874:	4618      	mov	r0, r3
 8012876:	f7fe fd88 	bl	801138a <USBD_LL_Reset>
}
 801287a:	bf00      	nop
 801287c:	3710      	adds	r7, #16
 801287e:	46bd      	mov	sp, r7
 8012880:	bd80      	pop	{r7, pc}
	...

08012884 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012884:	b580      	push	{r7, lr}
 8012886:	b082      	sub	sp, #8
 8012888:	af00      	add	r7, sp, #0
 801288a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012892:	4618      	mov	r0, r3
 8012894:	f7fe fddc 	bl	8011450 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	681b      	ldr	r3, [r3, #0]
 801289c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80128a0:	681b      	ldr	r3, [r3, #0]
 80128a2:	687a      	ldr	r2, [r7, #4]
 80128a4:	6812      	ldr	r2, [r2, #0]
 80128a6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80128aa:	f043 0301 	orr.w	r3, r3, #1
 80128ae:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	7adb      	ldrb	r3, [r3, #11]
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d005      	beq.n	80128c4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80128b8:	4b04      	ldr	r3, [pc, #16]	@ (80128cc <HAL_PCD_SuspendCallback+0x48>)
 80128ba:	691b      	ldr	r3, [r3, #16]
 80128bc:	4a03      	ldr	r2, [pc, #12]	@ (80128cc <HAL_PCD_SuspendCallback+0x48>)
 80128be:	f043 0306 	orr.w	r3, r3, #6
 80128c2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80128c4:	bf00      	nop
 80128c6:	3708      	adds	r7, #8
 80128c8:	46bd      	mov	sp, r7
 80128ca:	bd80      	pop	{r7, pc}
 80128cc:	e000ed00 	.word	0xe000ed00

080128d0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80128d0:	b580      	push	{r7, lr}
 80128d2:	b082      	sub	sp, #8
 80128d4:	af00      	add	r7, sp, #0
 80128d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80128de:	4618      	mov	r0, r3
 80128e0:	f7fe fdd2 	bl	8011488 <USBD_LL_Resume>
}
 80128e4:	bf00      	nop
 80128e6:	3708      	adds	r7, #8
 80128e8:	46bd      	mov	sp, r7
 80128ea:	bd80      	pop	{r7, pc}

080128ec <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80128ec:	b580      	push	{r7, lr}
 80128ee:	b082      	sub	sp, #8
 80128f0:	af00      	add	r7, sp, #0
 80128f2:	6078      	str	r0, [r7, #4]
 80128f4:	460b      	mov	r3, r1
 80128f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80128fe:	78fa      	ldrb	r2, [r7, #3]
 8012900:	4611      	mov	r1, r2
 8012902:	4618      	mov	r0, r3
 8012904:	f7fe fe2a 	bl	801155c <USBD_LL_IsoOUTIncomplete>
}
 8012908:	bf00      	nop
 801290a:	3708      	adds	r7, #8
 801290c:	46bd      	mov	sp, r7
 801290e:	bd80      	pop	{r7, pc}

08012910 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012910:	b580      	push	{r7, lr}
 8012912:	b082      	sub	sp, #8
 8012914:	af00      	add	r7, sp, #0
 8012916:	6078      	str	r0, [r7, #4]
 8012918:	460b      	mov	r3, r1
 801291a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012922:	78fa      	ldrb	r2, [r7, #3]
 8012924:	4611      	mov	r1, r2
 8012926:	4618      	mov	r0, r3
 8012928:	f7fe fde6 	bl	80114f8 <USBD_LL_IsoINIncomplete>
}
 801292c:	bf00      	nop
 801292e:	3708      	adds	r7, #8
 8012930:	46bd      	mov	sp, r7
 8012932:	bd80      	pop	{r7, pc}

08012934 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012934:	b580      	push	{r7, lr}
 8012936:	b082      	sub	sp, #8
 8012938:	af00      	add	r7, sp, #0
 801293a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012942:	4618      	mov	r0, r3
 8012944:	f7fe fe3c 	bl	80115c0 <USBD_LL_DevConnected>
}
 8012948:	bf00      	nop
 801294a:	3708      	adds	r7, #8
 801294c:	46bd      	mov	sp, r7
 801294e:	bd80      	pop	{r7, pc}

08012950 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012950:	b580      	push	{r7, lr}
 8012952:	b082      	sub	sp, #8
 8012954:	af00      	add	r7, sp, #0
 8012956:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801295e:	4618      	mov	r0, r3
 8012960:	f7fe fe39 	bl	80115d6 <USBD_LL_DevDisconnected>
}
 8012964:	bf00      	nop
 8012966:	3708      	adds	r7, #8
 8012968:	46bd      	mov	sp, r7
 801296a:	bd80      	pop	{r7, pc}

0801296c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801296c:	b580      	push	{r7, lr}
 801296e:	b082      	sub	sp, #8
 8012970:	af00      	add	r7, sp, #0
 8012972:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	781b      	ldrb	r3, [r3, #0]
 8012978:	2b00      	cmp	r3, #0
 801297a:	d13c      	bne.n	80129f6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801297c:	4a20      	ldr	r2, [pc, #128]	@ (8012a00 <USBD_LL_Init+0x94>)
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	4a1e      	ldr	r2, [pc, #120]	@ (8012a00 <USBD_LL_Init+0x94>)
 8012988:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801298c:	4b1c      	ldr	r3, [pc, #112]	@ (8012a00 <USBD_LL_Init+0x94>)
 801298e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8012992:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8012994:	4b1a      	ldr	r3, [pc, #104]	@ (8012a00 <USBD_LL_Init+0x94>)
 8012996:	2204      	movs	r2, #4
 8012998:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801299a:	4b19      	ldr	r3, [pc, #100]	@ (8012a00 <USBD_LL_Init+0x94>)
 801299c:	2202      	movs	r2, #2
 801299e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80129a0:	4b17      	ldr	r3, [pc, #92]	@ (8012a00 <USBD_LL_Init+0x94>)
 80129a2:	2200      	movs	r2, #0
 80129a4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80129a6:	4b16      	ldr	r3, [pc, #88]	@ (8012a00 <USBD_LL_Init+0x94>)
 80129a8:	2202      	movs	r2, #2
 80129aa:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80129ac:	4b14      	ldr	r3, [pc, #80]	@ (8012a00 <USBD_LL_Init+0x94>)
 80129ae:	2200      	movs	r2, #0
 80129b0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80129b2:	4b13      	ldr	r3, [pc, #76]	@ (8012a00 <USBD_LL_Init+0x94>)
 80129b4:	2200      	movs	r2, #0
 80129b6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80129b8:	4b11      	ldr	r3, [pc, #68]	@ (8012a00 <USBD_LL_Init+0x94>)
 80129ba:	2200      	movs	r2, #0
 80129bc:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80129be:	4b10      	ldr	r3, [pc, #64]	@ (8012a00 <USBD_LL_Init+0x94>)
 80129c0:	2200      	movs	r2, #0
 80129c2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80129c4:	4b0e      	ldr	r3, [pc, #56]	@ (8012a00 <USBD_LL_Init+0x94>)
 80129c6:	2200      	movs	r2, #0
 80129c8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80129ca:	480d      	ldr	r0, [pc, #52]	@ (8012a00 <USBD_LL_Init+0x94>)
 80129cc:	f7f9 fa65 	bl	800be9a <HAL_PCD_Init>
 80129d0:	4603      	mov	r3, r0
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d001      	beq.n	80129da <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80129d6:	f7f6 fda9 	bl	800952c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80129da:	2180      	movs	r1, #128	@ 0x80
 80129dc:	4808      	ldr	r0, [pc, #32]	@ (8012a00 <USBD_LL_Init+0x94>)
 80129de:	f7fa fc7a 	bl	800d2d6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80129e2:	2240      	movs	r2, #64	@ 0x40
 80129e4:	2100      	movs	r1, #0
 80129e6:	4806      	ldr	r0, [pc, #24]	@ (8012a00 <USBD_LL_Init+0x94>)
 80129e8:	f7fa fc2e 	bl	800d248 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80129ec:	2280      	movs	r2, #128	@ 0x80
 80129ee:	2101      	movs	r1, #1
 80129f0:	4803      	ldr	r0, [pc, #12]	@ (8012a00 <USBD_LL_Init+0x94>)
 80129f2:	f7fa fc29 	bl	800d248 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80129f6:	2300      	movs	r3, #0
}
 80129f8:	4618      	mov	r0, r3
 80129fa:	3708      	adds	r7, #8
 80129fc:	46bd      	mov	sp, r7
 80129fe:	bd80      	pop	{r7, pc}
 8012a00:	20000c14 	.word	0x20000c14

08012a04 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8012a04:	b580      	push	{r7, lr}
 8012a06:	b084      	sub	sp, #16
 8012a08:	af00      	add	r7, sp, #0
 8012a0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012a0c:	2300      	movs	r3, #0
 8012a0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012a10:	2300      	movs	r3, #0
 8012a12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012a1a:	4618      	mov	r0, r3
 8012a1c:	f7f9 fb4c 	bl	800c0b8 <HAL_PCD_Start>
 8012a20:	4603      	mov	r3, r0
 8012a22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012a24:	7bfb      	ldrb	r3, [r7, #15]
 8012a26:	4618      	mov	r0, r3
 8012a28:	f000 f930 	bl	8012c8c <USBD_Get_USB_Status>
 8012a2c:	4603      	mov	r3, r0
 8012a2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012a30:	7bbb      	ldrb	r3, [r7, #14]
}
 8012a32:	4618      	mov	r0, r3
 8012a34:	3710      	adds	r7, #16
 8012a36:	46bd      	mov	sp, r7
 8012a38:	bd80      	pop	{r7, pc}

08012a3a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8012a3a:	b580      	push	{r7, lr}
 8012a3c:	b084      	sub	sp, #16
 8012a3e:	af00      	add	r7, sp, #0
 8012a40:	6078      	str	r0, [r7, #4]
 8012a42:	4608      	mov	r0, r1
 8012a44:	4611      	mov	r1, r2
 8012a46:	461a      	mov	r2, r3
 8012a48:	4603      	mov	r3, r0
 8012a4a:	70fb      	strb	r3, [r7, #3]
 8012a4c:	460b      	mov	r3, r1
 8012a4e:	70bb      	strb	r3, [r7, #2]
 8012a50:	4613      	mov	r3, r2
 8012a52:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012a54:	2300      	movs	r3, #0
 8012a56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012a58:	2300      	movs	r3, #0
 8012a5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8012a62:	78bb      	ldrb	r3, [r7, #2]
 8012a64:	883a      	ldrh	r2, [r7, #0]
 8012a66:	78f9      	ldrb	r1, [r7, #3]
 8012a68:	f7fa f820 	bl	800caac <HAL_PCD_EP_Open>
 8012a6c:	4603      	mov	r3, r0
 8012a6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012a70:	7bfb      	ldrb	r3, [r7, #15]
 8012a72:	4618      	mov	r0, r3
 8012a74:	f000 f90a 	bl	8012c8c <USBD_Get_USB_Status>
 8012a78:	4603      	mov	r3, r0
 8012a7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012a7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8012a7e:	4618      	mov	r0, r3
 8012a80:	3710      	adds	r7, #16
 8012a82:	46bd      	mov	sp, r7
 8012a84:	bd80      	pop	{r7, pc}

08012a86 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012a86:	b580      	push	{r7, lr}
 8012a88:	b084      	sub	sp, #16
 8012a8a:	af00      	add	r7, sp, #0
 8012a8c:	6078      	str	r0, [r7, #4]
 8012a8e:	460b      	mov	r3, r1
 8012a90:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012a92:	2300      	movs	r3, #0
 8012a94:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012a96:	2300      	movs	r3, #0
 8012a98:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012aa0:	78fa      	ldrb	r2, [r7, #3]
 8012aa2:	4611      	mov	r1, r2
 8012aa4:	4618      	mov	r0, r3
 8012aa6:	f7fa f86b 	bl	800cb80 <HAL_PCD_EP_Close>
 8012aaa:	4603      	mov	r3, r0
 8012aac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012aae:	7bfb      	ldrb	r3, [r7, #15]
 8012ab0:	4618      	mov	r0, r3
 8012ab2:	f000 f8eb 	bl	8012c8c <USBD_Get_USB_Status>
 8012ab6:	4603      	mov	r3, r0
 8012ab8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012aba:	7bbb      	ldrb	r3, [r7, #14]
}
 8012abc:	4618      	mov	r0, r3
 8012abe:	3710      	adds	r7, #16
 8012ac0:	46bd      	mov	sp, r7
 8012ac2:	bd80      	pop	{r7, pc}

08012ac4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012ac4:	b580      	push	{r7, lr}
 8012ac6:	b084      	sub	sp, #16
 8012ac8:	af00      	add	r7, sp, #0
 8012aca:	6078      	str	r0, [r7, #4]
 8012acc:	460b      	mov	r3, r1
 8012ace:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012ad0:	2300      	movs	r3, #0
 8012ad2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012ad4:	2300      	movs	r3, #0
 8012ad6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012ade:	78fa      	ldrb	r2, [r7, #3]
 8012ae0:	4611      	mov	r1, r2
 8012ae2:	4618      	mov	r0, r3
 8012ae4:	f7fa f90b 	bl	800ccfe <HAL_PCD_EP_SetStall>
 8012ae8:	4603      	mov	r3, r0
 8012aea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012aec:	7bfb      	ldrb	r3, [r7, #15]
 8012aee:	4618      	mov	r0, r3
 8012af0:	f000 f8cc 	bl	8012c8c <USBD_Get_USB_Status>
 8012af4:	4603      	mov	r3, r0
 8012af6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012af8:	7bbb      	ldrb	r3, [r7, #14]
}
 8012afa:	4618      	mov	r0, r3
 8012afc:	3710      	adds	r7, #16
 8012afe:	46bd      	mov	sp, r7
 8012b00:	bd80      	pop	{r7, pc}

08012b02 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012b02:	b580      	push	{r7, lr}
 8012b04:	b084      	sub	sp, #16
 8012b06:	af00      	add	r7, sp, #0
 8012b08:	6078      	str	r0, [r7, #4]
 8012b0a:	460b      	mov	r3, r1
 8012b0c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012b0e:	2300      	movs	r3, #0
 8012b10:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012b12:	2300      	movs	r3, #0
 8012b14:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012b1c:	78fa      	ldrb	r2, [r7, #3]
 8012b1e:	4611      	mov	r1, r2
 8012b20:	4618      	mov	r0, r3
 8012b22:	f7fa f94f 	bl	800cdc4 <HAL_PCD_EP_ClrStall>
 8012b26:	4603      	mov	r3, r0
 8012b28:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012b2a:	7bfb      	ldrb	r3, [r7, #15]
 8012b2c:	4618      	mov	r0, r3
 8012b2e:	f000 f8ad 	bl	8012c8c <USBD_Get_USB_Status>
 8012b32:	4603      	mov	r3, r0
 8012b34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012b36:	7bbb      	ldrb	r3, [r7, #14]
}
 8012b38:	4618      	mov	r0, r3
 8012b3a:	3710      	adds	r7, #16
 8012b3c:	46bd      	mov	sp, r7
 8012b3e:	bd80      	pop	{r7, pc}

08012b40 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012b40:	b480      	push	{r7}
 8012b42:	b085      	sub	sp, #20
 8012b44:	af00      	add	r7, sp, #0
 8012b46:	6078      	str	r0, [r7, #4]
 8012b48:	460b      	mov	r3, r1
 8012b4a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012b52:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8012b54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	da0b      	bge.n	8012b74 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8012b5c:	78fb      	ldrb	r3, [r7, #3]
 8012b5e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8012b62:	68f9      	ldr	r1, [r7, #12]
 8012b64:	4613      	mov	r3, r2
 8012b66:	00db      	lsls	r3, r3, #3
 8012b68:	4413      	add	r3, r2
 8012b6a:	009b      	lsls	r3, r3, #2
 8012b6c:	440b      	add	r3, r1
 8012b6e:	3316      	adds	r3, #22
 8012b70:	781b      	ldrb	r3, [r3, #0]
 8012b72:	e00b      	b.n	8012b8c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8012b74:	78fb      	ldrb	r3, [r7, #3]
 8012b76:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8012b7a:	68f9      	ldr	r1, [r7, #12]
 8012b7c:	4613      	mov	r3, r2
 8012b7e:	00db      	lsls	r3, r3, #3
 8012b80:	4413      	add	r3, r2
 8012b82:	009b      	lsls	r3, r3, #2
 8012b84:	440b      	add	r3, r1
 8012b86:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8012b8a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012b8c:	4618      	mov	r0, r3
 8012b8e:	3714      	adds	r7, #20
 8012b90:	46bd      	mov	sp, r7
 8012b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b96:	4770      	bx	lr

08012b98 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8012b98:	b580      	push	{r7, lr}
 8012b9a:	b084      	sub	sp, #16
 8012b9c:	af00      	add	r7, sp, #0
 8012b9e:	6078      	str	r0, [r7, #4]
 8012ba0:	460b      	mov	r3, r1
 8012ba2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012ba4:	2300      	movs	r3, #0
 8012ba6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012ba8:	2300      	movs	r3, #0
 8012baa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012bb2:	78fa      	ldrb	r2, [r7, #3]
 8012bb4:	4611      	mov	r1, r2
 8012bb6:	4618      	mov	r0, r3
 8012bb8:	f7f9 ff54 	bl	800ca64 <HAL_PCD_SetAddress>
 8012bbc:	4603      	mov	r3, r0
 8012bbe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012bc0:	7bfb      	ldrb	r3, [r7, #15]
 8012bc2:	4618      	mov	r0, r3
 8012bc4:	f000 f862 	bl	8012c8c <USBD_Get_USB_Status>
 8012bc8:	4603      	mov	r3, r0
 8012bca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012bcc:	7bbb      	ldrb	r3, [r7, #14]
}
 8012bce:	4618      	mov	r0, r3
 8012bd0:	3710      	adds	r7, #16
 8012bd2:	46bd      	mov	sp, r7
 8012bd4:	bd80      	pop	{r7, pc}

08012bd6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012bd6:	b580      	push	{r7, lr}
 8012bd8:	b086      	sub	sp, #24
 8012bda:	af00      	add	r7, sp, #0
 8012bdc:	60f8      	str	r0, [r7, #12]
 8012bde:	607a      	str	r2, [r7, #4]
 8012be0:	603b      	str	r3, [r7, #0]
 8012be2:	460b      	mov	r3, r1
 8012be4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012be6:	2300      	movs	r3, #0
 8012be8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012bea:	2300      	movs	r3, #0
 8012bec:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8012bee:	68fb      	ldr	r3, [r7, #12]
 8012bf0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8012bf4:	7af9      	ldrb	r1, [r7, #11]
 8012bf6:	683b      	ldr	r3, [r7, #0]
 8012bf8:	687a      	ldr	r2, [r7, #4]
 8012bfa:	f7fa f846 	bl	800cc8a <HAL_PCD_EP_Transmit>
 8012bfe:	4603      	mov	r3, r0
 8012c00:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012c02:	7dfb      	ldrb	r3, [r7, #23]
 8012c04:	4618      	mov	r0, r3
 8012c06:	f000 f841 	bl	8012c8c <USBD_Get_USB_Status>
 8012c0a:	4603      	mov	r3, r0
 8012c0c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012c0e:	7dbb      	ldrb	r3, [r7, #22]
}
 8012c10:	4618      	mov	r0, r3
 8012c12:	3718      	adds	r7, #24
 8012c14:	46bd      	mov	sp, r7
 8012c16:	bd80      	pop	{r7, pc}

08012c18 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012c18:	b580      	push	{r7, lr}
 8012c1a:	b086      	sub	sp, #24
 8012c1c:	af00      	add	r7, sp, #0
 8012c1e:	60f8      	str	r0, [r7, #12]
 8012c20:	607a      	str	r2, [r7, #4]
 8012c22:	603b      	str	r3, [r7, #0]
 8012c24:	460b      	mov	r3, r1
 8012c26:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012c28:	2300      	movs	r3, #0
 8012c2a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012c2c:	2300      	movs	r3, #0
 8012c2e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8012c30:	68fb      	ldr	r3, [r7, #12]
 8012c32:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8012c36:	7af9      	ldrb	r1, [r7, #11]
 8012c38:	683b      	ldr	r3, [r7, #0]
 8012c3a:	687a      	ldr	r2, [r7, #4]
 8012c3c:	f7f9 ffea 	bl	800cc14 <HAL_PCD_EP_Receive>
 8012c40:	4603      	mov	r3, r0
 8012c42:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012c44:	7dfb      	ldrb	r3, [r7, #23]
 8012c46:	4618      	mov	r0, r3
 8012c48:	f000 f820 	bl	8012c8c <USBD_Get_USB_Status>
 8012c4c:	4603      	mov	r3, r0
 8012c4e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012c50:	7dbb      	ldrb	r3, [r7, #22]
}
 8012c52:	4618      	mov	r0, r3
 8012c54:	3718      	adds	r7, #24
 8012c56:	46bd      	mov	sp, r7
 8012c58:	bd80      	pop	{r7, pc}
	...

08012c5c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8012c5c:	b480      	push	{r7}
 8012c5e:	b083      	sub	sp, #12
 8012c60:	af00      	add	r7, sp, #0
 8012c62:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8012c64:	4b03      	ldr	r3, [pc, #12]	@ (8012c74 <USBD_static_malloc+0x18>)
}
 8012c66:	4618      	mov	r0, r3
 8012c68:	370c      	adds	r7, #12
 8012c6a:	46bd      	mov	sp, r7
 8012c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c70:	4770      	bx	lr
 8012c72:	bf00      	nop
 8012c74:	200010f8 	.word	0x200010f8

08012c78 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8012c78:	b480      	push	{r7}
 8012c7a:	b083      	sub	sp, #12
 8012c7c:	af00      	add	r7, sp, #0
 8012c7e:	6078      	str	r0, [r7, #4]

}
 8012c80:	bf00      	nop
 8012c82:	370c      	adds	r7, #12
 8012c84:	46bd      	mov	sp, r7
 8012c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c8a:	4770      	bx	lr

08012c8c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012c8c:	b480      	push	{r7}
 8012c8e:	b085      	sub	sp, #20
 8012c90:	af00      	add	r7, sp, #0
 8012c92:	4603      	mov	r3, r0
 8012c94:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012c96:	2300      	movs	r3, #0
 8012c98:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8012c9a:	79fb      	ldrb	r3, [r7, #7]
 8012c9c:	2b03      	cmp	r3, #3
 8012c9e:	d817      	bhi.n	8012cd0 <USBD_Get_USB_Status+0x44>
 8012ca0:	a201      	add	r2, pc, #4	@ (adr r2, 8012ca8 <USBD_Get_USB_Status+0x1c>)
 8012ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ca6:	bf00      	nop
 8012ca8:	08012cb9 	.word	0x08012cb9
 8012cac:	08012cbf 	.word	0x08012cbf
 8012cb0:	08012cc5 	.word	0x08012cc5
 8012cb4:	08012ccb 	.word	0x08012ccb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8012cb8:	2300      	movs	r3, #0
 8012cba:	73fb      	strb	r3, [r7, #15]
    break;
 8012cbc:	e00b      	b.n	8012cd6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012cbe:	2303      	movs	r3, #3
 8012cc0:	73fb      	strb	r3, [r7, #15]
    break;
 8012cc2:	e008      	b.n	8012cd6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012cc4:	2301      	movs	r3, #1
 8012cc6:	73fb      	strb	r3, [r7, #15]
    break;
 8012cc8:	e005      	b.n	8012cd6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012cca:	2303      	movs	r3, #3
 8012ccc:	73fb      	strb	r3, [r7, #15]
    break;
 8012cce:	e002      	b.n	8012cd6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8012cd0:	2303      	movs	r3, #3
 8012cd2:	73fb      	strb	r3, [r7, #15]
    break;
 8012cd4:	bf00      	nop
  }
  return usb_status;
 8012cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8012cd8:	4618      	mov	r0, r3
 8012cda:	3714      	adds	r7, #20
 8012cdc:	46bd      	mov	sp, r7
 8012cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ce2:	4770      	bx	lr

08012ce4 <__cvt>:
 8012ce4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012ce8:	ec57 6b10 	vmov	r6, r7, d0
 8012cec:	2f00      	cmp	r7, #0
 8012cee:	460c      	mov	r4, r1
 8012cf0:	4619      	mov	r1, r3
 8012cf2:	463b      	mov	r3, r7
 8012cf4:	bfbb      	ittet	lt
 8012cf6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8012cfa:	461f      	movlt	r7, r3
 8012cfc:	2300      	movge	r3, #0
 8012cfe:	232d      	movlt	r3, #45	@ 0x2d
 8012d00:	700b      	strb	r3, [r1, #0]
 8012d02:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012d04:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8012d08:	4691      	mov	r9, r2
 8012d0a:	f023 0820 	bic.w	r8, r3, #32
 8012d0e:	bfbc      	itt	lt
 8012d10:	4632      	movlt	r2, r6
 8012d12:	4616      	movlt	r6, r2
 8012d14:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8012d18:	d005      	beq.n	8012d26 <__cvt+0x42>
 8012d1a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8012d1e:	d100      	bne.n	8012d22 <__cvt+0x3e>
 8012d20:	3401      	adds	r4, #1
 8012d22:	2102      	movs	r1, #2
 8012d24:	e000      	b.n	8012d28 <__cvt+0x44>
 8012d26:	2103      	movs	r1, #3
 8012d28:	ab03      	add	r3, sp, #12
 8012d2a:	9301      	str	r3, [sp, #4]
 8012d2c:	ab02      	add	r3, sp, #8
 8012d2e:	9300      	str	r3, [sp, #0]
 8012d30:	ec47 6b10 	vmov	d0, r6, r7
 8012d34:	4653      	mov	r3, sl
 8012d36:	4622      	mov	r2, r4
 8012d38:	f000 ff5e 	bl	8013bf8 <_dtoa_r>
 8012d3c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8012d40:	4605      	mov	r5, r0
 8012d42:	d119      	bne.n	8012d78 <__cvt+0x94>
 8012d44:	f019 0f01 	tst.w	r9, #1
 8012d48:	d00e      	beq.n	8012d68 <__cvt+0x84>
 8012d4a:	eb00 0904 	add.w	r9, r0, r4
 8012d4e:	2200      	movs	r2, #0
 8012d50:	2300      	movs	r3, #0
 8012d52:	4630      	mov	r0, r6
 8012d54:	4639      	mov	r1, r7
 8012d56:	f7f5 febf 	bl	8008ad8 <__aeabi_dcmpeq>
 8012d5a:	b108      	cbz	r0, 8012d60 <__cvt+0x7c>
 8012d5c:	f8cd 900c 	str.w	r9, [sp, #12]
 8012d60:	2230      	movs	r2, #48	@ 0x30
 8012d62:	9b03      	ldr	r3, [sp, #12]
 8012d64:	454b      	cmp	r3, r9
 8012d66:	d31e      	bcc.n	8012da6 <__cvt+0xc2>
 8012d68:	9b03      	ldr	r3, [sp, #12]
 8012d6a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012d6c:	1b5b      	subs	r3, r3, r5
 8012d6e:	4628      	mov	r0, r5
 8012d70:	6013      	str	r3, [r2, #0]
 8012d72:	b004      	add	sp, #16
 8012d74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d78:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8012d7c:	eb00 0904 	add.w	r9, r0, r4
 8012d80:	d1e5      	bne.n	8012d4e <__cvt+0x6a>
 8012d82:	7803      	ldrb	r3, [r0, #0]
 8012d84:	2b30      	cmp	r3, #48	@ 0x30
 8012d86:	d10a      	bne.n	8012d9e <__cvt+0xba>
 8012d88:	2200      	movs	r2, #0
 8012d8a:	2300      	movs	r3, #0
 8012d8c:	4630      	mov	r0, r6
 8012d8e:	4639      	mov	r1, r7
 8012d90:	f7f5 fea2 	bl	8008ad8 <__aeabi_dcmpeq>
 8012d94:	b918      	cbnz	r0, 8012d9e <__cvt+0xba>
 8012d96:	f1c4 0401 	rsb	r4, r4, #1
 8012d9a:	f8ca 4000 	str.w	r4, [sl]
 8012d9e:	f8da 3000 	ldr.w	r3, [sl]
 8012da2:	4499      	add	r9, r3
 8012da4:	e7d3      	b.n	8012d4e <__cvt+0x6a>
 8012da6:	1c59      	adds	r1, r3, #1
 8012da8:	9103      	str	r1, [sp, #12]
 8012daa:	701a      	strb	r2, [r3, #0]
 8012dac:	e7d9      	b.n	8012d62 <__cvt+0x7e>

08012dae <__exponent>:
 8012dae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012db0:	2900      	cmp	r1, #0
 8012db2:	bfba      	itte	lt
 8012db4:	4249      	neglt	r1, r1
 8012db6:	232d      	movlt	r3, #45	@ 0x2d
 8012db8:	232b      	movge	r3, #43	@ 0x2b
 8012dba:	2909      	cmp	r1, #9
 8012dbc:	7002      	strb	r2, [r0, #0]
 8012dbe:	7043      	strb	r3, [r0, #1]
 8012dc0:	dd29      	ble.n	8012e16 <__exponent+0x68>
 8012dc2:	f10d 0307 	add.w	r3, sp, #7
 8012dc6:	461d      	mov	r5, r3
 8012dc8:	270a      	movs	r7, #10
 8012dca:	461a      	mov	r2, r3
 8012dcc:	fbb1 f6f7 	udiv	r6, r1, r7
 8012dd0:	fb07 1416 	mls	r4, r7, r6, r1
 8012dd4:	3430      	adds	r4, #48	@ 0x30
 8012dd6:	f802 4c01 	strb.w	r4, [r2, #-1]
 8012dda:	460c      	mov	r4, r1
 8012ddc:	2c63      	cmp	r4, #99	@ 0x63
 8012dde:	f103 33ff 	add.w	r3, r3, #4294967295
 8012de2:	4631      	mov	r1, r6
 8012de4:	dcf1      	bgt.n	8012dca <__exponent+0x1c>
 8012de6:	3130      	adds	r1, #48	@ 0x30
 8012de8:	1e94      	subs	r4, r2, #2
 8012dea:	f803 1c01 	strb.w	r1, [r3, #-1]
 8012dee:	1c41      	adds	r1, r0, #1
 8012df0:	4623      	mov	r3, r4
 8012df2:	42ab      	cmp	r3, r5
 8012df4:	d30a      	bcc.n	8012e0c <__exponent+0x5e>
 8012df6:	f10d 0309 	add.w	r3, sp, #9
 8012dfa:	1a9b      	subs	r3, r3, r2
 8012dfc:	42ac      	cmp	r4, r5
 8012dfe:	bf88      	it	hi
 8012e00:	2300      	movhi	r3, #0
 8012e02:	3302      	adds	r3, #2
 8012e04:	4403      	add	r3, r0
 8012e06:	1a18      	subs	r0, r3, r0
 8012e08:	b003      	add	sp, #12
 8012e0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012e0c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8012e10:	f801 6f01 	strb.w	r6, [r1, #1]!
 8012e14:	e7ed      	b.n	8012df2 <__exponent+0x44>
 8012e16:	2330      	movs	r3, #48	@ 0x30
 8012e18:	3130      	adds	r1, #48	@ 0x30
 8012e1a:	7083      	strb	r3, [r0, #2]
 8012e1c:	70c1      	strb	r1, [r0, #3]
 8012e1e:	1d03      	adds	r3, r0, #4
 8012e20:	e7f1      	b.n	8012e06 <__exponent+0x58>
	...

08012e24 <_printf_float>:
 8012e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e28:	b08d      	sub	sp, #52	@ 0x34
 8012e2a:	460c      	mov	r4, r1
 8012e2c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8012e30:	4616      	mov	r6, r2
 8012e32:	461f      	mov	r7, r3
 8012e34:	4605      	mov	r5, r0
 8012e36:	f000 fddf 	bl	80139f8 <_localeconv_r>
 8012e3a:	6803      	ldr	r3, [r0, #0]
 8012e3c:	9304      	str	r3, [sp, #16]
 8012e3e:	4618      	mov	r0, r3
 8012e40:	f7f5 fa1e 	bl	8008280 <strlen>
 8012e44:	2300      	movs	r3, #0
 8012e46:	930a      	str	r3, [sp, #40]	@ 0x28
 8012e48:	f8d8 3000 	ldr.w	r3, [r8]
 8012e4c:	9005      	str	r0, [sp, #20]
 8012e4e:	3307      	adds	r3, #7
 8012e50:	f023 0307 	bic.w	r3, r3, #7
 8012e54:	f103 0208 	add.w	r2, r3, #8
 8012e58:	f894 a018 	ldrb.w	sl, [r4, #24]
 8012e5c:	f8d4 b000 	ldr.w	fp, [r4]
 8012e60:	f8c8 2000 	str.w	r2, [r8]
 8012e64:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012e68:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8012e6c:	9307      	str	r3, [sp, #28]
 8012e6e:	f8cd 8018 	str.w	r8, [sp, #24]
 8012e72:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8012e76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012e7a:	4b9c      	ldr	r3, [pc, #624]	@ (80130ec <_printf_float+0x2c8>)
 8012e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8012e80:	f7f5 fe5c 	bl	8008b3c <__aeabi_dcmpun>
 8012e84:	bb70      	cbnz	r0, 8012ee4 <_printf_float+0xc0>
 8012e86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012e8a:	4b98      	ldr	r3, [pc, #608]	@ (80130ec <_printf_float+0x2c8>)
 8012e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8012e90:	f7f5 fe36 	bl	8008b00 <__aeabi_dcmple>
 8012e94:	bb30      	cbnz	r0, 8012ee4 <_printf_float+0xc0>
 8012e96:	2200      	movs	r2, #0
 8012e98:	2300      	movs	r3, #0
 8012e9a:	4640      	mov	r0, r8
 8012e9c:	4649      	mov	r1, r9
 8012e9e:	f7f5 fe25 	bl	8008aec <__aeabi_dcmplt>
 8012ea2:	b110      	cbz	r0, 8012eaa <_printf_float+0x86>
 8012ea4:	232d      	movs	r3, #45	@ 0x2d
 8012ea6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012eaa:	4a91      	ldr	r2, [pc, #580]	@ (80130f0 <_printf_float+0x2cc>)
 8012eac:	4b91      	ldr	r3, [pc, #580]	@ (80130f4 <_printf_float+0x2d0>)
 8012eae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8012eb2:	bf8c      	ite	hi
 8012eb4:	4690      	movhi	r8, r2
 8012eb6:	4698      	movls	r8, r3
 8012eb8:	2303      	movs	r3, #3
 8012eba:	6123      	str	r3, [r4, #16]
 8012ebc:	f02b 0304 	bic.w	r3, fp, #4
 8012ec0:	6023      	str	r3, [r4, #0]
 8012ec2:	f04f 0900 	mov.w	r9, #0
 8012ec6:	9700      	str	r7, [sp, #0]
 8012ec8:	4633      	mov	r3, r6
 8012eca:	aa0b      	add	r2, sp, #44	@ 0x2c
 8012ecc:	4621      	mov	r1, r4
 8012ece:	4628      	mov	r0, r5
 8012ed0:	f000 f9d2 	bl	8013278 <_printf_common>
 8012ed4:	3001      	adds	r0, #1
 8012ed6:	f040 808d 	bne.w	8012ff4 <_printf_float+0x1d0>
 8012eda:	f04f 30ff 	mov.w	r0, #4294967295
 8012ede:	b00d      	add	sp, #52	@ 0x34
 8012ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ee4:	4642      	mov	r2, r8
 8012ee6:	464b      	mov	r3, r9
 8012ee8:	4640      	mov	r0, r8
 8012eea:	4649      	mov	r1, r9
 8012eec:	f7f5 fe26 	bl	8008b3c <__aeabi_dcmpun>
 8012ef0:	b140      	cbz	r0, 8012f04 <_printf_float+0xe0>
 8012ef2:	464b      	mov	r3, r9
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	bfbc      	itt	lt
 8012ef8:	232d      	movlt	r3, #45	@ 0x2d
 8012efa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8012efe:	4a7e      	ldr	r2, [pc, #504]	@ (80130f8 <_printf_float+0x2d4>)
 8012f00:	4b7e      	ldr	r3, [pc, #504]	@ (80130fc <_printf_float+0x2d8>)
 8012f02:	e7d4      	b.n	8012eae <_printf_float+0x8a>
 8012f04:	6863      	ldr	r3, [r4, #4]
 8012f06:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8012f0a:	9206      	str	r2, [sp, #24]
 8012f0c:	1c5a      	adds	r2, r3, #1
 8012f0e:	d13b      	bne.n	8012f88 <_printf_float+0x164>
 8012f10:	2306      	movs	r3, #6
 8012f12:	6063      	str	r3, [r4, #4]
 8012f14:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8012f18:	2300      	movs	r3, #0
 8012f1a:	6022      	str	r2, [r4, #0]
 8012f1c:	9303      	str	r3, [sp, #12]
 8012f1e:	ab0a      	add	r3, sp, #40	@ 0x28
 8012f20:	e9cd a301 	strd	sl, r3, [sp, #4]
 8012f24:	ab09      	add	r3, sp, #36	@ 0x24
 8012f26:	9300      	str	r3, [sp, #0]
 8012f28:	6861      	ldr	r1, [r4, #4]
 8012f2a:	ec49 8b10 	vmov	d0, r8, r9
 8012f2e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8012f32:	4628      	mov	r0, r5
 8012f34:	f7ff fed6 	bl	8012ce4 <__cvt>
 8012f38:	9b06      	ldr	r3, [sp, #24]
 8012f3a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012f3c:	2b47      	cmp	r3, #71	@ 0x47
 8012f3e:	4680      	mov	r8, r0
 8012f40:	d129      	bne.n	8012f96 <_printf_float+0x172>
 8012f42:	1cc8      	adds	r0, r1, #3
 8012f44:	db02      	blt.n	8012f4c <_printf_float+0x128>
 8012f46:	6863      	ldr	r3, [r4, #4]
 8012f48:	4299      	cmp	r1, r3
 8012f4a:	dd41      	ble.n	8012fd0 <_printf_float+0x1ac>
 8012f4c:	f1aa 0a02 	sub.w	sl, sl, #2
 8012f50:	fa5f fa8a 	uxtb.w	sl, sl
 8012f54:	3901      	subs	r1, #1
 8012f56:	4652      	mov	r2, sl
 8012f58:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8012f5c:	9109      	str	r1, [sp, #36]	@ 0x24
 8012f5e:	f7ff ff26 	bl	8012dae <__exponent>
 8012f62:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012f64:	1813      	adds	r3, r2, r0
 8012f66:	2a01      	cmp	r2, #1
 8012f68:	4681      	mov	r9, r0
 8012f6a:	6123      	str	r3, [r4, #16]
 8012f6c:	dc02      	bgt.n	8012f74 <_printf_float+0x150>
 8012f6e:	6822      	ldr	r2, [r4, #0]
 8012f70:	07d2      	lsls	r2, r2, #31
 8012f72:	d501      	bpl.n	8012f78 <_printf_float+0x154>
 8012f74:	3301      	adds	r3, #1
 8012f76:	6123      	str	r3, [r4, #16]
 8012f78:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	d0a2      	beq.n	8012ec6 <_printf_float+0xa2>
 8012f80:	232d      	movs	r3, #45	@ 0x2d
 8012f82:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012f86:	e79e      	b.n	8012ec6 <_printf_float+0xa2>
 8012f88:	9a06      	ldr	r2, [sp, #24]
 8012f8a:	2a47      	cmp	r2, #71	@ 0x47
 8012f8c:	d1c2      	bne.n	8012f14 <_printf_float+0xf0>
 8012f8e:	2b00      	cmp	r3, #0
 8012f90:	d1c0      	bne.n	8012f14 <_printf_float+0xf0>
 8012f92:	2301      	movs	r3, #1
 8012f94:	e7bd      	b.n	8012f12 <_printf_float+0xee>
 8012f96:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8012f9a:	d9db      	bls.n	8012f54 <_printf_float+0x130>
 8012f9c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8012fa0:	d118      	bne.n	8012fd4 <_printf_float+0x1b0>
 8012fa2:	2900      	cmp	r1, #0
 8012fa4:	6863      	ldr	r3, [r4, #4]
 8012fa6:	dd0b      	ble.n	8012fc0 <_printf_float+0x19c>
 8012fa8:	6121      	str	r1, [r4, #16]
 8012faa:	b913      	cbnz	r3, 8012fb2 <_printf_float+0x18e>
 8012fac:	6822      	ldr	r2, [r4, #0]
 8012fae:	07d0      	lsls	r0, r2, #31
 8012fb0:	d502      	bpl.n	8012fb8 <_printf_float+0x194>
 8012fb2:	3301      	adds	r3, #1
 8012fb4:	440b      	add	r3, r1
 8012fb6:	6123      	str	r3, [r4, #16]
 8012fb8:	65a1      	str	r1, [r4, #88]	@ 0x58
 8012fba:	f04f 0900 	mov.w	r9, #0
 8012fbe:	e7db      	b.n	8012f78 <_printf_float+0x154>
 8012fc0:	b913      	cbnz	r3, 8012fc8 <_printf_float+0x1a4>
 8012fc2:	6822      	ldr	r2, [r4, #0]
 8012fc4:	07d2      	lsls	r2, r2, #31
 8012fc6:	d501      	bpl.n	8012fcc <_printf_float+0x1a8>
 8012fc8:	3302      	adds	r3, #2
 8012fca:	e7f4      	b.n	8012fb6 <_printf_float+0x192>
 8012fcc:	2301      	movs	r3, #1
 8012fce:	e7f2      	b.n	8012fb6 <_printf_float+0x192>
 8012fd0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8012fd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012fd6:	4299      	cmp	r1, r3
 8012fd8:	db05      	blt.n	8012fe6 <_printf_float+0x1c2>
 8012fda:	6823      	ldr	r3, [r4, #0]
 8012fdc:	6121      	str	r1, [r4, #16]
 8012fde:	07d8      	lsls	r0, r3, #31
 8012fe0:	d5ea      	bpl.n	8012fb8 <_printf_float+0x194>
 8012fe2:	1c4b      	adds	r3, r1, #1
 8012fe4:	e7e7      	b.n	8012fb6 <_printf_float+0x192>
 8012fe6:	2900      	cmp	r1, #0
 8012fe8:	bfd4      	ite	le
 8012fea:	f1c1 0202 	rsble	r2, r1, #2
 8012fee:	2201      	movgt	r2, #1
 8012ff0:	4413      	add	r3, r2
 8012ff2:	e7e0      	b.n	8012fb6 <_printf_float+0x192>
 8012ff4:	6823      	ldr	r3, [r4, #0]
 8012ff6:	055a      	lsls	r2, r3, #21
 8012ff8:	d407      	bmi.n	801300a <_printf_float+0x1e6>
 8012ffa:	6923      	ldr	r3, [r4, #16]
 8012ffc:	4642      	mov	r2, r8
 8012ffe:	4631      	mov	r1, r6
 8013000:	4628      	mov	r0, r5
 8013002:	47b8      	blx	r7
 8013004:	3001      	adds	r0, #1
 8013006:	d12b      	bne.n	8013060 <_printf_float+0x23c>
 8013008:	e767      	b.n	8012eda <_printf_float+0xb6>
 801300a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801300e:	f240 80dd 	bls.w	80131cc <_printf_float+0x3a8>
 8013012:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8013016:	2200      	movs	r2, #0
 8013018:	2300      	movs	r3, #0
 801301a:	f7f5 fd5d 	bl	8008ad8 <__aeabi_dcmpeq>
 801301e:	2800      	cmp	r0, #0
 8013020:	d033      	beq.n	801308a <_printf_float+0x266>
 8013022:	4a37      	ldr	r2, [pc, #220]	@ (8013100 <_printf_float+0x2dc>)
 8013024:	2301      	movs	r3, #1
 8013026:	4631      	mov	r1, r6
 8013028:	4628      	mov	r0, r5
 801302a:	47b8      	blx	r7
 801302c:	3001      	adds	r0, #1
 801302e:	f43f af54 	beq.w	8012eda <_printf_float+0xb6>
 8013032:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8013036:	4543      	cmp	r3, r8
 8013038:	db02      	blt.n	8013040 <_printf_float+0x21c>
 801303a:	6823      	ldr	r3, [r4, #0]
 801303c:	07d8      	lsls	r0, r3, #31
 801303e:	d50f      	bpl.n	8013060 <_printf_float+0x23c>
 8013040:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013044:	4631      	mov	r1, r6
 8013046:	4628      	mov	r0, r5
 8013048:	47b8      	blx	r7
 801304a:	3001      	adds	r0, #1
 801304c:	f43f af45 	beq.w	8012eda <_printf_float+0xb6>
 8013050:	f04f 0900 	mov.w	r9, #0
 8013054:	f108 38ff 	add.w	r8, r8, #4294967295
 8013058:	f104 0a1a 	add.w	sl, r4, #26
 801305c:	45c8      	cmp	r8, r9
 801305e:	dc09      	bgt.n	8013074 <_printf_float+0x250>
 8013060:	6823      	ldr	r3, [r4, #0]
 8013062:	079b      	lsls	r3, r3, #30
 8013064:	f100 8103 	bmi.w	801326e <_printf_float+0x44a>
 8013068:	68e0      	ldr	r0, [r4, #12]
 801306a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801306c:	4298      	cmp	r0, r3
 801306e:	bfb8      	it	lt
 8013070:	4618      	movlt	r0, r3
 8013072:	e734      	b.n	8012ede <_printf_float+0xba>
 8013074:	2301      	movs	r3, #1
 8013076:	4652      	mov	r2, sl
 8013078:	4631      	mov	r1, r6
 801307a:	4628      	mov	r0, r5
 801307c:	47b8      	blx	r7
 801307e:	3001      	adds	r0, #1
 8013080:	f43f af2b 	beq.w	8012eda <_printf_float+0xb6>
 8013084:	f109 0901 	add.w	r9, r9, #1
 8013088:	e7e8      	b.n	801305c <_printf_float+0x238>
 801308a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801308c:	2b00      	cmp	r3, #0
 801308e:	dc39      	bgt.n	8013104 <_printf_float+0x2e0>
 8013090:	4a1b      	ldr	r2, [pc, #108]	@ (8013100 <_printf_float+0x2dc>)
 8013092:	2301      	movs	r3, #1
 8013094:	4631      	mov	r1, r6
 8013096:	4628      	mov	r0, r5
 8013098:	47b8      	blx	r7
 801309a:	3001      	adds	r0, #1
 801309c:	f43f af1d 	beq.w	8012eda <_printf_float+0xb6>
 80130a0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80130a4:	ea59 0303 	orrs.w	r3, r9, r3
 80130a8:	d102      	bne.n	80130b0 <_printf_float+0x28c>
 80130aa:	6823      	ldr	r3, [r4, #0]
 80130ac:	07d9      	lsls	r1, r3, #31
 80130ae:	d5d7      	bpl.n	8013060 <_printf_float+0x23c>
 80130b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80130b4:	4631      	mov	r1, r6
 80130b6:	4628      	mov	r0, r5
 80130b8:	47b8      	blx	r7
 80130ba:	3001      	adds	r0, #1
 80130bc:	f43f af0d 	beq.w	8012eda <_printf_float+0xb6>
 80130c0:	f04f 0a00 	mov.w	sl, #0
 80130c4:	f104 0b1a 	add.w	fp, r4, #26
 80130c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80130ca:	425b      	negs	r3, r3
 80130cc:	4553      	cmp	r3, sl
 80130ce:	dc01      	bgt.n	80130d4 <_printf_float+0x2b0>
 80130d0:	464b      	mov	r3, r9
 80130d2:	e793      	b.n	8012ffc <_printf_float+0x1d8>
 80130d4:	2301      	movs	r3, #1
 80130d6:	465a      	mov	r2, fp
 80130d8:	4631      	mov	r1, r6
 80130da:	4628      	mov	r0, r5
 80130dc:	47b8      	blx	r7
 80130de:	3001      	adds	r0, #1
 80130e0:	f43f aefb 	beq.w	8012eda <_printf_float+0xb6>
 80130e4:	f10a 0a01 	add.w	sl, sl, #1
 80130e8:	e7ee      	b.n	80130c8 <_printf_float+0x2a4>
 80130ea:	bf00      	nop
 80130ec:	7fefffff 	.word	0x7fefffff
 80130f0:	08016304 	.word	0x08016304
 80130f4:	08016300 	.word	0x08016300
 80130f8:	0801630c 	.word	0x0801630c
 80130fc:	08016308 	.word	0x08016308
 8013100:	08016310 	.word	0x08016310
 8013104:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8013106:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801310a:	4553      	cmp	r3, sl
 801310c:	bfa8      	it	ge
 801310e:	4653      	movge	r3, sl
 8013110:	2b00      	cmp	r3, #0
 8013112:	4699      	mov	r9, r3
 8013114:	dc36      	bgt.n	8013184 <_printf_float+0x360>
 8013116:	f04f 0b00 	mov.w	fp, #0
 801311a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801311e:	f104 021a 	add.w	r2, r4, #26
 8013122:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8013124:	9306      	str	r3, [sp, #24]
 8013126:	eba3 0309 	sub.w	r3, r3, r9
 801312a:	455b      	cmp	r3, fp
 801312c:	dc31      	bgt.n	8013192 <_printf_float+0x36e>
 801312e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013130:	459a      	cmp	sl, r3
 8013132:	dc3a      	bgt.n	80131aa <_printf_float+0x386>
 8013134:	6823      	ldr	r3, [r4, #0]
 8013136:	07da      	lsls	r2, r3, #31
 8013138:	d437      	bmi.n	80131aa <_printf_float+0x386>
 801313a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801313c:	ebaa 0903 	sub.w	r9, sl, r3
 8013140:	9b06      	ldr	r3, [sp, #24]
 8013142:	ebaa 0303 	sub.w	r3, sl, r3
 8013146:	4599      	cmp	r9, r3
 8013148:	bfa8      	it	ge
 801314a:	4699      	movge	r9, r3
 801314c:	f1b9 0f00 	cmp.w	r9, #0
 8013150:	dc33      	bgt.n	80131ba <_printf_float+0x396>
 8013152:	f04f 0800 	mov.w	r8, #0
 8013156:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801315a:	f104 0b1a 	add.w	fp, r4, #26
 801315e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013160:	ebaa 0303 	sub.w	r3, sl, r3
 8013164:	eba3 0309 	sub.w	r3, r3, r9
 8013168:	4543      	cmp	r3, r8
 801316a:	f77f af79 	ble.w	8013060 <_printf_float+0x23c>
 801316e:	2301      	movs	r3, #1
 8013170:	465a      	mov	r2, fp
 8013172:	4631      	mov	r1, r6
 8013174:	4628      	mov	r0, r5
 8013176:	47b8      	blx	r7
 8013178:	3001      	adds	r0, #1
 801317a:	f43f aeae 	beq.w	8012eda <_printf_float+0xb6>
 801317e:	f108 0801 	add.w	r8, r8, #1
 8013182:	e7ec      	b.n	801315e <_printf_float+0x33a>
 8013184:	4642      	mov	r2, r8
 8013186:	4631      	mov	r1, r6
 8013188:	4628      	mov	r0, r5
 801318a:	47b8      	blx	r7
 801318c:	3001      	adds	r0, #1
 801318e:	d1c2      	bne.n	8013116 <_printf_float+0x2f2>
 8013190:	e6a3      	b.n	8012eda <_printf_float+0xb6>
 8013192:	2301      	movs	r3, #1
 8013194:	4631      	mov	r1, r6
 8013196:	4628      	mov	r0, r5
 8013198:	9206      	str	r2, [sp, #24]
 801319a:	47b8      	blx	r7
 801319c:	3001      	adds	r0, #1
 801319e:	f43f ae9c 	beq.w	8012eda <_printf_float+0xb6>
 80131a2:	9a06      	ldr	r2, [sp, #24]
 80131a4:	f10b 0b01 	add.w	fp, fp, #1
 80131a8:	e7bb      	b.n	8013122 <_printf_float+0x2fe>
 80131aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80131ae:	4631      	mov	r1, r6
 80131b0:	4628      	mov	r0, r5
 80131b2:	47b8      	blx	r7
 80131b4:	3001      	adds	r0, #1
 80131b6:	d1c0      	bne.n	801313a <_printf_float+0x316>
 80131b8:	e68f      	b.n	8012eda <_printf_float+0xb6>
 80131ba:	9a06      	ldr	r2, [sp, #24]
 80131bc:	464b      	mov	r3, r9
 80131be:	4442      	add	r2, r8
 80131c0:	4631      	mov	r1, r6
 80131c2:	4628      	mov	r0, r5
 80131c4:	47b8      	blx	r7
 80131c6:	3001      	adds	r0, #1
 80131c8:	d1c3      	bne.n	8013152 <_printf_float+0x32e>
 80131ca:	e686      	b.n	8012eda <_printf_float+0xb6>
 80131cc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80131d0:	f1ba 0f01 	cmp.w	sl, #1
 80131d4:	dc01      	bgt.n	80131da <_printf_float+0x3b6>
 80131d6:	07db      	lsls	r3, r3, #31
 80131d8:	d536      	bpl.n	8013248 <_printf_float+0x424>
 80131da:	2301      	movs	r3, #1
 80131dc:	4642      	mov	r2, r8
 80131de:	4631      	mov	r1, r6
 80131e0:	4628      	mov	r0, r5
 80131e2:	47b8      	blx	r7
 80131e4:	3001      	adds	r0, #1
 80131e6:	f43f ae78 	beq.w	8012eda <_printf_float+0xb6>
 80131ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80131ee:	4631      	mov	r1, r6
 80131f0:	4628      	mov	r0, r5
 80131f2:	47b8      	blx	r7
 80131f4:	3001      	adds	r0, #1
 80131f6:	f43f ae70 	beq.w	8012eda <_printf_float+0xb6>
 80131fa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80131fe:	2200      	movs	r2, #0
 8013200:	2300      	movs	r3, #0
 8013202:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013206:	f7f5 fc67 	bl	8008ad8 <__aeabi_dcmpeq>
 801320a:	b9c0      	cbnz	r0, 801323e <_printf_float+0x41a>
 801320c:	4653      	mov	r3, sl
 801320e:	f108 0201 	add.w	r2, r8, #1
 8013212:	4631      	mov	r1, r6
 8013214:	4628      	mov	r0, r5
 8013216:	47b8      	blx	r7
 8013218:	3001      	adds	r0, #1
 801321a:	d10c      	bne.n	8013236 <_printf_float+0x412>
 801321c:	e65d      	b.n	8012eda <_printf_float+0xb6>
 801321e:	2301      	movs	r3, #1
 8013220:	465a      	mov	r2, fp
 8013222:	4631      	mov	r1, r6
 8013224:	4628      	mov	r0, r5
 8013226:	47b8      	blx	r7
 8013228:	3001      	adds	r0, #1
 801322a:	f43f ae56 	beq.w	8012eda <_printf_float+0xb6>
 801322e:	f108 0801 	add.w	r8, r8, #1
 8013232:	45d0      	cmp	r8, sl
 8013234:	dbf3      	blt.n	801321e <_printf_float+0x3fa>
 8013236:	464b      	mov	r3, r9
 8013238:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801323c:	e6df      	b.n	8012ffe <_printf_float+0x1da>
 801323e:	f04f 0800 	mov.w	r8, #0
 8013242:	f104 0b1a 	add.w	fp, r4, #26
 8013246:	e7f4      	b.n	8013232 <_printf_float+0x40e>
 8013248:	2301      	movs	r3, #1
 801324a:	4642      	mov	r2, r8
 801324c:	e7e1      	b.n	8013212 <_printf_float+0x3ee>
 801324e:	2301      	movs	r3, #1
 8013250:	464a      	mov	r2, r9
 8013252:	4631      	mov	r1, r6
 8013254:	4628      	mov	r0, r5
 8013256:	47b8      	blx	r7
 8013258:	3001      	adds	r0, #1
 801325a:	f43f ae3e 	beq.w	8012eda <_printf_float+0xb6>
 801325e:	f108 0801 	add.w	r8, r8, #1
 8013262:	68e3      	ldr	r3, [r4, #12]
 8013264:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013266:	1a5b      	subs	r3, r3, r1
 8013268:	4543      	cmp	r3, r8
 801326a:	dcf0      	bgt.n	801324e <_printf_float+0x42a>
 801326c:	e6fc      	b.n	8013068 <_printf_float+0x244>
 801326e:	f04f 0800 	mov.w	r8, #0
 8013272:	f104 0919 	add.w	r9, r4, #25
 8013276:	e7f4      	b.n	8013262 <_printf_float+0x43e>

08013278 <_printf_common>:
 8013278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801327c:	4616      	mov	r6, r2
 801327e:	4698      	mov	r8, r3
 8013280:	688a      	ldr	r2, [r1, #8]
 8013282:	690b      	ldr	r3, [r1, #16]
 8013284:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013288:	4293      	cmp	r3, r2
 801328a:	bfb8      	it	lt
 801328c:	4613      	movlt	r3, r2
 801328e:	6033      	str	r3, [r6, #0]
 8013290:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8013294:	4607      	mov	r7, r0
 8013296:	460c      	mov	r4, r1
 8013298:	b10a      	cbz	r2, 801329e <_printf_common+0x26>
 801329a:	3301      	adds	r3, #1
 801329c:	6033      	str	r3, [r6, #0]
 801329e:	6823      	ldr	r3, [r4, #0]
 80132a0:	0699      	lsls	r1, r3, #26
 80132a2:	bf42      	ittt	mi
 80132a4:	6833      	ldrmi	r3, [r6, #0]
 80132a6:	3302      	addmi	r3, #2
 80132a8:	6033      	strmi	r3, [r6, #0]
 80132aa:	6825      	ldr	r5, [r4, #0]
 80132ac:	f015 0506 	ands.w	r5, r5, #6
 80132b0:	d106      	bne.n	80132c0 <_printf_common+0x48>
 80132b2:	f104 0a19 	add.w	sl, r4, #25
 80132b6:	68e3      	ldr	r3, [r4, #12]
 80132b8:	6832      	ldr	r2, [r6, #0]
 80132ba:	1a9b      	subs	r3, r3, r2
 80132bc:	42ab      	cmp	r3, r5
 80132be:	dc26      	bgt.n	801330e <_printf_common+0x96>
 80132c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80132c4:	6822      	ldr	r2, [r4, #0]
 80132c6:	3b00      	subs	r3, #0
 80132c8:	bf18      	it	ne
 80132ca:	2301      	movne	r3, #1
 80132cc:	0692      	lsls	r2, r2, #26
 80132ce:	d42b      	bmi.n	8013328 <_printf_common+0xb0>
 80132d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80132d4:	4641      	mov	r1, r8
 80132d6:	4638      	mov	r0, r7
 80132d8:	47c8      	blx	r9
 80132da:	3001      	adds	r0, #1
 80132dc:	d01e      	beq.n	801331c <_printf_common+0xa4>
 80132de:	6823      	ldr	r3, [r4, #0]
 80132e0:	6922      	ldr	r2, [r4, #16]
 80132e2:	f003 0306 	and.w	r3, r3, #6
 80132e6:	2b04      	cmp	r3, #4
 80132e8:	bf02      	ittt	eq
 80132ea:	68e5      	ldreq	r5, [r4, #12]
 80132ec:	6833      	ldreq	r3, [r6, #0]
 80132ee:	1aed      	subeq	r5, r5, r3
 80132f0:	68a3      	ldr	r3, [r4, #8]
 80132f2:	bf0c      	ite	eq
 80132f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80132f8:	2500      	movne	r5, #0
 80132fa:	4293      	cmp	r3, r2
 80132fc:	bfc4      	itt	gt
 80132fe:	1a9b      	subgt	r3, r3, r2
 8013300:	18ed      	addgt	r5, r5, r3
 8013302:	2600      	movs	r6, #0
 8013304:	341a      	adds	r4, #26
 8013306:	42b5      	cmp	r5, r6
 8013308:	d11a      	bne.n	8013340 <_printf_common+0xc8>
 801330a:	2000      	movs	r0, #0
 801330c:	e008      	b.n	8013320 <_printf_common+0xa8>
 801330e:	2301      	movs	r3, #1
 8013310:	4652      	mov	r2, sl
 8013312:	4641      	mov	r1, r8
 8013314:	4638      	mov	r0, r7
 8013316:	47c8      	blx	r9
 8013318:	3001      	adds	r0, #1
 801331a:	d103      	bne.n	8013324 <_printf_common+0xac>
 801331c:	f04f 30ff 	mov.w	r0, #4294967295
 8013320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013324:	3501      	adds	r5, #1
 8013326:	e7c6      	b.n	80132b6 <_printf_common+0x3e>
 8013328:	18e1      	adds	r1, r4, r3
 801332a:	1c5a      	adds	r2, r3, #1
 801332c:	2030      	movs	r0, #48	@ 0x30
 801332e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8013332:	4422      	add	r2, r4
 8013334:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8013338:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801333c:	3302      	adds	r3, #2
 801333e:	e7c7      	b.n	80132d0 <_printf_common+0x58>
 8013340:	2301      	movs	r3, #1
 8013342:	4622      	mov	r2, r4
 8013344:	4641      	mov	r1, r8
 8013346:	4638      	mov	r0, r7
 8013348:	47c8      	blx	r9
 801334a:	3001      	adds	r0, #1
 801334c:	d0e6      	beq.n	801331c <_printf_common+0xa4>
 801334e:	3601      	adds	r6, #1
 8013350:	e7d9      	b.n	8013306 <_printf_common+0x8e>
	...

08013354 <_printf_i>:
 8013354:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013358:	7e0f      	ldrb	r7, [r1, #24]
 801335a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801335c:	2f78      	cmp	r7, #120	@ 0x78
 801335e:	4691      	mov	r9, r2
 8013360:	4680      	mov	r8, r0
 8013362:	460c      	mov	r4, r1
 8013364:	469a      	mov	sl, r3
 8013366:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801336a:	d807      	bhi.n	801337c <_printf_i+0x28>
 801336c:	2f62      	cmp	r7, #98	@ 0x62
 801336e:	d80a      	bhi.n	8013386 <_printf_i+0x32>
 8013370:	2f00      	cmp	r7, #0
 8013372:	f000 80d1 	beq.w	8013518 <_printf_i+0x1c4>
 8013376:	2f58      	cmp	r7, #88	@ 0x58
 8013378:	f000 80b8 	beq.w	80134ec <_printf_i+0x198>
 801337c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013380:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8013384:	e03a      	b.n	80133fc <_printf_i+0xa8>
 8013386:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801338a:	2b15      	cmp	r3, #21
 801338c:	d8f6      	bhi.n	801337c <_printf_i+0x28>
 801338e:	a101      	add	r1, pc, #4	@ (adr r1, 8013394 <_printf_i+0x40>)
 8013390:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013394:	080133ed 	.word	0x080133ed
 8013398:	08013401 	.word	0x08013401
 801339c:	0801337d 	.word	0x0801337d
 80133a0:	0801337d 	.word	0x0801337d
 80133a4:	0801337d 	.word	0x0801337d
 80133a8:	0801337d 	.word	0x0801337d
 80133ac:	08013401 	.word	0x08013401
 80133b0:	0801337d 	.word	0x0801337d
 80133b4:	0801337d 	.word	0x0801337d
 80133b8:	0801337d 	.word	0x0801337d
 80133bc:	0801337d 	.word	0x0801337d
 80133c0:	080134ff 	.word	0x080134ff
 80133c4:	0801342b 	.word	0x0801342b
 80133c8:	080134b9 	.word	0x080134b9
 80133cc:	0801337d 	.word	0x0801337d
 80133d0:	0801337d 	.word	0x0801337d
 80133d4:	08013521 	.word	0x08013521
 80133d8:	0801337d 	.word	0x0801337d
 80133dc:	0801342b 	.word	0x0801342b
 80133e0:	0801337d 	.word	0x0801337d
 80133e4:	0801337d 	.word	0x0801337d
 80133e8:	080134c1 	.word	0x080134c1
 80133ec:	6833      	ldr	r3, [r6, #0]
 80133ee:	1d1a      	adds	r2, r3, #4
 80133f0:	681b      	ldr	r3, [r3, #0]
 80133f2:	6032      	str	r2, [r6, #0]
 80133f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80133f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80133fc:	2301      	movs	r3, #1
 80133fe:	e09c      	b.n	801353a <_printf_i+0x1e6>
 8013400:	6833      	ldr	r3, [r6, #0]
 8013402:	6820      	ldr	r0, [r4, #0]
 8013404:	1d19      	adds	r1, r3, #4
 8013406:	6031      	str	r1, [r6, #0]
 8013408:	0606      	lsls	r6, r0, #24
 801340a:	d501      	bpl.n	8013410 <_printf_i+0xbc>
 801340c:	681d      	ldr	r5, [r3, #0]
 801340e:	e003      	b.n	8013418 <_printf_i+0xc4>
 8013410:	0645      	lsls	r5, r0, #25
 8013412:	d5fb      	bpl.n	801340c <_printf_i+0xb8>
 8013414:	f9b3 5000 	ldrsh.w	r5, [r3]
 8013418:	2d00      	cmp	r5, #0
 801341a:	da03      	bge.n	8013424 <_printf_i+0xd0>
 801341c:	232d      	movs	r3, #45	@ 0x2d
 801341e:	426d      	negs	r5, r5
 8013420:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013424:	4858      	ldr	r0, [pc, #352]	@ (8013588 <_printf_i+0x234>)
 8013426:	230a      	movs	r3, #10
 8013428:	e011      	b.n	801344e <_printf_i+0xfa>
 801342a:	6821      	ldr	r1, [r4, #0]
 801342c:	6833      	ldr	r3, [r6, #0]
 801342e:	0608      	lsls	r0, r1, #24
 8013430:	f853 5b04 	ldr.w	r5, [r3], #4
 8013434:	d402      	bmi.n	801343c <_printf_i+0xe8>
 8013436:	0649      	lsls	r1, r1, #25
 8013438:	bf48      	it	mi
 801343a:	b2ad      	uxthmi	r5, r5
 801343c:	2f6f      	cmp	r7, #111	@ 0x6f
 801343e:	4852      	ldr	r0, [pc, #328]	@ (8013588 <_printf_i+0x234>)
 8013440:	6033      	str	r3, [r6, #0]
 8013442:	bf14      	ite	ne
 8013444:	230a      	movne	r3, #10
 8013446:	2308      	moveq	r3, #8
 8013448:	2100      	movs	r1, #0
 801344a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801344e:	6866      	ldr	r6, [r4, #4]
 8013450:	60a6      	str	r6, [r4, #8]
 8013452:	2e00      	cmp	r6, #0
 8013454:	db05      	blt.n	8013462 <_printf_i+0x10e>
 8013456:	6821      	ldr	r1, [r4, #0]
 8013458:	432e      	orrs	r6, r5
 801345a:	f021 0104 	bic.w	r1, r1, #4
 801345e:	6021      	str	r1, [r4, #0]
 8013460:	d04b      	beq.n	80134fa <_printf_i+0x1a6>
 8013462:	4616      	mov	r6, r2
 8013464:	fbb5 f1f3 	udiv	r1, r5, r3
 8013468:	fb03 5711 	mls	r7, r3, r1, r5
 801346c:	5dc7      	ldrb	r7, [r0, r7]
 801346e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013472:	462f      	mov	r7, r5
 8013474:	42bb      	cmp	r3, r7
 8013476:	460d      	mov	r5, r1
 8013478:	d9f4      	bls.n	8013464 <_printf_i+0x110>
 801347a:	2b08      	cmp	r3, #8
 801347c:	d10b      	bne.n	8013496 <_printf_i+0x142>
 801347e:	6823      	ldr	r3, [r4, #0]
 8013480:	07df      	lsls	r7, r3, #31
 8013482:	d508      	bpl.n	8013496 <_printf_i+0x142>
 8013484:	6923      	ldr	r3, [r4, #16]
 8013486:	6861      	ldr	r1, [r4, #4]
 8013488:	4299      	cmp	r1, r3
 801348a:	bfde      	ittt	le
 801348c:	2330      	movle	r3, #48	@ 0x30
 801348e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013492:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013496:	1b92      	subs	r2, r2, r6
 8013498:	6122      	str	r2, [r4, #16]
 801349a:	f8cd a000 	str.w	sl, [sp]
 801349e:	464b      	mov	r3, r9
 80134a0:	aa03      	add	r2, sp, #12
 80134a2:	4621      	mov	r1, r4
 80134a4:	4640      	mov	r0, r8
 80134a6:	f7ff fee7 	bl	8013278 <_printf_common>
 80134aa:	3001      	adds	r0, #1
 80134ac:	d14a      	bne.n	8013544 <_printf_i+0x1f0>
 80134ae:	f04f 30ff 	mov.w	r0, #4294967295
 80134b2:	b004      	add	sp, #16
 80134b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80134b8:	6823      	ldr	r3, [r4, #0]
 80134ba:	f043 0320 	orr.w	r3, r3, #32
 80134be:	6023      	str	r3, [r4, #0]
 80134c0:	4832      	ldr	r0, [pc, #200]	@ (801358c <_printf_i+0x238>)
 80134c2:	2778      	movs	r7, #120	@ 0x78
 80134c4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80134c8:	6823      	ldr	r3, [r4, #0]
 80134ca:	6831      	ldr	r1, [r6, #0]
 80134cc:	061f      	lsls	r7, r3, #24
 80134ce:	f851 5b04 	ldr.w	r5, [r1], #4
 80134d2:	d402      	bmi.n	80134da <_printf_i+0x186>
 80134d4:	065f      	lsls	r7, r3, #25
 80134d6:	bf48      	it	mi
 80134d8:	b2ad      	uxthmi	r5, r5
 80134da:	6031      	str	r1, [r6, #0]
 80134dc:	07d9      	lsls	r1, r3, #31
 80134de:	bf44      	itt	mi
 80134e0:	f043 0320 	orrmi.w	r3, r3, #32
 80134e4:	6023      	strmi	r3, [r4, #0]
 80134e6:	b11d      	cbz	r5, 80134f0 <_printf_i+0x19c>
 80134e8:	2310      	movs	r3, #16
 80134ea:	e7ad      	b.n	8013448 <_printf_i+0xf4>
 80134ec:	4826      	ldr	r0, [pc, #152]	@ (8013588 <_printf_i+0x234>)
 80134ee:	e7e9      	b.n	80134c4 <_printf_i+0x170>
 80134f0:	6823      	ldr	r3, [r4, #0]
 80134f2:	f023 0320 	bic.w	r3, r3, #32
 80134f6:	6023      	str	r3, [r4, #0]
 80134f8:	e7f6      	b.n	80134e8 <_printf_i+0x194>
 80134fa:	4616      	mov	r6, r2
 80134fc:	e7bd      	b.n	801347a <_printf_i+0x126>
 80134fe:	6833      	ldr	r3, [r6, #0]
 8013500:	6825      	ldr	r5, [r4, #0]
 8013502:	6961      	ldr	r1, [r4, #20]
 8013504:	1d18      	adds	r0, r3, #4
 8013506:	6030      	str	r0, [r6, #0]
 8013508:	062e      	lsls	r6, r5, #24
 801350a:	681b      	ldr	r3, [r3, #0]
 801350c:	d501      	bpl.n	8013512 <_printf_i+0x1be>
 801350e:	6019      	str	r1, [r3, #0]
 8013510:	e002      	b.n	8013518 <_printf_i+0x1c4>
 8013512:	0668      	lsls	r0, r5, #25
 8013514:	d5fb      	bpl.n	801350e <_printf_i+0x1ba>
 8013516:	8019      	strh	r1, [r3, #0]
 8013518:	2300      	movs	r3, #0
 801351a:	6123      	str	r3, [r4, #16]
 801351c:	4616      	mov	r6, r2
 801351e:	e7bc      	b.n	801349a <_printf_i+0x146>
 8013520:	6833      	ldr	r3, [r6, #0]
 8013522:	1d1a      	adds	r2, r3, #4
 8013524:	6032      	str	r2, [r6, #0]
 8013526:	681e      	ldr	r6, [r3, #0]
 8013528:	6862      	ldr	r2, [r4, #4]
 801352a:	2100      	movs	r1, #0
 801352c:	4630      	mov	r0, r6
 801352e:	f7f4 fe57 	bl	80081e0 <memchr>
 8013532:	b108      	cbz	r0, 8013538 <_printf_i+0x1e4>
 8013534:	1b80      	subs	r0, r0, r6
 8013536:	6060      	str	r0, [r4, #4]
 8013538:	6863      	ldr	r3, [r4, #4]
 801353a:	6123      	str	r3, [r4, #16]
 801353c:	2300      	movs	r3, #0
 801353e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013542:	e7aa      	b.n	801349a <_printf_i+0x146>
 8013544:	6923      	ldr	r3, [r4, #16]
 8013546:	4632      	mov	r2, r6
 8013548:	4649      	mov	r1, r9
 801354a:	4640      	mov	r0, r8
 801354c:	47d0      	blx	sl
 801354e:	3001      	adds	r0, #1
 8013550:	d0ad      	beq.n	80134ae <_printf_i+0x15a>
 8013552:	6823      	ldr	r3, [r4, #0]
 8013554:	079b      	lsls	r3, r3, #30
 8013556:	d413      	bmi.n	8013580 <_printf_i+0x22c>
 8013558:	68e0      	ldr	r0, [r4, #12]
 801355a:	9b03      	ldr	r3, [sp, #12]
 801355c:	4298      	cmp	r0, r3
 801355e:	bfb8      	it	lt
 8013560:	4618      	movlt	r0, r3
 8013562:	e7a6      	b.n	80134b2 <_printf_i+0x15e>
 8013564:	2301      	movs	r3, #1
 8013566:	4632      	mov	r2, r6
 8013568:	4649      	mov	r1, r9
 801356a:	4640      	mov	r0, r8
 801356c:	47d0      	blx	sl
 801356e:	3001      	adds	r0, #1
 8013570:	d09d      	beq.n	80134ae <_printf_i+0x15a>
 8013572:	3501      	adds	r5, #1
 8013574:	68e3      	ldr	r3, [r4, #12]
 8013576:	9903      	ldr	r1, [sp, #12]
 8013578:	1a5b      	subs	r3, r3, r1
 801357a:	42ab      	cmp	r3, r5
 801357c:	dcf2      	bgt.n	8013564 <_printf_i+0x210>
 801357e:	e7eb      	b.n	8013558 <_printf_i+0x204>
 8013580:	2500      	movs	r5, #0
 8013582:	f104 0619 	add.w	r6, r4, #25
 8013586:	e7f5      	b.n	8013574 <_printf_i+0x220>
 8013588:	08016312 	.word	0x08016312
 801358c:	08016323 	.word	0x08016323

08013590 <std>:
 8013590:	2300      	movs	r3, #0
 8013592:	b510      	push	{r4, lr}
 8013594:	4604      	mov	r4, r0
 8013596:	e9c0 3300 	strd	r3, r3, [r0]
 801359a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801359e:	6083      	str	r3, [r0, #8]
 80135a0:	8181      	strh	r1, [r0, #12]
 80135a2:	6643      	str	r3, [r0, #100]	@ 0x64
 80135a4:	81c2      	strh	r2, [r0, #14]
 80135a6:	6183      	str	r3, [r0, #24]
 80135a8:	4619      	mov	r1, r3
 80135aa:	2208      	movs	r2, #8
 80135ac:	305c      	adds	r0, #92	@ 0x5c
 80135ae:	f000 fa1b 	bl	80139e8 <memset>
 80135b2:	4b0d      	ldr	r3, [pc, #52]	@ (80135e8 <std+0x58>)
 80135b4:	6263      	str	r3, [r4, #36]	@ 0x24
 80135b6:	4b0d      	ldr	r3, [pc, #52]	@ (80135ec <std+0x5c>)
 80135b8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80135ba:	4b0d      	ldr	r3, [pc, #52]	@ (80135f0 <std+0x60>)
 80135bc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80135be:	4b0d      	ldr	r3, [pc, #52]	@ (80135f4 <std+0x64>)
 80135c0:	6323      	str	r3, [r4, #48]	@ 0x30
 80135c2:	4b0d      	ldr	r3, [pc, #52]	@ (80135f8 <std+0x68>)
 80135c4:	6224      	str	r4, [r4, #32]
 80135c6:	429c      	cmp	r4, r3
 80135c8:	d006      	beq.n	80135d8 <std+0x48>
 80135ca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80135ce:	4294      	cmp	r4, r2
 80135d0:	d002      	beq.n	80135d8 <std+0x48>
 80135d2:	33d0      	adds	r3, #208	@ 0xd0
 80135d4:	429c      	cmp	r4, r3
 80135d6:	d105      	bne.n	80135e4 <std+0x54>
 80135d8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80135dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80135e0:	f000 ba7e 	b.w	8013ae0 <__retarget_lock_init_recursive>
 80135e4:	bd10      	pop	{r4, pc}
 80135e6:	bf00      	nop
 80135e8:	08013839 	.word	0x08013839
 80135ec:	0801385b 	.word	0x0801385b
 80135f0:	08013893 	.word	0x08013893
 80135f4:	080138b7 	.word	0x080138b7
 80135f8:	2000110c 	.word	0x2000110c

080135fc <stdio_exit_handler>:
 80135fc:	4a02      	ldr	r2, [pc, #8]	@ (8013608 <stdio_exit_handler+0xc>)
 80135fe:	4903      	ldr	r1, [pc, #12]	@ (801360c <stdio_exit_handler+0x10>)
 8013600:	4803      	ldr	r0, [pc, #12]	@ (8013610 <stdio_exit_handler+0x14>)
 8013602:	f000 b869 	b.w	80136d8 <_fwalk_sglue>
 8013606:	bf00      	nop
 8013608:	20000124 	.word	0x20000124
 801360c:	080156c9 	.word	0x080156c9
 8013610:	20000134 	.word	0x20000134

08013614 <cleanup_stdio>:
 8013614:	6841      	ldr	r1, [r0, #4]
 8013616:	4b0c      	ldr	r3, [pc, #48]	@ (8013648 <cleanup_stdio+0x34>)
 8013618:	4299      	cmp	r1, r3
 801361a:	b510      	push	{r4, lr}
 801361c:	4604      	mov	r4, r0
 801361e:	d001      	beq.n	8013624 <cleanup_stdio+0x10>
 8013620:	f002 f852 	bl	80156c8 <_fflush_r>
 8013624:	68a1      	ldr	r1, [r4, #8]
 8013626:	4b09      	ldr	r3, [pc, #36]	@ (801364c <cleanup_stdio+0x38>)
 8013628:	4299      	cmp	r1, r3
 801362a:	d002      	beq.n	8013632 <cleanup_stdio+0x1e>
 801362c:	4620      	mov	r0, r4
 801362e:	f002 f84b 	bl	80156c8 <_fflush_r>
 8013632:	68e1      	ldr	r1, [r4, #12]
 8013634:	4b06      	ldr	r3, [pc, #24]	@ (8013650 <cleanup_stdio+0x3c>)
 8013636:	4299      	cmp	r1, r3
 8013638:	d004      	beq.n	8013644 <cleanup_stdio+0x30>
 801363a:	4620      	mov	r0, r4
 801363c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013640:	f002 b842 	b.w	80156c8 <_fflush_r>
 8013644:	bd10      	pop	{r4, pc}
 8013646:	bf00      	nop
 8013648:	2000110c 	.word	0x2000110c
 801364c:	20001174 	.word	0x20001174
 8013650:	200011dc 	.word	0x200011dc

08013654 <global_stdio_init.part.0>:
 8013654:	b510      	push	{r4, lr}
 8013656:	4b0b      	ldr	r3, [pc, #44]	@ (8013684 <global_stdio_init.part.0+0x30>)
 8013658:	4c0b      	ldr	r4, [pc, #44]	@ (8013688 <global_stdio_init.part.0+0x34>)
 801365a:	4a0c      	ldr	r2, [pc, #48]	@ (801368c <global_stdio_init.part.0+0x38>)
 801365c:	601a      	str	r2, [r3, #0]
 801365e:	4620      	mov	r0, r4
 8013660:	2200      	movs	r2, #0
 8013662:	2104      	movs	r1, #4
 8013664:	f7ff ff94 	bl	8013590 <std>
 8013668:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801366c:	2201      	movs	r2, #1
 801366e:	2109      	movs	r1, #9
 8013670:	f7ff ff8e 	bl	8013590 <std>
 8013674:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8013678:	2202      	movs	r2, #2
 801367a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801367e:	2112      	movs	r1, #18
 8013680:	f7ff bf86 	b.w	8013590 <std>
 8013684:	20001244 	.word	0x20001244
 8013688:	2000110c 	.word	0x2000110c
 801368c:	080135fd 	.word	0x080135fd

08013690 <__sfp_lock_acquire>:
 8013690:	4801      	ldr	r0, [pc, #4]	@ (8013698 <__sfp_lock_acquire+0x8>)
 8013692:	f000 ba26 	b.w	8013ae2 <__retarget_lock_acquire_recursive>
 8013696:	bf00      	nop
 8013698:	2000124d 	.word	0x2000124d

0801369c <__sfp_lock_release>:
 801369c:	4801      	ldr	r0, [pc, #4]	@ (80136a4 <__sfp_lock_release+0x8>)
 801369e:	f000 ba21 	b.w	8013ae4 <__retarget_lock_release_recursive>
 80136a2:	bf00      	nop
 80136a4:	2000124d 	.word	0x2000124d

080136a8 <__sinit>:
 80136a8:	b510      	push	{r4, lr}
 80136aa:	4604      	mov	r4, r0
 80136ac:	f7ff fff0 	bl	8013690 <__sfp_lock_acquire>
 80136b0:	6a23      	ldr	r3, [r4, #32]
 80136b2:	b11b      	cbz	r3, 80136bc <__sinit+0x14>
 80136b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80136b8:	f7ff bff0 	b.w	801369c <__sfp_lock_release>
 80136bc:	4b04      	ldr	r3, [pc, #16]	@ (80136d0 <__sinit+0x28>)
 80136be:	6223      	str	r3, [r4, #32]
 80136c0:	4b04      	ldr	r3, [pc, #16]	@ (80136d4 <__sinit+0x2c>)
 80136c2:	681b      	ldr	r3, [r3, #0]
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d1f5      	bne.n	80136b4 <__sinit+0xc>
 80136c8:	f7ff ffc4 	bl	8013654 <global_stdio_init.part.0>
 80136cc:	e7f2      	b.n	80136b4 <__sinit+0xc>
 80136ce:	bf00      	nop
 80136d0:	08013615 	.word	0x08013615
 80136d4:	20001244 	.word	0x20001244

080136d8 <_fwalk_sglue>:
 80136d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80136dc:	4607      	mov	r7, r0
 80136de:	4688      	mov	r8, r1
 80136e0:	4614      	mov	r4, r2
 80136e2:	2600      	movs	r6, #0
 80136e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80136e8:	f1b9 0901 	subs.w	r9, r9, #1
 80136ec:	d505      	bpl.n	80136fa <_fwalk_sglue+0x22>
 80136ee:	6824      	ldr	r4, [r4, #0]
 80136f0:	2c00      	cmp	r4, #0
 80136f2:	d1f7      	bne.n	80136e4 <_fwalk_sglue+0xc>
 80136f4:	4630      	mov	r0, r6
 80136f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80136fa:	89ab      	ldrh	r3, [r5, #12]
 80136fc:	2b01      	cmp	r3, #1
 80136fe:	d907      	bls.n	8013710 <_fwalk_sglue+0x38>
 8013700:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013704:	3301      	adds	r3, #1
 8013706:	d003      	beq.n	8013710 <_fwalk_sglue+0x38>
 8013708:	4629      	mov	r1, r5
 801370a:	4638      	mov	r0, r7
 801370c:	47c0      	blx	r8
 801370e:	4306      	orrs	r6, r0
 8013710:	3568      	adds	r5, #104	@ 0x68
 8013712:	e7e9      	b.n	80136e8 <_fwalk_sglue+0x10>

08013714 <iprintf>:
 8013714:	b40f      	push	{r0, r1, r2, r3}
 8013716:	b507      	push	{r0, r1, r2, lr}
 8013718:	4906      	ldr	r1, [pc, #24]	@ (8013734 <iprintf+0x20>)
 801371a:	ab04      	add	r3, sp, #16
 801371c:	6808      	ldr	r0, [r1, #0]
 801371e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013722:	6881      	ldr	r1, [r0, #8]
 8013724:	9301      	str	r3, [sp, #4]
 8013726:	f001 fe33 	bl	8015390 <_vfiprintf_r>
 801372a:	b003      	add	sp, #12
 801372c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013730:	b004      	add	sp, #16
 8013732:	4770      	bx	lr
 8013734:	20000130 	.word	0x20000130

08013738 <_puts_r>:
 8013738:	6a03      	ldr	r3, [r0, #32]
 801373a:	b570      	push	{r4, r5, r6, lr}
 801373c:	6884      	ldr	r4, [r0, #8]
 801373e:	4605      	mov	r5, r0
 8013740:	460e      	mov	r6, r1
 8013742:	b90b      	cbnz	r3, 8013748 <_puts_r+0x10>
 8013744:	f7ff ffb0 	bl	80136a8 <__sinit>
 8013748:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801374a:	07db      	lsls	r3, r3, #31
 801374c:	d405      	bmi.n	801375a <_puts_r+0x22>
 801374e:	89a3      	ldrh	r3, [r4, #12]
 8013750:	0598      	lsls	r0, r3, #22
 8013752:	d402      	bmi.n	801375a <_puts_r+0x22>
 8013754:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013756:	f000 f9c4 	bl	8013ae2 <__retarget_lock_acquire_recursive>
 801375a:	89a3      	ldrh	r3, [r4, #12]
 801375c:	0719      	lsls	r1, r3, #28
 801375e:	d502      	bpl.n	8013766 <_puts_r+0x2e>
 8013760:	6923      	ldr	r3, [r4, #16]
 8013762:	2b00      	cmp	r3, #0
 8013764:	d135      	bne.n	80137d2 <_puts_r+0x9a>
 8013766:	4621      	mov	r1, r4
 8013768:	4628      	mov	r0, r5
 801376a:	f000 f8e7 	bl	801393c <__swsetup_r>
 801376e:	b380      	cbz	r0, 80137d2 <_puts_r+0x9a>
 8013770:	f04f 35ff 	mov.w	r5, #4294967295
 8013774:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013776:	07da      	lsls	r2, r3, #31
 8013778:	d405      	bmi.n	8013786 <_puts_r+0x4e>
 801377a:	89a3      	ldrh	r3, [r4, #12]
 801377c:	059b      	lsls	r3, r3, #22
 801377e:	d402      	bmi.n	8013786 <_puts_r+0x4e>
 8013780:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013782:	f000 f9af 	bl	8013ae4 <__retarget_lock_release_recursive>
 8013786:	4628      	mov	r0, r5
 8013788:	bd70      	pop	{r4, r5, r6, pc}
 801378a:	2b00      	cmp	r3, #0
 801378c:	da04      	bge.n	8013798 <_puts_r+0x60>
 801378e:	69a2      	ldr	r2, [r4, #24]
 8013790:	429a      	cmp	r2, r3
 8013792:	dc17      	bgt.n	80137c4 <_puts_r+0x8c>
 8013794:	290a      	cmp	r1, #10
 8013796:	d015      	beq.n	80137c4 <_puts_r+0x8c>
 8013798:	6823      	ldr	r3, [r4, #0]
 801379a:	1c5a      	adds	r2, r3, #1
 801379c:	6022      	str	r2, [r4, #0]
 801379e:	7019      	strb	r1, [r3, #0]
 80137a0:	68a3      	ldr	r3, [r4, #8]
 80137a2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80137a6:	3b01      	subs	r3, #1
 80137a8:	60a3      	str	r3, [r4, #8]
 80137aa:	2900      	cmp	r1, #0
 80137ac:	d1ed      	bne.n	801378a <_puts_r+0x52>
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	da11      	bge.n	80137d6 <_puts_r+0x9e>
 80137b2:	4622      	mov	r2, r4
 80137b4:	210a      	movs	r1, #10
 80137b6:	4628      	mov	r0, r5
 80137b8:	f000 f881 	bl	80138be <__swbuf_r>
 80137bc:	3001      	adds	r0, #1
 80137be:	d0d7      	beq.n	8013770 <_puts_r+0x38>
 80137c0:	250a      	movs	r5, #10
 80137c2:	e7d7      	b.n	8013774 <_puts_r+0x3c>
 80137c4:	4622      	mov	r2, r4
 80137c6:	4628      	mov	r0, r5
 80137c8:	f000 f879 	bl	80138be <__swbuf_r>
 80137cc:	3001      	adds	r0, #1
 80137ce:	d1e7      	bne.n	80137a0 <_puts_r+0x68>
 80137d0:	e7ce      	b.n	8013770 <_puts_r+0x38>
 80137d2:	3e01      	subs	r6, #1
 80137d4:	e7e4      	b.n	80137a0 <_puts_r+0x68>
 80137d6:	6823      	ldr	r3, [r4, #0]
 80137d8:	1c5a      	adds	r2, r3, #1
 80137da:	6022      	str	r2, [r4, #0]
 80137dc:	220a      	movs	r2, #10
 80137de:	701a      	strb	r2, [r3, #0]
 80137e0:	e7ee      	b.n	80137c0 <_puts_r+0x88>
	...

080137e4 <puts>:
 80137e4:	4b02      	ldr	r3, [pc, #8]	@ (80137f0 <puts+0xc>)
 80137e6:	4601      	mov	r1, r0
 80137e8:	6818      	ldr	r0, [r3, #0]
 80137ea:	f7ff bfa5 	b.w	8013738 <_puts_r>
 80137ee:	bf00      	nop
 80137f0:	20000130 	.word	0x20000130

080137f4 <siprintf>:
 80137f4:	b40e      	push	{r1, r2, r3}
 80137f6:	b510      	push	{r4, lr}
 80137f8:	b09d      	sub	sp, #116	@ 0x74
 80137fa:	ab1f      	add	r3, sp, #124	@ 0x7c
 80137fc:	9002      	str	r0, [sp, #8]
 80137fe:	9006      	str	r0, [sp, #24]
 8013800:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8013804:	480a      	ldr	r0, [pc, #40]	@ (8013830 <siprintf+0x3c>)
 8013806:	9107      	str	r1, [sp, #28]
 8013808:	9104      	str	r1, [sp, #16]
 801380a:	490a      	ldr	r1, [pc, #40]	@ (8013834 <siprintf+0x40>)
 801380c:	f853 2b04 	ldr.w	r2, [r3], #4
 8013810:	9105      	str	r1, [sp, #20]
 8013812:	2400      	movs	r4, #0
 8013814:	a902      	add	r1, sp, #8
 8013816:	6800      	ldr	r0, [r0, #0]
 8013818:	9301      	str	r3, [sp, #4]
 801381a:	941b      	str	r4, [sp, #108]	@ 0x6c
 801381c:	f001 fc92 	bl	8015144 <_svfiprintf_r>
 8013820:	9b02      	ldr	r3, [sp, #8]
 8013822:	701c      	strb	r4, [r3, #0]
 8013824:	b01d      	add	sp, #116	@ 0x74
 8013826:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801382a:	b003      	add	sp, #12
 801382c:	4770      	bx	lr
 801382e:	bf00      	nop
 8013830:	20000130 	.word	0x20000130
 8013834:	ffff0208 	.word	0xffff0208

08013838 <__sread>:
 8013838:	b510      	push	{r4, lr}
 801383a:	460c      	mov	r4, r1
 801383c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013840:	f000 f900 	bl	8013a44 <_read_r>
 8013844:	2800      	cmp	r0, #0
 8013846:	bfab      	itete	ge
 8013848:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801384a:	89a3      	ldrhlt	r3, [r4, #12]
 801384c:	181b      	addge	r3, r3, r0
 801384e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8013852:	bfac      	ite	ge
 8013854:	6563      	strge	r3, [r4, #84]	@ 0x54
 8013856:	81a3      	strhlt	r3, [r4, #12]
 8013858:	bd10      	pop	{r4, pc}

0801385a <__swrite>:
 801385a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801385e:	461f      	mov	r7, r3
 8013860:	898b      	ldrh	r3, [r1, #12]
 8013862:	05db      	lsls	r3, r3, #23
 8013864:	4605      	mov	r5, r0
 8013866:	460c      	mov	r4, r1
 8013868:	4616      	mov	r6, r2
 801386a:	d505      	bpl.n	8013878 <__swrite+0x1e>
 801386c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013870:	2302      	movs	r3, #2
 8013872:	2200      	movs	r2, #0
 8013874:	f000 f8d4 	bl	8013a20 <_lseek_r>
 8013878:	89a3      	ldrh	r3, [r4, #12]
 801387a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801387e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8013882:	81a3      	strh	r3, [r4, #12]
 8013884:	4632      	mov	r2, r6
 8013886:	463b      	mov	r3, r7
 8013888:	4628      	mov	r0, r5
 801388a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801388e:	f000 b8eb 	b.w	8013a68 <_write_r>

08013892 <__sseek>:
 8013892:	b510      	push	{r4, lr}
 8013894:	460c      	mov	r4, r1
 8013896:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801389a:	f000 f8c1 	bl	8013a20 <_lseek_r>
 801389e:	1c43      	adds	r3, r0, #1
 80138a0:	89a3      	ldrh	r3, [r4, #12]
 80138a2:	bf15      	itete	ne
 80138a4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80138a6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80138aa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80138ae:	81a3      	strheq	r3, [r4, #12]
 80138b0:	bf18      	it	ne
 80138b2:	81a3      	strhne	r3, [r4, #12]
 80138b4:	bd10      	pop	{r4, pc}

080138b6 <__sclose>:
 80138b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80138ba:	f000 b8a1 	b.w	8013a00 <_close_r>

080138be <__swbuf_r>:
 80138be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80138c0:	460e      	mov	r6, r1
 80138c2:	4614      	mov	r4, r2
 80138c4:	4605      	mov	r5, r0
 80138c6:	b118      	cbz	r0, 80138d0 <__swbuf_r+0x12>
 80138c8:	6a03      	ldr	r3, [r0, #32]
 80138ca:	b90b      	cbnz	r3, 80138d0 <__swbuf_r+0x12>
 80138cc:	f7ff feec 	bl	80136a8 <__sinit>
 80138d0:	69a3      	ldr	r3, [r4, #24]
 80138d2:	60a3      	str	r3, [r4, #8]
 80138d4:	89a3      	ldrh	r3, [r4, #12]
 80138d6:	071a      	lsls	r2, r3, #28
 80138d8:	d501      	bpl.n	80138de <__swbuf_r+0x20>
 80138da:	6923      	ldr	r3, [r4, #16]
 80138dc:	b943      	cbnz	r3, 80138f0 <__swbuf_r+0x32>
 80138de:	4621      	mov	r1, r4
 80138e0:	4628      	mov	r0, r5
 80138e2:	f000 f82b 	bl	801393c <__swsetup_r>
 80138e6:	b118      	cbz	r0, 80138f0 <__swbuf_r+0x32>
 80138e8:	f04f 37ff 	mov.w	r7, #4294967295
 80138ec:	4638      	mov	r0, r7
 80138ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80138f0:	6823      	ldr	r3, [r4, #0]
 80138f2:	6922      	ldr	r2, [r4, #16]
 80138f4:	1a98      	subs	r0, r3, r2
 80138f6:	6963      	ldr	r3, [r4, #20]
 80138f8:	b2f6      	uxtb	r6, r6
 80138fa:	4283      	cmp	r3, r0
 80138fc:	4637      	mov	r7, r6
 80138fe:	dc05      	bgt.n	801390c <__swbuf_r+0x4e>
 8013900:	4621      	mov	r1, r4
 8013902:	4628      	mov	r0, r5
 8013904:	f001 fee0 	bl	80156c8 <_fflush_r>
 8013908:	2800      	cmp	r0, #0
 801390a:	d1ed      	bne.n	80138e8 <__swbuf_r+0x2a>
 801390c:	68a3      	ldr	r3, [r4, #8]
 801390e:	3b01      	subs	r3, #1
 8013910:	60a3      	str	r3, [r4, #8]
 8013912:	6823      	ldr	r3, [r4, #0]
 8013914:	1c5a      	adds	r2, r3, #1
 8013916:	6022      	str	r2, [r4, #0]
 8013918:	701e      	strb	r6, [r3, #0]
 801391a:	6962      	ldr	r2, [r4, #20]
 801391c:	1c43      	adds	r3, r0, #1
 801391e:	429a      	cmp	r2, r3
 8013920:	d004      	beq.n	801392c <__swbuf_r+0x6e>
 8013922:	89a3      	ldrh	r3, [r4, #12]
 8013924:	07db      	lsls	r3, r3, #31
 8013926:	d5e1      	bpl.n	80138ec <__swbuf_r+0x2e>
 8013928:	2e0a      	cmp	r6, #10
 801392a:	d1df      	bne.n	80138ec <__swbuf_r+0x2e>
 801392c:	4621      	mov	r1, r4
 801392e:	4628      	mov	r0, r5
 8013930:	f001 feca 	bl	80156c8 <_fflush_r>
 8013934:	2800      	cmp	r0, #0
 8013936:	d0d9      	beq.n	80138ec <__swbuf_r+0x2e>
 8013938:	e7d6      	b.n	80138e8 <__swbuf_r+0x2a>
	...

0801393c <__swsetup_r>:
 801393c:	b538      	push	{r3, r4, r5, lr}
 801393e:	4b29      	ldr	r3, [pc, #164]	@ (80139e4 <__swsetup_r+0xa8>)
 8013940:	4605      	mov	r5, r0
 8013942:	6818      	ldr	r0, [r3, #0]
 8013944:	460c      	mov	r4, r1
 8013946:	b118      	cbz	r0, 8013950 <__swsetup_r+0x14>
 8013948:	6a03      	ldr	r3, [r0, #32]
 801394a:	b90b      	cbnz	r3, 8013950 <__swsetup_r+0x14>
 801394c:	f7ff feac 	bl	80136a8 <__sinit>
 8013950:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013954:	0719      	lsls	r1, r3, #28
 8013956:	d422      	bmi.n	801399e <__swsetup_r+0x62>
 8013958:	06da      	lsls	r2, r3, #27
 801395a:	d407      	bmi.n	801396c <__swsetup_r+0x30>
 801395c:	2209      	movs	r2, #9
 801395e:	602a      	str	r2, [r5, #0]
 8013960:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013964:	81a3      	strh	r3, [r4, #12]
 8013966:	f04f 30ff 	mov.w	r0, #4294967295
 801396a:	e033      	b.n	80139d4 <__swsetup_r+0x98>
 801396c:	0758      	lsls	r0, r3, #29
 801396e:	d512      	bpl.n	8013996 <__swsetup_r+0x5a>
 8013970:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013972:	b141      	cbz	r1, 8013986 <__swsetup_r+0x4a>
 8013974:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013978:	4299      	cmp	r1, r3
 801397a:	d002      	beq.n	8013982 <__swsetup_r+0x46>
 801397c:	4628      	mov	r0, r5
 801397e:	f000 ff0b 	bl	8014798 <_free_r>
 8013982:	2300      	movs	r3, #0
 8013984:	6363      	str	r3, [r4, #52]	@ 0x34
 8013986:	89a3      	ldrh	r3, [r4, #12]
 8013988:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801398c:	81a3      	strh	r3, [r4, #12]
 801398e:	2300      	movs	r3, #0
 8013990:	6063      	str	r3, [r4, #4]
 8013992:	6923      	ldr	r3, [r4, #16]
 8013994:	6023      	str	r3, [r4, #0]
 8013996:	89a3      	ldrh	r3, [r4, #12]
 8013998:	f043 0308 	orr.w	r3, r3, #8
 801399c:	81a3      	strh	r3, [r4, #12]
 801399e:	6923      	ldr	r3, [r4, #16]
 80139a0:	b94b      	cbnz	r3, 80139b6 <__swsetup_r+0x7a>
 80139a2:	89a3      	ldrh	r3, [r4, #12]
 80139a4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80139a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80139ac:	d003      	beq.n	80139b6 <__swsetup_r+0x7a>
 80139ae:	4621      	mov	r1, r4
 80139b0:	4628      	mov	r0, r5
 80139b2:	f001 fed7 	bl	8015764 <__smakebuf_r>
 80139b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80139ba:	f013 0201 	ands.w	r2, r3, #1
 80139be:	d00a      	beq.n	80139d6 <__swsetup_r+0x9a>
 80139c0:	2200      	movs	r2, #0
 80139c2:	60a2      	str	r2, [r4, #8]
 80139c4:	6962      	ldr	r2, [r4, #20]
 80139c6:	4252      	negs	r2, r2
 80139c8:	61a2      	str	r2, [r4, #24]
 80139ca:	6922      	ldr	r2, [r4, #16]
 80139cc:	b942      	cbnz	r2, 80139e0 <__swsetup_r+0xa4>
 80139ce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80139d2:	d1c5      	bne.n	8013960 <__swsetup_r+0x24>
 80139d4:	bd38      	pop	{r3, r4, r5, pc}
 80139d6:	0799      	lsls	r1, r3, #30
 80139d8:	bf58      	it	pl
 80139da:	6962      	ldrpl	r2, [r4, #20]
 80139dc:	60a2      	str	r2, [r4, #8]
 80139de:	e7f4      	b.n	80139ca <__swsetup_r+0x8e>
 80139e0:	2000      	movs	r0, #0
 80139e2:	e7f7      	b.n	80139d4 <__swsetup_r+0x98>
 80139e4:	20000130 	.word	0x20000130

080139e8 <memset>:
 80139e8:	4402      	add	r2, r0
 80139ea:	4603      	mov	r3, r0
 80139ec:	4293      	cmp	r3, r2
 80139ee:	d100      	bne.n	80139f2 <memset+0xa>
 80139f0:	4770      	bx	lr
 80139f2:	f803 1b01 	strb.w	r1, [r3], #1
 80139f6:	e7f9      	b.n	80139ec <memset+0x4>

080139f8 <_localeconv_r>:
 80139f8:	4800      	ldr	r0, [pc, #0]	@ (80139fc <_localeconv_r+0x4>)
 80139fa:	4770      	bx	lr
 80139fc:	20000270 	.word	0x20000270

08013a00 <_close_r>:
 8013a00:	b538      	push	{r3, r4, r5, lr}
 8013a02:	4d06      	ldr	r5, [pc, #24]	@ (8013a1c <_close_r+0x1c>)
 8013a04:	2300      	movs	r3, #0
 8013a06:	4604      	mov	r4, r0
 8013a08:	4608      	mov	r0, r1
 8013a0a:	602b      	str	r3, [r5, #0]
 8013a0c:	f7f6 fa16 	bl	8009e3c <_close>
 8013a10:	1c43      	adds	r3, r0, #1
 8013a12:	d102      	bne.n	8013a1a <_close_r+0x1a>
 8013a14:	682b      	ldr	r3, [r5, #0]
 8013a16:	b103      	cbz	r3, 8013a1a <_close_r+0x1a>
 8013a18:	6023      	str	r3, [r4, #0]
 8013a1a:	bd38      	pop	{r3, r4, r5, pc}
 8013a1c:	20001248 	.word	0x20001248

08013a20 <_lseek_r>:
 8013a20:	b538      	push	{r3, r4, r5, lr}
 8013a22:	4d07      	ldr	r5, [pc, #28]	@ (8013a40 <_lseek_r+0x20>)
 8013a24:	4604      	mov	r4, r0
 8013a26:	4608      	mov	r0, r1
 8013a28:	4611      	mov	r1, r2
 8013a2a:	2200      	movs	r2, #0
 8013a2c:	602a      	str	r2, [r5, #0]
 8013a2e:	461a      	mov	r2, r3
 8013a30:	f7f6 fa2b 	bl	8009e8a <_lseek>
 8013a34:	1c43      	adds	r3, r0, #1
 8013a36:	d102      	bne.n	8013a3e <_lseek_r+0x1e>
 8013a38:	682b      	ldr	r3, [r5, #0]
 8013a3a:	b103      	cbz	r3, 8013a3e <_lseek_r+0x1e>
 8013a3c:	6023      	str	r3, [r4, #0]
 8013a3e:	bd38      	pop	{r3, r4, r5, pc}
 8013a40:	20001248 	.word	0x20001248

08013a44 <_read_r>:
 8013a44:	b538      	push	{r3, r4, r5, lr}
 8013a46:	4d07      	ldr	r5, [pc, #28]	@ (8013a64 <_read_r+0x20>)
 8013a48:	4604      	mov	r4, r0
 8013a4a:	4608      	mov	r0, r1
 8013a4c:	4611      	mov	r1, r2
 8013a4e:	2200      	movs	r2, #0
 8013a50:	602a      	str	r2, [r5, #0]
 8013a52:	461a      	mov	r2, r3
 8013a54:	f7f6 f9d5 	bl	8009e02 <_read>
 8013a58:	1c43      	adds	r3, r0, #1
 8013a5a:	d102      	bne.n	8013a62 <_read_r+0x1e>
 8013a5c:	682b      	ldr	r3, [r5, #0]
 8013a5e:	b103      	cbz	r3, 8013a62 <_read_r+0x1e>
 8013a60:	6023      	str	r3, [r4, #0]
 8013a62:	bd38      	pop	{r3, r4, r5, pc}
 8013a64:	20001248 	.word	0x20001248

08013a68 <_write_r>:
 8013a68:	b538      	push	{r3, r4, r5, lr}
 8013a6a:	4d07      	ldr	r5, [pc, #28]	@ (8013a88 <_write_r+0x20>)
 8013a6c:	4604      	mov	r4, r0
 8013a6e:	4608      	mov	r0, r1
 8013a70:	4611      	mov	r1, r2
 8013a72:	2200      	movs	r2, #0
 8013a74:	602a      	str	r2, [r5, #0]
 8013a76:	461a      	mov	r2, r3
 8013a78:	f7f5 fc62 	bl	8009340 <_write>
 8013a7c:	1c43      	adds	r3, r0, #1
 8013a7e:	d102      	bne.n	8013a86 <_write_r+0x1e>
 8013a80:	682b      	ldr	r3, [r5, #0]
 8013a82:	b103      	cbz	r3, 8013a86 <_write_r+0x1e>
 8013a84:	6023      	str	r3, [r4, #0]
 8013a86:	bd38      	pop	{r3, r4, r5, pc}
 8013a88:	20001248 	.word	0x20001248

08013a8c <__errno>:
 8013a8c:	4b01      	ldr	r3, [pc, #4]	@ (8013a94 <__errno+0x8>)
 8013a8e:	6818      	ldr	r0, [r3, #0]
 8013a90:	4770      	bx	lr
 8013a92:	bf00      	nop
 8013a94:	20000130 	.word	0x20000130

08013a98 <__libc_init_array>:
 8013a98:	b570      	push	{r4, r5, r6, lr}
 8013a9a:	4d0d      	ldr	r5, [pc, #52]	@ (8013ad0 <__libc_init_array+0x38>)
 8013a9c:	4c0d      	ldr	r4, [pc, #52]	@ (8013ad4 <__libc_init_array+0x3c>)
 8013a9e:	1b64      	subs	r4, r4, r5
 8013aa0:	10a4      	asrs	r4, r4, #2
 8013aa2:	2600      	movs	r6, #0
 8013aa4:	42a6      	cmp	r6, r4
 8013aa6:	d109      	bne.n	8013abc <__libc_init_array+0x24>
 8013aa8:	4d0b      	ldr	r5, [pc, #44]	@ (8013ad8 <__libc_init_array+0x40>)
 8013aaa:	4c0c      	ldr	r4, [pc, #48]	@ (8013adc <__libc_init_array+0x44>)
 8013aac:	f001 ffd6 	bl	8015a5c <_init>
 8013ab0:	1b64      	subs	r4, r4, r5
 8013ab2:	10a4      	asrs	r4, r4, #2
 8013ab4:	2600      	movs	r6, #0
 8013ab6:	42a6      	cmp	r6, r4
 8013ab8:	d105      	bne.n	8013ac6 <__libc_init_array+0x2e>
 8013aba:	bd70      	pop	{r4, r5, r6, pc}
 8013abc:	f855 3b04 	ldr.w	r3, [r5], #4
 8013ac0:	4798      	blx	r3
 8013ac2:	3601      	adds	r6, #1
 8013ac4:	e7ee      	b.n	8013aa4 <__libc_init_array+0xc>
 8013ac6:	f855 3b04 	ldr.w	r3, [r5], #4
 8013aca:	4798      	blx	r3
 8013acc:	3601      	adds	r6, #1
 8013ace:	e7f2      	b.n	8013ab6 <__libc_init_array+0x1e>
 8013ad0:	0801667c 	.word	0x0801667c
 8013ad4:	0801667c 	.word	0x0801667c
 8013ad8:	0801667c 	.word	0x0801667c
 8013adc:	08016680 	.word	0x08016680

08013ae0 <__retarget_lock_init_recursive>:
 8013ae0:	4770      	bx	lr

08013ae2 <__retarget_lock_acquire_recursive>:
 8013ae2:	4770      	bx	lr

08013ae4 <__retarget_lock_release_recursive>:
 8013ae4:	4770      	bx	lr

08013ae6 <quorem>:
 8013ae6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013aea:	6903      	ldr	r3, [r0, #16]
 8013aec:	690c      	ldr	r4, [r1, #16]
 8013aee:	42a3      	cmp	r3, r4
 8013af0:	4607      	mov	r7, r0
 8013af2:	db7e      	blt.n	8013bf2 <quorem+0x10c>
 8013af4:	3c01      	subs	r4, #1
 8013af6:	f101 0814 	add.w	r8, r1, #20
 8013afa:	00a3      	lsls	r3, r4, #2
 8013afc:	f100 0514 	add.w	r5, r0, #20
 8013b00:	9300      	str	r3, [sp, #0]
 8013b02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013b06:	9301      	str	r3, [sp, #4]
 8013b08:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013b0c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013b10:	3301      	adds	r3, #1
 8013b12:	429a      	cmp	r2, r3
 8013b14:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013b18:	fbb2 f6f3 	udiv	r6, r2, r3
 8013b1c:	d32e      	bcc.n	8013b7c <quorem+0x96>
 8013b1e:	f04f 0a00 	mov.w	sl, #0
 8013b22:	46c4      	mov	ip, r8
 8013b24:	46ae      	mov	lr, r5
 8013b26:	46d3      	mov	fp, sl
 8013b28:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013b2c:	b298      	uxth	r0, r3
 8013b2e:	fb06 a000 	mla	r0, r6, r0, sl
 8013b32:	0c02      	lsrs	r2, r0, #16
 8013b34:	0c1b      	lsrs	r3, r3, #16
 8013b36:	fb06 2303 	mla	r3, r6, r3, r2
 8013b3a:	f8de 2000 	ldr.w	r2, [lr]
 8013b3e:	b280      	uxth	r0, r0
 8013b40:	b292      	uxth	r2, r2
 8013b42:	1a12      	subs	r2, r2, r0
 8013b44:	445a      	add	r2, fp
 8013b46:	f8de 0000 	ldr.w	r0, [lr]
 8013b4a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013b4e:	b29b      	uxth	r3, r3
 8013b50:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8013b54:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8013b58:	b292      	uxth	r2, r2
 8013b5a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8013b5e:	45e1      	cmp	r9, ip
 8013b60:	f84e 2b04 	str.w	r2, [lr], #4
 8013b64:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8013b68:	d2de      	bcs.n	8013b28 <quorem+0x42>
 8013b6a:	9b00      	ldr	r3, [sp, #0]
 8013b6c:	58eb      	ldr	r3, [r5, r3]
 8013b6e:	b92b      	cbnz	r3, 8013b7c <quorem+0x96>
 8013b70:	9b01      	ldr	r3, [sp, #4]
 8013b72:	3b04      	subs	r3, #4
 8013b74:	429d      	cmp	r5, r3
 8013b76:	461a      	mov	r2, r3
 8013b78:	d32f      	bcc.n	8013bda <quorem+0xf4>
 8013b7a:	613c      	str	r4, [r7, #16]
 8013b7c:	4638      	mov	r0, r7
 8013b7e:	f001 f97d 	bl	8014e7c <__mcmp>
 8013b82:	2800      	cmp	r0, #0
 8013b84:	db25      	blt.n	8013bd2 <quorem+0xec>
 8013b86:	4629      	mov	r1, r5
 8013b88:	2000      	movs	r0, #0
 8013b8a:	f858 2b04 	ldr.w	r2, [r8], #4
 8013b8e:	f8d1 c000 	ldr.w	ip, [r1]
 8013b92:	fa1f fe82 	uxth.w	lr, r2
 8013b96:	fa1f f38c 	uxth.w	r3, ip
 8013b9a:	eba3 030e 	sub.w	r3, r3, lr
 8013b9e:	4403      	add	r3, r0
 8013ba0:	0c12      	lsrs	r2, r2, #16
 8013ba2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8013ba6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8013baa:	b29b      	uxth	r3, r3
 8013bac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013bb0:	45c1      	cmp	r9, r8
 8013bb2:	f841 3b04 	str.w	r3, [r1], #4
 8013bb6:	ea4f 4022 	mov.w	r0, r2, asr #16
 8013bba:	d2e6      	bcs.n	8013b8a <quorem+0xa4>
 8013bbc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013bc0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013bc4:	b922      	cbnz	r2, 8013bd0 <quorem+0xea>
 8013bc6:	3b04      	subs	r3, #4
 8013bc8:	429d      	cmp	r5, r3
 8013bca:	461a      	mov	r2, r3
 8013bcc:	d30b      	bcc.n	8013be6 <quorem+0x100>
 8013bce:	613c      	str	r4, [r7, #16]
 8013bd0:	3601      	adds	r6, #1
 8013bd2:	4630      	mov	r0, r6
 8013bd4:	b003      	add	sp, #12
 8013bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013bda:	6812      	ldr	r2, [r2, #0]
 8013bdc:	3b04      	subs	r3, #4
 8013bde:	2a00      	cmp	r2, #0
 8013be0:	d1cb      	bne.n	8013b7a <quorem+0x94>
 8013be2:	3c01      	subs	r4, #1
 8013be4:	e7c6      	b.n	8013b74 <quorem+0x8e>
 8013be6:	6812      	ldr	r2, [r2, #0]
 8013be8:	3b04      	subs	r3, #4
 8013bea:	2a00      	cmp	r2, #0
 8013bec:	d1ef      	bne.n	8013bce <quorem+0xe8>
 8013bee:	3c01      	subs	r4, #1
 8013bf0:	e7ea      	b.n	8013bc8 <quorem+0xe2>
 8013bf2:	2000      	movs	r0, #0
 8013bf4:	e7ee      	b.n	8013bd4 <quorem+0xee>
	...

08013bf8 <_dtoa_r>:
 8013bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bfc:	69c7      	ldr	r7, [r0, #28]
 8013bfe:	b097      	sub	sp, #92	@ 0x5c
 8013c00:	ed8d 0b04 	vstr	d0, [sp, #16]
 8013c04:	ec55 4b10 	vmov	r4, r5, d0
 8013c08:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8013c0a:	9107      	str	r1, [sp, #28]
 8013c0c:	4681      	mov	r9, r0
 8013c0e:	920c      	str	r2, [sp, #48]	@ 0x30
 8013c10:	9311      	str	r3, [sp, #68]	@ 0x44
 8013c12:	b97f      	cbnz	r7, 8013c34 <_dtoa_r+0x3c>
 8013c14:	2010      	movs	r0, #16
 8013c16:	f000 fe09 	bl	801482c <malloc>
 8013c1a:	4602      	mov	r2, r0
 8013c1c:	f8c9 001c 	str.w	r0, [r9, #28]
 8013c20:	b920      	cbnz	r0, 8013c2c <_dtoa_r+0x34>
 8013c22:	4ba9      	ldr	r3, [pc, #676]	@ (8013ec8 <_dtoa_r+0x2d0>)
 8013c24:	21ef      	movs	r1, #239	@ 0xef
 8013c26:	48a9      	ldr	r0, [pc, #676]	@ (8013ecc <_dtoa_r+0x2d4>)
 8013c28:	f001 fe32 	bl	8015890 <__assert_func>
 8013c2c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8013c30:	6007      	str	r7, [r0, #0]
 8013c32:	60c7      	str	r7, [r0, #12]
 8013c34:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8013c38:	6819      	ldr	r1, [r3, #0]
 8013c3a:	b159      	cbz	r1, 8013c54 <_dtoa_r+0x5c>
 8013c3c:	685a      	ldr	r2, [r3, #4]
 8013c3e:	604a      	str	r2, [r1, #4]
 8013c40:	2301      	movs	r3, #1
 8013c42:	4093      	lsls	r3, r2
 8013c44:	608b      	str	r3, [r1, #8]
 8013c46:	4648      	mov	r0, r9
 8013c48:	f000 fee6 	bl	8014a18 <_Bfree>
 8013c4c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8013c50:	2200      	movs	r2, #0
 8013c52:	601a      	str	r2, [r3, #0]
 8013c54:	1e2b      	subs	r3, r5, #0
 8013c56:	bfb9      	ittee	lt
 8013c58:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8013c5c:	9305      	strlt	r3, [sp, #20]
 8013c5e:	2300      	movge	r3, #0
 8013c60:	6033      	strge	r3, [r6, #0]
 8013c62:	9f05      	ldr	r7, [sp, #20]
 8013c64:	4b9a      	ldr	r3, [pc, #616]	@ (8013ed0 <_dtoa_r+0x2d8>)
 8013c66:	bfbc      	itt	lt
 8013c68:	2201      	movlt	r2, #1
 8013c6a:	6032      	strlt	r2, [r6, #0]
 8013c6c:	43bb      	bics	r3, r7
 8013c6e:	d112      	bne.n	8013c96 <_dtoa_r+0x9e>
 8013c70:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8013c72:	f242 730f 	movw	r3, #9999	@ 0x270f
 8013c76:	6013      	str	r3, [r2, #0]
 8013c78:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013c7c:	4323      	orrs	r3, r4
 8013c7e:	f000 855a 	beq.w	8014736 <_dtoa_r+0xb3e>
 8013c82:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8013c84:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8013ee4 <_dtoa_r+0x2ec>
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	f000 855c 	beq.w	8014746 <_dtoa_r+0xb4e>
 8013c8e:	f10a 0303 	add.w	r3, sl, #3
 8013c92:	f000 bd56 	b.w	8014742 <_dtoa_r+0xb4a>
 8013c96:	ed9d 7b04 	vldr	d7, [sp, #16]
 8013c9a:	2200      	movs	r2, #0
 8013c9c:	ec51 0b17 	vmov	r0, r1, d7
 8013ca0:	2300      	movs	r3, #0
 8013ca2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8013ca6:	f7f4 ff17 	bl	8008ad8 <__aeabi_dcmpeq>
 8013caa:	4680      	mov	r8, r0
 8013cac:	b158      	cbz	r0, 8013cc6 <_dtoa_r+0xce>
 8013cae:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8013cb0:	2301      	movs	r3, #1
 8013cb2:	6013      	str	r3, [r2, #0]
 8013cb4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8013cb6:	b113      	cbz	r3, 8013cbe <_dtoa_r+0xc6>
 8013cb8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8013cba:	4b86      	ldr	r3, [pc, #536]	@ (8013ed4 <_dtoa_r+0x2dc>)
 8013cbc:	6013      	str	r3, [r2, #0]
 8013cbe:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8013ee8 <_dtoa_r+0x2f0>
 8013cc2:	f000 bd40 	b.w	8014746 <_dtoa_r+0xb4e>
 8013cc6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8013cca:	aa14      	add	r2, sp, #80	@ 0x50
 8013ccc:	a915      	add	r1, sp, #84	@ 0x54
 8013cce:	4648      	mov	r0, r9
 8013cd0:	f001 f984 	bl	8014fdc <__d2b>
 8013cd4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8013cd8:	9002      	str	r0, [sp, #8]
 8013cda:	2e00      	cmp	r6, #0
 8013cdc:	d078      	beq.n	8013dd0 <_dtoa_r+0x1d8>
 8013cde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013ce0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8013ce4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013ce8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8013cec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8013cf0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8013cf4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8013cf8:	4619      	mov	r1, r3
 8013cfa:	2200      	movs	r2, #0
 8013cfc:	4b76      	ldr	r3, [pc, #472]	@ (8013ed8 <_dtoa_r+0x2e0>)
 8013cfe:	f7f4 facb 	bl	8008298 <__aeabi_dsub>
 8013d02:	a36b      	add	r3, pc, #428	@ (adr r3, 8013eb0 <_dtoa_r+0x2b8>)
 8013d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d08:	f7f4 fc7e 	bl	8008608 <__aeabi_dmul>
 8013d0c:	a36a      	add	r3, pc, #424	@ (adr r3, 8013eb8 <_dtoa_r+0x2c0>)
 8013d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d12:	f7f4 fac3 	bl	800829c <__adddf3>
 8013d16:	4604      	mov	r4, r0
 8013d18:	4630      	mov	r0, r6
 8013d1a:	460d      	mov	r5, r1
 8013d1c:	f7f4 fc0a 	bl	8008534 <__aeabi_i2d>
 8013d20:	a367      	add	r3, pc, #412	@ (adr r3, 8013ec0 <_dtoa_r+0x2c8>)
 8013d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d26:	f7f4 fc6f 	bl	8008608 <__aeabi_dmul>
 8013d2a:	4602      	mov	r2, r0
 8013d2c:	460b      	mov	r3, r1
 8013d2e:	4620      	mov	r0, r4
 8013d30:	4629      	mov	r1, r5
 8013d32:	f7f4 fab3 	bl	800829c <__adddf3>
 8013d36:	4604      	mov	r4, r0
 8013d38:	460d      	mov	r5, r1
 8013d3a:	f7f4 ff15 	bl	8008b68 <__aeabi_d2iz>
 8013d3e:	2200      	movs	r2, #0
 8013d40:	4607      	mov	r7, r0
 8013d42:	2300      	movs	r3, #0
 8013d44:	4620      	mov	r0, r4
 8013d46:	4629      	mov	r1, r5
 8013d48:	f7f4 fed0 	bl	8008aec <__aeabi_dcmplt>
 8013d4c:	b140      	cbz	r0, 8013d60 <_dtoa_r+0x168>
 8013d4e:	4638      	mov	r0, r7
 8013d50:	f7f4 fbf0 	bl	8008534 <__aeabi_i2d>
 8013d54:	4622      	mov	r2, r4
 8013d56:	462b      	mov	r3, r5
 8013d58:	f7f4 febe 	bl	8008ad8 <__aeabi_dcmpeq>
 8013d5c:	b900      	cbnz	r0, 8013d60 <_dtoa_r+0x168>
 8013d5e:	3f01      	subs	r7, #1
 8013d60:	2f16      	cmp	r7, #22
 8013d62:	d852      	bhi.n	8013e0a <_dtoa_r+0x212>
 8013d64:	4b5d      	ldr	r3, [pc, #372]	@ (8013edc <_dtoa_r+0x2e4>)
 8013d66:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8013d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d6e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8013d72:	f7f4 febb 	bl	8008aec <__aeabi_dcmplt>
 8013d76:	2800      	cmp	r0, #0
 8013d78:	d049      	beq.n	8013e0e <_dtoa_r+0x216>
 8013d7a:	3f01      	subs	r7, #1
 8013d7c:	2300      	movs	r3, #0
 8013d7e:	9310      	str	r3, [sp, #64]	@ 0x40
 8013d80:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8013d82:	1b9b      	subs	r3, r3, r6
 8013d84:	1e5a      	subs	r2, r3, #1
 8013d86:	bf45      	ittet	mi
 8013d88:	f1c3 0301 	rsbmi	r3, r3, #1
 8013d8c:	9300      	strmi	r3, [sp, #0]
 8013d8e:	2300      	movpl	r3, #0
 8013d90:	2300      	movmi	r3, #0
 8013d92:	9206      	str	r2, [sp, #24]
 8013d94:	bf54      	ite	pl
 8013d96:	9300      	strpl	r3, [sp, #0]
 8013d98:	9306      	strmi	r3, [sp, #24]
 8013d9a:	2f00      	cmp	r7, #0
 8013d9c:	db39      	blt.n	8013e12 <_dtoa_r+0x21a>
 8013d9e:	9b06      	ldr	r3, [sp, #24]
 8013da0:	970d      	str	r7, [sp, #52]	@ 0x34
 8013da2:	443b      	add	r3, r7
 8013da4:	9306      	str	r3, [sp, #24]
 8013da6:	2300      	movs	r3, #0
 8013da8:	9308      	str	r3, [sp, #32]
 8013daa:	9b07      	ldr	r3, [sp, #28]
 8013dac:	2b09      	cmp	r3, #9
 8013dae:	d863      	bhi.n	8013e78 <_dtoa_r+0x280>
 8013db0:	2b05      	cmp	r3, #5
 8013db2:	bfc4      	itt	gt
 8013db4:	3b04      	subgt	r3, #4
 8013db6:	9307      	strgt	r3, [sp, #28]
 8013db8:	9b07      	ldr	r3, [sp, #28]
 8013dba:	f1a3 0302 	sub.w	r3, r3, #2
 8013dbe:	bfcc      	ite	gt
 8013dc0:	2400      	movgt	r4, #0
 8013dc2:	2401      	movle	r4, #1
 8013dc4:	2b03      	cmp	r3, #3
 8013dc6:	d863      	bhi.n	8013e90 <_dtoa_r+0x298>
 8013dc8:	e8df f003 	tbb	[pc, r3]
 8013dcc:	2b375452 	.word	0x2b375452
 8013dd0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8013dd4:	441e      	add	r6, r3
 8013dd6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8013dda:	2b20      	cmp	r3, #32
 8013ddc:	bfc1      	itttt	gt
 8013dde:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8013de2:	409f      	lslgt	r7, r3
 8013de4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8013de8:	fa24 f303 	lsrgt.w	r3, r4, r3
 8013dec:	bfd6      	itet	le
 8013dee:	f1c3 0320 	rsble	r3, r3, #32
 8013df2:	ea47 0003 	orrgt.w	r0, r7, r3
 8013df6:	fa04 f003 	lslle.w	r0, r4, r3
 8013dfa:	f7f4 fb8b 	bl	8008514 <__aeabi_ui2d>
 8013dfe:	2201      	movs	r2, #1
 8013e00:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8013e04:	3e01      	subs	r6, #1
 8013e06:	9212      	str	r2, [sp, #72]	@ 0x48
 8013e08:	e776      	b.n	8013cf8 <_dtoa_r+0x100>
 8013e0a:	2301      	movs	r3, #1
 8013e0c:	e7b7      	b.n	8013d7e <_dtoa_r+0x186>
 8013e0e:	9010      	str	r0, [sp, #64]	@ 0x40
 8013e10:	e7b6      	b.n	8013d80 <_dtoa_r+0x188>
 8013e12:	9b00      	ldr	r3, [sp, #0]
 8013e14:	1bdb      	subs	r3, r3, r7
 8013e16:	9300      	str	r3, [sp, #0]
 8013e18:	427b      	negs	r3, r7
 8013e1a:	9308      	str	r3, [sp, #32]
 8013e1c:	2300      	movs	r3, #0
 8013e1e:	930d      	str	r3, [sp, #52]	@ 0x34
 8013e20:	e7c3      	b.n	8013daa <_dtoa_r+0x1b2>
 8013e22:	2301      	movs	r3, #1
 8013e24:	9309      	str	r3, [sp, #36]	@ 0x24
 8013e26:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013e28:	eb07 0b03 	add.w	fp, r7, r3
 8013e2c:	f10b 0301 	add.w	r3, fp, #1
 8013e30:	2b01      	cmp	r3, #1
 8013e32:	9303      	str	r3, [sp, #12]
 8013e34:	bfb8      	it	lt
 8013e36:	2301      	movlt	r3, #1
 8013e38:	e006      	b.n	8013e48 <_dtoa_r+0x250>
 8013e3a:	2301      	movs	r3, #1
 8013e3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8013e3e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	dd28      	ble.n	8013e96 <_dtoa_r+0x29e>
 8013e44:	469b      	mov	fp, r3
 8013e46:	9303      	str	r3, [sp, #12]
 8013e48:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8013e4c:	2100      	movs	r1, #0
 8013e4e:	2204      	movs	r2, #4
 8013e50:	f102 0514 	add.w	r5, r2, #20
 8013e54:	429d      	cmp	r5, r3
 8013e56:	d926      	bls.n	8013ea6 <_dtoa_r+0x2ae>
 8013e58:	6041      	str	r1, [r0, #4]
 8013e5a:	4648      	mov	r0, r9
 8013e5c:	f000 fd9c 	bl	8014998 <_Balloc>
 8013e60:	4682      	mov	sl, r0
 8013e62:	2800      	cmp	r0, #0
 8013e64:	d142      	bne.n	8013eec <_dtoa_r+0x2f4>
 8013e66:	4b1e      	ldr	r3, [pc, #120]	@ (8013ee0 <_dtoa_r+0x2e8>)
 8013e68:	4602      	mov	r2, r0
 8013e6a:	f240 11af 	movw	r1, #431	@ 0x1af
 8013e6e:	e6da      	b.n	8013c26 <_dtoa_r+0x2e>
 8013e70:	2300      	movs	r3, #0
 8013e72:	e7e3      	b.n	8013e3c <_dtoa_r+0x244>
 8013e74:	2300      	movs	r3, #0
 8013e76:	e7d5      	b.n	8013e24 <_dtoa_r+0x22c>
 8013e78:	2401      	movs	r4, #1
 8013e7a:	2300      	movs	r3, #0
 8013e7c:	9307      	str	r3, [sp, #28]
 8013e7e:	9409      	str	r4, [sp, #36]	@ 0x24
 8013e80:	f04f 3bff 	mov.w	fp, #4294967295
 8013e84:	2200      	movs	r2, #0
 8013e86:	f8cd b00c 	str.w	fp, [sp, #12]
 8013e8a:	2312      	movs	r3, #18
 8013e8c:	920c      	str	r2, [sp, #48]	@ 0x30
 8013e8e:	e7db      	b.n	8013e48 <_dtoa_r+0x250>
 8013e90:	2301      	movs	r3, #1
 8013e92:	9309      	str	r3, [sp, #36]	@ 0x24
 8013e94:	e7f4      	b.n	8013e80 <_dtoa_r+0x288>
 8013e96:	f04f 0b01 	mov.w	fp, #1
 8013e9a:	f8cd b00c 	str.w	fp, [sp, #12]
 8013e9e:	465b      	mov	r3, fp
 8013ea0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8013ea4:	e7d0      	b.n	8013e48 <_dtoa_r+0x250>
 8013ea6:	3101      	adds	r1, #1
 8013ea8:	0052      	lsls	r2, r2, #1
 8013eaa:	e7d1      	b.n	8013e50 <_dtoa_r+0x258>
 8013eac:	f3af 8000 	nop.w
 8013eb0:	636f4361 	.word	0x636f4361
 8013eb4:	3fd287a7 	.word	0x3fd287a7
 8013eb8:	8b60c8b3 	.word	0x8b60c8b3
 8013ebc:	3fc68a28 	.word	0x3fc68a28
 8013ec0:	509f79fb 	.word	0x509f79fb
 8013ec4:	3fd34413 	.word	0x3fd34413
 8013ec8:	08016341 	.word	0x08016341
 8013ecc:	08016358 	.word	0x08016358
 8013ed0:	7ff00000 	.word	0x7ff00000
 8013ed4:	08016311 	.word	0x08016311
 8013ed8:	3ff80000 	.word	0x3ff80000
 8013edc:	080164a8 	.word	0x080164a8
 8013ee0:	080163b0 	.word	0x080163b0
 8013ee4:	0801633d 	.word	0x0801633d
 8013ee8:	08016310 	.word	0x08016310
 8013eec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8013ef0:	6018      	str	r0, [r3, #0]
 8013ef2:	9b03      	ldr	r3, [sp, #12]
 8013ef4:	2b0e      	cmp	r3, #14
 8013ef6:	f200 80a1 	bhi.w	801403c <_dtoa_r+0x444>
 8013efa:	2c00      	cmp	r4, #0
 8013efc:	f000 809e 	beq.w	801403c <_dtoa_r+0x444>
 8013f00:	2f00      	cmp	r7, #0
 8013f02:	dd33      	ble.n	8013f6c <_dtoa_r+0x374>
 8013f04:	4b9c      	ldr	r3, [pc, #624]	@ (8014178 <_dtoa_r+0x580>)
 8013f06:	f007 020f 	and.w	r2, r7, #15
 8013f0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013f0e:	ed93 7b00 	vldr	d7, [r3]
 8013f12:	05f8      	lsls	r0, r7, #23
 8013f14:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8013f18:	ea4f 1427 	mov.w	r4, r7, asr #4
 8013f1c:	d516      	bpl.n	8013f4c <_dtoa_r+0x354>
 8013f1e:	4b97      	ldr	r3, [pc, #604]	@ (801417c <_dtoa_r+0x584>)
 8013f20:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8013f24:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013f28:	f7f4 fc98 	bl	800885c <__aeabi_ddiv>
 8013f2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013f30:	f004 040f 	and.w	r4, r4, #15
 8013f34:	2603      	movs	r6, #3
 8013f36:	4d91      	ldr	r5, [pc, #580]	@ (801417c <_dtoa_r+0x584>)
 8013f38:	b954      	cbnz	r4, 8013f50 <_dtoa_r+0x358>
 8013f3a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8013f3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013f42:	f7f4 fc8b 	bl	800885c <__aeabi_ddiv>
 8013f46:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013f4a:	e028      	b.n	8013f9e <_dtoa_r+0x3a6>
 8013f4c:	2602      	movs	r6, #2
 8013f4e:	e7f2      	b.n	8013f36 <_dtoa_r+0x33e>
 8013f50:	07e1      	lsls	r1, r4, #31
 8013f52:	d508      	bpl.n	8013f66 <_dtoa_r+0x36e>
 8013f54:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8013f58:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013f5c:	f7f4 fb54 	bl	8008608 <__aeabi_dmul>
 8013f60:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8013f64:	3601      	adds	r6, #1
 8013f66:	1064      	asrs	r4, r4, #1
 8013f68:	3508      	adds	r5, #8
 8013f6a:	e7e5      	b.n	8013f38 <_dtoa_r+0x340>
 8013f6c:	f000 80af 	beq.w	80140ce <_dtoa_r+0x4d6>
 8013f70:	427c      	negs	r4, r7
 8013f72:	4b81      	ldr	r3, [pc, #516]	@ (8014178 <_dtoa_r+0x580>)
 8013f74:	4d81      	ldr	r5, [pc, #516]	@ (801417c <_dtoa_r+0x584>)
 8013f76:	f004 020f 	and.w	r2, r4, #15
 8013f7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f82:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8013f86:	f7f4 fb3f 	bl	8008608 <__aeabi_dmul>
 8013f8a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013f8e:	1124      	asrs	r4, r4, #4
 8013f90:	2300      	movs	r3, #0
 8013f92:	2602      	movs	r6, #2
 8013f94:	2c00      	cmp	r4, #0
 8013f96:	f040 808f 	bne.w	80140b8 <_dtoa_r+0x4c0>
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	d1d3      	bne.n	8013f46 <_dtoa_r+0x34e>
 8013f9e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013fa0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8013fa4:	2b00      	cmp	r3, #0
 8013fa6:	f000 8094 	beq.w	80140d2 <_dtoa_r+0x4da>
 8013faa:	4b75      	ldr	r3, [pc, #468]	@ (8014180 <_dtoa_r+0x588>)
 8013fac:	2200      	movs	r2, #0
 8013fae:	4620      	mov	r0, r4
 8013fb0:	4629      	mov	r1, r5
 8013fb2:	f7f4 fd9b 	bl	8008aec <__aeabi_dcmplt>
 8013fb6:	2800      	cmp	r0, #0
 8013fb8:	f000 808b 	beq.w	80140d2 <_dtoa_r+0x4da>
 8013fbc:	9b03      	ldr	r3, [sp, #12]
 8013fbe:	2b00      	cmp	r3, #0
 8013fc0:	f000 8087 	beq.w	80140d2 <_dtoa_r+0x4da>
 8013fc4:	f1bb 0f00 	cmp.w	fp, #0
 8013fc8:	dd34      	ble.n	8014034 <_dtoa_r+0x43c>
 8013fca:	4620      	mov	r0, r4
 8013fcc:	4b6d      	ldr	r3, [pc, #436]	@ (8014184 <_dtoa_r+0x58c>)
 8013fce:	2200      	movs	r2, #0
 8013fd0:	4629      	mov	r1, r5
 8013fd2:	f7f4 fb19 	bl	8008608 <__aeabi_dmul>
 8013fd6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013fda:	f107 38ff 	add.w	r8, r7, #4294967295
 8013fde:	3601      	adds	r6, #1
 8013fe0:	465c      	mov	r4, fp
 8013fe2:	4630      	mov	r0, r6
 8013fe4:	f7f4 faa6 	bl	8008534 <__aeabi_i2d>
 8013fe8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013fec:	f7f4 fb0c 	bl	8008608 <__aeabi_dmul>
 8013ff0:	4b65      	ldr	r3, [pc, #404]	@ (8014188 <_dtoa_r+0x590>)
 8013ff2:	2200      	movs	r2, #0
 8013ff4:	f7f4 f952 	bl	800829c <__adddf3>
 8013ff8:	4605      	mov	r5, r0
 8013ffa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8013ffe:	2c00      	cmp	r4, #0
 8014000:	d16a      	bne.n	80140d8 <_dtoa_r+0x4e0>
 8014002:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014006:	4b61      	ldr	r3, [pc, #388]	@ (801418c <_dtoa_r+0x594>)
 8014008:	2200      	movs	r2, #0
 801400a:	f7f4 f945 	bl	8008298 <__aeabi_dsub>
 801400e:	4602      	mov	r2, r0
 8014010:	460b      	mov	r3, r1
 8014012:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8014016:	462a      	mov	r2, r5
 8014018:	4633      	mov	r3, r6
 801401a:	f7f4 fd85 	bl	8008b28 <__aeabi_dcmpgt>
 801401e:	2800      	cmp	r0, #0
 8014020:	f040 8298 	bne.w	8014554 <_dtoa_r+0x95c>
 8014024:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014028:	462a      	mov	r2, r5
 801402a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801402e:	f7f4 fd5d 	bl	8008aec <__aeabi_dcmplt>
 8014032:	bb38      	cbnz	r0, 8014084 <_dtoa_r+0x48c>
 8014034:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8014038:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801403c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801403e:	2b00      	cmp	r3, #0
 8014040:	f2c0 8157 	blt.w	80142f2 <_dtoa_r+0x6fa>
 8014044:	2f0e      	cmp	r7, #14
 8014046:	f300 8154 	bgt.w	80142f2 <_dtoa_r+0x6fa>
 801404a:	4b4b      	ldr	r3, [pc, #300]	@ (8014178 <_dtoa_r+0x580>)
 801404c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8014050:	ed93 7b00 	vldr	d7, [r3]
 8014054:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014056:	2b00      	cmp	r3, #0
 8014058:	ed8d 7b00 	vstr	d7, [sp]
 801405c:	f280 80e5 	bge.w	801422a <_dtoa_r+0x632>
 8014060:	9b03      	ldr	r3, [sp, #12]
 8014062:	2b00      	cmp	r3, #0
 8014064:	f300 80e1 	bgt.w	801422a <_dtoa_r+0x632>
 8014068:	d10c      	bne.n	8014084 <_dtoa_r+0x48c>
 801406a:	4b48      	ldr	r3, [pc, #288]	@ (801418c <_dtoa_r+0x594>)
 801406c:	2200      	movs	r2, #0
 801406e:	ec51 0b17 	vmov	r0, r1, d7
 8014072:	f7f4 fac9 	bl	8008608 <__aeabi_dmul>
 8014076:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801407a:	f7f4 fd4b 	bl	8008b14 <__aeabi_dcmpge>
 801407e:	2800      	cmp	r0, #0
 8014080:	f000 8266 	beq.w	8014550 <_dtoa_r+0x958>
 8014084:	2400      	movs	r4, #0
 8014086:	4625      	mov	r5, r4
 8014088:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801408a:	4656      	mov	r6, sl
 801408c:	ea6f 0803 	mvn.w	r8, r3
 8014090:	2700      	movs	r7, #0
 8014092:	4621      	mov	r1, r4
 8014094:	4648      	mov	r0, r9
 8014096:	f000 fcbf 	bl	8014a18 <_Bfree>
 801409a:	2d00      	cmp	r5, #0
 801409c:	f000 80bd 	beq.w	801421a <_dtoa_r+0x622>
 80140a0:	b12f      	cbz	r7, 80140ae <_dtoa_r+0x4b6>
 80140a2:	42af      	cmp	r7, r5
 80140a4:	d003      	beq.n	80140ae <_dtoa_r+0x4b6>
 80140a6:	4639      	mov	r1, r7
 80140a8:	4648      	mov	r0, r9
 80140aa:	f000 fcb5 	bl	8014a18 <_Bfree>
 80140ae:	4629      	mov	r1, r5
 80140b0:	4648      	mov	r0, r9
 80140b2:	f000 fcb1 	bl	8014a18 <_Bfree>
 80140b6:	e0b0      	b.n	801421a <_dtoa_r+0x622>
 80140b8:	07e2      	lsls	r2, r4, #31
 80140ba:	d505      	bpl.n	80140c8 <_dtoa_r+0x4d0>
 80140bc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80140c0:	f7f4 faa2 	bl	8008608 <__aeabi_dmul>
 80140c4:	3601      	adds	r6, #1
 80140c6:	2301      	movs	r3, #1
 80140c8:	1064      	asrs	r4, r4, #1
 80140ca:	3508      	adds	r5, #8
 80140cc:	e762      	b.n	8013f94 <_dtoa_r+0x39c>
 80140ce:	2602      	movs	r6, #2
 80140d0:	e765      	b.n	8013f9e <_dtoa_r+0x3a6>
 80140d2:	9c03      	ldr	r4, [sp, #12]
 80140d4:	46b8      	mov	r8, r7
 80140d6:	e784      	b.n	8013fe2 <_dtoa_r+0x3ea>
 80140d8:	4b27      	ldr	r3, [pc, #156]	@ (8014178 <_dtoa_r+0x580>)
 80140da:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80140dc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80140e0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80140e4:	4454      	add	r4, sl
 80140e6:	2900      	cmp	r1, #0
 80140e8:	d054      	beq.n	8014194 <_dtoa_r+0x59c>
 80140ea:	4929      	ldr	r1, [pc, #164]	@ (8014190 <_dtoa_r+0x598>)
 80140ec:	2000      	movs	r0, #0
 80140ee:	f7f4 fbb5 	bl	800885c <__aeabi_ddiv>
 80140f2:	4633      	mov	r3, r6
 80140f4:	462a      	mov	r2, r5
 80140f6:	f7f4 f8cf 	bl	8008298 <__aeabi_dsub>
 80140fa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80140fe:	4656      	mov	r6, sl
 8014100:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014104:	f7f4 fd30 	bl	8008b68 <__aeabi_d2iz>
 8014108:	4605      	mov	r5, r0
 801410a:	f7f4 fa13 	bl	8008534 <__aeabi_i2d>
 801410e:	4602      	mov	r2, r0
 8014110:	460b      	mov	r3, r1
 8014112:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014116:	f7f4 f8bf 	bl	8008298 <__aeabi_dsub>
 801411a:	3530      	adds	r5, #48	@ 0x30
 801411c:	4602      	mov	r2, r0
 801411e:	460b      	mov	r3, r1
 8014120:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8014124:	f806 5b01 	strb.w	r5, [r6], #1
 8014128:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801412c:	f7f4 fcde 	bl	8008aec <__aeabi_dcmplt>
 8014130:	2800      	cmp	r0, #0
 8014132:	d172      	bne.n	801421a <_dtoa_r+0x622>
 8014134:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014138:	4911      	ldr	r1, [pc, #68]	@ (8014180 <_dtoa_r+0x588>)
 801413a:	2000      	movs	r0, #0
 801413c:	f7f4 f8ac 	bl	8008298 <__aeabi_dsub>
 8014140:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8014144:	f7f4 fcd2 	bl	8008aec <__aeabi_dcmplt>
 8014148:	2800      	cmp	r0, #0
 801414a:	f040 80b4 	bne.w	80142b6 <_dtoa_r+0x6be>
 801414e:	42a6      	cmp	r6, r4
 8014150:	f43f af70 	beq.w	8014034 <_dtoa_r+0x43c>
 8014154:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8014158:	4b0a      	ldr	r3, [pc, #40]	@ (8014184 <_dtoa_r+0x58c>)
 801415a:	2200      	movs	r2, #0
 801415c:	f7f4 fa54 	bl	8008608 <__aeabi_dmul>
 8014160:	4b08      	ldr	r3, [pc, #32]	@ (8014184 <_dtoa_r+0x58c>)
 8014162:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8014166:	2200      	movs	r2, #0
 8014168:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801416c:	f7f4 fa4c 	bl	8008608 <__aeabi_dmul>
 8014170:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014174:	e7c4      	b.n	8014100 <_dtoa_r+0x508>
 8014176:	bf00      	nop
 8014178:	080164a8 	.word	0x080164a8
 801417c:	08016480 	.word	0x08016480
 8014180:	3ff00000 	.word	0x3ff00000
 8014184:	40240000 	.word	0x40240000
 8014188:	401c0000 	.word	0x401c0000
 801418c:	40140000 	.word	0x40140000
 8014190:	3fe00000 	.word	0x3fe00000
 8014194:	4631      	mov	r1, r6
 8014196:	4628      	mov	r0, r5
 8014198:	f7f4 fa36 	bl	8008608 <__aeabi_dmul>
 801419c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80141a0:	9413      	str	r4, [sp, #76]	@ 0x4c
 80141a2:	4656      	mov	r6, sl
 80141a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80141a8:	f7f4 fcde 	bl	8008b68 <__aeabi_d2iz>
 80141ac:	4605      	mov	r5, r0
 80141ae:	f7f4 f9c1 	bl	8008534 <__aeabi_i2d>
 80141b2:	4602      	mov	r2, r0
 80141b4:	460b      	mov	r3, r1
 80141b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80141ba:	f7f4 f86d 	bl	8008298 <__aeabi_dsub>
 80141be:	3530      	adds	r5, #48	@ 0x30
 80141c0:	f806 5b01 	strb.w	r5, [r6], #1
 80141c4:	4602      	mov	r2, r0
 80141c6:	460b      	mov	r3, r1
 80141c8:	42a6      	cmp	r6, r4
 80141ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80141ce:	f04f 0200 	mov.w	r2, #0
 80141d2:	d124      	bne.n	801421e <_dtoa_r+0x626>
 80141d4:	4baf      	ldr	r3, [pc, #700]	@ (8014494 <_dtoa_r+0x89c>)
 80141d6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80141da:	f7f4 f85f 	bl	800829c <__adddf3>
 80141de:	4602      	mov	r2, r0
 80141e0:	460b      	mov	r3, r1
 80141e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80141e6:	f7f4 fc9f 	bl	8008b28 <__aeabi_dcmpgt>
 80141ea:	2800      	cmp	r0, #0
 80141ec:	d163      	bne.n	80142b6 <_dtoa_r+0x6be>
 80141ee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80141f2:	49a8      	ldr	r1, [pc, #672]	@ (8014494 <_dtoa_r+0x89c>)
 80141f4:	2000      	movs	r0, #0
 80141f6:	f7f4 f84f 	bl	8008298 <__aeabi_dsub>
 80141fa:	4602      	mov	r2, r0
 80141fc:	460b      	mov	r3, r1
 80141fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014202:	f7f4 fc73 	bl	8008aec <__aeabi_dcmplt>
 8014206:	2800      	cmp	r0, #0
 8014208:	f43f af14 	beq.w	8014034 <_dtoa_r+0x43c>
 801420c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801420e:	1e73      	subs	r3, r6, #1
 8014210:	9313      	str	r3, [sp, #76]	@ 0x4c
 8014212:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8014216:	2b30      	cmp	r3, #48	@ 0x30
 8014218:	d0f8      	beq.n	801420c <_dtoa_r+0x614>
 801421a:	4647      	mov	r7, r8
 801421c:	e03b      	b.n	8014296 <_dtoa_r+0x69e>
 801421e:	4b9e      	ldr	r3, [pc, #632]	@ (8014498 <_dtoa_r+0x8a0>)
 8014220:	f7f4 f9f2 	bl	8008608 <__aeabi_dmul>
 8014224:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014228:	e7bc      	b.n	80141a4 <_dtoa_r+0x5ac>
 801422a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801422e:	4656      	mov	r6, sl
 8014230:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014234:	4620      	mov	r0, r4
 8014236:	4629      	mov	r1, r5
 8014238:	f7f4 fb10 	bl	800885c <__aeabi_ddiv>
 801423c:	f7f4 fc94 	bl	8008b68 <__aeabi_d2iz>
 8014240:	4680      	mov	r8, r0
 8014242:	f7f4 f977 	bl	8008534 <__aeabi_i2d>
 8014246:	e9dd 2300 	ldrd	r2, r3, [sp]
 801424a:	f7f4 f9dd 	bl	8008608 <__aeabi_dmul>
 801424e:	4602      	mov	r2, r0
 8014250:	460b      	mov	r3, r1
 8014252:	4620      	mov	r0, r4
 8014254:	4629      	mov	r1, r5
 8014256:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801425a:	f7f4 f81d 	bl	8008298 <__aeabi_dsub>
 801425e:	f806 4b01 	strb.w	r4, [r6], #1
 8014262:	9d03      	ldr	r5, [sp, #12]
 8014264:	eba6 040a 	sub.w	r4, r6, sl
 8014268:	42a5      	cmp	r5, r4
 801426a:	4602      	mov	r2, r0
 801426c:	460b      	mov	r3, r1
 801426e:	d133      	bne.n	80142d8 <_dtoa_r+0x6e0>
 8014270:	f7f4 f814 	bl	800829c <__adddf3>
 8014274:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014278:	4604      	mov	r4, r0
 801427a:	460d      	mov	r5, r1
 801427c:	f7f4 fc54 	bl	8008b28 <__aeabi_dcmpgt>
 8014280:	b9c0      	cbnz	r0, 80142b4 <_dtoa_r+0x6bc>
 8014282:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014286:	4620      	mov	r0, r4
 8014288:	4629      	mov	r1, r5
 801428a:	f7f4 fc25 	bl	8008ad8 <__aeabi_dcmpeq>
 801428e:	b110      	cbz	r0, 8014296 <_dtoa_r+0x69e>
 8014290:	f018 0f01 	tst.w	r8, #1
 8014294:	d10e      	bne.n	80142b4 <_dtoa_r+0x6bc>
 8014296:	9902      	ldr	r1, [sp, #8]
 8014298:	4648      	mov	r0, r9
 801429a:	f000 fbbd 	bl	8014a18 <_Bfree>
 801429e:	2300      	movs	r3, #0
 80142a0:	7033      	strb	r3, [r6, #0]
 80142a2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80142a4:	3701      	adds	r7, #1
 80142a6:	601f      	str	r7, [r3, #0]
 80142a8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80142aa:	2b00      	cmp	r3, #0
 80142ac:	f000 824b 	beq.w	8014746 <_dtoa_r+0xb4e>
 80142b0:	601e      	str	r6, [r3, #0]
 80142b2:	e248      	b.n	8014746 <_dtoa_r+0xb4e>
 80142b4:	46b8      	mov	r8, r7
 80142b6:	4633      	mov	r3, r6
 80142b8:	461e      	mov	r6, r3
 80142ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80142be:	2a39      	cmp	r2, #57	@ 0x39
 80142c0:	d106      	bne.n	80142d0 <_dtoa_r+0x6d8>
 80142c2:	459a      	cmp	sl, r3
 80142c4:	d1f8      	bne.n	80142b8 <_dtoa_r+0x6c0>
 80142c6:	2230      	movs	r2, #48	@ 0x30
 80142c8:	f108 0801 	add.w	r8, r8, #1
 80142cc:	f88a 2000 	strb.w	r2, [sl]
 80142d0:	781a      	ldrb	r2, [r3, #0]
 80142d2:	3201      	adds	r2, #1
 80142d4:	701a      	strb	r2, [r3, #0]
 80142d6:	e7a0      	b.n	801421a <_dtoa_r+0x622>
 80142d8:	4b6f      	ldr	r3, [pc, #444]	@ (8014498 <_dtoa_r+0x8a0>)
 80142da:	2200      	movs	r2, #0
 80142dc:	f7f4 f994 	bl	8008608 <__aeabi_dmul>
 80142e0:	2200      	movs	r2, #0
 80142e2:	2300      	movs	r3, #0
 80142e4:	4604      	mov	r4, r0
 80142e6:	460d      	mov	r5, r1
 80142e8:	f7f4 fbf6 	bl	8008ad8 <__aeabi_dcmpeq>
 80142ec:	2800      	cmp	r0, #0
 80142ee:	d09f      	beq.n	8014230 <_dtoa_r+0x638>
 80142f0:	e7d1      	b.n	8014296 <_dtoa_r+0x69e>
 80142f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80142f4:	2a00      	cmp	r2, #0
 80142f6:	f000 80ea 	beq.w	80144ce <_dtoa_r+0x8d6>
 80142fa:	9a07      	ldr	r2, [sp, #28]
 80142fc:	2a01      	cmp	r2, #1
 80142fe:	f300 80cd 	bgt.w	801449c <_dtoa_r+0x8a4>
 8014302:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8014304:	2a00      	cmp	r2, #0
 8014306:	f000 80c1 	beq.w	801448c <_dtoa_r+0x894>
 801430a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801430e:	9c08      	ldr	r4, [sp, #32]
 8014310:	9e00      	ldr	r6, [sp, #0]
 8014312:	9a00      	ldr	r2, [sp, #0]
 8014314:	441a      	add	r2, r3
 8014316:	9200      	str	r2, [sp, #0]
 8014318:	9a06      	ldr	r2, [sp, #24]
 801431a:	2101      	movs	r1, #1
 801431c:	441a      	add	r2, r3
 801431e:	4648      	mov	r0, r9
 8014320:	9206      	str	r2, [sp, #24]
 8014322:	f000 fc2d 	bl	8014b80 <__i2b>
 8014326:	4605      	mov	r5, r0
 8014328:	b166      	cbz	r6, 8014344 <_dtoa_r+0x74c>
 801432a:	9b06      	ldr	r3, [sp, #24]
 801432c:	2b00      	cmp	r3, #0
 801432e:	dd09      	ble.n	8014344 <_dtoa_r+0x74c>
 8014330:	42b3      	cmp	r3, r6
 8014332:	9a00      	ldr	r2, [sp, #0]
 8014334:	bfa8      	it	ge
 8014336:	4633      	movge	r3, r6
 8014338:	1ad2      	subs	r2, r2, r3
 801433a:	9200      	str	r2, [sp, #0]
 801433c:	9a06      	ldr	r2, [sp, #24]
 801433e:	1af6      	subs	r6, r6, r3
 8014340:	1ad3      	subs	r3, r2, r3
 8014342:	9306      	str	r3, [sp, #24]
 8014344:	9b08      	ldr	r3, [sp, #32]
 8014346:	b30b      	cbz	r3, 801438c <_dtoa_r+0x794>
 8014348:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801434a:	2b00      	cmp	r3, #0
 801434c:	f000 80c6 	beq.w	80144dc <_dtoa_r+0x8e4>
 8014350:	2c00      	cmp	r4, #0
 8014352:	f000 80c0 	beq.w	80144d6 <_dtoa_r+0x8de>
 8014356:	4629      	mov	r1, r5
 8014358:	4622      	mov	r2, r4
 801435a:	4648      	mov	r0, r9
 801435c:	f000 fcc8 	bl	8014cf0 <__pow5mult>
 8014360:	9a02      	ldr	r2, [sp, #8]
 8014362:	4601      	mov	r1, r0
 8014364:	4605      	mov	r5, r0
 8014366:	4648      	mov	r0, r9
 8014368:	f000 fc20 	bl	8014bac <__multiply>
 801436c:	9902      	ldr	r1, [sp, #8]
 801436e:	4680      	mov	r8, r0
 8014370:	4648      	mov	r0, r9
 8014372:	f000 fb51 	bl	8014a18 <_Bfree>
 8014376:	9b08      	ldr	r3, [sp, #32]
 8014378:	1b1b      	subs	r3, r3, r4
 801437a:	9308      	str	r3, [sp, #32]
 801437c:	f000 80b1 	beq.w	80144e2 <_dtoa_r+0x8ea>
 8014380:	9a08      	ldr	r2, [sp, #32]
 8014382:	4641      	mov	r1, r8
 8014384:	4648      	mov	r0, r9
 8014386:	f000 fcb3 	bl	8014cf0 <__pow5mult>
 801438a:	9002      	str	r0, [sp, #8]
 801438c:	2101      	movs	r1, #1
 801438e:	4648      	mov	r0, r9
 8014390:	f000 fbf6 	bl	8014b80 <__i2b>
 8014394:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014396:	4604      	mov	r4, r0
 8014398:	2b00      	cmp	r3, #0
 801439a:	f000 81d8 	beq.w	801474e <_dtoa_r+0xb56>
 801439e:	461a      	mov	r2, r3
 80143a0:	4601      	mov	r1, r0
 80143a2:	4648      	mov	r0, r9
 80143a4:	f000 fca4 	bl	8014cf0 <__pow5mult>
 80143a8:	9b07      	ldr	r3, [sp, #28]
 80143aa:	2b01      	cmp	r3, #1
 80143ac:	4604      	mov	r4, r0
 80143ae:	f300 809f 	bgt.w	80144f0 <_dtoa_r+0x8f8>
 80143b2:	9b04      	ldr	r3, [sp, #16]
 80143b4:	2b00      	cmp	r3, #0
 80143b6:	f040 8097 	bne.w	80144e8 <_dtoa_r+0x8f0>
 80143ba:	9b05      	ldr	r3, [sp, #20]
 80143bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80143c0:	2b00      	cmp	r3, #0
 80143c2:	f040 8093 	bne.w	80144ec <_dtoa_r+0x8f4>
 80143c6:	9b05      	ldr	r3, [sp, #20]
 80143c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80143cc:	0d1b      	lsrs	r3, r3, #20
 80143ce:	051b      	lsls	r3, r3, #20
 80143d0:	b133      	cbz	r3, 80143e0 <_dtoa_r+0x7e8>
 80143d2:	9b00      	ldr	r3, [sp, #0]
 80143d4:	3301      	adds	r3, #1
 80143d6:	9300      	str	r3, [sp, #0]
 80143d8:	9b06      	ldr	r3, [sp, #24]
 80143da:	3301      	adds	r3, #1
 80143dc:	9306      	str	r3, [sp, #24]
 80143de:	2301      	movs	r3, #1
 80143e0:	9308      	str	r3, [sp, #32]
 80143e2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80143e4:	2b00      	cmp	r3, #0
 80143e6:	f000 81b8 	beq.w	801475a <_dtoa_r+0xb62>
 80143ea:	6923      	ldr	r3, [r4, #16]
 80143ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80143f0:	6918      	ldr	r0, [r3, #16]
 80143f2:	f000 fb79 	bl	8014ae8 <__hi0bits>
 80143f6:	f1c0 0020 	rsb	r0, r0, #32
 80143fa:	9b06      	ldr	r3, [sp, #24]
 80143fc:	4418      	add	r0, r3
 80143fe:	f010 001f 	ands.w	r0, r0, #31
 8014402:	f000 8082 	beq.w	801450a <_dtoa_r+0x912>
 8014406:	f1c0 0320 	rsb	r3, r0, #32
 801440a:	2b04      	cmp	r3, #4
 801440c:	dd73      	ble.n	80144f6 <_dtoa_r+0x8fe>
 801440e:	9b00      	ldr	r3, [sp, #0]
 8014410:	f1c0 001c 	rsb	r0, r0, #28
 8014414:	4403      	add	r3, r0
 8014416:	9300      	str	r3, [sp, #0]
 8014418:	9b06      	ldr	r3, [sp, #24]
 801441a:	4403      	add	r3, r0
 801441c:	4406      	add	r6, r0
 801441e:	9306      	str	r3, [sp, #24]
 8014420:	9b00      	ldr	r3, [sp, #0]
 8014422:	2b00      	cmp	r3, #0
 8014424:	dd05      	ble.n	8014432 <_dtoa_r+0x83a>
 8014426:	9902      	ldr	r1, [sp, #8]
 8014428:	461a      	mov	r2, r3
 801442a:	4648      	mov	r0, r9
 801442c:	f000 fcba 	bl	8014da4 <__lshift>
 8014430:	9002      	str	r0, [sp, #8]
 8014432:	9b06      	ldr	r3, [sp, #24]
 8014434:	2b00      	cmp	r3, #0
 8014436:	dd05      	ble.n	8014444 <_dtoa_r+0x84c>
 8014438:	4621      	mov	r1, r4
 801443a:	461a      	mov	r2, r3
 801443c:	4648      	mov	r0, r9
 801443e:	f000 fcb1 	bl	8014da4 <__lshift>
 8014442:	4604      	mov	r4, r0
 8014444:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014446:	2b00      	cmp	r3, #0
 8014448:	d061      	beq.n	801450e <_dtoa_r+0x916>
 801444a:	9802      	ldr	r0, [sp, #8]
 801444c:	4621      	mov	r1, r4
 801444e:	f000 fd15 	bl	8014e7c <__mcmp>
 8014452:	2800      	cmp	r0, #0
 8014454:	da5b      	bge.n	801450e <_dtoa_r+0x916>
 8014456:	2300      	movs	r3, #0
 8014458:	9902      	ldr	r1, [sp, #8]
 801445a:	220a      	movs	r2, #10
 801445c:	4648      	mov	r0, r9
 801445e:	f000 fafd 	bl	8014a5c <__multadd>
 8014462:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014464:	9002      	str	r0, [sp, #8]
 8014466:	f107 38ff 	add.w	r8, r7, #4294967295
 801446a:	2b00      	cmp	r3, #0
 801446c:	f000 8177 	beq.w	801475e <_dtoa_r+0xb66>
 8014470:	4629      	mov	r1, r5
 8014472:	2300      	movs	r3, #0
 8014474:	220a      	movs	r2, #10
 8014476:	4648      	mov	r0, r9
 8014478:	f000 faf0 	bl	8014a5c <__multadd>
 801447c:	f1bb 0f00 	cmp.w	fp, #0
 8014480:	4605      	mov	r5, r0
 8014482:	dc6f      	bgt.n	8014564 <_dtoa_r+0x96c>
 8014484:	9b07      	ldr	r3, [sp, #28]
 8014486:	2b02      	cmp	r3, #2
 8014488:	dc49      	bgt.n	801451e <_dtoa_r+0x926>
 801448a:	e06b      	b.n	8014564 <_dtoa_r+0x96c>
 801448c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801448e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8014492:	e73c      	b.n	801430e <_dtoa_r+0x716>
 8014494:	3fe00000 	.word	0x3fe00000
 8014498:	40240000 	.word	0x40240000
 801449c:	9b03      	ldr	r3, [sp, #12]
 801449e:	1e5c      	subs	r4, r3, #1
 80144a0:	9b08      	ldr	r3, [sp, #32]
 80144a2:	42a3      	cmp	r3, r4
 80144a4:	db09      	blt.n	80144ba <_dtoa_r+0x8c2>
 80144a6:	1b1c      	subs	r4, r3, r4
 80144a8:	9b03      	ldr	r3, [sp, #12]
 80144aa:	2b00      	cmp	r3, #0
 80144ac:	f6bf af30 	bge.w	8014310 <_dtoa_r+0x718>
 80144b0:	9b00      	ldr	r3, [sp, #0]
 80144b2:	9a03      	ldr	r2, [sp, #12]
 80144b4:	1a9e      	subs	r6, r3, r2
 80144b6:	2300      	movs	r3, #0
 80144b8:	e72b      	b.n	8014312 <_dtoa_r+0x71a>
 80144ba:	9b08      	ldr	r3, [sp, #32]
 80144bc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80144be:	9408      	str	r4, [sp, #32]
 80144c0:	1ae3      	subs	r3, r4, r3
 80144c2:	441a      	add	r2, r3
 80144c4:	9e00      	ldr	r6, [sp, #0]
 80144c6:	9b03      	ldr	r3, [sp, #12]
 80144c8:	920d      	str	r2, [sp, #52]	@ 0x34
 80144ca:	2400      	movs	r4, #0
 80144cc:	e721      	b.n	8014312 <_dtoa_r+0x71a>
 80144ce:	9c08      	ldr	r4, [sp, #32]
 80144d0:	9e00      	ldr	r6, [sp, #0]
 80144d2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80144d4:	e728      	b.n	8014328 <_dtoa_r+0x730>
 80144d6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80144da:	e751      	b.n	8014380 <_dtoa_r+0x788>
 80144dc:	9a08      	ldr	r2, [sp, #32]
 80144de:	9902      	ldr	r1, [sp, #8]
 80144e0:	e750      	b.n	8014384 <_dtoa_r+0x78c>
 80144e2:	f8cd 8008 	str.w	r8, [sp, #8]
 80144e6:	e751      	b.n	801438c <_dtoa_r+0x794>
 80144e8:	2300      	movs	r3, #0
 80144ea:	e779      	b.n	80143e0 <_dtoa_r+0x7e8>
 80144ec:	9b04      	ldr	r3, [sp, #16]
 80144ee:	e777      	b.n	80143e0 <_dtoa_r+0x7e8>
 80144f0:	2300      	movs	r3, #0
 80144f2:	9308      	str	r3, [sp, #32]
 80144f4:	e779      	b.n	80143ea <_dtoa_r+0x7f2>
 80144f6:	d093      	beq.n	8014420 <_dtoa_r+0x828>
 80144f8:	9a00      	ldr	r2, [sp, #0]
 80144fa:	331c      	adds	r3, #28
 80144fc:	441a      	add	r2, r3
 80144fe:	9200      	str	r2, [sp, #0]
 8014500:	9a06      	ldr	r2, [sp, #24]
 8014502:	441a      	add	r2, r3
 8014504:	441e      	add	r6, r3
 8014506:	9206      	str	r2, [sp, #24]
 8014508:	e78a      	b.n	8014420 <_dtoa_r+0x828>
 801450a:	4603      	mov	r3, r0
 801450c:	e7f4      	b.n	80144f8 <_dtoa_r+0x900>
 801450e:	9b03      	ldr	r3, [sp, #12]
 8014510:	2b00      	cmp	r3, #0
 8014512:	46b8      	mov	r8, r7
 8014514:	dc20      	bgt.n	8014558 <_dtoa_r+0x960>
 8014516:	469b      	mov	fp, r3
 8014518:	9b07      	ldr	r3, [sp, #28]
 801451a:	2b02      	cmp	r3, #2
 801451c:	dd1e      	ble.n	801455c <_dtoa_r+0x964>
 801451e:	f1bb 0f00 	cmp.w	fp, #0
 8014522:	f47f adb1 	bne.w	8014088 <_dtoa_r+0x490>
 8014526:	4621      	mov	r1, r4
 8014528:	465b      	mov	r3, fp
 801452a:	2205      	movs	r2, #5
 801452c:	4648      	mov	r0, r9
 801452e:	f000 fa95 	bl	8014a5c <__multadd>
 8014532:	4601      	mov	r1, r0
 8014534:	4604      	mov	r4, r0
 8014536:	9802      	ldr	r0, [sp, #8]
 8014538:	f000 fca0 	bl	8014e7c <__mcmp>
 801453c:	2800      	cmp	r0, #0
 801453e:	f77f ada3 	ble.w	8014088 <_dtoa_r+0x490>
 8014542:	4656      	mov	r6, sl
 8014544:	2331      	movs	r3, #49	@ 0x31
 8014546:	f806 3b01 	strb.w	r3, [r6], #1
 801454a:	f108 0801 	add.w	r8, r8, #1
 801454e:	e59f      	b.n	8014090 <_dtoa_r+0x498>
 8014550:	9c03      	ldr	r4, [sp, #12]
 8014552:	46b8      	mov	r8, r7
 8014554:	4625      	mov	r5, r4
 8014556:	e7f4      	b.n	8014542 <_dtoa_r+0x94a>
 8014558:	f8dd b00c 	ldr.w	fp, [sp, #12]
 801455c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801455e:	2b00      	cmp	r3, #0
 8014560:	f000 8101 	beq.w	8014766 <_dtoa_r+0xb6e>
 8014564:	2e00      	cmp	r6, #0
 8014566:	dd05      	ble.n	8014574 <_dtoa_r+0x97c>
 8014568:	4629      	mov	r1, r5
 801456a:	4632      	mov	r2, r6
 801456c:	4648      	mov	r0, r9
 801456e:	f000 fc19 	bl	8014da4 <__lshift>
 8014572:	4605      	mov	r5, r0
 8014574:	9b08      	ldr	r3, [sp, #32]
 8014576:	2b00      	cmp	r3, #0
 8014578:	d05c      	beq.n	8014634 <_dtoa_r+0xa3c>
 801457a:	6869      	ldr	r1, [r5, #4]
 801457c:	4648      	mov	r0, r9
 801457e:	f000 fa0b 	bl	8014998 <_Balloc>
 8014582:	4606      	mov	r6, r0
 8014584:	b928      	cbnz	r0, 8014592 <_dtoa_r+0x99a>
 8014586:	4b82      	ldr	r3, [pc, #520]	@ (8014790 <_dtoa_r+0xb98>)
 8014588:	4602      	mov	r2, r0
 801458a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801458e:	f7ff bb4a 	b.w	8013c26 <_dtoa_r+0x2e>
 8014592:	692a      	ldr	r2, [r5, #16]
 8014594:	3202      	adds	r2, #2
 8014596:	0092      	lsls	r2, r2, #2
 8014598:	f105 010c 	add.w	r1, r5, #12
 801459c:	300c      	adds	r0, #12
 801459e:	f001 f969 	bl	8015874 <memcpy>
 80145a2:	2201      	movs	r2, #1
 80145a4:	4631      	mov	r1, r6
 80145a6:	4648      	mov	r0, r9
 80145a8:	f000 fbfc 	bl	8014da4 <__lshift>
 80145ac:	f10a 0301 	add.w	r3, sl, #1
 80145b0:	9300      	str	r3, [sp, #0]
 80145b2:	eb0a 030b 	add.w	r3, sl, fp
 80145b6:	9308      	str	r3, [sp, #32]
 80145b8:	9b04      	ldr	r3, [sp, #16]
 80145ba:	f003 0301 	and.w	r3, r3, #1
 80145be:	462f      	mov	r7, r5
 80145c0:	9306      	str	r3, [sp, #24]
 80145c2:	4605      	mov	r5, r0
 80145c4:	9b00      	ldr	r3, [sp, #0]
 80145c6:	9802      	ldr	r0, [sp, #8]
 80145c8:	4621      	mov	r1, r4
 80145ca:	f103 3bff 	add.w	fp, r3, #4294967295
 80145ce:	f7ff fa8a 	bl	8013ae6 <quorem>
 80145d2:	4603      	mov	r3, r0
 80145d4:	3330      	adds	r3, #48	@ 0x30
 80145d6:	9003      	str	r0, [sp, #12]
 80145d8:	4639      	mov	r1, r7
 80145da:	9802      	ldr	r0, [sp, #8]
 80145dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80145de:	f000 fc4d 	bl	8014e7c <__mcmp>
 80145e2:	462a      	mov	r2, r5
 80145e4:	9004      	str	r0, [sp, #16]
 80145e6:	4621      	mov	r1, r4
 80145e8:	4648      	mov	r0, r9
 80145ea:	f000 fc63 	bl	8014eb4 <__mdiff>
 80145ee:	68c2      	ldr	r2, [r0, #12]
 80145f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80145f2:	4606      	mov	r6, r0
 80145f4:	bb02      	cbnz	r2, 8014638 <_dtoa_r+0xa40>
 80145f6:	4601      	mov	r1, r0
 80145f8:	9802      	ldr	r0, [sp, #8]
 80145fa:	f000 fc3f 	bl	8014e7c <__mcmp>
 80145fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014600:	4602      	mov	r2, r0
 8014602:	4631      	mov	r1, r6
 8014604:	4648      	mov	r0, r9
 8014606:	920c      	str	r2, [sp, #48]	@ 0x30
 8014608:	9309      	str	r3, [sp, #36]	@ 0x24
 801460a:	f000 fa05 	bl	8014a18 <_Bfree>
 801460e:	9b07      	ldr	r3, [sp, #28]
 8014610:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8014612:	9e00      	ldr	r6, [sp, #0]
 8014614:	ea42 0103 	orr.w	r1, r2, r3
 8014618:	9b06      	ldr	r3, [sp, #24]
 801461a:	4319      	orrs	r1, r3
 801461c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801461e:	d10d      	bne.n	801463c <_dtoa_r+0xa44>
 8014620:	2b39      	cmp	r3, #57	@ 0x39
 8014622:	d027      	beq.n	8014674 <_dtoa_r+0xa7c>
 8014624:	9a04      	ldr	r2, [sp, #16]
 8014626:	2a00      	cmp	r2, #0
 8014628:	dd01      	ble.n	801462e <_dtoa_r+0xa36>
 801462a:	9b03      	ldr	r3, [sp, #12]
 801462c:	3331      	adds	r3, #49	@ 0x31
 801462e:	f88b 3000 	strb.w	r3, [fp]
 8014632:	e52e      	b.n	8014092 <_dtoa_r+0x49a>
 8014634:	4628      	mov	r0, r5
 8014636:	e7b9      	b.n	80145ac <_dtoa_r+0x9b4>
 8014638:	2201      	movs	r2, #1
 801463a:	e7e2      	b.n	8014602 <_dtoa_r+0xa0a>
 801463c:	9904      	ldr	r1, [sp, #16]
 801463e:	2900      	cmp	r1, #0
 8014640:	db04      	blt.n	801464c <_dtoa_r+0xa54>
 8014642:	9807      	ldr	r0, [sp, #28]
 8014644:	4301      	orrs	r1, r0
 8014646:	9806      	ldr	r0, [sp, #24]
 8014648:	4301      	orrs	r1, r0
 801464a:	d120      	bne.n	801468e <_dtoa_r+0xa96>
 801464c:	2a00      	cmp	r2, #0
 801464e:	ddee      	ble.n	801462e <_dtoa_r+0xa36>
 8014650:	9902      	ldr	r1, [sp, #8]
 8014652:	9300      	str	r3, [sp, #0]
 8014654:	2201      	movs	r2, #1
 8014656:	4648      	mov	r0, r9
 8014658:	f000 fba4 	bl	8014da4 <__lshift>
 801465c:	4621      	mov	r1, r4
 801465e:	9002      	str	r0, [sp, #8]
 8014660:	f000 fc0c 	bl	8014e7c <__mcmp>
 8014664:	2800      	cmp	r0, #0
 8014666:	9b00      	ldr	r3, [sp, #0]
 8014668:	dc02      	bgt.n	8014670 <_dtoa_r+0xa78>
 801466a:	d1e0      	bne.n	801462e <_dtoa_r+0xa36>
 801466c:	07da      	lsls	r2, r3, #31
 801466e:	d5de      	bpl.n	801462e <_dtoa_r+0xa36>
 8014670:	2b39      	cmp	r3, #57	@ 0x39
 8014672:	d1da      	bne.n	801462a <_dtoa_r+0xa32>
 8014674:	2339      	movs	r3, #57	@ 0x39
 8014676:	f88b 3000 	strb.w	r3, [fp]
 801467a:	4633      	mov	r3, r6
 801467c:	461e      	mov	r6, r3
 801467e:	3b01      	subs	r3, #1
 8014680:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8014684:	2a39      	cmp	r2, #57	@ 0x39
 8014686:	d04e      	beq.n	8014726 <_dtoa_r+0xb2e>
 8014688:	3201      	adds	r2, #1
 801468a:	701a      	strb	r2, [r3, #0]
 801468c:	e501      	b.n	8014092 <_dtoa_r+0x49a>
 801468e:	2a00      	cmp	r2, #0
 8014690:	dd03      	ble.n	801469a <_dtoa_r+0xaa2>
 8014692:	2b39      	cmp	r3, #57	@ 0x39
 8014694:	d0ee      	beq.n	8014674 <_dtoa_r+0xa7c>
 8014696:	3301      	adds	r3, #1
 8014698:	e7c9      	b.n	801462e <_dtoa_r+0xa36>
 801469a:	9a00      	ldr	r2, [sp, #0]
 801469c:	9908      	ldr	r1, [sp, #32]
 801469e:	f802 3c01 	strb.w	r3, [r2, #-1]
 80146a2:	428a      	cmp	r2, r1
 80146a4:	d028      	beq.n	80146f8 <_dtoa_r+0xb00>
 80146a6:	9902      	ldr	r1, [sp, #8]
 80146a8:	2300      	movs	r3, #0
 80146aa:	220a      	movs	r2, #10
 80146ac:	4648      	mov	r0, r9
 80146ae:	f000 f9d5 	bl	8014a5c <__multadd>
 80146b2:	42af      	cmp	r7, r5
 80146b4:	9002      	str	r0, [sp, #8]
 80146b6:	f04f 0300 	mov.w	r3, #0
 80146ba:	f04f 020a 	mov.w	r2, #10
 80146be:	4639      	mov	r1, r7
 80146c0:	4648      	mov	r0, r9
 80146c2:	d107      	bne.n	80146d4 <_dtoa_r+0xadc>
 80146c4:	f000 f9ca 	bl	8014a5c <__multadd>
 80146c8:	4607      	mov	r7, r0
 80146ca:	4605      	mov	r5, r0
 80146cc:	9b00      	ldr	r3, [sp, #0]
 80146ce:	3301      	adds	r3, #1
 80146d0:	9300      	str	r3, [sp, #0]
 80146d2:	e777      	b.n	80145c4 <_dtoa_r+0x9cc>
 80146d4:	f000 f9c2 	bl	8014a5c <__multadd>
 80146d8:	4629      	mov	r1, r5
 80146da:	4607      	mov	r7, r0
 80146dc:	2300      	movs	r3, #0
 80146de:	220a      	movs	r2, #10
 80146e0:	4648      	mov	r0, r9
 80146e2:	f000 f9bb 	bl	8014a5c <__multadd>
 80146e6:	4605      	mov	r5, r0
 80146e8:	e7f0      	b.n	80146cc <_dtoa_r+0xad4>
 80146ea:	f1bb 0f00 	cmp.w	fp, #0
 80146ee:	bfcc      	ite	gt
 80146f0:	465e      	movgt	r6, fp
 80146f2:	2601      	movle	r6, #1
 80146f4:	4456      	add	r6, sl
 80146f6:	2700      	movs	r7, #0
 80146f8:	9902      	ldr	r1, [sp, #8]
 80146fa:	9300      	str	r3, [sp, #0]
 80146fc:	2201      	movs	r2, #1
 80146fe:	4648      	mov	r0, r9
 8014700:	f000 fb50 	bl	8014da4 <__lshift>
 8014704:	4621      	mov	r1, r4
 8014706:	9002      	str	r0, [sp, #8]
 8014708:	f000 fbb8 	bl	8014e7c <__mcmp>
 801470c:	2800      	cmp	r0, #0
 801470e:	dcb4      	bgt.n	801467a <_dtoa_r+0xa82>
 8014710:	d102      	bne.n	8014718 <_dtoa_r+0xb20>
 8014712:	9b00      	ldr	r3, [sp, #0]
 8014714:	07db      	lsls	r3, r3, #31
 8014716:	d4b0      	bmi.n	801467a <_dtoa_r+0xa82>
 8014718:	4633      	mov	r3, r6
 801471a:	461e      	mov	r6, r3
 801471c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014720:	2a30      	cmp	r2, #48	@ 0x30
 8014722:	d0fa      	beq.n	801471a <_dtoa_r+0xb22>
 8014724:	e4b5      	b.n	8014092 <_dtoa_r+0x49a>
 8014726:	459a      	cmp	sl, r3
 8014728:	d1a8      	bne.n	801467c <_dtoa_r+0xa84>
 801472a:	2331      	movs	r3, #49	@ 0x31
 801472c:	f108 0801 	add.w	r8, r8, #1
 8014730:	f88a 3000 	strb.w	r3, [sl]
 8014734:	e4ad      	b.n	8014092 <_dtoa_r+0x49a>
 8014736:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8014738:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8014794 <_dtoa_r+0xb9c>
 801473c:	b11b      	cbz	r3, 8014746 <_dtoa_r+0xb4e>
 801473e:	f10a 0308 	add.w	r3, sl, #8
 8014742:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8014744:	6013      	str	r3, [r2, #0]
 8014746:	4650      	mov	r0, sl
 8014748:	b017      	add	sp, #92	@ 0x5c
 801474a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801474e:	9b07      	ldr	r3, [sp, #28]
 8014750:	2b01      	cmp	r3, #1
 8014752:	f77f ae2e 	ble.w	80143b2 <_dtoa_r+0x7ba>
 8014756:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014758:	9308      	str	r3, [sp, #32]
 801475a:	2001      	movs	r0, #1
 801475c:	e64d      	b.n	80143fa <_dtoa_r+0x802>
 801475e:	f1bb 0f00 	cmp.w	fp, #0
 8014762:	f77f aed9 	ble.w	8014518 <_dtoa_r+0x920>
 8014766:	4656      	mov	r6, sl
 8014768:	9802      	ldr	r0, [sp, #8]
 801476a:	4621      	mov	r1, r4
 801476c:	f7ff f9bb 	bl	8013ae6 <quorem>
 8014770:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8014774:	f806 3b01 	strb.w	r3, [r6], #1
 8014778:	eba6 020a 	sub.w	r2, r6, sl
 801477c:	4593      	cmp	fp, r2
 801477e:	ddb4      	ble.n	80146ea <_dtoa_r+0xaf2>
 8014780:	9902      	ldr	r1, [sp, #8]
 8014782:	2300      	movs	r3, #0
 8014784:	220a      	movs	r2, #10
 8014786:	4648      	mov	r0, r9
 8014788:	f000 f968 	bl	8014a5c <__multadd>
 801478c:	9002      	str	r0, [sp, #8]
 801478e:	e7eb      	b.n	8014768 <_dtoa_r+0xb70>
 8014790:	080163b0 	.word	0x080163b0
 8014794:	08016334 	.word	0x08016334

08014798 <_free_r>:
 8014798:	b538      	push	{r3, r4, r5, lr}
 801479a:	4605      	mov	r5, r0
 801479c:	2900      	cmp	r1, #0
 801479e:	d041      	beq.n	8014824 <_free_r+0x8c>
 80147a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80147a4:	1f0c      	subs	r4, r1, #4
 80147a6:	2b00      	cmp	r3, #0
 80147a8:	bfb8      	it	lt
 80147aa:	18e4      	addlt	r4, r4, r3
 80147ac:	f000 f8e8 	bl	8014980 <__malloc_lock>
 80147b0:	4a1d      	ldr	r2, [pc, #116]	@ (8014828 <_free_r+0x90>)
 80147b2:	6813      	ldr	r3, [r2, #0]
 80147b4:	b933      	cbnz	r3, 80147c4 <_free_r+0x2c>
 80147b6:	6063      	str	r3, [r4, #4]
 80147b8:	6014      	str	r4, [r2, #0]
 80147ba:	4628      	mov	r0, r5
 80147bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80147c0:	f000 b8e4 	b.w	801498c <__malloc_unlock>
 80147c4:	42a3      	cmp	r3, r4
 80147c6:	d908      	bls.n	80147da <_free_r+0x42>
 80147c8:	6820      	ldr	r0, [r4, #0]
 80147ca:	1821      	adds	r1, r4, r0
 80147cc:	428b      	cmp	r3, r1
 80147ce:	bf01      	itttt	eq
 80147d0:	6819      	ldreq	r1, [r3, #0]
 80147d2:	685b      	ldreq	r3, [r3, #4]
 80147d4:	1809      	addeq	r1, r1, r0
 80147d6:	6021      	streq	r1, [r4, #0]
 80147d8:	e7ed      	b.n	80147b6 <_free_r+0x1e>
 80147da:	461a      	mov	r2, r3
 80147dc:	685b      	ldr	r3, [r3, #4]
 80147de:	b10b      	cbz	r3, 80147e4 <_free_r+0x4c>
 80147e0:	42a3      	cmp	r3, r4
 80147e2:	d9fa      	bls.n	80147da <_free_r+0x42>
 80147e4:	6811      	ldr	r1, [r2, #0]
 80147e6:	1850      	adds	r0, r2, r1
 80147e8:	42a0      	cmp	r0, r4
 80147ea:	d10b      	bne.n	8014804 <_free_r+0x6c>
 80147ec:	6820      	ldr	r0, [r4, #0]
 80147ee:	4401      	add	r1, r0
 80147f0:	1850      	adds	r0, r2, r1
 80147f2:	4283      	cmp	r3, r0
 80147f4:	6011      	str	r1, [r2, #0]
 80147f6:	d1e0      	bne.n	80147ba <_free_r+0x22>
 80147f8:	6818      	ldr	r0, [r3, #0]
 80147fa:	685b      	ldr	r3, [r3, #4]
 80147fc:	6053      	str	r3, [r2, #4]
 80147fe:	4408      	add	r0, r1
 8014800:	6010      	str	r0, [r2, #0]
 8014802:	e7da      	b.n	80147ba <_free_r+0x22>
 8014804:	d902      	bls.n	801480c <_free_r+0x74>
 8014806:	230c      	movs	r3, #12
 8014808:	602b      	str	r3, [r5, #0]
 801480a:	e7d6      	b.n	80147ba <_free_r+0x22>
 801480c:	6820      	ldr	r0, [r4, #0]
 801480e:	1821      	adds	r1, r4, r0
 8014810:	428b      	cmp	r3, r1
 8014812:	bf04      	itt	eq
 8014814:	6819      	ldreq	r1, [r3, #0]
 8014816:	685b      	ldreq	r3, [r3, #4]
 8014818:	6063      	str	r3, [r4, #4]
 801481a:	bf04      	itt	eq
 801481c:	1809      	addeq	r1, r1, r0
 801481e:	6021      	streq	r1, [r4, #0]
 8014820:	6054      	str	r4, [r2, #4]
 8014822:	e7ca      	b.n	80147ba <_free_r+0x22>
 8014824:	bd38      	pop	{r3, r4, r5, pc}
 8014826:	bf00      	nop
 8014828:	20001254 	.word	0x20001254

0801482c <malloc>:
 801482c:	4b02      	ldr	r3, [pc, #8]	@ (8014838 <malloc+0xc>)
 801482e:	4601      	mov	r1, r0
 8014830:	6818      	ldr	r0, [r3, #0]
 8014832:	f000 b825 	b.w	8014880 <_malloc_r>
 8014836:	bf00      	nop
 8014838:	20000130 	.word	0x20000130

0801483c <sbrk_aligned>:
 801483c:	b570      	push	{r4, r5, r6, lr}
 801483e:	4e0f      	ldr	r6, [pc, #60]	@ (801487c <sbrk_aligned+0x40>)
 8014840:	460c      	mov	r4, r1
 8014842:	6831      	ldr	r1, [r6, #0]
 8014844:	4605      	mov	r5, r0
 8014846:	b911      	cbnz	r1, 801484e <sbrk_aligned+0x12>
 8014848:	f001 f804 	bl	8015854 <_sbrk_r>
 801484c:	6030      	str	r0, [r6, #0]
 801484e:	4621      	mov	r1, r4
 8014850:	4628      	mov	r0, r5
 8014852:	f000 ffff 	bl	8015854 <_sbrk_r>
 8014856:	1c43      	adds	r3, r0, #1
 8014858:	d103      	bne.n	8014862 <sbrk_aligned+0x26>
 801485a:	f04f 34ff 	mov.w	r4, #4294967295
 801485e:	4620      	mov	r0, r4
 8014860:	bd70      	pop	{r4, r5, r6, pc}
 8014862:	1cc4      	adds	r4, r0, #3
 8014864:	f024 0403 	bic.w	r4, r4, #3
 8014868:	42a0      	cmp	r0, r4
 801486a:	d0f8      	beq.n	801485e <sbrk_aligned+0x22>
 801486c:	1a21      	subs	r1, r4, r0
 801486e:	4628      	mov	r0, r5
 8014870:	f000 fff0 	bl	8015854 <_sbrk_r>
 8014874:	3001      	adds	r0, #1
 8014876:	d1f2      	bne.n	801485e <sbrk_aligned+0x22>
 8014878:	e7ef      	b.n	801485a <sbrk_aligned+0x1e>
 801487a:	bf00      	nop
 801487c:	20001250 	.word	0x20001250

08014880 <_malloc_r>:
 8014880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014884:	1ccd      	adds	r5, r1, #3
 8014886:	f025 0503 	bic.w	r5, r5, #3
 801488a:	3508      	adds	r5, #8
 801488c:	2d0c      	cmp	r5, #12
 801488e:	bf38      	it	cc
 8014890:	250c      	movcc	r5, #12
 8014892:	2d00      	cmp	r5, #0
 8014894:	4606      	mov	r6, r0
 8014896:	db01      	blt.n	801489c <_malloc_r+0x1c>
 8014898:	42a9      	cmp	r1, r5
 801489a:	d904      	bls.n	80148a6 <_malloc_r+0x26>
 801489c:	230c      	movs	r3, #12
 801489e:	6033      	str	r3, [r6, #0]
 80148a0:	2000      	movs	r0, #0
 80148a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80148a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801497c <_malloc_r+0xfc>
 80148aa:	f000 f869 	bl	8014980 <__malloc_lock>
 80148ae:	f8d8 3000 	ldr.w	r3, [r8]
 80148b2:	461c      	mov	r4, r3
 80148b4:	bb44      	cbnz	r4, 8014908 <_malloc_r+0x88>
 80148b6:	4629      	mov	r1, r5
 80148b8:	4630      	mov	r0, r6
 80148ba:	f7ff ffbf 	bl	801483c <sbrk_aligned>
 80148be:	1c43      	adds	r3, r0, #1
 80148c0:	4604      	mov	r4, r0
 80148c2:	d158      	bne.n	8014976 <_malloc_r+0xf6>
 80148c4:	f8d8 4000 	ldr.w	r4, [r8]
 80148c8:	4627      	mov	r7, r4
 80148ca:	2f00      	cmp	r7, #0
 80148cc:	d143      	bne.n	8014956 <_malloc_r+0xd6>
 80148ce:	2c00      	cmp	r4, #0
 80148d0:	d04b      	beq.n	801496a <_malloc_r+0xea>
 80148d2:	6823      	ldr	r3, [r4, #0]
 80148d4:	4639      	mov	r1, r7
 80148d6:	4630      	mov	r0, r6
 80148d8:	eb04 0903 	add.w	r9, r4, r3
 80148dc:	f000 ffba 	bl	8015854 <_sbrk_r>
 80148e0:	4581      	cmp	r9, r0
 80148e2:	d142      	bne.n	801496a <_malloc_r+0xea>
 80148e4:	6821      	ldr	r1, [r4, #0]
 80148e6:	1a6d      	subs	r5, r5, r1
 80148e8:	4629      	mov	r1, r5
 80148ea:	4630      	mov	r0, r6
 80148ec:	f7ff ffa6 	bl	801483c <sbrk_aligned>
 80148f0:	3001      	adds	r0, #1
 80148f2:	d03a      	beq.n	801496a <_malloc_r+0xea>
 80148f4:	6823      	ldr	r3, [r4, #0]
 80148f6:	442b      	add	r3, r5
 80148f8:	6023      	str	r3, [r4, #0]
 80148fa:	f8d8 3000 	ldr.w	r3, [r8]
 80148fe:	685a      	ldr	r2, [r3, #4]
 8014900:	bb62      	cbnz	r2, 801495c <_malloc_r+0xdc>
 8014902:	f8c8 7000 	str.w	r7, [r8]
 8014906:	e00f      	b.n	8014928 <_malloc_r+0xa8>
 8014908:	6822      	ldr	r2, [r4, #0]
 801490a:	1b52      	subs	r2, r2, r5
 801490c:	d420      	bmi.n	8014950 <_malloc_r+0xd0>
 801490e:	2a0b      	cmp	r2, #11
 8014910:	d917      	bls.n	8014942 <_malloc_r+0xc2>
 8014912:	1961      	adds	r1, r4, r5
 8014914:	42a3      	cmp	r3, r4
 8014916:	6025      	str	r5, [r4, #0]
 8014918:	bf18      	it	ne
 801491a:	6059      	strne	r1, [r3, #4]
 801491c:	6863      	ldr	r3, [r4, #4]
 801491e:	bf08      	it	eq
 8014920:	f8c8 1000 	streq.w	r1, [r8]
 8014924:	5162      	str	r2, [r4, r5]
 8014926:	604b      	str	r3, [r1, #4]
 8014928:	4630      	mov	r0, r6
 801492a:	f000 f82f 	bl	801498c <__malloc_unlock>
 801492e:	f104 000b 	add.w	r0, r4, #11
 8014932:	1d23      	adds	r3, r4, #4
 8014934:	f020 0007 	bic.w	r0, r0, #7
 8014938:	1ac2      	subs	r2, r0, r3
 801493a:	bf1c      	itt	ne
 801493c:	1a1b      	subne	r3, r3, r0
 801493e:	50a3      	strne	r3, [r4, r2]
 8014940:	e7af      	b.n	80148a2 <_malloc_r+0x22>
 8014942:	6862      	ldr	r2, [r4, #4]
 8014944:	42a3      	cmp	r3, r4
 8014946:	bf0c      	ite	eq
 8014948:	f8c8 2000 	streq.w	r2, [r8]
 801494c:	605a      	strne	r2, [r3, #4]
 801494e:	e7eb      	b.n	8014928 <_malloc_r+0xa8>
 8014950:	4623      	mov	r3, r4
 8014952:	6864      	ldr	r4, [r4, #4]
 8014954:	e7ae      	b.n	80148b4 <_malloc_r+0x34>
 8014956:	463c      	mov	r4, r7
 8014958:	687f      	ldr	r7, [r7, #4]
 801495a:	e7b6      	b.n	80148ca <_malloc_r+0x4a>
 801495c:	461a      	mov	r2, r3
 801495e:	685b      	ldr	r3, [r3, #4]
 8014960:	42a3      	cmp	r3, r4
 8014962:	d1fb      	bne.n	801495c <_malloc_r+0xdc>
 8014964:	2300      	movs	r3, #0
 8014966:	6053      	str	r3, [r2, #4]
 8014968:	e7de      	b.n	8014928 <_malloc_r+0xa8>
 801496a:	230c      	movs	r3, #12
 801496c:	6033      	str	r3, [r6, #0]
 801496e:	4630      	mov	r0, r6
 8014970:	f000 f80c 	bl	801498c <__malloc_unlock>
 8014974:	e794      	b.n	80148a0 <_malloc_r+0x20>
 8014976:	6005      	str	r5, [r0, #0]
 8014978:	e7d6      	b.n	8014928 <_malloc_r+0xa8>
 801497a:	bf00      	nop
 801497c:	20001254 	.word	0x20001254

08014980 <__malloc_lock>:
 8014980:	4801      	ldr	r0, [pc, #4]	@ (8014988 <__malloc_lock+0x8>)
 8014982:	f7ff b8ae 	b.w	8013ae2 <__retarget_lock_acquire_recursive>
 8014986:	bf00      	nop
 8014988:	2000124c 	.word	0x2000124c

0801498c <__malloc_unlock>:
 801498c:	4801      	ldr	r0, [pc, #4]	@ (8014994 <__malloc_unlock+0x8>)
 801498e:	f7ff b8a9 	b.w	8013ae4 <__retarget_lock_release_recursive>
 8014992:	bf00      	nop
 8014994:	2000124c 	.word	0x2000124c

08014998 <_Balloc>:
 8014998:	b570      	push	{r4, r5, r6, lr}
 801499a:	69c6      	ldr	r6, [r0, #28]
 801499c:	4604      	mov	r4, r0
 801499e:	460d      	mov	r5, r1
 80149a0:	b976      	cbnz	r6, 80149c0 <_Balloc+0x28>
 80149a2:	2010      	movs	r0, #16
 80149a4:	f7ff ff42 	bl	801482c <malloc>
 80149a8:	4602      	mov	r2, r0
 80149aa:	61e0      	str	r0, [r4, #28]
 80149ac:	b920      	cbnz	r0, 80149b8 <_Balloc+0x20>
 80149ae:	4b18      	ldr	r3, [pc, #96]	@ (8014a10 <_Balloc+0x78>)
 80149b0:	4818      	ldr	r0, [pc, #96]	@ (8014a14 <_Balloc+0x7c>)
 80149b2:	216b      	movs	r1, #107	@ 0x6b
 80149b4:	f000 ff6c 	bl	8015890 <__assert_func>
 80149b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80149bc:	6006      	str	r6, [r0, #0]
 80149be:	60c6      	str	r6, [r0, #12]
 80149c0:	69e6      	ldr	r6, [r4, #28]
 80149c2:	68f3      	ldr	r3, [r6, #12]
 80149c4:	b183      	cbz	r3, 80149e8 <_Balloc+0x50>
 80149c6:	69e3      	ldr	r3, [r4, #28]
 80149c8:	68db      	ldr	r3, [r3, #12]
 80149ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80149ce:	b9b8      	cbnz	r0, 8014a00 <_Balloc+0x68>
 80149d0:	2101      	movs	r1, #1
 80149d2:	fa01 f605 	lsl.w	r6, r1, r5
 80149d6:	1d72      	adds	r2, r6, #5
 80149d8:	0092      	lsls	r2, r2, #2
 80149da:	4620      	mov	r0, r4
 80149dc:	f000 ff76 	bl	80158cc <_calloc_r>
 80149e0:	b160      	cbz	r0, 80149fc <_Balloc+0x64>
 80149e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80149e6:	e00e      	b.n	8014a06 <_Balloc+0x6e>
 80149e8:	2221      	movs	r2, #33	@ 0x21
 80149ea:	2104      	movs	r1, #4
 80149ec:	4620      	mov	r0, r4
 80149ee:	f000 ff6d 	bl	80158cc <_calloc_r>
 80149f2:	69e3      	ldr	r3, [r4, #28]
 80149f4:	60f0      	str	r0, [r6, #12]
 80149f6:	68db      	ldr	r3, [r3, #12]
 80149f8:	2b00      	cmp	r3, #0
 80149fa:	d1e4      	bne.n	80149c6 <_Balloc+0x2e>
 80149fc:	2000      	movs	r0, #0
 80149fe:	bd70      	pop	{r4, r5, r6, pc}
 8014a00:	6802      	ldr	r2, [r0, #0]
 8014a02:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014a06:	2300      	movs	r3, #0
 8014a08:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014a0c:	e7f7      	b.n	80149fe <_Balloc+0x66>
 8014a0e:	bf00      	nop
 8014a10:	08016341 	.word	0x08016341
 8014a14:	080163c1 	.word	0x080163c1

08014a18 <_Bfree>:
 8014a18:	b570      	push	{r4, r5, r6, lr}
 8014a1a:	69c6      	ldr	r6, [r0, #28]
 8014a1c:	4605      	mov	r5, r0
 8014a1e:	460c      	mov	r4, r1
 8014a20:	b976      	cbnz	r6, 8014a40 <_Bfree+0x28>
 8014a22:	2010      	movs	r0, #16
 8014a24:	f7ff ff02 	bl	801482c <malloc>
 8014a28:	4602      	mov	r2, r0
 8014a2a:	61e8      	str	r0, [r5, #28]
 8014a2c:	b920      	cbnz	r0, 8014a38 <_Bfree+0x20>
 8014a2e:	4b09      	ldr	r3, [pc, #36]	@ (8014a54 <_Bfree+0x3c>)
 8014a30:	4809      	ldr	r0, [pc, #36]	@ (8014a58 <_Bfree+0x40>)
 8014a32:	218f      	movs	r1, #143	@ 0x8f
 8014a34:	f000 ff2c 	bl	8015890 <__assert_func>
 8014a38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014a3c:	6006      	str	r6, [r0, #0]
 8014a3e:	60c6      	str	r6, [r0, #12]
 8014a40:	b13c      	cbz	r4, 8014a52 <_Bfree+0x3a>
 8014a42:	69eb      	ldr	r3, [r5, #28]
 8014a44:	6862      	ldr	r2, [r4, #4]
 8014a46:	68db      	ldr	r3, [r3, #12]
 8014a48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014a4c:	6021      	str	r1, [r4, #0]
 8014a4e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8014a52:	bd70      	pop	{r4, r5, r6, pc}
 8014a54:	08016341 	.word	0x08016341
 8014a58:	080163c1 	.word	0x080163c1

08014a5c <__multadd>:
 8014a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a60:	690d      	ldr	r5, [r1, #16]
 8014a62:	4607      	mov	r7, r0
 8014a64:	460c      	mov	r4, r1
 8014a66:	461e      	mov	r6, r3
 8014a68:	f101 0c14 	add.w	ip, r1, #20
 8014a6c:	2000      	movs	r0, #0
 8014a6e:	f8dc 3000 	ldr.w	r3, [ip]
 8014a72:	b299      	uxth	r1, r3
 8014a74:	fb02 6101 	mla	r1, r2, r1, r6
 8014a78:	0c1e      	lsrs	r6, r3, #16
 8014a7a:	0c0b      	lsrs	r3, r1, #16
 8014a7c:	fb02 3306 	mla	r3, r2, r6, r3
 8014a80:	b289      	uxth	r1, r1
 8014a82:	3001      	adds	r0, #1
 8014a84:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8014a88:	4285      	cmp	r5, r0
 8014a8a:	f84c 1b04 	str.w	r1, [ip], #4
 8014a8e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8014a92:	dcec      	bgt.n	8014a6e <__multadd+0x12>
 8014a94:	b30e      	cbz	r6, 8014ada <__multadd+0x7e>
 8014a96:	68a3      	ldr	r3, [r4, #8]
 8014a98:	42ab      	cmp	r3, r5
 8014a9a:	dc19      	bgt.n	8014ad0 <__multadd+0x74>
 8014a9c:	6861      	ldr	r1, [r4, #4]
 8014a9e:	4638      	mov	r0, r7
 8014aa0:	3101      	adds	r1, #1
 8014aa2:	f7ff ff79 	bl	8014998 <_Balloc>
 8014aa6:	4680      	mov	r8, r0
 8014aa8:	b928      	cbnz	r0, 8014ab6 <__multadd+0x5a>
 8014aaa:	4602      	mov	r2, r0
 8014aac:	4b0c      	ldr	r3, [pc, #48]	@ (8014ae0 <__multadd+0x84>)
 8014aae:	480d      	ldr	r0, [pc, #52]	@ (8014ae4 <__multadd+0x88>)
 8014ab0:	21ba      	movs	r1, #186	@ 0xba
 8014ab2:	f000 feed 	bl	8015890 <__assert_func>
 8014ab6:	6922      	ldr	r2, [r4, #16]
 8014ab8:	3202      	adds	r2, #2
 8014aba:	f104 010c 	add.w	r1, r4, #12
 8014abe:	0092      	lsls	r2, r2, #2
 8014ac0:	300c      	adds	r0, #12
 8014ac2:	f000 fed7 	bl	8015874 <memcpy>
 8014ac6:	4621      	mov	r1, r4
 8014ac8:	4638      	mov	r0, r7
 8014aca:	f7ff ffa5 	bl	8014a18 <_Bfree>
 8014ace:	4644      	mov	r4, r8
 8014ad0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014ad4:	3501      	adds	r5, #1
 8014ad6:	615e      	str	r6, [r3, #20]
 8014ad8:	6125      	str	r5, [r4, #16]
 8014ada:	4620      	mov	r0, r4
 8014adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ae0:	080163b0 	.word	0x080163b0
 8014ae4:	080163c1 	.word	0x080163c1

08014ae8 <__hi0bits>:
 8014ae8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8014aec:	4603      	mov	r3, r0
 8014aee:	bf36      	itet	cc
 8014af0:	0403      	lslcc	r3, r0, #16
 8014af2:	2000      	movcs	r0, #0
 8014af4:	2010      	movcc	r0, #16
 8014af6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8014afa:	bf3c      	itt	cc
 8014afc:	021b      	lslcc	r3, r3, #8
 8014afe:	3008      	addcc	r0, #8
 8014b00:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8014b04:	bf3c      	itt	cc
 8014b06:	011b      	lslcc	r3, r3, #4
 8014b08:	3004      	addcc	r0, #4
 8014b0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014b0e:	bf3c      	itt	cc
 8014b10:	009b      	lslcc	r3, r3, #2
 8014b12:	3002      	addcc	r0, #2
 8014b14:	2b00      	cmp	r3, #0
 8014b16:	db05      	blt.n	8014b24 <__hi0bits+0x3c>
 8014b18:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8014b1c:	f100 0001 	add.w	r0, r0, #1
 8014b20:	bf08      	it	eq
 8014b22:	2020      	moveq	r0, #32
 8014b24:	4770      	bx	lr

08014b26 <__lo0bits>:
 8014b26:	6803      	ldr	r3, [r0, #0]
 8014b28:	4602      	mov	r2, r0
 8014b2a:	f013 0007 	ands.w	r0, r3, #7
 8014b2e:	d00b      	beq.n	8014b48 <__lo0bits+0x22>
 8014b30:	07d9      	lsls	r1, r3, #31
 8014b32:	d421      	bmi.n	8014b78 <__lo0bits+0x52>
 8014b34:	0798      	lsls	r0, r3, #30
 8014b36:	bf49      	itett	mi
 8014b38:	085b      	lsrmi	r3, r3, #1
 8014b3a:	089b      	lsrpl	r3, r3, #2
 8014b3c:	2001      	movmi	r0, #1
 8014b3e:	6013      	strmi	r3, [r2, #0]
 8014b40:	bf5c      	itt	pl
 8014b42:	6013      	strpl	r3, [r2, #0]
 8014b44:	2002      	movpl	r0, #2
 8014b46:	4770      	bx	lr
 8014b48:	b299      	uxth	r1, r3
 8014b4a:	b909      	cbnz	r1, 8014b50 <__lo0bits+0x2a>
 8014b4c:	0c1b      	lsrs	r3, r3, #16
 8014b4e:	2010      	movs	r0, #16
 8014b50:	b2d9      	uxtb	r1, r3
 8014b52:	b909      	cbnz	r1, 8014b58 <__lo0bits+0x32>
 8014b54:	3008      	adds	r0, #8
 8014b56:	0a1b      	lsrs	r3, r3, #8
 8014b58:	0719      	lsls	r1, r3, #28
 8014b5a:	bf04      	itt	eq
 8014b5c:	091b      	lsreq	r3, r3, #4
 8014b5e:	3004      	addeq	r0, #4
 8014b60:	0799      	lsls	r1, r3, #30
 8014b62:	bf04      	itt	eq
 8014b64:	089b      	lsreq	r3, r3, #2
 8014b66:	3002      	addeq	r0, #2
 8014b68:	07d9      	lsls	r1, r3, #31
 8014b6a:	d403      	bmi.n	8014b74 <__lo0bits+0x4e>
 8014b6c:	085b      	lsrs	r3, r3, #1
 8014b6e:	f100 0001 	add.w	r0, r0, #1
 8014b72:	d003      	beq.n	8014b7c <__lo0bits+0x56>
 8014b74:	6013      	str	r3, [r2, #0]
 8014b76:	4770      	bx	lr
 8014b78:	2000      	movs	r0, #0
 8014b7a:	4770      	bx	lr
 8014b7c:	2020      	movs	r0, #32
 8014b7e:	4770      	bx	lr

08014b80 <__i2b>:
 8014b80:	b510      	push	{r4, lr}
 8014b82:	460c      	mov	r4, r1
 8014b84:	2101      	movs	r1, #1
 8014b86:	f7ff ff07 	bl	8014998 <_Balloc>
 8014b8a:	4602      	mov	r2, r0
 8014b8c:	b928      	cbnz	r0, 8014b9a <__i2b+0x1a>
 8014b8e:	4b05      	ldr	r3, [pc, #20]	@ (8014ba4 <__i2b+0x24>)
 8014b90:	4805      	ldr	r0, [pc, #20]	@ (8014ba8 <__i2b+0x28>)
 8014b92:	f240 1145 	movw	r1, #325	@ 0x145
 8014b96:	f000 fe7b 	bl	8015890 <__assert_func>
 8014b9a:	2301      	movs	r3, #1
 8014b9c:	6144      	str	r4, [r0, #20]
 8014b9e:	6103      	str	r3, [r0, #16]
 8014ba0:	bd10      	pop	{r4, pc}
 8014ba2:	bf00      	nop
 8014ba4:	080163b0 	.word	0x080163b0
 8014ba8:	080163c1 	.word	0x080163c1

08014bac <__multiply>:
 8014bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014bb0:	4617      	mov	r7, r2
 8014bb2:	690a      	ldr	r2, [r1, #16]
 8014bb4:	693b      	ldr	r3, [r7, #16]
 8014bb6:	429a      	cmp	r2, r3
 8014bb8:	bfa8      	it	ge
 8014bba:	463b      	movge	r3, r7
 8014bbc:	4689      	mov	r9, r1
 8014bbe:	bfa4      	itt	ge
 8014bc0:	460f      	movge	r7, r1
 8014bc2:	4699      	movge	r9, r3
 8014bc4:	693d      	ldr	r5, [r7, #16]
 8014bc6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8014bca:	68bb      	ldr	r3, [r7, #8]
 8014bcc:	6879      	ldr	r1, [r7, #4]
 8014bce:	eb05 060a 	add.w	r6, r5, sl
 8014bd2:	42b3      	cmp	r3, r6
 8014bd4:	b085      	sub	sp, #20
 8014bd6:	bfb8      	it	lt
 8014bd8:	3101      	addlt	r1, #1
 8014bda:	f7ff fedd 	bl	8014998 <_Balloc>
 8014bde:	b930      	cbnz	r0, 8014bee <__multiply+0x42>
 8014be0:	4602      	mov	r2, r0
 8014be2:	4b41      	ldr	r3, [pc, #260]	@ (8014ce8 <__multiply+0x13c>)
 8014be4:	4841      	ldr	r0, [pc, #260]	@ (8014cec <__multiply+0x140>)
 8014be6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8014bea:	f000 fe51 	bl	8015890 <__assert_func>
 8014bee:	f100 0414 	add.w	r4, r0, #20
 8014bf2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8014bf6:	4623      	mov	r3, r4
 8014bf8:	2200      	movs	r2, #0
 8014bfa:	4573      	cmp	r3, lr
 8014bfc:	d320      	bcc.n	8014c40 <__multiply+0x94>
 8014bfe:	f107 0814 	add.w	r8, r7, #20
 8014c02:	f109 0114 	add.w	r1, r9, #20
 8014c06:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8014c0a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8014c0e:	9302      	str	r3, [sp, #8]
 8014c10:	1beb      	subs	r3, r5, r7
 8014c12:	3b15      	subs	r3, #21
 8014c14:	f023 0303 	bic.w	r3, r3, #3
 8014c18:	3304      	adds	r3, #4
 8014c1a:	3715      	adds	r7, #21
 8014c1c:	42bd      	cmp	r5, r7
 8014c1e:	bf38      	it	cc
 8014c20:	2304      	movcc	r3, #4
 8014c22:	9301      	str	r3, [sp, #4]
 8014c24:	9b02      	ldr	r3, [sp, #8]
 8014c26:	9103      	str	r1, [sp, #12]
 8014c28:	428b      	cmp	r3, r1
 8014c2a:	d80c      	bhi.n	8014c46 <__multiply+0x9a>
 8014c2c:	2e00      	cmp	r6, #0
 8014c2e:	dd03      	ble.n	8014c38 <__multiply+0x8c>
 8014c30:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8014c34:	2b00      	cmp	r3, #0
 8014c36:	d055      	beq.n	8014ce4 <__multiply+0x138>
 8014c38:	6106      	str	r6, [r0, #16]
 8014c3a:	b005      	add	sp, #20
 8014c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c40:	f843 2b04 	str.w	r2, [r3], #4
 8014c44:	e7d9      	b.n	8014bfa <__multiply+0x4e>
 8014c46:	f8b1 a000 	ldrh.w	sl, [r1]
 8014c4a:	f1ba 0f00 	cmp.w	sl, #0
 8014c4e:	d01f      	beq.n	8014c90 <__multiply+0xe4>
 8014c50:	46c4      	mov	ip, r8
 8014c52:	46a1      	mov	r9, r4
 8014c54:	2700      	movs	r7, #0
 8014c56:	f85c 2b04 	ldr.w	r2, [ip], #4
 8014c5a:	f8d9 3000 	ldr.w	r3, [r9]
 8014c5e:	fa1f fb82 	uxth.w	fp, r2
 8014c62:	b29b      	uxth	r3, r3
 8014c64:	fb0a 330b 	mla	r3, sl, fp, r3
 8014c68:	443b      	add	r3, r7
 8014c6a:	f8d9 7000 	ldr.w	r7, [r9]
 8014c6e:	0c12      	lsrs	r2, r2, #16
 8014c70:	0c3f      	lsrs	r7, r7, #16
 8014c72:	fb0a 7202 	mla	r2, sl, r2, r7
 8014c76:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8014c7a:	b29b      	uxth	r3, r3
 8014c7c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014c80:	4565      	cmp	r5, ip
 8014c82:	f849 3b04 	str.w	r3, [r9], #4
 8014c86:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8014c8a:	d8e4      	bhi.n	8014c56 <__multiply+0xaa>
 8014c8c:	9b01      	ldr	r3, [sp, #4]
 8014c8e:	50e7      	str	r7, [r4, r3]
 8014c90:	9b03      	ldr	r3, [sp, #12]
 8014c92:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8014c96:	3104      	adds	r1, #4
 8014c98:	f1b9 0f00 	cmp.w	r9, #0
 8014c9c:	d020      	beq.n	8014ce0 <__multiply+0x134>
 8014c9e:	6823      	ldr	r3, [r4, #0]
 8014ca0:	4647      	mov	r7, r8
 8014ca2:	46a4      	mov	ip, r4
 8014ca4:	f04f 0a00 	mov.w	sl, #0
 8014ca8:	f8b7 b000 	ldrh.w	fp, [r7]
 8014cac:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8014cb0:	fb09 220b 	mla	r2, r9, fp, r2
 8014cb4:	4452      	add	r2, sl
 8014cb6:	b29b      	uxth	r3, r3
 8014cb8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014cbc:	f84c 3b04 	str.w	r3, [ip], #4
 8014cc0:	f857 3b04 	ldr.w	r3, [r7], #4
 8014cc4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014cc8:	f8bc 3000 	ldrh.w	r3, [ip]
 8014ccc:	fb09 330a 	mla	r3, r9, sl, r3
 8014cd0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8014cd4:	42bd      	cmp	r5, r7
 8014cd6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014cda:	d8e5      	bhi.n	8014ca8 <__multiply+0xfc>
 8014cdc:	9a01      	ldr	r2, [sp, #4]
 8014cde:	50a3      	str	r3, [r4, r2]
 8014ce0:	3404      	adds	r4, #4
 8014ce2:	e79f      	b.n	8014c24 <__multiply+0x78>
 8014ce4:	3e01      	subs	r6, #1
 8014ce6:	e7a1      	b.n	8014c2c <__multiply+0x80>
 8014ce8:	080163b0 	.word	0x080163b0
 8014cec:	080163c1 	.word	0x080163c1

08014cf0 <__pow5mult>:
 8014cf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014cf4:	4615      	mov	r5, r2
 8014cf6:	f012 0203 	ands.w	r2, r2, #3
 8014cfa:	4607      	mov	r7, r0
 8014cfc:	460e      	mov	r6, r1
 8014cfe:	d007      	beq.n	8014d10 <__pow5mult+0x20>
 8014d00:	4c25      	ldr	r4, [pc, #148]	@ (8014d98 <__pow5mult+0xa8>)
 8014d02:	3a01      	subs	r2, #1
 8014d04:	2300      	movs	r3, #0
 8014d06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014d0a:	f7ff fea7 	bl	8014a5c <__multadd>
 8014d0e:	4606      	mov	r6, r0
 8014d10:	10ad      	asrs	r5, r5, #2
 8014d12:	d03d      	beq.n	8014d90 <__pow5mult+0xa0>
 8014d14:	69fc      	ldr	r4, [r7, #28]
 8014d16:	b97c      	cbnz	r4, 8014d38 <__pow5mult+0x48>
 8014d18:	2010      	movs	r0, #16
 8014d1a:	f7ff fd87 	bl	801482c <malloc>
 8014d1e:	4602      	mov	r2, r0
 8014d20:	61f8      	str	r0, [r7, #28]
 8014d22:	b928      	cbnz	r0, 8014d30 <__pow5mult+0x40>
 8014d24:	4b1d      	ldr	r3, [pc, #116]	@ (8014d9c <__pow5mult+0xac>)
 8014d26:	481e      	ldr	r0, [pc, #120]	@ (8014da0 <__pow5mult+0xb0>)
 8014d28:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8014d2c:	f000 fdb0 	bl	8015890 <__assert_func>
 8014d30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014d34:	6004      	str	r4, [r0, #0]
 8014d36:	60c4      	str	r4, [r0, #12]
 8014d38:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8014d3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014d40:	b94c      	cbnz	r4, 8014d56 <__pow5mult+0x66>
 8014d42:	f240 2171 	movw	r1, #625	@ 0x271
 8014d46:	4638      	mov	r0, r7
 8014d48:	f7ff ff1a 	bl	8014b80 <__i2b>
 8014d4c:	2300      	movs	r3, #0
 8014d4e:	f8c8 0008 	str.w	r0, [r8, #8]
 8014d52:	4604      	mov	r4, r0
 8014d54:	6003      	str	r3, [r0, #0]
 8014d56:	f04f 0900 	mov.w	r9, #0
 8014d5a:	07eb      	lsls	r3, r5, #31
 8014d5c:	d50a      	bpl.n	8014d74 <__pow5mult+0x84>
 8014d5e:	4631      	mov	r1, r6
 8014d60:	4622      	mov	r2, r4
 8014d62:	4638      	mov	r0, r7
 8014d64:	f7ff ff22 	bl	8014bac <__multiply>
 8014d68:	4631      	mov	r1, r6
 8014d6a:	4680      	mov	r8, r0
 8014d6c:	4638      	mov	r0, r7
 8014d6e:	f7ff fe53 	bl	8014a18 <_Bfree>
 8014d72:	4646      	mov	r6, r8
 8014d74:	106d      	asrs	r5, r5, #1
 8014d76:	d00b      	beq.n	8014d90 <__pow5mult+0xa0>
 8014d78:	6820      	ldr	r0, [r4, #0]
 8014d7a:	b938      	cbnz	r0, 8014d8c <__pow5mult+0x9c>
 8014d7c:	4622      	mov	r2, r4
 8014d7e:	4621      	mov	r1, r4
 8014d80:	4638      	mov	r0, r7
 8014d82:	f7ff ff13 	bl	8014bac <__multiply>
 8014d86:	6020      	str	r0, [r4, #0]
 8014d88:	f8c0 9000 	str.w	r9, [r0]
 8014d8c:	4604      	mov	r4, r0
 8014d8e:	e7e4      	b.n	8014d5a <__pow5mult+0x6a>
 8014d90:	4630      	mov	r0, r6
 8014d92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014d96:	bf00      	nop
 8014d98:	08016474 	.word	0x08016474
 8014d9c:	08016341 	.word	0x08016341
 8014da0:	080163c1 	.word	0x080163c1

08014da4 <__lshift>:
 8014da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014da8:	460c      	mov	r4, r1
 8014daa:	6849      	ldr	r1, [r1, #4]
 8014dac:	6923      	ldr	r3, [r4, #16]
 8014dae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8014db2:	68a3      	ldr	r3, [r4, #8]
 8014db4:	4607      	mov	r7, r0
 8014db6:	4691      	mov	r9, r2
 8014db8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014dbc:	f108 0601 	add.w	r6, r8, #1
 8014dc0:	42b3      	cmp	r3, r6
 8014dc2:	db0b      	blt.n	8014ddc <__lshift+0x38>
 8014dc4:	4638      	mov	r0, r7
 8014dc6:	f7ff fde7 	bl	8014998 <_Balloc>
 8014dca:	4605      	mov	r5, r0
 8014dcc:	b948      	cbnz	r0, 8014de2 <__lshift+0x3e>
 8014dce:	4602      	mov	r2, r0
 8014dd0:	4b28      	ldr	r3, [pc, #160]	@ (8014e74 <__lshift+0xd0>)
 8014dd2:	4829      	ldr	r0, [pc, #164]	@ (8014e78 <__lshift+0xd4>)
 8014dd4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8014dd8:	f000 fd5a 	bl	8015890 <__assert_func>
 8014ddc:	3101      	adds	r1, #1
 8014dde:	005b      	lsls	r3, r3, #1
 8014de0:	e7ee      	b.n	8014dc0 <__lshift+0x1c>
 8014de2:	2300      	movs	r3, #0
 8014de4:	f100 0114 	add.w	r1, r0, #20
 8014de8:	f100 0210 	add.w	r2, r0, #16
 8014dec:	4618      	mov	r0, r3
 8014dee:	4553      	cmp	r3, sl
 8014df0:	db33      	blt.n	8014e5a <__lshift+0xb6>
 8014df2:	6920      	ldr	r0, [r4, #16]
 8014df4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014df8:	f104 0314 	add.w	r3, r4, #20
 8014dfc:	f019 091f 	ands.w	r9, r9, #31
 8014e00:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014e04:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014e08:	d02b      	beq.n	8014e62 <__lshift+0xbe>
 8014e0a:	f1c9 0e20 	rsb	lr, r9, #32
 8014e0e:	468a      	mov	sl, r1
 8014e10:	2200      	movs	r2, #0
 8014e12:	6818      	ldr	r0, [r3, #0]
 8014e14:	fa00 f009 	lsl.w	r0, r0, r9
 8014e18:	4310      	orrs	r0, r2
 8014e1a:	f84a 0b04 	str.w	r0, [sl], #4
 8014e1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8014e22:	459c      	cmp	ip, r3
 8014e24:	fa22 f20e 	lsr.w	r2, r2, lr
 8014e28:	d8f3      	bhi.n	8014e12 <__lshift+0x6e>
 8014e2a:	ebac 0304 	sub.w	r3, ip, r4
 8014e2e:	3b15      	subs	r3, #21
 8014e30:	f023 0303 	bic.w	r3, r3, #3
 8014e34:	3304      	adds	r3, #4
 8014e36:	f104 0015 	add.w	r0, r4, #21
 8014e3a:	4560      	cmp	r0, ip
 8014e3c:	bf88      	it	hi
 8014e3e:	2304      	movhi	r3, #4
 8014e40:	50ca      	str	r2, [r1, r3]
 8014e42:	b10a      	cbz	r2, 8014e48 <__lshift+0xa4>
 8014e44:	f108 0602 	add.w	r6, r8, #2
 8014e48:	3e01      	subs	r6, #1
 8014e4a:	4638      	mov	r0, r7
 8014e4c:	612e      	str	r6, [r5, #16]
 8014e4e:	4621      	mov	r1, r4
 8014e50:	f7ff fde2 	bl	8014a18 <_Bfree>
 8014e54:	4628      	mov	r0, r5
 8014e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014e5a:	f842 0f04 	str.w	r0, [r2, #4]!
 8014e5e:	3301      	adds	r3, #1
 8014e60:	e7c5      	b.n	8014dee <__lshift+0x4a>
 8014e62:	3904      	subs	r1, #4
 8014e64:	f853 2b04 	ldr.w	r2, [r3], #4
 8014e68:	f841 2f04 	str.w	r2, [r1, #4]!
 8014e6c:	459c      	cmp	ip, r3
 8014e6e:	d8f9      	bhi.n	8014e64 <__lshift+0xc0>
 8014e70:	e7ea      	b.n	8014e48 <__lshift+0xa4>
 8014e72:	bf00      	nop
 8014e74:	080163b0 	.word	0x080163b0
 8014e78:	080163c1 	.word	0x080163c1

08014e7c <__mcmp>:
 8014e7c:	690a      	ldr	r2, [r1, #16]
 8014e7e:	4603      	mov	r3, r0
 8014e80:	6900      	ldr	r0, [r0, #16]
 8014e82:	1a80      	subs	r0, r0, r2
 8014e84:	b530      	push	{r4, r5, lr}
 8014e86:	d10e      	bne.n	8014ea6 <__mcmp+0x2a>
 8014e88:	3314      	adds	r3, #20
 8014e8a:	3114      	adds	r1, #20
 8014e8c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8014e90:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8014e94:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8014e98:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8014e9c:	4295      	cmp	r5, r2
 8014e9e:	d003      	beq.n	8014ea8 <__mcmp+0x2c>
 8014ea0:	d205      	bcs.n	8014eae <__mcmp+0x32>
 8014ea2:	f04f 30ff 	mov.w	r0, #4294967295
 8014ea6:	bd30      	pop	{r4, r5, pc}
 8014ea8:	42a3      	cmp	r3, r4
 8014eaa:	d3f3      	bcc.n	8014e94 <__mcmp+0x18>
 8014eac:	e7fb      	b.n	8014ea6 <__mcmp+0x2a>
 8014eae:	2001      	movs	r0, #1
 8014eb0:	e7f9      	b.n	8014ea6 <__mcmp+0x2a>
	...

08014eb4 <__mdiff>:
 8014eb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014eb8:	4689      	mov	r9, r1
 8014eba:	4606      	mov	r6, r0
 8014ebc:	4611      	mov	r1, r2
 8014ebe:	4648      	mov	r0, r9
 8014ec0:	4614      	mov	r4, r2
 8014ec2:	f7ff ffdb 	bl	8014e7c <__mcmp>
 8014ec6:	1e05      	subs	r5, r0, #0
 8014ec8:	d112      	bne.n	8014ef0 <__mdiff+0x3c>
 8014eca:	4629      	mov	r1, r5
 8014ecc:	4630      	mov	r0, r6
 8014ece:	f7ff fd63 	bl	8014998 <_Balloc>
 8014ed2:	4602      	mov	r2, r0
 8014ed4:	b928      	cbnz	r0, 8014ee2 <__mdiff+0x2e>
 8014ed6:	4b3f      	ldr	r3, [pc, #252]	@ (8014fd4 <__mdiff+0x120>)
 8014ed8:	f240 2137 	movw	r1, #567	@ 0x237
 8014edc:	483e      	ldr	r0, [pc, #248]	@ (8014fd8 <__mdiff+0x124>)
 8014ede:	f000 fcd7 	bl	8015890 <__assert_func>
 8014ee2:	2301      	movs	r3, #1
 8014ee4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014ee8:	4610      	mov	r0, r2
 8014eea:	b003      	add	sp, #12
 8014eec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ef0:	bfbc      	itt	lt
 8014ef2:	464b      	movlt	r3, r9
 8014ef4:	46a1      	movlt	r9, r4
 8014ef6:	4630      	mov	r0, r6
 8014ef8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8014efc:	bfba      	itte	lt
 8014efe:	461c      	movlt	r4, r3
 8014f00:	2501      	movlt	r5, #1
 8014f02:	2500      	movge	r5, #0
 8014f04:	f7ff fd48 	bl	8014998 <_Balloc>
 8014f08:	4602      	mov	r2, r0
 8014f0a:	b918      	cbnz	r0, 8014f14 <__mdiff+0x60>
 8014f0c:	4b31      	ldr	r3, [pc, #196]	@ (8014fd4 <__mdiff+0x120>)
 8014f0e:	f240 2145 	movw	r1, #581	@ 0x245
 8014f12:	e7e3      	b.n	8014edc <__mdiff+0x28>
 8014f14:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8014f18:	6926      	ldr	r6, [r4, #16]
 8014f1a:	60c5      	str	r5, [r0, #12]
 8014f1c:	f109 0310 	add.w	r3, r9, #16
 8014f20:	f109 0514 	add.w	r5, r9, #20
 8014f24:	f104 0e14 	add.w	lr, r4, #20
 8014f28:	f100 0b14 	add.w	fp, r0, #20
 8014f2c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8014f30:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8014f34:	9301      	str	r3, [sp, #4]
 8014f36:	46d9      	mov	r9, fp
 8014f38:	f04f 0c00 	mov.w	ip, #0
 8014f3c:	9b01      	ldr	r3, [sp, #4]
 8014f3e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8014f42:	f853 af04 	ldr.w	sl, [r3, #4]!
 8014f46:	9301      	str	r3, [sp, #4]
 8014f48:	fa1f f38a 	uxth.w	r3, sl
 8014f4c:	4619      	mov	r1, r3
 8014f4e:	b283      	uxth	r3, r0
 8014f50:	1acb      	subs	r3, r1, r3
 8014f52:	0c00      	lsrs	r0, r0, #16
 8014f54:	4463      	add	r3, ip
 8014f56:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8014f5a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8014f5e:	b29b      	uxth	r3, r3
 8014f60:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8014f64:	4576      	cmp	r6, lr
 8014f66:	f849 3b04 	str.w	r3, [r9], #4
 8014f6a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014f6e:	d8e5      	bhi.n	8014f3c <__mdiff+0x88>
 8014f70:	1b33      	subs	r3, r6, r4
 8014f72:	3b15      	subs	r3, #21
 8014f74:	f023 0303 	bic.w	r3, r3, #3
 8014f78:	3415      	adds	r4, #21
 8014f7a:	3304      	adds	r3, #4
 8014f7c:	42a6      	cmp	r6, r4
 8014f7e:	bf38      	it	cc
 8014f80:	2304      	movcc	r3, #4
 8014f82:	441d      	add	r5, r3
 8014f84:	445b      	add	r3, fp
 8014f86:	461e      	mov	r6, r3
 8014f88:	462c      	mov	r4, r5
 8014f8a:	4544      	cmp	r4, r8
 8014f8c:	d30e      	bcc.n	8014fac <__mdiff+0xf8>
 8014f8e:	f108 0103 	add.w	r1, r8, #3
 8014f92:	1b49      	subs	r1, r1, r5
 8014f94:	f021 0103 	bic.w	r1, r1, #3
 8014f98:	3d03      	subs	r5, #3
 8014f9a:	45a8      	cmp	r8, r5
 8014f9c:	bf38      	it	cc
 8014f9e:	2100      	movcc	r1, #0
 8014fa0:	440b      	add	r3, r1
 8014fa2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014fa6:	b191      	cbz	r1, 8014fce <__mdiff+0x11a>
 8014fa8:	6117      	str	r7, [r2, #16]
 8014faa:	e79d      	b.n	8014ee8 <__mdiff+0x34>
 8014fac:	f854 1b04 	ldr.w	r1, [r4], #4
 8014fb0:	46e6      	mov	lr, ip
 8014fb2:	0c08      	lsrs	r0, r1, #16
 8014fb4:	fa1c fc81 	uxtah	ip, ip, r1
 8014fb8:	4471      	add	r1, lr
 8014fba:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8014fbe:	b289      	uxth	r1, r1
 8014fc0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8014fc4:	f846 1b04 	str.w	r1, [r6], #4
 8014fc8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014fcc:	e7dd      	b.n	8014f8a <__mdiff+0xd6>
 8014fce:	3f01      	subs	r7, #1
 8014fd0:	e7e7      	b.n	8014fa2 <__mdiff+0xee>
 8014fd2:	bf00      	nop
 8014fd4:	080163b0 	.word	0x080163b0
 8014fd8:	080163c1 	.word	0x080163c1

08014fdc <__d2b>:
 8014fdc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014fe0:	460f      	mov	r7, r1
 8014fe2:	2101      	movs	r1, #1
 8014fe4:	ec59 8b10 	vmov	r8, r9, d0
 8014fe8:	4616      	mov	r6, r2
 8014fea:	f7ff fcd5 	bl	8014998 <_Balloc>
 8014fee:	4604      	mov	r4, r0
 8014ff0:	b930      	cbnz	r0, 8015000 <__d2b+0x24>
 8014ff2:	4602      	mov	r2, r0
 8014ff4:	4b23      	ldr	r3, [pc, #140]	@ (8015084 <__d2b+0xa8>)
 8014ff6:	4824      	ldr	r0, [pc, #144]	@ (8015088 <__d2b+0xac>)
 8014ff8:	f240 310f 	movw	r1, #783	@ 0x30f
 8014ffc:	f000 fc48 	bl	8015890 <__assert_func>
 8015000:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8015004:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015008:	b10d      	cbz	r5, 801500e <__d2b+0x32>
 801500a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801500e:	9301      	str	r3, [sp, #4]
 8015010:	f1b8 0300 	subs.w	r3, r8, #0
 8015014:	d023      	beq.n	801505e <__d2b+0x82>
 8015016:	4668      	mov	r0, sp
 8015018:	9300      	str	r3, [sp, #0]
 801501a:	f7ff fd84 	bl	8014b26 <__lo0bits>
 801501e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8015022:	b1d0      	cbz	r0, 801505a <__d2b+0x7e>
 8015024:	f1c0 0320 	rsb	r3, r0, #32
 8015028:	fa02 f303 	lsl.w	r3, r2, r3
 801502c:	430b      	orrs	r3, r1
 801502e:	40c2      	lsrs	r2, r0
 8015030:	6163      	str	r3, [r4, #20]
 8015032:	9201      	str	r2, [sp, #4]
 8015034:	9b01      	ldr	r3, [sp, #4]
 8015036:	61a3      	str	r3, [r4, #24]
 8015038:	2b00      	cmp	r3, #0
 801503a:	bf0c      	ite	eq
 801503c:	2201      	moveq	r2, #1
 801503e:	2202      	movne	r2, #2
 8015040:	6122      	str	r2, [r4, #16]
 8015042:	b1a5      	cbz	r5, 801506e <__d2b+0x92>
 8015044:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8015048:	4405      	add	r5, r0
 801504a:	603d      	str	r5, [r7, #0]
 801504c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8015050:	6030      	str	r0, [r6, #0]
 8015052:	4620      	mov	r0, r4
 8015054:	b003      	add	sp, #12
 8015056:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801505a:	6161      	str	r1, [r4, #20]
 801505c:	e7ea      	b.n	8015034 <__d2b+0x58>
 801505e:	a801      	add	r0, sp, #4
 8015060:	f7ff fd61 	bl	8014b26 <__lo0bits>
 8015064:	9b01      	ldr	r3, [sp, #4]
 8015066:	6163      	str	r3, [r4, #20]
 8015068:	3020      	adds	r0, #32
 801506a:	2201      	movs	r2, #1
 801506c:	e7e8      	b.n	8015040 <__d2b+0x64>
 801506e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8015072:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8015076:	6038      	str	r0, [r7, #0]
 8015078:	6918      	ldr	r0, [r3, #16]
 801507a:	f7ff fd35 	bl	8014ae8 <__hi0bits>
 801507e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8015082:	e7e5      	b.n	8015050 <__d2b+0x74>
 8015084:	080163b0 	.word	0x080163b0
 8015088:	080163c1 	.word	0x080163c1

0801508c <__ssputs_r>:
 801508c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015090:	688e      	ldr	r6, [r1, #8]
 8015092:	461f      	mov	r7, r3
 8015094:	42be      	cmp	r6, r7
 8015096:	680b      	ldr	r3, [r1, #0]
 8015098:	4682      	mov	sl, r0
 801509a:	460c      	mov	r4, r1
 801509c:	4690      	mov	r8, r2
 801509e:	d82d      	bhi.n	80150fc <__ssputs_r+0x70>
 80150a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80150a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80150a8:	d026      	beq.n	80150f8 <__ssputs_r+0x6c>
 80150aa:	6965      	ldr	r5, [r4, #20]
 80150ac:	6909      	ldr	r1, [r1, #16]
 80150ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80150b2:	eba3 0901 	sub.w	r9, r3, r1
 80150b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80150ba:	1c7b      	adds	r3, r7, #1
 80150bc:	444b      	add	r3, r9
 80150be:	106d      	asrs	r5, r5, #1
 80150c0:	429d      	cmp	r5, r3
 80150c2:	bf38      	it	cc
 80150c4:	461d      	movcc	r5, r3
 80150c6:	0553      	lsls	r3, r2, #21
 80150c8:	d527      	bpl.n	801511a <__ssputs_r+0x8e>
 80150ca:	4629      	mov	r1, r5
 80150cc:	f7ff fbd8 	bl	8014880 <_malloc_r>
 80150d0:	4606      	mov	r6, r0
 80150d2:	b360      	cbz	r0, 801512e <__ssputs_r+0xa2>
 80150d4:	6921      	ldr	r1, [r4, #16]
 80150d6:	464a      	mov	r2, r9
 80150d8:	f000 fbcc 	bl	8015874 <memcpy>
 80150dc:	89a3      	ldrh	r3, [r4, #12]
 80150de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80150e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80150e6:	81a3      	strh	r3, [r4, #12]
 80150e8:	6126      	str	r6, [r4, #16]
 80150ea:	6165      	str	r5, [r4, #20]
 80150ec:	444e      	add	r6, r9
 80150ee:	eba5 0509 	sub.w	r5, r5, r9
 80150f2:	6026      	str	r6, [r4, #0]
 80150f4:	60a5      	str	r5, [r4, #8]
 80150f6:	463e      	mov	r6, r7
 80150f8:	42be      	cmp	r6, r7
 80150fa:	d900      	bls.n	80150fe <__ssputs_r+0x72>
 80150fc:	463e      	mov	r6, r7
 80150fe:	6820      	ldr	r0, [r4, #0]
 8015100:	4632      	mov	r2, r6
 8015102:	4641      	mov	r1, r8
 8015104:	f000 fb6a 	bl	80157dc <memmove>
 8015108:	68a3      	ldr	r3, [r4, #8]
 801510a:	1b9b      	subs	r3, r3, r6
 801510c:	60a3      	str	r3, [r4, #8]
 801510e:	6823      	ldr	r3, [r4, #0]
 8015110:	4433      	add	r3, r6
 8015112:	6023      	str	r3, [r4, #0]
 8015114:	2000      	movs	r0, #0
 8015116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801511a:	462a      	mov	r2, r5
 801511c:	f000 fbfc 	bl	8015918 <_realloc_r>
 8015120:	4606      	mov	r6, r0
 8015122:	2800      	cmp	r0, #0
 8015124:	d1e0      	bne.n	80150e8 <__ssputs_r+0x5c>
 8015126:	6921      	ldr	r1, [r4, #16]
 8015128:	4650      	mov	r0, sl
 801512a:	f7ff fb35 	bl	8014798 <_free_r>
 801512e:	230c      	movs	r3, #12
 8015130:	f8ca 3000 	str.w	r3, [sl]
 8015134:	89a3      	ldrh	r3, [r4, #12]
 8015136:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801513a:	81a3      	strh	r3, [r4, #12]
 801513c:	f04f 30ff 	mov.w	r0, #4294967295
 8015140:	e7e9      	b.n	8015116 <__ssputs_r+0x8a>
	...

08015144 <_svfiprintf_r>:
 8015144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015148:	4698      	mov	r8, r3
 801514a:	898b      	ldrh	r3, [r1, #12]
 801514c:	061b      	lsls	r3, r3, #24
 801514e:	b09d      	sub	sp, #116	@ 0x74
 8015150:	4607      	mov	r7, r0
 8015152:	460d      	mov	r5, r1
 8015154:	4614      	mov	r4, r2
 8015156:	d510      	bpl.n	801517a <_svfiprintf_r+0x36>
 8015158:	690b      	ldr	r3, [r1, #16]
 801515a:	b973      	cbnz	r3, 801517a <_svfiprintf_r+0x36>
 801515c:	2140      	movs	r1, #64	@ 0x40
 801515e:	f7ff fb8f 	bl	8014880 <_malloc_r>
 8015162:	6028      	str	r0, [r5, #0]
 8015164:	6128      	str	r0, [r5, #16]
 8015166:	b930      	cbnz	r0, 8015176 <_svfiprintf_r+0x32>
 8015168:	230c      	movs	r3, #12
 801516a:	603b      	str	r3, [r7, #0]
 801516c:	f04f 30ff 	mov.w	r0, #4294967295
 8015170:	b01d      	add	sp, #116	@ 0x74
 8015172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015176:	2340      	movs	r3, #64	@ 0x40
 8015178:	616b      	str	r3, [r5, #20]
 801517a:	2300      	movs	r3, #0
 801517c:	9309      	str	r3, [sp, #36]	@ 0x24
 801517e:	2320      	movs	r3, #32
 8015180:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015184:	f8cd 800c 	str.w	r8, [sp, #12]
 8015188:	2330      	movs	r3, #48	@ 0x30
 801518a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8015328 <_svfiprintf_r+0x1e4>
 801518e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015192:	f04f 0901 	mov.w	r9, #1
 8015196:	4623      	mov	r3, r4
 8015198:	469a      	mov	sl, r3
 801519a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801519e:	b10a      	cbz	r2, 80151a4 <_svfiprintf_r+0x60>
 80151a0:	2a25      	cmp	r2, #37	@ 0x25
 80151a2:	d1f9      	bne.n	8015198 <_svfiprintf_r+0x54>
 80151a4:	ebba 0b04 	subs.w	fp, sl, r4
 80151a8:	d00b      	beq.n	80151c2 <_svfiprintf_r+0x7e>
 80151aa:	465b      	mov	r3, fp
 80151ac:	4622      	mov	r2, r4
 80151ae:	4629      	mov	r1, r5
 80151b0:	4638      	mov	r0, r7
 80151b2:	f7ff ff6b 	bl	801508c <__ssputs_r>
 80151b6:	3001      	adds	r0, #1
 80151b8:	f000 80a7 	beq.w	801530a <_svfiprintf_r+0x1c6>
 80151bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80151be:	445a      	add	r2, fp
 80151c0:	9209      	str	r2, [sp, #36]	@ 0x24
 80151c2:	f89a 3000 	ldrb.w	r3, [sl]
 80151c6:	2b00      	cmp	r3, #0
 80151c8:	f000 809f 	beq.w	801530a <_svfiprintf_r+0x1c6>
 80151cc:	2300      	movs	r3, #0
 80151ce:	f04f 32ff 	mov.w	r2, #4294967295
 80151d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80151d6:	f10a 0a01 	add.w	sl, sl, #1
 80151da:	9304      	str	r3, [sp, #16]
 80151dc:	9307      	str	r3, [sp, #28]
 80151de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80151e2:	931a      	str	r3, [sp, #104]	@ 0x68
 80151e4:	4654      	mov	r4, sl
 80151e6:	2205      	movs	r2, #5
 80151e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80151ec:	484e      	ldr	r0, [pc, #312]	@ (8015328 <_svfiprintf_r+0x1e4>)
 80151ee:	f7f2 fff7 	bl	80081e0 <memchr>
 80151f2:	9a04      	ldr	r2, [sp, #16]
 80151f4:	b9d8      	cbnz	r0, 801522e <_svfiprintf_r+0xea>
 80151f6:	06d0      	lsls	r0, r2, #27
 80151f8:	bf44      	itt	mi
 80151fa:	2320      	movmi	r3, #32
 80151fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015200:	0711      	lsls	r1, r2, #28
 8015202:	bf44      	itt	mi
 8015204:	232b      	movmi	r3, #43	@ 0x2b
 8015206:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801520a:	f89a 3000 	ldrb.w	r3, [sl]
 801520e:	2b2a      	cmp	r3, #42	@ 0x2a
 8015210:	d015      	beq.n	801523e <_svfiprintf_r+0xfa>
 8015212:	9a07      	ldr	r2, [sp, #28]
 8015214:	4654      	mov	r4, sl
 8015216:	2000      	movs	r0, #0
 8015218:	f04f 0c0a 	mov.w	ip, #10
 801521c:	4621      	mov	r1, r4
 801521e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015222:	3b30      	subs	r3, #48	@ 0x30
 8015224:	2b09      	cmp	r3, #9
 8015226:	d94b      	bls.n	80152c0 <_svfiprintf_r+0x17c>
 8015228:	b1b0      	cbz	r0, 8015258 <_svfiprintf_r+0x114>
 801522a:	9207      	str	r2, [sp, #28]
 801522c:	e014      	b.n	8015258 <_svfiprintf_r+0x114>
 801522e:	eba0 0308 	sub.w	r3, r0, r8
 8015232:	fa09 f303 	lsl.w	r3, r9, r3
 8015236:	4313      	orrs	r3, r2
 8015238:	9304      	str	r3, [sp, #16]
 801523a:	46a2      	mov	sl, r4
 801523c:	e7d2      	b.n	80151e4 <_svfiprintf_r+0xa0>
 801523e:	9b03      	ldr	r3, [sp, #12]
 8015240:	1d19      	adds	r1, r3, #4
 8015242:	681b      	ldr	r3, [r3, #0]
 8015244:	9103      	str	r1, [sp, #12]
 8015246:	2b00      	cmp	r3, #0
 8015248:	bfbb      	ittet	lt
 801524a:	425b      	neglt	r3, r3
 801524c:	f042 0202 	orrlt.w	r2, r2, #2
 8015250:	9307      	strge	r3, [sp, #28]
 8015252:	9307      	strlt	r3, [sp, #28]
 8015254:	bfb8      	it	lt
 8015256:	9204      	strlt	r2, [sp, #16]
 8015258:	7823      	ldrb	r3, [r4, #0]
 801525a:	2b2e      	cmp	r3, #46	@ 0x2e
 801525c:	d10a      	bne.n	8015274 <_svfiprintf_r+0x130>
 801525e:	7863      	ldrb	r3, [r4, #1]
 8015260:	2b2a      	cmp	r3, #42	@ 0x2a
 8015262:	d132      	bne.n	80152ca <_svfiprintf_r+0x186>
 8015264:	9b03      	ldr	r3, [sp, #12]
 8015266:	1d1a      	adds	r2, r3, #4
 8015268:	681b      	ldr	r3, [r3, #0]
 801526a:	9203      	str	r2, [sp, #12]
 801526c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015270:	3402      	adds	r4, #2
 8015272:	9305      	str	r3, [sp, #20]
 8015274:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8015338 <_svfiprintf_r+0x1f4>
 8015278:	7821      	ldrb	r1, [r4, #0]
 801527a:	2203      	movs	r2, #3
 801527c:	4650      	mov	r0, sl
 801527e:	f7f2 ffaf 	bl	80081e0 <memchr>
 8015282:	b138      	cbz	r0, 8015294 <_svfiprintf_r+0x150>
 8015284:	9b04      	ldr	r3, [sp, #16]
 8015286:	eba0 000a 	sub.w	r0, r0, sl
 801528a:	2240      	movs	r2, #64	@ 0x40
 801528c:	4082      	lsls	r2, r0
 801528e:	4313      	orrs	r3, r2
 8015290:	3401      	adds	r4, #1
 8015292:	9304      	str	r3, [sp, #16]
 8015294:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015298:	4824      	ldr	r0, [pc, #144]	@ (801532c <_svfiprintf_r+0x1e8>)
 801529a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801529e:	2206      	movs	r2, #6
 80152a0:	f7f2 ff9e 	bl	80081e0 <memchr>
 80152a4:	2800      	cmp	r0, #0
 80152a6:	d036      	beq.n	8015316 <_svfiprintf_r+0x1d2>
 80152a8:	4b21      	ldr	r3, [pc, #132]	@ (8015330 <_svfiprintf_r+0x1ec>)
 80152aa:	bb1b      	cbnz	r3, 80152f4 <_svfiprintf_r+0x1b0>
 80152ac:	9b03      	ldr	r3, [sp, #12]
 80152ae:	3307      	adds	r3, #7
 80152b0:	f023 0307 	bic.w	r3, r3, #7
 80152b4:	3308      	adds	r3, #8
 80152b6:	9303      	str	r3, [sp, #12]
 80152b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80152ba:	4433      	add	r3, r6
 80152bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80152be:	e76a      	b.n	8015196 <_svfiprintf_r+0x52>
 80152c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80152c4:	460c      	mov	r4, r1
 80152c6:	2001      	movs	r0, #1
 80152c8:	e7a8      	b.n	801521c <_svfiprintf_r+0xd8>
 80152ca:	2300      	movs	r3, #0
 80152cc:	3401      	adds	r4, #1
 80152ce:	9305      	str	r3, [sp, #20]
 80152d0:	4619      	mov	r1, r3
 80152d2:	f04f 0c0a 	mov.w	ip, #10
 80152d6:	4620      	mov	r0, r4
 80152d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80152dc:	3a30      	subs	r2, #48	@ 0x30
 80152de:	2a09      	cmp	r2, #9
 80152e0:	d903      	bls.n	80152ea <_svfiprintf_r+0x1a6>
 80152e2:	2b00      	cmp	r3, #0
 80152e4:	d0c6      	beq.n	8015274 <_svfiprintf_r+0x130>
 80152e6:	9105      	str	r1, [sp, #20]
 80152e8:	e7c4      	b.n	8015274 <_svfiprintf_r+0x130>
 80152ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80152ee:	4604      	mov	r4, r0
 80152f0:	2301      	movs	r3, #1
 80152f2:	e7f0      	b.n	80152d6 <_svfiprintf_r+0x192>
 80152f4:	ab03      	add	r3, sp, #12
 80152f6:	9300      	str	r3, [sp, #0]
 80152f8:	462a      	mov	r2, r5
 80152fa:	4b0e      	ldr	r3, [pc, #56]	@ (8015334 <_svfiprintf_r+0x1f0>)
 80152fc:	a904      	add	r1, sp, #16
 80152fe:	4638      	mov	r0, r7
 8015300:	f7fd fd90 	bl	8012e24 <_printf_float>
 8015304:	1c42      	adds	r2, r0, #1
 8015306:	4606      	mov	r6, r0
 8015308:	d1d6      	bne.n	80152b8 <_svfiprintf_r+0x174>
 801530a:	89ab      	ldrh	r3, [r5, #12]
 801530c:	065b      	lsls	r3, r3, #25
 801530e:	f53f af2d 	bmi.w	801516c <_svfiprintf_r+0x28>
 8015312:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015314:	e72c      	b.n	8015170 <_svfiprintf_r+0x2c>
 8015316:	ab03      	add	r3, sp, #12
 8015318:	9300      	str	r3, [sp, #0]
 801531a:	462a      	mov	r2, r5
 801531c:	4b05      	ldr	r3, [pc, #20]	@ (8015334 <_svfiprintf_r+0x1f0>)
 801531e:	a904      	add	r1, sp, #16
 8015320:	4638      	mov	r0, r7
 8015322:	f7fe f817 	bl	8013354 <_printf_i>
 8015326:	e7ed      	b.n	8015304 <_svfiprintf_r+0x1c0>
 8015328:	0801641a 	.word	0x0801641a
 801532c:	08016424 	.word	0x08016424
 8015330:	08012e25 	.word	0x08012e25
 8015334:	0801508d 	.word	0x0801508d
 8015338:	08016420 	.word	0x08016420

0801533c <__sfputc_r>:
 801533c:	6893      	ldr	r3, [r2, #8]
 801533e:	3b01      	subs	r3, #1
 8015340:	2b00      	cmp	r3, #0
 8015342:	b410      	push	{r4}
 8015344:	6093      	str	r3, [r2, #8]
 8015346:	da08      	bge.n	801535a <__sfputc_r+0x1e>
 8015348:	6994      	ldr	r4, [r2, #24]
 801534a:	42a3      	cmp	r3, r4
 801534c:	db01      	blt.n	8015352 <__sfputc_r+0x16>
 801534e:	290a      	cmp	r1, #10
 8015350:	d103      	bne.n	801535a <__sfputc_r+0x1e>
 8015352:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015356:	f7fe bab2 	b.w	80138be <__swbuf_r>
 801535a:	6813      	ldr	r3, [r2, #0]
 801535c:	1c58      	adds	r0, r3, #1
 801535e:	6010      	str	r0, [r2, #0]
 8015360:	7019      	strb	r1, [r3, #0]
 8015362:	4608      	mov	r0, r1
 8015364:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015368:	4770      	bx	lr

0801536a <__sfputs_r>:
 801536a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801536c:	4606      	mov	r6, r0
 801536e:	460f      	mov	r7, r1
 8015370:	4614      	mov	r4, r2
 8015372:	18d5      	adds	r5, r2, r3
 8015374:	42ac      	cmp	r4, r5
 8015376:	d101      	bne.n	801537c <__sfputs_r+0x12>
 8015378:	2000      	movs	r0, #0
 801537a:	e007      	b.n	801538c <__sfputs_r+0x22>
 801537c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015380:	463a      	mov	r2, r7
 8015382:	4630      	mov	r0, r6
 8015384:	f7ff ffda 	bl	801533c <__sfputc_r>
 8015388:	1c43      	adds	r3, r0, #1
 801538a:	d1f3      	bne.n	8015374 <__sfputs_r+0xa>
 801538c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015390 <_vfiprintf_r>:
 8015390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015394:	460d      	mov	r5, r1
 8015396:	b09d      	sub	sp, #116	@ 0x74
 8015398:	4614      	mov	r4, r2
 801539a:	4698      	mov	r8, r3
 801539c:	4606      	mov	r6, r0
 801539e:	b118      	cbz	r0, 80153a8 <_vfiprintf_r+0x18>
 80153a0:	6a03      	ldr	r3, [r0, #32]
 80153a2:	b90b      	cbnz	r3, 80153a8 <_vfiprintf_r+0x18>
 80153a4:	f7fe f980 	bl	80136a8 <__sinit>
 80153a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80153aa:	07d9      	lsls	r1, r3, #31
 80153ac:	d405      	bmi.n	80153ba <_vfiprintf_r+0x2a>
 80153ae:	89ab      	ldrh	r3, [r5, #12]
 80153b0:	059a      	lsls	r2, r3, #22
 80153b2:	d402      	bmi.n	80153ba <_vfiprintf_r+0x2a>
 80153b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80153b6:	f7fe fb94 	bl	8013ae2 <__retarget_lock_acquire_recursive>
 80153ba:	89ab      	ldrh	r3, [r5, #12]
 80153bc:	071b      	lsls	r3, r3, #28
 80153be:	d501      	bpl.n	80153c4 <_vfiprintf_r+0x34>
 80153c0:	692b      	ldr	r3, [r5, #16]
 80153c2:	b99b      	cbnz	r3, 80153ec <_vfiprintf_r+0x5c>
 80153c4:	4629      	mov	r1, r5
 80153c6:	4630      	mov	r0, r6
 80153c8:	f7fe fab8 	bl	801393c <__swsetup_r>
 80153cc:	b170      	cbz	r0, 80153ec <_vfiprintf_r+0x5c>
 80153ce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80153d0:	07dc      	lsls	r4, r3, #31
 80153d2:	d504      	bpl.n	80153de <_vfiprintf_r+0x4e>
 80153d4:	f04f 30ff 	mov.w	r0, #4294967295
 80153d8:	b01d      	add	sp, #116	@ 0x74
 80153da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80153de:	89ab      	ldrh	r3, [r5, #12]
 80153e0:	0598      	lsls	r0, r3, #22
 80153e2:	d4f7      	bmi.n	80153d4 <_vfiprintf_r+0x44>
 80153e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80153e6:	f7fe fb7d 	bl	8013ae4 <__retarget_lock_release_recursive>
 80153ea:	e7f3      	b.n	80153d4 <_vfiprintf_r+0x44>
 80153ec:	2300      	movs	r3, #0
 80153ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80153f0:	2320      	movs	r3, #32
 80153f2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80153f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80153fa:	2330      	movs	r3, #48	@ 0x30
 80153fc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80155ac <_vfiprintf_r+0x21c>
 8015400:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015404:	f04f 0901 	mov.w	r9, #1
 8015408:	4623      	mov	r3, r4
 801540a:	469a      	mov	sl, r3
 801540c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015410:	b10a      	cbz	r2, 8015416 <_vfiprintf_r+0x86>
 8015412:	2a25      	cmp	r2, #37	@ 0x25
 8015414:	d1f9      	bne.n	801540a <_vfiprintf_r+0x7a>
 8015416:	ebba 0b04 	subs.w	fp, sl, r4
 801541a:	d00b      	beq.n	8015434 <_vfiprintf_r+0xa4>
 801541c:	465b      	mov	r3, fp
 801541e:	4622      	mov	r2, r4
 8015420:	4629      	mov	r1, r5
 8015422:	4630      	mov	r0, r6
 8015424:	f7ff ffa1 	bl	801536a <__sfputs_r>
 8015428:	3001      	adds	r0, #1
 801542a:	f000 80a7 	beq.w	801557c <_vfiprintf_r+0x1ec>
 801542e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015430:	445a      	add	r2, fp
 8015432:	9209      	str	r2, [sp, #36]	@ 0x24
 8015434:	f89a 3000 	ldrb.w	r3, [sl]
 8015438:	2b00      	cmp	r3, #0
 801543a:	f000 809f 	beq.w	801557c <_vfiprintf_r+0x1ec>
 801543e:	2300      	movs	r3, #0
 8015440:	f04f 32ff 	mov.w	r2, #4294967295
 8015444:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015448:	f10a 0a01 	add.w	sl, sl, #1
 801544c:	9304      	str	r3, [sp, #16]
 801544e:	9307      	str	r3, [sp, #28]
 8015450:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015454:	931a      	str	r3, [sp, #104]	@ 0x68
 8015456:	4654      	mov	r4, sl
 8015458:	2205      	movs	r2, #5
 801545a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801545e:	4853      	ldr	r0, [pc, #332]	@ (80155ac <_vfiprintf_r+0x21c>)
 8015460:	f7f2 febe 	bl	80081e0 <memchr>
 8015464:	9a04      	ldr	r2, [sp, #16]
 8015466:	b9d8      	cbnz	r0, 80154a0 <_vfiprintf_r+0x110>
 8015468:	06d1      	lsls	r1, r2, #27
 801546a:	bf44      	itt	mi
 801546c:	2320      	movmi	r3, #32
 801546e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015472:	0713      	lsls	r3, r2, #28
 8015474:	bf44      	itt	mi
 8015476:	232b      	movmi	r3, #43	@ 0x2b
 8015478:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801547c:	f89a 3000 	ldrb.w	r3, [sl]
 8015480:	2b2a      	cmp	r3, #42	@ 0x2a
 8015482:	d015      	beq.n	80154b0 <_vfiprintf_r+0x120>
 8015484:	9a07      	ldr	r2, [sp, #28]
 8015486:	4654      	mov	r4, sl
 8015488:	2000      	movs	r0, #0
 801548a:	f04f 0c0a 	mov.w	ip, #10
 801548e:	4621      	mov	r1, r4
 8015490:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015494:	3b30      	subs	r3, #48	@ 0x30
 8015496:	2b09      	cmp	r3, #9
 8015498:	d94b      	bls.n	8015532 <_vfiprintf_r+0x1a2>
 801549a:	b1b0      	cbz	r0, 80154ca <_vfiprintf_r+0x13a>
 801549c:	9207      	str	r2, [sp, #28]
 801549e:	e014      	b.n	80154ca <_vfiprintf_r+0x13a>
 80154a0:	eba0 0308 	sub.w	r3, r0, r8
 80154a4:	fa09 f303 	lsl.w	r3, r9, r3
 80154a8:	4313      	orrs	r3, r2
 80154aa:	9304      	str	r3, [sp, #16]
 80154ac:	46a2      	mov	sl, r4
 80154ae:	e7d2      	b.n	8015456 <_vfiprintf_r+0xc6>
 80154b0:	9b03      	ldr	r3, [sp, #12]
 80154b2:	1d19      	adds	r1, r3, #4
 80154b4:	681b      	ldr	r3, [r3, #0]
 80154b6:	9103      	str	r1, [sp, #12]
 80154b8:	2b00      	cmp	r3, #0
 80154ba:	bfbb      	ittet	lt
 80154bc:	425b      	neglt	r3, r3
 80154be:	f042 0202 	orrlt.w	r2, r2, #2
 80154c2:	9307      	strge	r3, [sp, #28]
 80154c4:	9307      	strlt	r3, [sp, #28]
 80154c6:	bfb8      	it	lt
 80154c8:	9204      	strlt	r2, [sp, #16]
 80154ca:	7823      	ldrb	r3, [r4, #0]
 80154cc:	2b2e      	cmp	r3, #46	@ 0x2e
 80154ce:	d10a      	bne.n	80154e6 <_vfiprintf_r+0x156>
 80154d0:	7863      	ldrb	r3, [r4, #1]
 80154d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80154d4:	d132      	bne.n	801553c <_vfiprintf_r+0x1ac>
 80154d6:	9b03      	ldr	r3, [sp, #12]
 80154d8:	1d1a      	adds	r2, r3, #4
 80154da:	681b      	ldr	r3, [r3, #0]
 80154dc:	9203      	str	r2, [sp, #12]
 80154de:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80154e2:	3402      	adds	r4, #2
 80154e4:	9305      	str	r3, [sp, #20]
 80154e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80155bc <_vfiprintf_r+0x22c>
 80154ea:	7821      	ldrb	r1, [r4, #0]
 80154ec:	2203      	movs	r2, #3
 80154ee:	4650      	mov	r0, sl
 80154f0:	f7f2 fe76 	bl	80081e0 <memchr>
 80154f4:	b138      	cbz	r0, 8015506 <_vfiprintf_r+0x176>
 80154f6:	9b04      	ldr	r3, [sp, #16]
 80154f8:	eba0 000a 	sub.w	r0, r0, sl
 80154fc:	2240      	movs	r2, #64	@ 0x40
 80154fe:	4082      	lsls	r2, r0
 8015500:	4313      	orrs	r3, r2
 8015502:	3401      	adds	r4, #1
 8015504:	9304      	str	r3, [sp, #16]
 8015506:	f814 1b01 	ldrb.w	r1, [r4], #1
 801550a:	4829      	ldr	r0, [pc, #164]	@ (80155b0 <_vfiprintf_r+0x220>)
 801550c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015510:	2206      	movs	r2, #6
 8015512:	f7f2 fe65 	bl	80081e0 <memchr>
 8015516:	2800      	cmp	r0, #0
 8015518:	d03f      	beq.n	801559a <_vfiprintf_r+0x20a>
 801551a:	4b26      	ldr	r3, [pc, #152]	@ (80155b4 <_vfiprintf_r+0x224>)
 801551c:	bb1b      	cbnz	r3, 8015566 <_vfiprintf_r+0x1d6>
 801551e:	9b03      	ldr	r3, [sp, #12]
 8015520:	3307      	adds	r3, #7
 8015522:	f023 0307 	bic.w	r3, r3, #7
 8015526:	3308      	adds	r3, #8
 8015528:	9303      	str	r3, [sp, #12]
 801552a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801552c:	443b      	add	r3, r7
 801552e:	9309      	str	r3, [sp, #36]	@ 0x24
 8015530:	e76a      	b.n	8015408 <_vfiprintf_r+0x78>
 8015532:	fb0c 3202 	mla	r2, ip, r2, r3
 8015536:	460c      	mov	r4, r1
 8015538:	2001      	movs	r0, #1
 801553a:	e7a8      	b.n	801548e <_vfiprintf_r+0xfe>
 801553c:	2300      	movs	r3, #0
 801553e:	3401      	adds	r4, #1
 8015540:	9305      	str	r3, [sp, #20]
 8015542:	4619      	mov	r1, r3
 8015544:	f04f 0c0a 	mov.w	ip, #10
 8015548:	4620      	mov	r0, r4
 801554a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801554e:	3a30      	subs	r2, #48	@ 0x30
 8015550:	2a09      	cmp	r2, #9
 8015552:	d903      	bls.n	801555c <_vfiprintf_r+0x1cc>
 8015554:	2b00      	cmp	r3, #0
 8015556:	d0c6      	beq.n	80154e6 <_vfiprintf_r+0x156>
 8015558:	9105      	str	r1, [sp, #20]
 801555a:	e7c4      	b.n	80154e6 <_vfiprintf_r+0x156>
 801555c:	fb0c 2101 	mla	r1, ip, r1, r2
 8015560:	4604      	mov	r4, r0
 8015562:	2301      	movs	r3, #1
 8015564:	e7f0      	b.n	8015548 <_vfiprintf_r+0x1b8>
 8015566:	ab03      	add	r3, sp, #12
 8015568:	9300      	str	r3, [sp, #0]
 801556a:	462a      	mov	r2, r5
 801556c:	4b12      	ldr	r3, [pc, #72]	@ (80155b8 <_vfiprintf_r+0x228>)
 801556e:	a904      	add	r1, sp, #16
 8015570:	4630      	mov	r0, r6
 8015572:	f7fd fc57 	bl	8012e24 <_printf_float>
 8015576:	4607      	mov	r7, r0
 8015578:	1c78      	adds	r0, r7, #1
 801557a:	d1d6      	bne.n	801552a <_vfiprintf_r+0x19a>
 801557c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801557e:	07d9      	lsls	r1, r3, #31
 8015580:	d405      	bmi.n	801558e <_vfiprintf_r+0x1fe>
 8015582:	89ab      	ldrh	r3, [r5, #12]
 8015584:	059a      	lsls	r2, r3, #22
 8015586:	d402      	bmi.n	801558e <_vfiprintf_r+0x1fe>
 8015588:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801558a:	f7fe faab 	bl	8013ae4 <__retarget_lock_release_recursive>
 801558e:	89ab      	ldrh	r3, [r5, #12]
 8015590:	065b      	lsls	r3, r3, #25
 8015592:	f53f af1f 	bmi.w	80153d4 <_vfiprintf_r+0x44>
 8015596:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015598:	e71e      	b.n	80153d8 <_vfiprintf_r+0x48>
 801559a:	ab03      	add	r3, sp, #12
 801559c:	9300      	str	r3, [sp, #0]
 801559e:	462a      	mov	r2, r5
 80155a0:	4b05      	ldr	r3, [pc, #20]	@ (80155b8 <_vfiprintf_r+0x228>)
 80155a2:	a904      	add	r1, sp, #16
 80155a4:	4630      	mov	r0, r6
 80155a6:	f7fd fed5 	bl	8013354 <_printf_i>
 80155aa:	e7e4      	b.n	8015576 <_vfiprintf_r+0x1e6>
 80155ac:	0801641a 	.word	0x0801641a
 80155b0:	08016424 	.word	0x08016424
 80155b4:	08012e25 	.word	0x08012e25
 80155b8:	0801536b 	.word	0x0801536b
 80155bc:	08016420 	.word	0x08016420

080155c0 <__sflush_r>:
 80155c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80155c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80155c8:	0716      	lsls	r6, r2, #28
 80155ca:	4605      	mov	r5, r0
 80155cc:	460c      	mov	r4, r1
 80155ce:	d454      	bmi.n	801567a <__sflush_r+0xba>
 80155d0:	684b      	ldr	r3, [r1, #4]
 80155d2:	2b00      	cmp	r3, #0
 80155d4:	dc02      	bgt.n	80155dc <__sflush_r+0x1c>
 80155d6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80155d8:	2b00      	cmp	r3, #0
 80155da:	dd48      	ble.n	801566e <__sflush_r+0xae>
 80155dc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80155de:	2e00      	cmp	r6, #0
 80155e0:	d045      	beq.n	801566e <__sflush_r+0xae>
 80155e2:	2300      	movs	r3, #0
 80155e4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80155e8:	682f      	ldr	r7, [r5, #0]
 80155ea:	6a21      	ldr	r1, [r4, #32]
 80155ec:	602b      	str	r3, [r5, #0]
 80155ee:	d030      	beq.n	8015652 <__sflush_r+0x92>
 80155f0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80155f2:	89a3      	ldrh	r3, [r4, #12]
 80155f4:	0759      	lsls	r1, r3, #29
 80155f6:	d505      	bpl.n	8015604 <__sflush_r+0x44>
 80155f8:	6863      	ldr	r3, [r4, #4]
 80155fa:	1ad2      	subs	r2, r2, r3
 80155fc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80155fe:	b10b      	cbz	r3, 8015604 <__sflush_r+0x44>
 8015600:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8015602:	1ad2      	subs	r2, r2, r3
 8015604:	2300      	movs	r3, #0
 8015606:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8015608:	6a21      	ldr	r1, [r4, #32]
 801560a:	4628      	mov	r0, r5
 801560c:	47b0      	blx	r6
 801560e:	1c43      	adds	r3, r0, #1
 8015610:	89a3      	ldrh	r3, [r4, #12]
 8015612:	d106      	bne.n	8015622 <__sflush_r+0x62>
 8015614:	6829      	ldr	r1, [r5, #0]
 8015616:	291d      	cmp	r1, #29
 8015618:	d82b      	bhi.n	8015672 <__sflush_r+0xb2>
 801561a:	4a2a      	ldr	r2, [pc, #168]	@ (80156c4 <__sflush_r+0x104>)
 801561c:	40ca      	lsrs	r2, r1
 801561e:	07d6      	lsls	r6, r2, #31
 8015620:	d527      	bpl.n	8015672 <__sflush_r+0xb2>
 8015622:	2200      	movs	r2, #0
 8015624:	6062      	str	r2, [r4, #4]
 8015626:	04d9      	lsls	r1, r3, #19
 8015628:	6922      	ldr	r2, [r4, #16]
 801562a:	6022      	str	r2, [r4, #0]
 801562c:	d504      	bpl.n	8015638 <__sflush_r+0x78>
 801562e:	1c42      	adds	r2, r0, #1
 8015630:	d101      	bne.n	8015636 <__sflush_r+0x76>
 8015632:	682b      	ldr	r3, [r5, #0]
 8015634:	b903      	cbnz	r3, 8015638 <__sflush_r+0x78>
 8015636:	6560      	str	r0, [r4, #84]	@ 0x54
 8015638:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801563a:	602f      	str	r7, [r5, #0]
 801563c:	b1b9      	cbz	r1, 801566e <__sflush_r+0xae>
 801563e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015642:	4299      	cmp	r1, r3
 8015644:	d002      	beq.n	801564c <__sflush_r+0x8c>
 8015646:	4628      	mov	r0, r5
 8015648:	f7ff f8a6 	bl	8014798 <_free_r>
 801564c:	2300      	movs	r3, #0
 801564e:	6363      	str	r3, [r4, #52]	@ 0x34
 8015650:	e00d      	b.n	801566e <__sflush_r+0xae>
 8015652:	2301      	movs	r3, #1
 8015654:	4628      	mov	r0, r5
 8015656:	47b0      	blx	r6
 8015658:	4602      	mov	r2, r0
 801565a:	1c50      	adds	r0, r2, #1
 801565c:	d1c9      	bne.n	80155f2 <__sflush_r+0x32>
 801565e:	682b      	ldr	r3, [r5, #0]
 8015660:	2b00      	cmp	r3, #0
 8015662:	d0c6      	beq.n	80155f2 <__sflush_r+0x32>
 8015664:	2b1d      	cmp	r3, #29
 8015666:	d001      	beq.n	801566c <__sflush_r+0xac>
 8015668:	2b16      	cmp	r3, #22
 801566a:	d11e      	bne.n	80156aa <__sflush_r+0xea>
 801566c:	602f      	str	r7, [r5, #0]
 801566e:	2000      	movs	r0, #0
 8015670:	e022      	b.n	80156b8 <__sflush_r+0xf8>
 8015672:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015676:	b21b      	sxth	r3, r3
 8015678:	e01b      	b.n	80156b2 <__sflush_r+0xf2>
 801567a:	690f      	ldr	r7, [r1, #16]
 801567c:	2f00      	cmp	r7, #0
 801567e:	d0f6      	beq.n	801566e <__sflush_r+0xae>
 8015680:	0793      	lsls	r3, r2, #30
 8015682:	680e      	ldr	r6, [r1, #0]
 8015684:	bf08      	it	eq
 8015686:	694b      	ldreq	r3, [r1, #20]
 8015688:	600f      	str	r7, [r1, #0]
 801568a:	bf18      	it	ne
 801568c:	2300      	movne	r3, #0
 801568e:	eba6 0807 	sub.w	r8, r6, r7
 8015692:	608b      	str	r3, [r1, #8]
 8015694:	f1b8 0f00 	cmp.w	r8, #0
 8015698:	dde9      	ble.n	801566e <__sflush_r+0xae>
 801569a:	6a21      	ldr	r1, [r4, #32]
 801569c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801569e:	4643      	mov	r3, r8
 80156a0:	463a      	mov	r2, r7
 80156a2:	4628      	mov	r0, r5
 80156a4:	47b0      	blx	r6
 80156a6:	2800      	cmp	r0, #0
 80156a8:	dc08      	bgt.n	80156bc <__sflush_r+0xfc>
 80156aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80156ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80156b2:	81a3      	strh	r3, [r4, #12]
 80156b4:	f04f 30ff 	mov.w	r0, #4294967295
 80156b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80156bc:	4407      	add	r7, r0
 80156be:	eba8 0800 	sub.w	r8, r8, r0
 80156c2:	e7e7      	b.n	8015694 <__sflush_r+0xd4>
 80156c4:	20400001 	.word	0x20400001

080156c8 <_fflush_r>:
 80156c8:	b538      	push	{r3, r4, r5, lr}
 80156ca:	690b      	ldr	r3, [r1, #16]
 80156cc:	4605      	mov	r5, r0
 80156ce:	460c      	mov	r4, r1
 80156d0:	b913      	cbnz	r3, 80156d8 <_fflush_r+0x10>
 80156d2:	2500      	movs	r5, #0
 80156d4:	4628      	mov	r0, r5
 80156d6:	bd38      	pop	{r3, r4, r5, pc}
 80156d8:	b118      	cbz	r0, 80156e2 <_fflush_r+0x1a>
 80156da:	6a03      	ldr	r3, [r0, #32]
 80156dc:	b90b      	cbnz	r3, 80156e2 <_fflush_r+0x1a>
 80156de:	f7fd ffe3 	bl	80136a8 <__sinit>
 80156e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80156e6:	2b00      	cmp	r3, #0
 80156e8:	d0f3      	beq.n	80156d2 <_fflush_r+0xa>
 80156ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80156ec:	07d0      	lsls	r0, r2, #31
 80156ee:	d404      	bmi.n	80156fa <_fflush_r+0x32>
 80156f0:	0599      	lsls	r1, r3, #22
 80156f2:	d402      	bmi.n	80156fa <_fflush_r+0x32>
 80156f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80156f6:	f7fe f9f4 	bl	8013ae2 <__retarget_lock_acquire_recursive>
 80156fa:	4628      	mov	r0, r5
 80156fc:	4621      	mov	r1, r4
 80156fe:	f7ff ff5f 	bl	80155c0 <__sflush_r>
 8015702:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015704:	07da      	lsls	r2, r3, #31
 8015706:	4605      	mov	r5, r0
 8015708:	d4e4      	bmi.n	80156d4 <_fflush_r+0xc>
 801570a:	89a3      	ldrh	r3, [r4, #12]
 801570c:	059b      	lsls	r3, r3, #22
 801570e:	d4e1      	bmi.n	80156d4 <_fflush_r+0xc>
 8015710:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015712:	f7fe f9e7 	bl	8013ae4 <__retarget_lock_release_recursive>
 8015716:	e7dd      	b.n	80156d4 <_fflush_r+0xc>

08015718 <__swhatbuf_r>:
 8015718:	b570      	push	{r4, r5, r6, lr}
 801571a:	460c      	mov	r4, r1
 801571c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015720:	2900      	cmp	r1, #0
 8015722:	b096      	sub	sp, #88	@ 0x58
 8015724:	4615      	mov	r5, r2
 8015726:	461e      	mov	r6, r3
 8015728:	da0d      	bge.n	8015746 <__swhatbuf_r+0x2e>
 801572a:	89a3      	ldrh	r3, [r4, #12]
 801572c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8015730:	f04f 0100 	mov.w	r1, #0
 8015734:	bf14      	ite	ne
 8015736:	2340      	movne	r3, #64	@ 0x40
 8015738:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801573c:	2000      	movs	r0, #0
 801573e:	6031      	str	r1, [r6, #0]
 8015740:	602b      	str	r3, [r5, #0]
 8015742:	b016      	add	sp, #88	@ 0x58
 8015744:	bd70      	pop	{r4, r5, r6, pc}
 8015746:	466a      	mov	r2, sp
 8015748:	f000 f862 	bl	8015810 <_fstat_r>
 801574c:	2800      	cmp	r0, #0
 801574e:	dbec      	blt.n	801572a <__swhatbuf_r+0x12>
 8015750:	9901      	ldr	r1, [sp, #4]
 8015752:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8015756:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801575a:	4259      	negs	r1, r3
 801575c:	4159      	adcs	r1, r3
 801575e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015762:	e7eb      	b.n	801573c <__swhatbuf_r+0x24>

08015764 <__smakebuf_r>:
 8015764:	898b      	ldrh	r3, [r1, #12]
 8015766:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015768:	079d      	lsls	r5, r3, #30
 801576a:	4606      	mov	r6, r0
 801576c:	460c      	mov	r4, r1
 801576e:	d507      	bpl.n	8015780 <__smakebuf_r+0x1c>
 8015770:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8015774:	6023      	str	r3, [r4, #0]
 8015776:	6123      	str	r3, [r4, #16]
 8015778:	2301      	movs	r3, #1
 801577a:	6163      	str	r3, [r4, #20]
 801577c:	b003      	add	sp, #12
 801577e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015780:	ab01      	add	r3, sp, #4
 8015782:	466a      	mov	r2, sp
 8015784:	f7ff ffc8 	bl	8015718 <__swhatbuf_r>
 8015788:	9f00      	ldr	r7, [sp, #0]
 801578a:	4605      	mov	r5, r0
 801578c:	4639      	mov	r1, r7
 801578e:	4630      	mov	r0, r6
 8015790:	f7ff f876 	bl	8014880 <_malloc_r>
 8015794:	b948      	cbnz	r0, 80157aa <__smakebuf_r+0x46>
 8015796:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801579a:	059a      	lsls	r2, r3, #22
 801579c:	d4ee      	bmi.n	801577c <__smakebuf_r+0x18>
 801579e:	f023 0303 	bic.w	r3, r3, #3
 80157a2:	f043 0302 	orr.w	r3, r3, #2
 80157a6:	81a3      	strh	r3, [r4, #12]
 80157a8:	e7e2      	b.n	8015770 <__smakebuf_r+0xc>
 80157aa:	89a3      	ldrh	r3, [r4, #12]
 80157ac:	6020      	str	r0, [r4, #0]
 80157ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80157b2:	81a3      	strh	r3, [r4, #12]
 80157b4:	9b01      	ldr	r3, [sp, #4]
 80157b6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80157ba:	b15b      	cbz	r3, 80157d4 <__smakebuf_r+0x70>
 80157bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80157c0:	4630      	mov	r0, r6
 80157c2:	f000 f837 	bl	8015834 <_isatty_r>
 80157c6:	b128      	cbz	r0, 80157d4 <__smakebuf_r+0x70>
 80157c8:	89a3      	ldrh	r3, [r4, #12]
 80157ca:	f023 0303 	bic.w	r3, r3, #3
 80157ce:	f043 0301 	orr.w	r3, r3, #1
 80157d2:	81a3      	strh	r3, [r4, #12]
 80157d4:	89a3      	ldrh	r3, [r4, #12]
 80157d6:	431d      	orrs	r5, r3
 80157d8:	81a5      	strh	r5, [r4, #12]
 80157da:	e7cf      	b.n	801577c <__smakebuf_r+0x18>

080157dc <memmove>:
 80157dc:	4288      	cmp	r0, r1
 80157de:	b510      	push	{r4, lr}
 80157e0:	eb01 0402 	add.w	r4, r1, r2
 80157e4:	d902      	bls.n	80157ec <memmove+0x10>
 80157e6:	4284      	cmp	r4, r0
 80157e8:	4623      	mov	r3, r4
 80157ea:	d807      	bhi.n	80157fc <memmove+0x20>
 80157ec:	1e43      	subs	r3, r0, #1
 80157ee:	42a1      	cmp	r1, r4
 80157f0:	d008      	beq.n	8015804 <memmove+0x28>
 80157f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80157f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80157fa:	e7f8      	b.n	80157ee <memmove+0x12>
 80157fc:	4402      	add	r2, r0
 80157fe:	4601      	mov	r1, r0
 8015800:	428a      	cmp	r2, r1
 8015802:	d100      	bne.n	8015806 <memmove+0x2a>
 8015804:	bd10      	pop	{r4, pc}
 8015806:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801580a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801580e:	e7f7      	b.n	8015800 <memmove+0x24>

08015810 <_fstat_r>:
 8015810:	b538      	push	{r3, r4, r5, lr}
 8015812:	4d07      	ldr	r5, [pc, #28]	@ (8015830 <_fstat_r+0x20>)
 8015814:	2300      	movs	r3, #0
 8015816:	4604      	mov	r4, r0
 8015818:	4608      	mov	r0, r1
 801581a:	4611      	mov	r1, r2
 801581c:	602b      	str	r3, [r5, #0]
 801581e:	f7f4 fb19 	bl	8009e54 <_fstat>
 8015822:	1c43      	adds	r3, r0, #1
 8015824:	d102      	bne.n	801582c <_fstat_r+0x1c>
 8015826:	682b      	ldr	r3, [r5, #0]
 8015828:	b103      	cbz	r3, 801582c <_fstat_r+0x1c>
 801582a:	6023      	str	r3, [r4, #0]
 801582c:	bd38      	pop	{r3, r4, r5, pc}
 801582e:	bf00      	nop
 8015830:	20001248 	.word	0x20001248

08015834 <_isatty_r>:
 8015834:	b538      	push	{r3, r4, r5, lr}
 8015836:	4d06      	ldr	r5, [pc, #24]	@ (8015850 <_isatty_r+0x1c>)
 8015838:	2300      	movs	r3, #0
 801583a:	4604      	mov	r4, r0
 801583c:	4608      	mov	r0, r1
 801583e:	602b      	str	r3, [r5, #0]
 8015840:	f7f4 fb18 	bl	8009e74 <_isatty>
 8015844:	1c43      	adds	r3, r0, #1
 8015846:	d102      	bne.n	801584e <_isatty_r+0x1a>
 8015848:	682b      	ldr	r3, [r5, #0]
 801584a:	b103      	cbz	r3, 801584e <_isatty_r+0x1a>
 801584c:	6023      	str	r3, [r4, #0]
 801584e:	bd38      	pop	{r3, r4, r5, pc}
 8015850:	20001248 	.word	0x20001248

08015854 <_sbrk_r>:
 8015854:	b538      	push	{r3, r4, r5, lr}
 8015856:	4d06      	ldr	r5, [pc, #24]	@ (8015870 <_sbrk_r+0x1c>)
 8015858:	2300      	movs	r3, #0
 801585a:	4604      	mov	r4, r0
 801585c:	4608      	mov	r0, r1
 801585e:	602b      	str	r3, [r5, #0]
 8015860:	f7f4 fb20 	bl	8009ea4 <_sbrk>
 8015864:	1c43      	adds	r3, r0, #1
 8015866:	d102      	bne.n	801586e <_sbrk_r+0x1a>
 8015868:	682b      	ldr	r3, [r5, #0]
 801586a:	b103      	cbz	r3, 801586e <_sbrk_r+0x1a>
 801586c:	6023      	str	r3, [r4, #0]
 801586e:	bd38      	pop	{r3, r4, r5, pc}
 8015870:	20001248 	.word	0x20001248

08015874 <memcpy>:
 8015874:	440a      	add	r2, r1
 8015876:	4291      	cmp	r1, r2
 8015878:	f100 33ff 	add.w	r3, r0, #4294967295
 801587c:	d100      	bne.n	8015880 <memcpy+0xc>
 801587e:	4770      	bx	lr
 8015880:	b510      	push	{r4, lr}
 8015882:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015886:	f803 4f01 	strb.w	r4, [r3, #1]!
 801588a:	4291      	cmp	r1, r2
 801588c:	d1f9      	bne.n	8015882 <memcpy+0xe>
 801588e:	bd10      	pop	{r4, pc}

08015890 <__assert_func>:
 8015890:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015892:	4614      	mov	r4, r2
 8015894:	461a      	mov	r2, r3
 8015896:	4b09      	ldr	r3, [pc, #36]	@ (80158bc <__assert_func+0x2c>)
 8015898:	681b      	ldr	r3, [r3, #0]
 801589a:	4605      	mov	r5, r0
 801589c:	68d8      	ldr	r0, [r3, #12]
 801589e:	b14c      	cbz	r4, 80158b4 <__assert_func+0x24>
 80158a0:	4b07      	ldr	r3, [pc, #28]	@ (80158c0 <__assert_func+0x30>)
 80158a2:	9100      	str	r1, [sp, #0]
 80158a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80158a8:	4906      	ldr	r1, [pc, #24]	@ (80158c4 <__assert_func+0x34>)
 80158aa:	462b      	mov	r3, r5
 80158ac:	f000 f870 	bl	8015990 <fiprintf>
 80158b0:	f000 f880 	bl	80159b4 <abort>
 80158b4:	4b04      	ldr	r3, [pc, #16]	@ (80158c8 <__assert_func+0x38>)
 80158b6:	461c      	mov	r4, r3
 80158b8:	e7f3      	b.n	80158a2 <__assert_func+0x12>
 80158ba:	bf00      	nop
 80158bc:	20000130 	.word	0x20000130
 80158c0:	08016435 	.word	0x08016435
 80158c4:	08016442 	.word	0x08016442
 80158c8:	08016470 	.word	0x08016470

080158cc <_calloc_r>:
 80158cc:	b570      	push	{r4, r5, r6, lr}
 80158ce:	fba1 5402 	umull	r5, r4, r1, r2
 80158d2:	b934      	cbnz	r4, 80158e2 <_calloc_r+0x16>
 80158d4:	4629      	mov	r1, r5
 80158d6:	f7fe ffd3 	bl	8014880 <_malloc_r>
 80158da:	4606      	mov	r6, r0
 80158dc:	b928      	cbnz	r0, 80158ea <_calloc_r+0x1e>
 80158de:	4630      	mov	r0, r6
 80158e0:	bd70      	pop	{r4, r5, r6, pc}
 80158e2:	220c      	movs	r2, #12
 80158e4:	6002      	str	r2, [r0, #0]
 80158e6:	2600      	movs	r6, #0
 80158e8:	e7f9      	b.n	80158de <_calloc_r+0x12>
 80158ea:	462a      	mov	r2, r5
 80158ec:	4621      	mov	r1, r4
 80158ee:	f7fe f87b 	bl	80139e8 <memset>
 80158f2:	e7f4      	b.n	80158de <_calloc_r+0x12>

080158f4 <__ascii_mbtowc>:
 80158f4:	b082      	sub	sp, #8
 80158f6:	b901      	cbnz	r1, 80158fa <__ascii_mbtowc+0x6>
 80158f8:	a901      	add	r1, sp, #4
 80158fa:	b142      	cbz	r2, 801590e <__ascii_mbtowc+0x1a>
 80158fc:	b14b      	cbz	r3, 8015912 <__ascii_mbtowc+0x1e>
 80158fe:	7813      	ldrb	r3, [r2, #0]
 8015900:	600b      	str	r3, [r1, #0]
 8015902:	7812      	ldrb	r2, [r2, #0]
 8015904:	1e10      	subs	r0, r2, #0
 8015906:	bf18      	it	ne
 8015908:	2001      	movne	r0, #1
 801590a:	b002      	add	sp, #8
 801590c:	4770      	bx	lr
 801590e:	4610      	mov	r0, r2
 8015910:	e7fb      	b.n	801590a <__ascii_mbtowc+0x16>
 8015912:	f06f 0001 	mvn.w	r0, #1
 8015916:	e7f8      	b.n	801590a <__ascii_mbtowc+0x16>

08015918 <_realloc_r>:
 8015918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801591c:	4607      	mov	r7, r0
 801591e:	4614      	mov	r4, r2
 8015920:	460d      	mov	r5, r1
 8015922:	b921      	cbnz	r1, 801592e <_realloc_r+0x16>
 8015924:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015928:	4611      	mov	r1, r2
 801592a:	f7fe bfa9 	b.w	8014880 <_malloc_r>
 801592e:	b92a      	cbnz	r2, 801593c <_realloc_r+0x24>
 8015930:	f7fe ff32 	bl	8014798 <_free_r>
 8015934:	4625      	mov	r5, r4
 8015936:	4628      	mov	r0, r5
 8015938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801593c:	f000 f841 	bl	80159c2 <_malloc_usable_size_r>
 8015940:	4284      	cmp	r4, r0
 8015942:	4606      	mov	r6, r0
 8015944:	d802      	bhi.n	801594c <_realloc_r+0x34>
 8015946:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801594a:	d8f4      	bhi.n	8015936 <_realloc_r+0x1e>
 801594c:	4621      	mov	r1, r4
 801594e:	4638      	mov	r0, r7
 8015950:	f7fe ff96 	bl	8014880 <_malloc_r>
 8015954:	4680      	mov	r8, r0
 8015956:	b908      	cbnz	r0, 801595c <_realloc_r+0x44>
 8015958:	4645      	mov	r5, r8
 801595a:	e7ec      	b.n	8015936 <_realloc_r+0x1e>
 801595c:	42b4      	cmp	r4, r6
 801595e:	4622      	mov	r2, r4
 8015960:	4629      	mov	r1, r5
 8015962:	bf28      	it	cs
 8015964:	4632      	movcs	r2, r6
 8015966:	f7ff ff85 	bl	8015874 <memcpy>
 801596a:	4629      	mov	r1, r5
 801596c:	4638      	mov	r0, r7
 801596e:	f7fe ff13 	bl	8014798 <_free_r>
 8015972:	e7f1      	b.n	8015958 <_realloc_r+0x40>

08015974 <__ascii_wctomb>:
 8015974:	4603      	mov	r3, r0
 8015976:	4608      	mov	r0, r1
 8015978:	b141      	cbz	r1, 801598c <__ascii_wctomb+0x18>
 801597a:	2aff      	cmp	r2, #255	@ 0xff
 801597c:	d904      	bls.n	8015988 <__ascii_wctomb+0x14>
 801597e:	228a      	movs	r2, #138	@ 0x8a
 8015980:	601a      	str	r2, [r3, #0]
 8015982:	f04f 30ff 	mov.w	r0, #4294967295
 8015986:	4770      	bx	lr
 8015988:	700a      	strb	r2, [r1, #0]
 801598a:	2001      	movs	r0, #1
 801598c:	4770      	bx	lr
	...

08015990 <fiprintf>:
 8015990:	b40e      	push	{r1, r2, r3}
 8015992:	b503      	push	{r0, r1, lr}
 8015994:	4601      	mov	r1, r0
 8015996:	ab03      	add	r3, sp, #12
 8015998:	4805      	ldr	r0, [pc, #20]	@ (80159b0 <fiprintf+0x20>)
 801599a:	f853 2b04 	ldr.w	r2, [r3], #4
 801599e:	6800      	ldr	r0, [r0, #0]
 80159a0:	9301      	str	r3, [sp, #4]
 80159a2:	f7ff fcf5 	bl	8015390 <_vfiprintf_r>
 80159a6:	b002      	add	sp, #8
 80159a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80159ac:	b003      	add	sp, #12
 80159ae:	4770      	bx	lr
 80159b0:	20000130 	.word	0x20000130

080159b4 <abort>:
 80159b4:	b508      	push	{r3, lr}
 80159b6:	2006      	movs	r0, #6
 80159b8:	f000 f834 	bl	8015a24 <raise>
 80159bc:	2001      	movs	r0, #1
 80159be:	f7f4 fa15 	bl	8009dec <_exit>

080159c2 <_malloc_usable_size_r>:
 80159c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80159c6:	1f18      	subs	r0, r3, #4
 80159c8:	2b00      	cmp	r3, #0
 80159ca:	bfbc      	itt	lt
 80159cc:	580b      	ldrlt	r3, [r1, r0]
 80159ce:	18c0      	addlt	r0, r0, r3
 80159d0:	4770      	bx	lr

080159d2 <_raise_r>:
 80159d2:	291f      	cmp	r1, #31
 80159d4:	b538      	push	{r3, r4, r5, lr}
 80159d6:	4605      	mov	r5, r0
 80159d8:	460c      	mov	r4, r1
 80159da:	d904      	bls.n	80159e6 <_raise_r+0x14>
 80159dc:	2316      	movs	r3, #22
 80159de:	6003      	str	r3, [r0, #0]
 80159e0:	f04f 30ff 	mov.w	r0, #4294967295
 80159e4:	bd38      	pop	{r3, r4, r5, pc}
 80159e6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80159e8:	b112      	cbz	r2, 80159f0 <_raise_r+0x1e>
 80159ea:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80159ee:	b94b      	cbnz	r3, 8015a04 <_raise_r+0x32>
 80159f0:	4628      	mov	r0, r5
 80159f2:	f000 f831 	bl	8015a58 <_getpid_r>
 80159f6:	4622      	mov	r2, r4
 80159f8:	4601      	mov	r1, r0
 80159fa:	4628      	mov	r0, r5
 80159fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015a00:	f000 b818 	b.w	8015a34 <_kill_r>
 8015a04:	2b01      	cmp	r3, #1
 8015a06:	d00a      	beq.n	8015a1e <_raise_r+0x4c>
 8015a08:	1c59      	adds	r1, r3, #1
 8015a0a:	d103      	bne.n	8015a14 <_raise_r+0x42>
 8015a0c:	2316      	movs	r3, #22
 8015a0e:	6003      	str	r3, [r0, #0]
 8015a10:	2001      	movs	r0, #1
 8015a12:	e7e7      	b.n	80159e4 <_raise_r+0x12>
 8015a14:	2100      	movs	r1, #0
 8015a16:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8015a1a:	4620      	mov	r0, r4
 8015a1c:	4798      	blx	r3
 8015a1e:	2000      	movs	r0, #0
 8015a20:	e7e0      	b.n	80159e4 <_raise_r+0x12>
	...

08015a24 <raise>:
 8015a24:	4b02      	ldr	r3, [pc, #8]	@ (8015a30 <raise+0xc>)
 8015a26:	4601      	mov	r1, r0
 8015a28:	6818      	ldr	r0, [r3, #0]
 8015a2a:	f7ff bfd2 	b.w	80159d2 <_raise_r>
 8015a2e:	bf00      	nop
 8015a30:	20000130 	.word	0x20000130

08015a34 <_kill_r>:
 8015a34:	b538      	push	{r3, r4, r5, lr}
 8015a36:	4d07      	ldr	r5, [pc, #28]	@ (8015a54 <_kill_r+0x20>)
 8015a38:	2300      	movs	r3, #0
 8015a3a:	4604      	mov	r4, r0
 8015a3c:	4608      	mov	r0, r1
 8015a3e:	4611      	mov	r1, r2
 8015a40:	602b      	str	r3, [r5, #0]
 8015a42:	f7f4 f9c3 	bl	8009dcc <_kill>
 8015a46:	1c43      	adds	r3, r0, #1
 8015a48:	d102      	bne.n	8015a50 <_kill_r+0x1c>
 8015a4a:	682b      	ldr	r3, [r5, #0]
 8015a4c:	b103      	cbz	r3, 8015a50 <_kill_r+0x1c>
 8015a4e:	6023      	str	r3, [r4, #0]
 8015a50:	bd38      	pop	{r3, r4, r5, pc}
 8015a52:	bf00      	nop
 8015a54:	20001248 	.word	0x20001248

08015a58 <_getpid_r>:
 8015a58:	f7f4 b9b0 	b.w	8009dbc <_getpid>

08015a5c <_init>:
 8015a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a5e:	bf00      	nop
 8015a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015a62:	bc08      	pop	{r3}
 8015a64:	469e      	mov	lr, r3
 8015a66:	4770      	bx	lr

08015a68 <_fini>:
 8015a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a6a:	bf00      	nop
 8015a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015a6e:	bc08      	pop	{r3}
 8015a70:	469e      	mov	lr, r3
 8015a72:	4770      	bx	lr
