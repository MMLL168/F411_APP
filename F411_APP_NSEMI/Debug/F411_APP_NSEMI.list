
F411_APP_NSEMI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08008000  08008000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e818  080081a0  080081a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011e4  080169b8  080169b8  0000f9b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017b9c  08017b9c  000112f0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08017b9c  08017b9c  00010b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017ba4  08017ba4  000112f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017ba4  08017ba4  00010ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08017ba8  08017ba8  00010ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002f0  20000000  08017bac  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001168  200002f0  08017e9c  000112f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001458  08017e9c  00011458  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000112f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ff01  00000000  00000000  00011320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000051af  00000000  00000000  00031221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b30  00000000  00000000  000363d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014fa  00000000  00000000  00037f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001df0b  00000000  00000000  000393fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025c94  00000000  00000000  00057305  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4488  00000000  00000000  0007cf99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00121421  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008324  00000000  00000000  00121464  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  00129788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080081a0 <__do_global_dtors_aux>:
 80081a0:	b510      	push	{r4, lr}
 80081a2:	4c05      	ldr	r4, [pc, #20]	@ (80081b8 <__do_global_dtors_aux+0x18>)
 80081a4:	7823      	ldrb	r3, [r4, #0]
 80081a6:	b933      	cbnz	r3, 80081b6 <__do_global_dtors_aux+0x16>
 80081a8:	4b04      	ldr	r3, [pc, #16]	@ (80081bc <__do_global_dtors_aux+0x1c>)
 80081aa:	b113      	cbz	r3, 80081b2 <__do_global_dtors_aux+0x12>
 80081ac:	4804      	ldr	r0, [pc, #16]	@ (80081c0 <__do_global_dtors_aux+0x20>)
 80081ae:	f3af 8000 	nop.w
 80081b2:	2301      	movs	r3, #1
 80081b4:	7023      	strb	r3, [r4, #0]
 80081b6:	bd10      	pop	{r4, pc}
 80081b8:	200002f0 	.word	0x200002f0
 80081bc:	00000000 	.word	0x00000000
 80081c0:	080169a0 	.word	0x080169a0

080081c4 <frame_dummy>:
 80081c4:	b508      	push	{r3, lr}
 80081c6:	4b03      	ldr	r3, [pc, #12]	@ (80081d4 <frame_dummy+0x10>)
 80081c8:	b11b      	cbz	r3, 80081d2 <frame_dummy+0xe>
 80081ca:	4903      	ldr	r1, [pc, #12]	@ (80081d8 <frame_dummy+0x14>)
 80081cc:	4803      	ldr	r0, [pc, #12]	@ (80081dc <frame_dummy+0x18>)
 80081ce:	f3af 8000 	nop.w
 80081d2:	bd08      	pop	{r3, pc}
 80081d4:	00000000 	.word	0x00000000
 80081d8:	200002f4 	.word	0x200002f4
 80081dc:	080169a0 	.word	0x080169a0

080081e0 <memchr>:
 80081e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80081e4:	2a10      	cmp	r2, #16
 80081e6:	db2b      	blt.n	8008240 <memchr+0x60>
 80081e8:	f010 0f07 	tst.w	r0, #7
 80081ec:	d008      	beq.n	8008200 <memchr+0x20>
 80081ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80081f2:	3a01      	subs	r2, #1
 80081f4:	428b      	cmp	r3, r1
 80081f6:	d02d      	beq.n	8008254 <memchr+0x74>
 80081f8:	f010 0f07 	tst.w	r0, #7
 80081fc:	b342      	cbz	r2, 8008250 <memchr+0x70>
 80081fe:	d1f6      	bne.n	80081ee <memchr+0xe>
 8008200:	b4f0      	push	{r4, r5, r6, r7}
 8008202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800820a:	f022 0407 	bic.w	r4, r2, #7
 800820e:	f07f 0700 	mvns.w	r7, #0
 8008212:	2300      	movs	r3, #0
 8008214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008218:	3c08      	subs	r4, #8
 800821a:	ea85 0501 	eor.w	r5, r5, r1
 800821e:	ea86 0601 	eor.w	r6, r6, r1
 8008222:	fa85 f547 	uadd8	r5, r5, r7
 8008226:	faa3 f587 	sel	r5, r3, r7
 800822a:	fa86 f647 	uadd8	r6, r6, r7
 800822e:	faa5 f687 	sel	r6, r5, r7
 8008232:	b98e      	cbnz	r6, 8008258 <memchr+0x78>
 8008234:	d1ee      	bne.n	8008214 <memchr+0x34>
 8008236:	bcf0      	pop	{r4, r5, r6, r7}
 8008238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800823c:	f002 0207 	and.w	r2, r2, #7
 8008240:	b132      	cbz	r2, 8008250 <memchr+0x70>
 8008242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008246:	3a01      	subs	r2, #1
 8008248:	ea83 0301 	eor.w	r3, r3, r1
 800824c:	b113      	cbz	r3, 8008254 <memchr+0x74>
 800824e:	d1f8      	bne.n	8008242 <memchr+0x62>
 8008250:	2000      	movs	r0, #0
 8008252:	4770      	bx	lr
 8008254:	3801      	subs	r0, #1
 8008256:	4770      	bx	lr
 8008258:	2d00      	cmp	r5, #0
 800825a:	bf06      	itte	eq
 800825c:	4635      	moveq	r5, r6
 800825e:	3803      	subeq	r0, #3
 8008260:	3807      	subne	r0, #7
 8008262:	f015 0f01 	tst.w	r5, #1
 8008266:	d107      	bne.n	8008278 <memchr+0x98>
 8008268:	3001      	adds	r0, #1
 800826a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800826e:	bf02      	ittt	eq
 8008270:	3001      	addeq	r0, #1
 8008272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8008276:	3001      	addeq	r0, #1
 8008278:	bcf0      	pop	{r4, r5, r6, r7}
 800827a:	3801      	subs	r0, #1
 800827c:	4770      	bx	lr
 800827e:	bf00      	nop

08008280 <strlen>:
 8008280:	4603      	mov	r3, r0
 8008282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008286:	2a00      	cmp	r2, #0
 8008288:	d1fb      	bne.n	8008282 <strlen+0x2>
 800828a:	1a18      	subs	r0, r3, r0
 800828c:	3801      	subs	r0, #1
 800828e:	4770      	bx	lr

08008290 <__aeabi_drsub>:
 8008290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8008294:	e002      	b.n	800829c <__adddf3>
 8008296:	bf00      	nop

08008298 <__aeabi_dsub>:
 8008298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800829c <__adddf3>:
 800829c:	b530      	push	{r4, r5, lr}
 800829e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80082a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80082a6:	ea94 0f05 	teq	r4, r5
 80082aa:	bf08      	it	eq
 80082ac:	ea90 0f02 	teqeq	r0, r2
 80082b0:	bf1f      	itttt	ne
 80082b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80082b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80082ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80082be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80082c2:	f000 80e2 	beq.w	800848a <__adddf3+0x1ee>
 80082c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80082ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80082ce:	bfb8      	it	lt
 80082d0:	426d      	neglt	r5, r5
 80082d2:	dd0c      	ble.n	80082ee <__adddf3+0x52>
 80082d4:	442c      	add	r4, r5
 80082d6:	ea80 0202 	eor.w	r2, r0, r2
 80082da:	ea81 0303 	eor.w	r3, r1, r3
 80082de:	ea82 0000 	eor.w	r0, r2, r0
 80082e2:	ea83 0101 	eor.w	r1, r3, r1
 80082e6:	ea80 0202 	eor.w	r2, r0, r2
 80082ea:	ea81 0303 	eor.w	r3, r1, r3
 80082ee:	2d36      	cmp	r5, #54	@ 0x36
 80082f0:	bf88      	it	hi
 80082f2:	bd30      	pophi	{r4, r5, pc}
 80082f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80082f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80082fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8008300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008304:	d002      	beq.n	800830c <__adddf3+0x70>
 8008306:	4240      	negs	r0, r0
 8008308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800830c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8008310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008318:	d002      	beq.n	8008320 <__adddf3+0x84>
 800831a:	4252      	negs	r2, r2
 800831c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008320:	ea94 0f05 	teq	r4, r5
 8008324:	f000 80a7 	beq.w	8008476 <__adddf3+0x1da>
 8008328:	f1a4 0401 	sub.w	r4, r4, #1
 800832c:	f1d5 0e20 	rsbs	lr, r5, #32
 8008330:	db0d      	blt.n	800834e <__adddf3+0xb2>
 8008332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008336:	fa22 f205 	lsr.w	r2, r2, r5
 800833a:	1880      	adds	r0, r0, r2
 800833c:	f141 0100 	adc.w	r1, r1, #0
 8008340:	fa03 f20e 	lsl.w	r2, r3, lr
 8008344:	1880      	adds	r0, r0, r2
 8008346:	fa43 f305 	asr.w	r3, r3, r5
 800834a:	4159      	adcs	r1, r3
 800834c:	e00e      	b.n	800836c <__adddf3+0xd0>
 800834e:	f1a5 0520 	sub.w	r5, r5, #32
 8008352:	f10e 0e20 	add.w	lr, lr, #32
 8008356:	2a01      	cmp	r2, #1
 8008358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800835c:	bf28      	it	cs
 800835e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8008362:	fa43 f305 	asr.w	r3, r3, r5
 8008366:	18c0      	adds	r0, r0, r3
 8008368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800836c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8008370:	d507      	bpl.n	8008382 <__adddf3+0xe6>
 8008372:	f04f 0e00 	mov.w	lr, #0
 8008376:	f1dc 0c00 	rsbs	ip, ip, #0
 800837a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800837e:	eb6e 0101 	sbc.w	r1, lr, r1
 8008382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8008386:	d31b      	bcc.n	80083c0 <__adddf3+0x124>
 8008388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800838c:	d30c      	bcc.n	80083a8 <__adddf3+0x10c>
 800838e:	0849      	lsrs	r1, r1, #1
 8008390:	ea5f 0030 	movs.w	r0, r0, rrx
 8008394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8008398:	f104 0401 	add.w	r4, r4, #1
 800839c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80083a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80083a4:	f080 809a 	bcs.w	80084dc <__adddf3+0x240>
 80083a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80083ac:	bf08      	it	eq
 80083ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80083b2:	f150 0000 	adcs.w	r0, r0, #0
 80083b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80083ba:	ea41 0105 	orr.w	r1, r1, r5
 80083be:	bd30      	pop	{r4, r5, pc}
 80083c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80083c4:	4140      	adcs	r0, r0
 80083c6:	eb41 0101 	adc.w	r1, r1, r1
 80083ca:	3c01      	subs	r4, #1
 80083cc:	bf28      	it	cs
 80083ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80083d2:	d2e9      	bcs.n	80083a8 <__adddf3+0x10c>
 80083d4:	f091 0f00 	teq	r1, #0
 80083d8:	bf04      	itt	eq
 80083da:	4601      	moveq	r1, r0
 80083dc:	2000      	moveq	r0, #0
 80083de:	fab1 f381 	clz	r3, r1
 80083e2:	bf08      	it	eq
 80083e4:	3320      	addeq	r3, #32
 80083e6:	f1a3 030b 	sub.w	r3, r3, #11
 80083ea:	f1b3 0220 	subs.w	r2, r3, #32
 80083ee:	da0c      	bge.n	800840a <__adddf3+0x16e>
 80083f0:	320c      	adds	r2, #12
 80083f2:	dd08      	ble.n	8008406 <__adddf3+0x16a>
 80083f4:	f102 0c14 	add.w	ip, r2, #20
 80083f8:	f1c2 020c 	rsb	r2, r2, #12
 80083fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8008400:	fa21 f102 	lsr.w	r1, r1, r2
 8008404:	e00c      	b.n	8008420 <__adddf3+0x184>
 8008406:	f102 0214 	add.w	r2, r2, #20
 800840a:	bfd8      	it	le
 800840c:	f1c2 0c20 	rsble	ip, r2, #32
 8008410:	fa01 f102 	lsl.w	r1, r1, r2
 8008414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008418:	bfdc      	itt	le
 800841a:	ea41 010c 	orrle.w	r1, r1, ip
 800841e:	4090      	lslle	r0, r2
 8008420:	1ae4      	subs	r4, r4, r3
 8008422:	bfa2      	ittt	ge
 8008424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008428:	4329      	orrge	r1, r5
 800842a:	bd30      	popge	{r4, r5, pc}
 800842c:	ea6f 0404 	mvn.w	r4, r4
 8008430:	3c1f      	subs	r4, #31
 8008432:	da1c      	bge.n	800846e <__adddf3+0x1d2>
 8008434:	340c      	adds	r4, #12
 8008436:	dc0e      	bgt.n	8008456 <__adddf3+0x1ba>
 8008438:	f104 0414 	add.w	r4, r4, #20
 800843c:	f1c4 0220 	rsb	r2, r4, #32
 8008440:	fa20 f004 	lsr.w	r0, r0, r4
 8008444:	fa01 f302 	lsl.w	r3, r1, r2
 8008448:	ea40 0003 	orr.w	r0, r0, r3
 800844c:	fa21 f304 	lsr.w	r3, r1, r4
 8008450:	ea45 0103 	orr.w	r1, r5, r3
 8008454:	bd30      	pop	{r4, r5, pc}
 8008456:	f1c4 040c 	rsb	r4, r4, #12
 800845a:	f1c4 0220 	rsb	r2, r4, #32
 800845e:	fa20 f002 	lsr.w	r0, r0, r2
 8008462:	fa01 f304 	lsl.w	r3, r1, r4
 8008466:	ea40 0003 	orr.w	r0, r0, r3
 800846a:	4629      	mov	r1, r5
 800846c:	bd30      	pop	{r4, r5, pc}
 800846e:	fa21 f004 	lsr.w	r0, r1, r4
 8008472:	4629      	mov	r1, r5
 8008474:	bd30      	pop	{r4, r5, pc}
 8008476:	f094 0f00 	teq	r4, #0
 800847a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800847e:	bf06      	itte	eq
 8008480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8008484:	3401      	addeq	r4, #1
 8008486:	3d01      	subne	r5, #1
 8008488:	e74e      	b.n	8008328 <__adddf3+0x8c>
 800848a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800848e:	bf18      	it	ne
 8008490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008494:	d029      	beq.n	80084ea <__adddf3+0x24e>
 8008496:	ea94 0f05 	teq	r4, r5
 800849a:	bf08      	it	eq
 800849c:	ea90 0f02 	teqeq	r0, r2
 80084a0:	d005      	beq.n	80084ae <__adddf3+0x212>
 80084a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80084a6:	bf04      	itt	eq
 80084a8:	4619      	moveq	r1, r3
 80084aa:	4610      	moveq	r0, r2
 80084ac:	bd30      	pop	{r4, r5, pc}
 80084ae:	ea91 0f03 	teq	r1, r3
 80084b2:	bf1e      	ittt	ne
 80084b4:	2100      	movne	r1, #0
 80084b6:	2000      	movne	r0, #0
 80084b8:	bd30      	popne	{r4, r5, pc}
 80084ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80084be:	d105      	bne.n	80084cc <__adddf3+0x230>
 80084c0:	0040      	lsls	r0, r0, #1
 80084c2:	4149      	adcs	r1, r1
 80084c4:	bf28      	it	cs
 80084c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80084ca:	bd30      	pop	{r4, r5, pc}
 80084cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80084d0:	bf3c      	itt	cc
 80084d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80084d6:	bd30      	popcc	{r4, r5, pc}
 80084d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80084dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80084e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80084e4:	f04f 0000 	mov.w	r0, #0
 80084e8:	bd30      	pop	{r4, r5, pc}
 80084ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80084ee:	bf1a      	itte	ne
 80084f0:	4619      	movne	r1, r3
 80084f2:	4610      	movne	r0, r2
 80084f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80084f8:	bf1c      	itt	ne
 80084fa:	460b      	movne	r3, r1
 80084fc:	4602      	movne	r2, r0
 80084fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008502:	bf06      	itte	eq
 8008504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008508:	ea91 0f03 	teqeq	r1, r3
 800850c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8008510:	bd30      	pop	{r4, r5, pc}
 8008512:	bf00      	nop

08008514 <__aeabi_ui2d>:
 8008514:	f090 0f00 	teq	r0, #0
 8008518:	bf04      	itt	eq
 800851a:	2100      	moveq	r1, #0
 800851c:	4770      	bxeq	lr
 800851e:	b530      	push	{r4, r5, lr}
 8008520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8008524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8008528:	f04f 0500 	mov.w	r5, #0
 800852c:	f04f 0100 	mov.w	r1, #0
 8008530:	e750      	b.n	80083d4 <__adddf3+0x138>
 8008532:	bf00      	nop

08008534 <__aeabi_i2d>:
 8008534:	f090 0f00 	teq	r0, #0
 8008538:	bf04      	itt	eq
 800853a:	2100      	moveq	r1, #0
 800853c:	4770      	bxeq	lr
 800853e:	b530      	push	{r4, r5, lr}
 8008540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8008544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8008548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800854c:	bf48      	it	mi
 800854e:	4240      	negmi	r0, r0
 8008550:	f04f 0100 	mov.w	r1, #0
 8008554:	e73e      	b.n	80083d4 <__adddf3+0x138>
 8008556:	bf00      	nop

08008558 <__aeabi_f2d>:
 8008558:	0042      	lsls	r2, r0, #1
 800855a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800855e:	ea4f 0131 	mov.w	r1, r1, rrx
 8008562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8008566:	bf1f      	itttt	ne
 8008568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800856c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8008570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8008574:	4770      	bxne	lr
 8008576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800857a:	bf08      	it	eq
 800857c:	4770      	bxeq	lr
 800857e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8008582:	bf04      	itt	eq
 8008584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8008588:	4770      	bxeq	lr
 800858a:	b530      	push	{r4, r5, lr}
 800858c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8008590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8008594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8008598:	e71c      	b.n	80083d4 <__adddf3+0x138>
 800859a:	bf00      	nop

0800859c <__aeabi_ul2d>:
 800859c:	ea50 0201 	orrs.w	r2, r0, r1
 80085a0:	bf08      	it	eq
 80085a2:	4770      	bxeq	lr
 80085a4:	b530      	push	{r4, r5, lr}
 80085a6:	f04f 0500 	mov.w	r5, #0
 80085aa:	e00a      	b.n	80085c2 <__aeabi_l2d+0x16>

080085ac <__aeabi_l2d>:
 80085ac:	ea50 0201 	orrs.w	r2, r0, r1
 80085b0:	bf08      	it	eq
 80085b2:	4770      	bxeq	lr
 80085b4:	b530      	push	{r4, r5, lr}
 80085b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80085ba:	d502      	bpl.n	80085c2 <__aeabi_l2d+0x16>
 80085bc:	4240      	negs	r0, r0
 80085be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80085c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80085c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80085ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80085ce:	f43f aed8 	beq.w	8008382 <__adddf3+0xe6>
 80085d2:	f04f 0203 	mov.w	r2, #3
 80085d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80085da:	bf18      	it	ne
 80085dc:	3203      	addne	r2, #3
 80085de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80085e2:	bf18      	it	ne
 80085e4:	3203      	addne	r2, #3
 80085e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80085ea:	f1c2 0320 	rsb	r3, r2, #32
 80085ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80085f2:	fa20 f002 	lsr.w	r0, r0, r2
 80085f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80085fa:	ea40 000e 	orr.w	r0, r0, lr
 80085fe:	fa21 f102 	lsr.w	r1, r1, r2
 8008602:	4414      	add	r4, r2
 8008604:	e6bd      	b.n	8008382 <__adddf3+0xe6>
 8008606:	bf00      	nop

08008608 <__aeabi_dmul>:
 8008608:	b570      	push	{r4, r5, r6, lr}
 800860a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800860e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8008612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008616:	bf1d      	ittte	ne
 8008618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800861c:	ea94 0f0c 	teqne	r4, ip
 8008620:	ea95 0f0c 	teqne	r5, ip
 8008624:	f000 f8de 	bleq	80087e4 <__aeabi_dmul+0x1dc>
 8008628:	442c      	add	r4, r5
 800862a:	ea81 0603 	eor.w	r6, r1, r3
 800862e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8008632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8008636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800863a:	bf18      	it	ne
 800863c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8008640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8008644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008648:	d038      	beq.n	80086bc <__aeabi_dmul+0xb4>
 800864a:	fba0 ce02 	umull	ip, lr, r0, r2
 800864e:	f04f 0500 	mov.w	r5, #0
 8008652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8008656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800865a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800865e:	f04f 0600 	mov.w	r6, #0
 8008662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8008666:	f09c 0f00 	teq	ip, #0
 800866a:	bf18      	it	ne
 800866c:	f04e 0e01 	orrne.w	lr, lr, #1
 8008670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8008674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8008678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800867c:	d204      	bcs.n	8008688 <__aeabi_dmul+0x80>
 800867e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8008682:	416d      	adcs	r5, r5
 8008684:	eb46 0606 	adc.w	r6, r6, r6
 8008688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800868c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8008690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8008694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8008698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800869c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80086a0:	bf88      	it	hi
 80086a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80086a6:	d81e      	bhi.n	80086e6 <__aeabi_dmul+0xde>
 80086a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80086ac:	bf08      	it	eq
 80086ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80086b2:	f150 0000 	adcs.w	r0, r0, #0
 80086b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80086ba:	bd70      	pop	{r4, r5, r6, pc}
 80086bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80086c0:	ea46 0101 	orr.w	r1, r6, r1
 80086c4:	ea40 0002 	orr.w	r0, r0, r2
 80086c8:	ea81 0103 	eor.w	r1, r1, r3
 80086cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80086d0:	bfc2      	ittt	gt
 80086d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80086d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80086da:	bd70      	popgt	{r4, r5, r6, pc}
 80086dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80086e0:	f04f 0e00 	mov.w	lr, #0
 80086e4:	3c01      	subs	r4, #1
 80086e6:	f300 80ab 	bgt.w	8008840 <__aeabi_dmul+0x238>
 80086ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80086ee:	bfde      	ittt	le
 80086f0:	2000      	movle	r0, #0
 80086f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80086f6:	bd70      	pople	{r4, r5, r6, pc}
 80086f8:	f1c4 0400 	rsb	r4, r4, #0
 80086fc:	3c20      	subs	r4, #32
 80086fe:	da35      	bge.n	800876c <__aeabi_dmul+0x164>
 8008700:	340c      	adds	r4, #12
 8008702:	dc1b      	bgt.n	800873c <__aeabi_dmul+0x134>
 8008704:	f104 0414 	add.w	r4, r4, #20
 8008708:	f1c4 0520 	rsb	r5, r4, #32
 800870c:	fa00 f305 	lsl.w	r3, r0, r5
 8008710:	fa20 f004 	lsr.w	r0, r0, r4
 8008714:	fa01 f205 	lsl.w	r2, r1, r5
 8008718:	ea40 0002 	orr.w	r0, r0, r2
 800871c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8008720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8008724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008728:	fa21 f604 	lsr.w	r6, r1, r4
 800872c:	eb42 0106 	adc.w	r1, r2, r6
 8008730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008734:	bf08      	it	eq
 8008736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800873a:	bd70      	pop	{r4, r5, r6, pc}
 800873c:	f1c4 040c 	rsb	r4, r4, #12
 8008740:	f1c4 0520 	rsb	r5, r4, #32
 8008744:	fa00 f304 	lsl.w	r3, r0, r4
 8008748:	fa20 f005 	lsr.w	r0, r0, r5
 800874c:	fa01 f204 	lsl.w	r2, r1, r4
 8008750:	ea40 0002 	orr.w	r0, r0, r2
 8008754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8008758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800875c:	f141 0100 	adc.w	r1, r1, #0
 8008760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008764:	bf08      	it	eq
 8008766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800876a:	bd70      	pop	{r4, r5, r6, pc}
 800876c:	f1c4 0520 	rsb	r5, r4, #32
 8008770:	fa00 f205 	lsl.w	r2, r0, r5
 8008774:	ea4e 0e02 	orr.w	lr, lr, r2
 8008778:	fa20 f304 	lsr.w	r3, r0, r4
 800877c:	fa01 f205 	lsl.w	r2, r1, r5
 8008780:	ea43 0302 	orr.w	r3, r3, r2
 8008784:	fa21 f004 	lsr.w	r0, r1, r4
 8008788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800878c:	fa21 f204 	lsr.w	r2, r1, r4
 8008790:	ea20 0002 	bic.w	r0, r0, r2
 8008794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8008798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800879c:	bf08      	it	eq
 800879e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80087a2:	bd70      	pop	{r4, r5, r6, pc}
 80087a4:	f094 0f00 	teq	r4, #0
 80087a8:	d10f      	bne.n	80087ca <__aeabi_dmul+0x1c2>
 80087aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80087ae:	0040      	lsls	r0, r0, #1
 80087b0:	eb41 0101 	adc.w	r1, r1, r1
 80087b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80087b8:	bf08      	it	eq
 80087ba:	3c01      	subeq	r4, #1
 80087bc:	d0f7      	beq.n	80087ae <__aeabi_dmul+0x1a6>
 80087be:	ea41 0106 	orr.w	r1, r1, r6
 80087c2:	f095 0f00 	teq	r5, #0
 80087c6:	bf18      	it	ne
 80087c8:	4770      	bxne	lr
 80087ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80087ce:	0052      	lsls	r2, r2, #1
 80087d0:	eb43 0303 	adc.w	r3, r3, r3
 80087d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80087d8:	bf08      	it	eq
 80087da:	3d01      	subeq	r5, #1
 80087dc:	d0f7      	beq.n	80087ce <__aeabi_dmul+0x1c6>
 80087de:	ea43 0306 	orr.w	r3, r3, r6
 80087e2:	4770      	bx	lr
 80087e4:	ea94 0f0c 	teq	r4, ip
 80087e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80087ec:	bf18      	it	ne
 80087ee:	ea95 0f0c 	teqne	r5, ip
 80087f2:	d00c      	beq.n	800880e <__aeabi_dmul+0x206>
 80087f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80087f8:	bf18      	it	ne
 80087fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80087fe:	d1d1      	bne.n	80087a4 <__aeabi_dmul+0x19c>
 8008800:	ea81 0103 	eor.w	r1, r1, r3
 8008804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8008808:	f04f 0000 	mov.w	r0, #0
 800880c:	bd70      	pop	{r4, r5, r6, pc}
 800880e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008812:	bf06      	itte	eq
 8008814:	4610      	moveq	r0, r2
 8008816:	4619      	moveq	r1, r3
 8008818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800881c:	d019      	beq.n	8008852 <__aeabi_dmul+0x24a>
 800881e:	ea94 0f0c 	teq	r4, ip
 8008822:	d102      	bne.n	800882a <__aeabi_dmul+0x222>
 8008824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008828:	d113      	bne.n	8008852 <__aeabi_dmul+0x24a>
 800882a:	ea95 0f0c 	teq	r5, ip
 800882e:	d105      	bne.n	800883c <__aeabi_dmul+0x234>
 8008830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008834:	bf1c      	itt	ne
 8008836:	4610      	movne	r0, r2
 8008838:	4619      	movne	r1, r3
 800883a:	d10a      	bne.n	8008852 <__aeabi_dmul+0x24a>
 800883c:	ea81 0103 	eor.w	r1, r1, r3
 8008840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8008844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8008848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800884c:	f04f 0000 	mov.w	r0, #0
 8008850:	bd70      	pop	{r4, r5, r6, pc}
 8008852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8008856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800885a:	bd70      	pop	{r4, r5, r6, pc}

0800885c <__aeabi_ddiv>:
 800885c:	b570      	push	{r4, r5, r6, lr}
 800885e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8008862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8008866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800886a:	bf1d      	ittte	ne
 800886c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8008870:	ea94 0f0c 	teqne	r4, ip
 8008874:	ea95 0f0c 	teqne	r5, ip
 8008878:	f000 f8a7 	bleq	80089ca <__aeabi_ddiv+0x16e>
 800887c:	eba4 0405 	sub.w	r4, r4, r5
 8008880:	ea81 0e03 	eor.w	lr, r1, r3
 8008884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800888c:	f000 8088 	beq.w	80089a0 <__aeabi_ddiv+0x144>
 8008890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8008898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800889c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80088a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80088a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80088a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80088ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80088b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80088b4:	429d      	cmp	r5, r3
 80088b6:	bf08      	it	eq
 80088b8:	4296      	cmpeq	r6, r2
 80088ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80088be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80088c2:	d202      	bcs.n	80088ca <__aeabi_ddiv+0x6e>
 80088c4:	085b      	lsrs	r3, r3, #1
 80088c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80088ca:	1ab6      	subs	r6, r6, r2
 80088cc:	eb65 0503 	sbc.w	r5, r5, r3
 80088d0:	085b      	lsrs	r3, r3, #1
 80088d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80088d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80088da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80088de:	ebb6 0e02 	subs.w	lr, r6, r2
 80088e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80088e6:	bf22      	ittt	cs
 80088e8:	1ab6      	subcs	r6, r6, r2
 80088ea:	4675      	movcs	r5, lr
 80088ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80088f0:	085b      	lsrs	r3, r3, #1
 80088f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80088f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80088fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80088fe:	bf22      	ittt	cs
 8008900:	1ab6      	subcs	r6, r6, r2
 8008902:	4675      	movcs	r5, lr
 8008904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008908:	085b      	lsrs	r3, r3, #1
 800890a:	ea4f 0232 	mov.w	r2, r2, rrx
 800890e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008916:	bf22      	ittt	cs
 8008918:	1ab6      	subcs	r6, r6, r2
 800891a:	4675      	movcs	r5, lr
 800891c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008920:	085b      	lsrs	r3, r3, #1
 8008922:	ea4f 0232 	mov.w	r2, r2, rrx
 8008926:	ebb6 0e02 	subs.w	lr, r6, r2
 800892a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800892e:	bf22      	ittt	cs
 8008930:	1ab6      	subcs	r6, r6, r2
 8008932:	4675      	movcs	r5, lr
 8008934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008938:	ea55 0e06 	orrs.w	lr, r5, r6
 800893c:	d018      	beq.n	8008970 <__aeabi_ddiv+0x114>
 800893e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8008942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8008946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800894a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800894e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8008952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8008956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800895a:	d1c0      	bne.n	80088de <__aeabi_ddiv+0x82>
 800895c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8008960:	d10b      	bne.n	800897a <__aeabi_ddiv+0x11e>
 8008962:	ea41 0100 	orr.w	r1, r1, r0
 8008966:	f04f 0000 	mov.w	r0, #0
 800896a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800896e:	e7b6      	b.n	80088de <__aeabi_ddiv+0x82>
 8008970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8008974:	bf04      	itt	eq
 8008976:	4301      	orreq	r1, r0
 8008978:	2000      	moveq	r0, #0
 800897a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800897e:	bf88      	it	hi
 8008980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8008984:	f63f aeaf 	bhi.w	80086e6 <__aeabi_dmul+0xde>
 8008988:	ebb5 0c03 	subs.w	ip, r5, r3
 800898c:	bf04      	itt	eq
 800898e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8008992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008996:	f150 0000 	adcs.w	r0, r0, #0
 800899a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800899e:	bd70      	pop	{r4, r5, r6, pc}
 80089a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80089a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80089a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80089ac:	bfc2      	ittt	gt
 80089ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80089b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80089b6:	bd70      	popgt	{r4, r5, r6, pc}
 80089b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80089bc:	f04f 0e00 	mov.w	lr, #0
 80089c0:	3c01      	subs	r4, #1
 80089c2:	e690      	b.n	80086e6 <__aeabi_dmul+0xde>
 80089c4:	ea45 0e06 	orr.w	lr, r5, r6
 80089c8:	e68d      	b.n	80086e6 <__aeabi_dmul+0xde>
 80089ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80089ce:	ea94 0f0c 	teq	r4, ip
 80089d2:	bf08      	it	eq
 80089d4:	ea95 0f0c 	teqeq	r5, ip
 80089d8:	f43f af3b 	beq.w	8008852 <__aeabi_dmul+0x24a>
 80089dc:	ea94 0f0c 	teq	r4, ip
 80089e0:	d10a      	bne.n	80089f8 <__aeabi_ddiv+0x19c>
 80089e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80089e6:	f47f af34 	bne.w	8008852 <__aeabi_dmul+0x24a>
 80089ea:	ea95 0f0c 	teq	r5, ip
 80089ee:	f47f af25 	bne.w	800883c <__aeabi_dmul+0x234>
 80089f2:	4610      	mov	r0, r2
 80089f4:	4619      	mov	r1, r3
 80089f6:	e72c      	b.n	8008852 <__aeabi_dmul+0x24a>
 80089f8:	ea95 0f0c 	teq	r5, ip
 80089fc:	d106      	bne.n	8008a0c <__aeabi_ddiv+0x1b0>
 80089fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008a02:	f43f aefd 	beq.w	8008800 <__aeabi_dmul+0x1f8>
 8008a06:	4610      	mov	r0, r2
 8008a08:	4619      	mov	r1, r3
 8008a0a:	e722      	b.n	8008852 <__aeabi_dmul+0x24a>
 8008a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008a10:	bf18      	it	ne
 8008a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008a16:	f47f aec5 	bne.w	80087a4 <__aeabi_dmul+0x19c>
 8008a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8008a1e:	f47f af0d 	bne.w	800883c <__aeabi_dmul+0x234>
 8008a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8008a26:	f47f aeeb 	bne.w	8008800 <__aeabi_dmul+0x1f8>
 8008a2a:	e712      	b.n	8008852 <__aeabi_dmul+0x24a>

08008a2c <__gedf2>:
 8008a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8008a30:	e006      	b.n	8008a40 <__cmpdf2+0x4>
 8008a32:	bf00      	nop

08008a34 <__ledf2>:
 8008a34:	f04f 0c01 	mov.w	ip, #1
 8008a38:	e002      	b.n	8008a40 <__cmpdf2+0x4>
 8008a3a:	bf00      	nop

08008a3c <__cmpdf2>:
 8008a3c:	f04f 0c01 	mov.w	ip, #1
 8008a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8008a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008a50:	bf18      	it	ne
 8008a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8008a56:	d01b      	beq.n	8008a90 <__cmpdf2+0x54>
 8008a58:	b001      	add	sp, #4
 8008a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8008a5e:	bf0c      	ite	eq
 8008a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8008a64:	ea91 0f03 	teqne	r1, r3
 8008a68:	bf02      	ittt	eq
 8008a6a:	ea90 0f02 	teqeq	r0, r2
 8008a6e:	2000      	moveq	r0, #0
 8008a70:	4770      	bxeq	lr
 8008a72:	f110 0f00 	cmn.w	r0, #0
 8008a76:	ea91 0f03 	teq	r1, r3
 8008a7a:	bf58      	it	pl
 8008a7c:	4299      	cmppl	r1, r3
 8008a7e:	bf08      	it	eq
 8008a80:	4290      	cmpeq	r0, r2
 8008a82:	bf2c      	ite	cs
 8008a84:	17d8      	asrcs	r0, r3, #31
 8008a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8008a8a:	f040 0001 	orr.w	r0, r0, #1
 8008a8e:	4770      	bx	lr
 8008a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008a98:	d102      	bne.n	8008aa0 <__cmpdf2+0x64>
 8008a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8008a9e:	d107      	bne.n	8008ab0 <__cmpdf2+0x74>
 8008aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008aa8:	d1d6      	bne.n	8008a58 <__cmpdf2+0x1c>
 8008aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8008aae:	d0d3      	beq.n	8008a58 <__cmpdf2+0x1c>
 8008ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008ab4:	4770      	bx	lr
 8008ab6:	bf00      	nop

08008ab8 <__aeabi_cdrcmple>:
 8008ab8:	4684      	mov	ip, r0
 8008aba:	4610      	mov	r0, r2
 8008abc:	4662      	mov	r2, ip
 8008abe:	468c      	mov	ip, r1
 8008ac0:	4619      	mov	r1, r3
 8008ac2:	4663      	mov	r3, ip
 8008ac4:	e000      	b.n	8008ac8 <__aeabi_cdcmpeq>
 8008ac6:	bf00      	nop

08008ac8 <__aeabi_cdcmpeq>:
 8008ac8:	b501      	push	{r0, lr}
 8008aca:	f7ff ffb7 	bl	8008a3c <__cmpdf2>
 8008ace:	2800      	cmp	r0, #0
 8008ad0:	bf48      	it	mi
 8008ad2:	f110 0f00 	cmnmi.w	r0, #0
 8008ad6:	bd01      	pop	{r0, pc}

08008ad8 <__aeabi_dcmpeq>:
 8008ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008adc:	f7ff fff4 	bl	8008ac8 <__aeabi_cdcmpeq>
 8008ae0:	bf0c      	ite	eq
 8008ae2:	2001      	moveq	r0, #1
 8008ae4:	2000      	movne	r0, #0
 8008ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8008aea:	bf00      	nop

08008aec <__aeabi_dcmplt>:
 8008aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008af0:	f7ff ffea 	bl	8008ac8 <__aeabi_cdcmpeq>
 8008af4:	bf34      	ite	cc
 8008af6:	2001      	movcc	r0, #1
 8008af8:	2000      	movcs	r0, #0
 8008afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8008afe:	bf00      	nop

08008b00 <__aeabi_dcmple>:
 8008b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008b04:	f7ff ffe0 	bl	8008ac8 <__aeabi_cdcmpeq>
 8008b08:	bf94      	ite	ls
 8008b0a:	2001      	movls	r0, #1
 8008b0c:	2000      	movhi	r0, #0
 8008b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008b12:	bf00      	nop

08008b14 <__aeabi_dcmpge>:
 8008b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008b18:	f7ff ffce 	bl	8008ab8 <__aeabi_cdrcmple>
 8008b1c:	bf94      	ite	ls
 8008b1e:	2001      	movls	r0, #1
 8008b20:	2000      	movhi	r0, #0
 8008b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8008b26:	bf00      	nop

08008b28 <__aeabi_dcmpgt>:
 8008b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008b2c:	f7ff ffc4 	bl	8008ab8 <__aeabi_cdrcmple>
 8008b30:	bf34      	ite	cc
 8008b32:	2001      	movcc	r0, #1
 8008b34:	2000      	movcs	r0, #0
 8008b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8008b3a:	bf00      	nop

08008b3c <__aeabi_dcmpun>:
 8008b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008b44:	d102      	bne.n	8008b4c <__aeabi_dcmpun+0x10>
 8008b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8008b4a:	d10a      	bne.n	8008b62 <__aeabi_dcmpun+0x26>
 8008b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008b54:	d102      	bne.n	8008b5c <__aeabi_dcmpun+0x20>
 8008b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8008b5a:	d102      	bne.n	8008b62 <__aeabi_dcmpun+0x26>
 8008b5c:	f04f 0000 	mov.w	r0, #0
 8008b60:	4770      	bx	lr
 8008b62:	f04f 0001 	mov.w	r0, #1
 8008b66:	4770      	bx	lr

08008b68 <__aeabi_d2iz>:
 8008b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8008b70:	d215      	bcs.n	8008b9e <__aeabi_d2iz+0x36>
 8008b72:	d511      	bpl.n	8008b98 <__aeabi_d2iz+0x30>
 8008b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8008b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008b7c:	d912      	bls.n	8008ba4 <__aeabi_d2iz+0x3c>
 8008b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8008b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8008b92:	bf18      	it	ne
 8008b94:	4240      	negne	r0, r0
 8008b96:	4770      	bx	lr
 8008b98:	f04f 0000 	mov.w	r0, #0
 8008b9c:	4770      	bx	lr
 8008b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008ba2:	d105      	bne.n	8008bb0 <__aeabi_d2iz+0x48>
 8008ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8008ba8:	bf08      	it	eq
 8008baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8008bae:	4770      	bx	lr
 8008bb0:	f04f 0000 	mov.w	r0, #0
 8008bb4:	4770      	bx	lr
 8008bb6:	bf00      	nop

08008bb8 <__aeabi_d2f>:
 8008bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8008bc0:	bf24      	itt	cs
 8008bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8008bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8008bca:	d90d      	bls.n	8008be8 <__aeabi_d2f+0x30>
 8008bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8008bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8008bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8008bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8008bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8008be0:	bf08      	it	eq
 8008be2:	f020 0001 	biceq.w	r0, r0, #1
 8008be6:	4770      	bx	lr
 8008be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8008bec:	d121      	bne.n	8008c32 <__aeabi_d2f+0x7a>
 8008bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8008bf2:	bfbc      	itt	lt
 8008bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8008bf8:	4770      	bxlt	lr
 8008bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8008bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8008c02:	f1c2 0218 	rsb	r2, r2, #24
 8008c06:	f1c2 0c20 	rsb	ip, r2, #32
 8008c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8008c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8008c12:	bf18      	it	ne
 8008c14:	f040 0001 	orrne.w	r0, r0, #1
 8008c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8008c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8008c24:	ea40 000c 	orr.w	r0, r0, ip
 8008c28:	fa23 f302 	lsr.w	r3, r3, r2
 8008c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008c30:	e7cc      	b.n	8008bcc <__aeabi_d2f+0x14>
 8008c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8008c36:	d107      	bne.n	8008c48 <__aeabi_d2f+0x90>
 8008c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8008c3c:	bf1e      	ittt	ne
 8008c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8008c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8008c46:	4770      	bxne	lr
 8008c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8008c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8008c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8008c54:	4770      	bx	lr
 8008c56:	bf00      	nop

08008c58 <__aeabi_uldivmod>:
 8008c58:	b953      	cbnz	r3, 8008c70 <__aeabi_uldivmod+0x18>
 8008c5a:	b94a      	cbnz	r2, 8008c70 <__aeabi_uldivmod+0x18>
 8008c5c:	2900      	cmp	r1, #0
 8008c5e:	bf08      	it	eq
 8008c60:	2800      	cmpeq	r0, #0
 8008c62:	bf1c      	itt	ne
 8008c64:	f04f 31ff 	movne.w	r1, #4294967295
 8008c68:	f04f 30ff 	movne.w	r0, #4294967295
 8008c6c:	f000 b988 	b.w	8008f80 <__aeabi_idiv0>
 8008c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8008c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008c78:	f000 f806 	bl	8008c88 <__udivmoddi4>
 8008c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c84:	b004      	add	sp, #16
 8008c86:	4770      	bx	lr

08008c88 <__udivmoddi4>:
 8008c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c8c:	9d08      	ldr	r5, [sp, #32]
 8008c8e:	468e      	mov	lr, r1
 8008c90:	4604      	mov	r4, r0
 8008c92:	4688      	mov	r8, r1
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d14a      	bne.n	8008d2e <__udivmoddi4+0xa6>
 8008c98:	428a      	cmp	r2, r1
 8008c9a:	4617      	mov	r7, r2
 8008c9c:	d962      	bls.n	8008d64 <__udivmoddi4+0xdc>
 8008c9e:	fab2 f682 	clz	r6, r2
 8008ca2:	b14e      	cbz	r6, 8008cb8 <__udivmoddi4+0x30>
 8008ca4:	f1c6 0320 	rsb	r3, r6, #32
 8008ca8:	fa01 f806 	lsl.w	r8, r1, r6
 8008cac:	fa20 f303 	lsr.w	r3, r0, r3
 8008cb0:	40b7      	lsls	r7, r6
 8008cb2:	ea43 0808 	orr.w	r8, r3, r8
 8008cb6:	40b4      	lsls	r4, r6
 8008cb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8008cbc:	fa1f fc87 	uxth.w	ip, r7
 8008cc0:	fbb8 f1fe 	udiv	r1, r8, lr
 8008cc4:	0c23      	lsrs	r3, r4, #16
 8008cc6:	fb0e 8811 	mls	r8, lr, r1, r8
 8008cca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008cce:	fb01 f20c 	mul.w	r2, r1, ip
 8008cd2:	429a      	cmp	r2, r3
 8008cd4:	d909      	bls.n	8008cea <__udivmoddi4+0x62>
 8008cd6:	18fb      	adds	r3, r7, r3
 8008cd8:	f101 30ff 	add.w	r0, r1, #4294967295
 8008cdc:	f080 80ea 	bcs.w	8008eb4 <__udivmoddi4+0x22c>
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	f240 80e7 	bls.w	8008eb4 <__udivmoddi4+0x22c>
 8008ce6:	3902      	subs	r1, #2
 8008ce8:	443b      	add	r3, r7
 8008cea:	1a9a      	subs	r2, r3, r2
 8008cec:	b2a3      	uxth	r3, r4
 8008cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8008cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8008cf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008cfa:	fb00 fc0c 	mul.w	ip, r0, ip
 8008cfe:	459c      	cmp	ip, r3
 8008d00:	d909      	bls.n	8008d16 <__udivmoddi4+0x8e>
 8008d02:	18fb      	adds	r3, r7, r3
 8008d04:	f100 32ff 	add.w	r2, r0, #4294967295
 8008d08:	f080 80d6 	bcs.w	8008eb8 <__udivmoddi4+0x230>
 8008d0c:	459c      	cmp	ip, r3
 8008d0e:	f240 80d3 	bls.w	8008eb8 <__udivmoddi4+0x230>
 8008d12:	443b      	add	r3, r7
 8008d14:	3802      	subs	r0, #2
 8008d16:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8008d1a:	eba3 030c 	sub.w	r3, r3, ip
 8008d1e:	2100      	movs	r1, #0
 8008d20:	b11d      	cbz	r5, 8008d2a <__udivmoddi4+0xa2>
 8008d22:	40f3      	lsrs	r3, r6
 8008d24:	2200      	movs	r2, #0
 8008d26:	e9c5 3200 	strd	r3, r2, [r5]
 8008d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d2e:	428b      	cmp	r3, r1
 8008d30:	d905      	bls.n	8008d3e <__udivmoddi4+0xb6>
 8008d32:	b10d      	cbz	r5, 8008d38 <__udivmoddi4+0xb0>
 8008d34:	e9c5 0100 	strd	r0, r1, [r5]
 8008d38:	2100      	movs	r1, #0
 8008d3a:	4608      	mov	r0, r1
 8008d3c:	e7f5      	b.n	8008d2a <__udivmoddi4+0xa2>
 8008d3e:	fab3 f183 	clz	r1, r3
 8008d42:	2900      	cmp	r1, #0
 8008d44:	d146      	bne.n	8008dd4 <__udivmoddi4+0x14c>
 8008d46:	4573      	cmp	r3, lr
 8008d48:	d302      	bcc.n	8008d50 <__udivmoddi4+0xc8>
 8008d4a:	4282      	cmp	r2, r0
 8008d4c:	f200 8105 	bhi.w	8008f5a <__udivmoddi4+0x2d2>
 8008d50:	1a84      	subs	r4, r0, r2
 8008d52:	eb6e 0203 	sbc.w	r2, lr, r3
 8008d56:	2001      	movs	r0, #1
 8008d58:	4690      	mov	r8, r2
 8008d5a:	2d00      	cmp	r5, #0
 8008d5c:	d0e5      	beq.n	8008d2a <__udivmoddi4+0xa2>
 8008d5e:	e9c5 4800 	strd	r4, r8, [r5]
 8008d62:	e7e2      	b.n	8008d2a <__udivmoddi4+0xa2>
 8008d64:	2a00      	cmp	r2, #0
 8008d66:	f000 8090 	beq.w	8008e8a <__udivmoddi4+0x202>
 8008d6a:	fab2 f682 	clz	r6, r2
 8008d6e:	2e00      	cmp	r6, #0
 8008d70:	f040 80a4 	bne.w	8008ebc <__udivmoddi4+0x234>
 8008d74:	1a8a      	subs	r2, r1, r2
 8008d76:	0c03      	lsrs	r3, r0, #16
 8008d78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8008d7c:	b280      	uxth	r0, r0
 8008d7e:	b2bc      	uxth	r4, r7
 8008d80:	2101      	movs	r1, #1
 8008d82:	fbb2 fcfe 	udiv	ip, r2, lr
 8008d86:	fb0e 221c 	mls	r2, lr, ip, r2
 8008d8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d8e:	fb04 f20c 	mul.w	r2, r4, ip
 8008d92:	429a      	cmp	r2, r3
 8008d94:	d907      	bls.n	8008da6 <__udivmoddi4+0x11e>
 8008d96:	18fb      	adds	r3, r7, r3
 8008d98:	f10c 38ff 	add.w	r8, ip, #4294967295
 8008d9c:	d202      	bcs.n	8008da4 <__udivmoddi4+0x11c>
 8008d9e:	429a      	cmp	r2, r3
 8008da0:	f200 80e0 	bhi.w	8008f64 <__udivmoddi4+0x2dc>
 8008da4:	46c4      	mov	ip, r8
 8008da6:	1a9b      	subs	r3, r3, r2
 8008da8:	fbb3 f2fe 	udiv	r2, r3, lr
 8008dac:	fb0e 3312 	mls	r3, lr, r2, r3
 8008db0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8008db4:	fb02 f404 	mul.w	r4, r2, r4
 8008db8:	429c      	cmp	r4, r3
 8008dba:	d907      	bls.n	8008dcc <__udivmoddi4+0x144>
 8008dbc:	18fb      	adds	r3, r7, r3
 8008dbe:	f102 30ff 	add.w	r0, r2, #4294967295
 8008dc2:	d202      	bcs.n	8008dca <__udivmoddi4+0x142>
 8008dc4:	429c      	cmp	r4, r3
 8008dc6:	f200 80ca 	bhi.w	8008f5e <__udivmoddi4+0x2d6>
 8008dca:	4602      	mov	r2, r0
 8008dcc:	1b1b      	subs	r3, r3, r4
 8008dce:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8008dd2:	e7a5      	b.n	8008d20 <__udivmoddi4+0x98>
 8008dd4:	f1c1 0620 	rsb	r6, r1, #32
 8008dd8:	408b      	lsls	r3, r1
 8008dda:	fa22 f706 	lsr.w	r7, r2, r6
 8008dde:	431f      	orrs	r7, r3
 8008de0:	fa0e f401 	lsl.w	r4, lr, r1
 8008de4:	fa20 f306 	lsr.w	r3, r0, r6
 8008de8:	fa2e fe06 	lsr.w	lr, lr, r6
 8008dec:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8008df0:	4323      	orrs	r3, r4
 8008df2:	fa00 f801 	lsl.w	r8, r0, r1
 8008df6:	fa1f fc87 	uxth.w	ip, r7
 8008dfa:	fbbe f0f9 	udiv	r0, lr, r9
 8008dfe:	0c1c      	lsrs	r4, r3, #16
 8008e00:	fb09 ee10 	mls	lr, r9, r0, lr
 8008e04:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8008e08:	fb00 fe0c 	mul.w	lr, r0, ip
 8008e0c:	45a6      	cmp	lr, r4
 8008e0e:	fa02 f201 	lsl.w	r2, r2, r1
 8008e12:	d909      	bls.n	8008e28 <__udivmoddi4+0x1a0>
 8008e14:	193c      	adds	r4, r7, r4
 8008e16:	f100 3aff 	add.w	sl, r0, #4294967295
 8008e1a:	f080 809c 	bcs.w	8008f56 <__udivmoddi4+0x2ce>
 8008e1e:	45a6      	cmp	lr, r4
 8008e20:	f240 8099 	bls.w	8008f56 <__udivmoddi4+0x2ce>
 8008e24:	3802      	subs	r0, #2
 8008e26:	443c      	add	r4, r7
 8008e28:	eba4 040e 	sub.w	r4, r4, lr
 8008e2c:	fa1f fe83 	uxth.w	lr, r3
 8008e30:	fbb4 f3f9 	udiv	r3, r4, r9
 8008e34:	fb09 4413 	mls	r4, r9, r3, r4
 8008e38:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8008e3c:	fb03 fc0c 	mul.w	ip, r3, ip
 8008e40:	45a4      	cmp	ip, r4
 8008e42:	d908      	bls.n	8008e56 <__udivmoddi4+0x1ce>
 8008e44:	193c      	adds	r4, r7, r4
 8008e46:	f103 3eff 	add.w	lr, r3, #4294967295
 8008e4a:	f080 8082 	bcs.w	8008f52 <__udivmoddi4+0x2ca>
 8008e4e:	45a4      	cmp	ip, r4
 8008e50:	d97f      	bls.n	8008f52 <__udivmoddi4+0x2ca>
 8008e52:	3b02      	subs	r3, #2
 8008e54:	443c      	add	r4, r7
 8008e56:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8008e5a:	eba4 040c 	sub.w	r4, r4, ip
 8008e5e:	fba0 ec02 	umull	lr, ip, r0, r2
 8008e62:	4564      	cmp	r4, ip
 8008e64:	4673      	mov	r3, lr
 8008e66:	46e1      	mov	r9, ip
 8008e68:	d362      	bcc.n	8008f30 <__udivmoddi4+0x2a8>
 8008e6a:	d05f      	beq.n	8008f2c <__udivmoddi4+0x2a4>
 8008e6c:	b15d      	cbz	r5, 8008e86 <__udivmoddi4+0x1fe>
 8008e6e:	ebb8 0203 	subs.w	r2, r8, r3
 8008e72:	eb64 0409 	sbc.w	r4, r4, r9
 8008e76:	fa04 f606 	lsl.w	r6, r4, r6
 8008e7a:	fa22 f301 	lsr.w	r3, r2, r1
 8008e7e:	431e      	orrs	r6, r3
 8008e80:	40cc      	lsrs	r4, r1
 8008e82:	e9c5 6400 	strd	r6, r4, [r5]
 8008e86:	2100      	movs	r1, #0
 8008e88:	e74f      	b.n	8008d2a <__udivmoddi4+0xa2>
 8008e8a:	fbb1 fcf2 	udiv	ip, r1, r2
 8008e8e:	0c01      	lsrs	r1, r0, #16
 8008e90:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8008e94:	b280      	uxth	r0, r0
 8008e96:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8008e9a:	463b      	mov	r3, r7
 8008e9c:	4638      	mov	r0, r7
 8008e9e:	463c      	mov	r4, r7
 8008ea0:	46b8      	mov	r8, r7
 8008ea2:	46be      	mov	lr, r7
 8008ea4:	2620      	movs	r6, #32
 8008ea6:	fbb1 f1f7 	udiv	r1, r1, r7
 8008eaa:	eba2 0208 	sub.w	r2, r2, r8
 8008eae:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8008eb2:	e766      	b.n	8008d82 <__udivmoddi4+0xfa>
 8008eb4:	4601      	mov	r1, r0
 8008eb6:	e718      	b.n	8008cea <__udivmoddi4+0x62>
 8008eb8:	4610      	mov	r0, r2
 8008eba:	e72c      	b.n	8008d16 <__udivmoddi4+0x8e>
 8008ebc:	f1c6 0220 	rsb	r2, r6, #32
 8008ec0:	fa2e f302 	lsr.w	r3, lr, r2
 8008ec4:	40b7      	lsls	r7, r6
 8008ec6:	40b1      	lsls	r1, r6
 8008ec8:	fa20 f202 	lsr.w	r2, r0, r2
 8008ecc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8008ed0:	430a      	orrs	r2, r1
 8008ed2:	fbb3 f8fe 	udiv	r8, r3, lr
 8008ed6:	b2bc      	uxth	r4, r7
 8008ed8:	fb0e 3318 	mls	r3, lr, r8, r3
 8008edc:	0c11      	lsrs	r1, r2, #16
 8008ede:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008ee2:	fb08 f904 	mul.w	r9, r8, r4
 8008ee6:	40b0      	lsls	r0, r6
 8008ee8:	4589      	cmp	r9, r1
 8008eea:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8008eee:	b280      	uxth	r0, r0
 8008ef0:	d93e      	bls.n	8008f70 <__udivmoddi4+0x2e8>
 8008ef2:	1879      	adds	r1, r7, r1
 8008ef4:	f108 3cff 	add.w	ip, r8, #4294967295
 8008ef8:	d201      	bcs.n	8008efe <__udivmoddi4+0x276>
 8008efa:	4589      	cmp	r9, r1
 8008efc:	d81f      	bhi.n	8008f3e <__udivmoddi4+0x2b6>
 8008efe:	eba1 0109 	sub.w	r1, r1, r9
 8008f02:	fbb1 f9fe 	udiv	r9, r1, lr
 8008f06:	fb09 f804 	mul.w	r8, r9, r4
 8008f0a:	fb0e 1119 	mls	r1, lr, r9, r1
 8008f0e:	b292      	uxth	r2, r2
 8008f10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8008f14:	4542      	cmp	r2, r8
 8008f16:	d229      	bcs.n	8008f6c <__udivmoddi4+0x2e4>
 8008f18:	18ba      	adds	r2, r7, r2
 8008f1a:	f109 31ff 	add.w	r1, r9, #4294967295
 8008f1e:	d2c4      	bcs.n	8008eaa <__udivmoddi4+0x222>
 8008f20:	4542      	cmp	r2, r8
 8008f22:	d2c2      	bcs.n	8008eaa <__udivmoddi4+0x222>
 8008f24:	f1a9 0102 	sub.w	r1, r9, #2
 8008f28:	443a      	add	r2, r7
 8008f2a:	e7be      	b.n	8008eaa <__udivmoddi4+0x222>
 8008f2c:	45f0      	cmp	r8, lr
 8008f2e:	d29d      	bcs.n	8008e6c <__udivmoddi4+0x1e4>
 8008f30:	ebbe 0302 	subs.w	r3, lr, r2
 8008f34:	eb6c 0c07 	sbc.w	ip, ip, r7
 8008f38:	3801      	subs	r0, #1
 8008f3a:	46e1      	mov	r9, ip
 8008f3c:	e796      	b.n	8008e6c <__udivmoddi4+0x1e4>
 8008f3e:	eba7 0909 	sub.w	r9, r7, r9
 8008f42:	4449      	add	r1, r9
 8008f44:	f1a8 0c02 	sub.w	ip, r8, #2
 8008f48:	fbb1 f9fe 	udiv	r9, r1, lr
 8008f4c:	fb09 f804 	mul.w	r8, r9, r4
 8008f50:	e7db      	b.n	8008f0a <__udivmoddi4+0x282>
 8008f52:	4673      	mov	r3, lr
 8008f54:	e77f      	b.n	8008e56 <__udivmoddi4+0x1ce>
 8008f56:	4650      	mov	r0, sl
 8008f58:	e766      	b.n	8008e28 <__udivmoddi4+0x1a0>
 8008f5a:	4608      	mov	r0, r1
 8008f5c:	e6fd      	b.n	8008d5a <__udivmoddi4+0xd2>
 8008f5e:	443b      	add	r3, r7
 8008f60:	3a02      	subs	r2, #2
 8008f62:	e733      	b.n	8008dcc <__udivmoddi4+0x144>
 8008f64:	f1ac 0c02 	sub.w	ip, ip, #2
 8008f68:	443b      	add	r3, r7
 8008f6a:	e71c      	b.n	8008da6 <__udivmoddi4+0x11e>
 8008f6c:	4649      	mov	r1, r9
 8008f6e:	e79c      	b.n	8008eaa <__udivmoddi4+0x222>
 8008f70:	eba1 0109 	sub.w	r1, r1, r9
 8008f74:	46c4      	mov	ip, r8
 8008f76:	fbb1 f9fe 	udiv	r9, r1, lr
 8008f7a:	fb09 f804 	mul.w	r8, r9, r4
 8008f7e:	e7c4      	b.n	8008f0a <__udivmoddi4+0x282>

08008f80 <__aeabi_idiv0>:
 8008f80:	4770      	bx	lr
 8008f82:	bf00      	nop

08008f84 <ACS712_Init>:
 * @param  hadc: ADC控制結構指標
 * @param  type: ACS712型號
 * @retval HAL狀態
 */
HAL_StatusTypeDef ACS712_Init(ACS712_Handle_t *hacs712, ADC_HandleTypeDef *hadc, ACS712_Type_t type)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b085      	sub	sp, #20
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	60f8      	str	r0, [r7, #12]
 8008f8c:	60b9      	str	r1, [r7, #8]
 8008f8e:	4613      	mov	r3, r2
 8008f90:	71fb      	strb	r3, [r7, #7]
    if (hacs712 == NULL || hadc == NULL)
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d002      	beq.n	8008f9e <ACS712_Init+0x1a>
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d101      	bne.n	8008fa2 <ACS712_Init+0x1e>
        return HAL_ERROR;
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	e01a      	b.n	8008fd8 <ACS712_Init+0x54>

    hacs712->hadc = hadc;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	68ba      	ldr	r2, [r7, #8]
 8008fa6:	601a      	str	r2, [r3, #0]
    hacs712->type = type;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	79fa      	ldrb	r2, [r7, #7]
 8008fac:	711a      	strb	r2, [r3, #4]
    hacs712->sensitivity = sensitivity_table[type];
 8008fae:	79fb      	ldrb	r3, [r7, #7]
 8008fb0:	4a0c      	ldr	r2, [pc, #48]	@ (8008fe4 <ACS712_Init+0x60>)
 8008fb2:	009b      	lsls	r3, r3, #2
 8008fb4:	4413      	add	r3, r2
 8008fb6:	681a      	ldr	r2, [r3, #0]
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	609a      	str	r2, [r3, #8]
    //hacs712->zero_offset = 2.5f; // 預設值，需要校準
    hacs712->zero_offset = 2.384f;  // 根據你的 ADC 讀數
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	4a0a      	ldr	r2, [pc, #40]	@ (8008fe8 <ACS712_Init+0x64>)
 8008fc0:	60da      	str	r2, [r3, #12]
    hacs712->vref = 3.3f;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	4a09      	ldr	r2, [pc, #36]	@ (8008fec <ACS712_Init+0x68>)
 8008fc6:	615a      	str	r2, [r3, #20]
    hacs712->adc_resolution = 4096;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8008fce:	831a      	strh	r2, [r3, #24]
    hacs712->adc_channel = ADC_CHANNEL_0;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	611a      	str	r2, [r3, #16]

    return HAL_OK;
 8008fd6:	2300      	movs	r3, #0
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3714      	adds	r7, #20
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe2:	4770      	bx	lr
 8008fe4:	20000000 	.word	0x20000000
 8008fe8:	40189375 	.word	0x40189375
 8008fec:	40533333 	.word	0x40533333

08008ff0 <ACS712_Calibrate>:
 * @brief  校準ACS712零點
 * @param  hacs712: ACS712控制結構指標
 * @retval HAL狀態
 */
HAL_StatusTypeDef ACS712_Calibrate(ACS712_Handle_t *hacs712)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b086      	sub	sp, #24
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
    if (hacs712 == NULL)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d101      	bne.n	8009002 <ACS712_Calibrate+0x12>
        return HAL_ERROR;
 8008ffe:	2301      	movs	r3, #1
 8009000:	e038      	b.n	8009074 <ACS712_Calibrate+0x84>

    uint32_t sum = 0;
 8009002:	2300      	movs	r3, #0
 8009004:	617b      	str	r3, [r7, #20]
    const uint16_t samples = 100;
 8009006:	2364      	movs	r3, #100	@ 0x64
 8009008:	823b      	strh	r3, [r7, #16]

    for (uint16_t i = 0; i < samples; i++)
 800900a:	2300      	movs	r3, #0
 800900c:	827b      	strh	r3, [r7, #18]
 800900e:	e00c      	b.n	800902a <ACS712_Calibrate+0x3a>
    {
        sum += ACS712_ReadADC(hacs712);
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f000 f896 	bl	8009142 <ACS712_ReadADC>
 8009016:	4602      	mov	r2, r0
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	4413      	add	r3, r2
 800901c:	617b      	str	r3, [r7, #20]
        HAL_Delay(10);
 800901e:	200a      	movs	r0, #10
 8009020:	f002 f85c 	bl	800b0dc <HAL_Delay>
    for (uint16_t i = 0; i < samples; i++)
 8009024:	8a7b      	ldrh	r3, [r7, #18]
 8009026:	3301      	adds	r3, #1
 8009028:	827b      	strh	r3, [r7, #18]
 800902a:	8a7a      	ldrh	r2, [r7, #18]
 800902c:	8a3b      	ldrh	r3, [r7, #16]
 800902e:	429a      	cmp	r2, r3
 8009030:	d3ee      	bcc.n	8009010 <ACS712_Calibrate+0x20>
    }

    float average_adc = (float)sum / samples;
 8009032:	697b      	ldr	r3, [r7, #20]
 8009034:	ee07 3a90 	vmov	s15, r3
 8009038:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800903c:	8a3b      	ldrh	r3, [r7, #16]
 800903e:	ee07 3a90 	vmov	s15, r3
 8009042:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009046:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800904a:	edc7 7a03 	vstr	s15, [r7, #12]
    hacs712->zero_offset = (average_adc * hacs712->vref) / hacs712->adc_resolution;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	ed93 7a05 	vldr	s14, [r3, #20]
 8009054:	edd7 7a03 	vldr	s15, [r7, #12]
 8009058:	ee67 6a27 	vmul.f32	s13, s14, s15
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	8b1b      	ldrh	r3, [r3, #24]
 8009060:	ee07 3a90 	vmov	s15, r3
 8009064:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009068:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	edc3 7a03 	vstr	s15, [r3, #12]

    return HAL_OK;
 8009072:	2300      	movs	r3, #0
}
 8009074:	4618      	mov	r0, r3
 8009076:	3718      	adds	r7, #24
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}

0800907c <ACS712_ReadCurrent>:
 * @brief  讀取電流值
 * @param  hacs712: ACS712控制結構指標
 * @retval 電流值 (A)
 */
float ACS712_ReadCurrent(ACS712_Handle_t *hacs712)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b086      	sub	sp, #24
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
    if (hacs712 == NULL)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d102      	bne.n	8009090 <ACS712_ReadCurrent+0x14>
        return 0.0f;
 800908a:	f04f 0300 	mov.w	r3, #0
 800908e:	e026      	b.n	80090de <ACS712_ReadCurrent+0x62>

    uint32_t adc_value = ACS712_ReadADC(hacs712);
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f000 f856 	bl	8009142 <ACS712_ReadADC>
 8009096:	6178      	str	r0, [r7, #20]
    float voltage = (adc_value * hacs712->vref) / hacs712->adc_resolution;
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	ee07 3a90 	vmov	s15, r3
 800909e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	edd3 7a05 	vldr	s15, [r3, #20]
 80090a8:	ee67 6a27 	vmul.f32	s13, s14, s15
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	8b1b      	ldrh	r3, [r3, #24]
 80090b0:	ee07 3a90 	vmov	s15, r3
 80090b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80090b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80090bc:	edc7 7a04 	vstr	s15, [r7, #16]
    float current = (voltage - hacs712->zero_offset) / hacs712->sensitivity;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	edd3 7a03 	vldr	s15, [r3, #12]
 80090c6:	ed97 7a04 	vldr	s14, [r7, #16]
 80090ca:	ee77 6a67 	vsub.f32	s13, s14, s15
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	ed93 7a02 	vldr	s14, [r3, #8]
 80090d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80090d8:	edc7 7a03 	vstr	s15, [r7, #12]

    return current;
 80090dc:	68fb      	ldr	r3, [r7, #12]
}
 80090de:	ee07 3a90 	vmov	s15, r3
 80090e2:	eeb0 0a67 	vmov.f32	s0, s15
 80090e6:	3718      	adds	r7, #24
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}

080090ec <ACS712_InitStats>:


// 在 acs712.c 中加入這些函數

void ACS712_InitStats(Current_Stats_t *stats)
{
 80090ec:	b480      	push	{r7}
 80090ee:	b083      	sub	sp, #12
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
    if (stats == NULL)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d00d      	beq.n	8009116 <ACS712_InitStats+0x2a>
        return;

    stats->max_current = -999.0f;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	4a09      	ldr	r2, [pc, #36]	@ (8009124 <ACS712_InitStats+0x38>)
 80090fe:	601a      	str	r2, [r3, #0]
    stats->min_current = 999.0f;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	4a09      	ldr	r2, [pc, #36]	@ (8009128 <ACS712_InitStats+0x3c>)
 8009104:	605a      	str	r2, [r3, #4]
    stats->rms_current = 0.0f;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f04f 0200 	mov.w	r2, #0
 800910c:	609a      	str	r2, [r3, #8]
    stats->sample_count = 0;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2200      	movs	r2, #0
 8009112:	611a      	str	r2, [r3, #16]
 8009114:	e000      	b.n	8009118 <ACS712_InitStats+0x2c>
        return;
 8009116:	bf00      	nop
}
 8009118:	370c      	adds	r7, #12
 800911a:	46bd      	mov	sp, r7
 800911c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009120:	4770      	bx	lr
 8009122:	bf00      	nop
 8009124:	c479c000 	.word	0xc479c000
 8009128:	4479c000 	.word	0x4479c000

0800912c <ACS712_ResetStats>:

void ACS712_ResetStats(Current_Stats_t *stats)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b082      	sub	sp, #8
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
    ACS712_InitStats(stats);  // 重用初始化函數
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f7ff ffd9 	bl	80090ec <ACS712_InitStats>
}
 800913a:	bf00      	nop
 800913c:	3708      	adds	r7, #8
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}

08009142 <ACS712_ReadADC>:
 * @brief  讀取ADC值
 * @param  hacs712: ACS712控制結構指標
 * @retval ADC原始值
 */
static uint32_t ACS712_ReadADC(ACS712_Handle_t *hacs712)
{
 8009142:	b580      	push	{r7, lr}
 8009144:	b084      	sub	sp, #16
 8009146:	af00      	add	r7, sp, #0
 8009148:	6078      	str	r0, [r7, #4]
    HAL_ADC_Start(hacs712->hadc);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	4618      	mov	r0, r3
 8009150:	f002 f82c 	bl	800b1ac <HAL_ADC_Start>
    HAL_ADC_PollForConversion(hacs712->hadc, HAL_MAX_DELAY);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f04f 31ff 	mov.w	r1, #4294967295
 800915c:	4618      	mov	r0, r3
 800915e:	f002 f90c 	bl	800b37a <HAL_ADC_PollForConversion>
    uint32_t adc_value = HAL_ADC_GetValue(hacs712->hadc);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	4618      	mov	r0, r3
 8009168:	f002 f992 	bl	800b490 <HAL_ADC_GetValue>
 800916c:	60f8      	str	r0, [r7, #12]
    HAL_ADC_Stop(hacs712->hadc);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	4618      	mov	r0, r3
 8009174:	f002 f8ce 	bl	800b314 <HAL_ADC_Stop>

    return adc_value;
 8009178:	68fb      	ldr	r3, [r7, #12]
}
 800917a:	4618      	mov	r0, r3
 800917c:	3710      	adds	r7, #16
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}
	...

08009184 <ACS712_ResetRMSBuffer>:

void ACS712_ResetRMSBuffer(void)
{
 8009184:	b480      	push	{r7}
 8009186:	b083      	sub	sp, #12
 8009188:	af00      	add	r7, sp, #0
    static float rms_buffer[20] = {0};
    static int rms_index = 0;
    static int rms_count = 0;

    // 清零緩衝區
    for (int i = 0; i < 20; i++) {
 800918a:	2300      	movs	r3, #0
 800918c:	607b      	str	r3, [r7, #4]
 800918e:	e009      	b.n	80091a4 <ACS712_ResetRMSBuffer+0x20>
        rms_buffer[i] = 0.0f;
 8009190:	4a0c      	ldr	r2, [pc, #48]	@ (80091c4 <ACS712_ResetRMSBuffer+0x40>)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	009b      	lsls	r3, r3, #2
 8009196:	4413      	add	r3, r2
 8009198:	f04f 0200 	mov.w	r2, #0
 800919c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 20; i++) {
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	3301      	adds	r3, #1
 80091a2:	607b      	str	r3, [r7, #4]
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2b13      	cmp	r3, #19
 80091a8:	ddf2      	ble.n	8009190 <ACS712_ResetRMSBuffer+0xc>
    }
    rms_index = 0;
 80091aa:	4b07      	ldr	r3, [pc, #28]	@ (80091c8 <ACS712_ResetRMSBuffer+0x44>)
 80091ac:	2200      	movs	r2, #0
 80091ae:	601a      	str	r2, [r3, #0]
    rms_count = 0;
 80091b0:	4b06      	ldr	r3, [pc, #24]	@ (80091cc <ACS712_ResetRMSBuffer+0x48>)
 80091b2:	2200      	movs	r2, #0
 80091b4:	601a      	str	r2, [r3, #0]
}
 80091b6:	bf00      	nop
 80091b8:	370c      	adds	r7, #12
 80091ba:	46bd      	mov	sp, r7
 80091bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c0:	4770      	bx	lr
 80091c2:	bf00      	nop
 80091c4:	2000030c 	.word	0x2000030c
 80091c8:	2000035c 	.word	0x2000035c
 80091cc:	20000360 	.word	0x20000360

080091d0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b084      	sub	sp, #16
 80091d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80091d6:	463b      	mov	r3, r7
 80091d8:	2200      	movs	r2, #0
 80091da:	601a      	str	r2, [r3, #0]
 80091dc:	605a      	str	r2, [r3, #4]
 80091de:	609a      	str	r2, [r3, #8]
 80091e0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80091e2:	4b21      	ldr	r3, [pc, #132]	@ (8009268 <MX_ADC1_Init+0x98>)
 80091e4:	4a21      	ldr	r2, [pc, #132]	@ (800926c <MX_ADC1_Init+0x9c>)
 80091e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80091e8:	4b1f      	ldr	r3, [pc, #124]	@ (8009268 <MX_ADC1_Init+0x98>)
 80091ea:	2200      	movs	r2, #0
 80091ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80091ee:	4b1e      	ldr	r3, [pc, #120]	@ (8009268 <MX_ADC1_Init+0x98>)
 80091f0:	2200      	movs	r2, #0
 80091f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80091f4:	4b1c      	ldr	r3, [pc, #112]	@ (8009268 <MX_ADC1_Init+0x98>)
 80091f6:	2200      	movs	r2, #0
 80091f8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80091fa:	4b1b      	ldr	r3, [pc, #108]	@ (8009268 <MX_ADC1_Init+0x98>)
 80091fc:	2201      	movs	r2, #1
 80091fe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8009200:	4b19      	ldr	r3, [pc, #100]	@ (8009268 <MX_ADC1_Init+0x98>)
 8009202:	2200      	movs	r2, #0
 8009204:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8009208:	4b17      	ldr	r3, [pc, #92]	@ (8009268 <MX_ADC1_Init+0x98>)
 800920a:	2200      	movs	r2, #0
 800920c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800920e:	4b16      	ldr	r3, [pc, #88]	@ (8009268 <MX_ADC1_Init+0x98>)
 8009210:	4a17      	ldr	r2, [pc, #92]	@ (8009270 <MX_ADC1_Init+0xa0>)
 8009212:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8009214:	4b14      	ldr	r3, [pc, #80]	@ (8009268 <MX_ADC1_Init+0x98>)
 8009216:	2200      	movs	r2, #0
 8009218:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800921a:	4b13      	ldr	r3, [pc, #76]	@ (8009268 <MX_ADC1_Init+0x98>)
 800921c:	2201      	movs	r2, #1
 800921e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8009220:	4b11      	ldr	r3, [pc, #68]	@ (8009268 <MX_ADC1_Init+0x98>)
 8009222:	2201      	movs	r2, #1
 8009224:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8009228:	4b0f      	ldr	r3, [pc, #60]	@ (8009268 <MX_ADC1_Init+0x98>)
 800922a:	2201      	movs	r2, #1
 800922c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800922e:	480e      	ldr	r0, [pc, #56]	@ (8009268 <MX_ADC1_Init+0x98>)
 8009230:	f001 ff78 	bl	800b124 <HAL_ADC_Init>
 8009234:	4603      	mov	r3, r0
 8009236:	2b00      	cmp	r3, #0
 8009238:	d001      	beq.n	800923e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800923a:	f001 f907 	bl	800a44c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800923e:	2300      	movs	r3, #0
 8009240:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8009242:	2301      	movs	r3, #1
 8009244:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8009246:	2300      	movs	r3, #0
 8009248:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800924a:	463b      	mov	r3, r7
 800924c:	4619      	mov	r1, r3
 800924e:	4806      	ldr	r0, [pc, #24]	@ (8009268 <MX_ADC1_Init+0x98>)
 8009250:	f002 f92c 	bl	800b4ac <HAL_ADC_ConfigChannel>
 8009254:	4603      	mov	r3, r0
 8009256:	2b00      	cmp	r3, #0
 8009258:	d001      	beq.n	800925e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800925a:	f001 f8f7 	bl	800a44c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800925e:	bf00      	nop
 8009260:	3710      	adds	r7, #16
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}
 8009266:	bf00      	nop
 8009268:	20000364 	.word	0x20000364
 800926c:	40012000 	.word	0x40012000
 8009270:	0f000001 	.word	0x0f000001

08009274 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b08a      	sub	sp, #40	@ 0x28
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800927c:	f107 0314 	add.w	r3, r7, #20
 8009280:	2200      	movs	r2, #0
 8009282:	601a      	str	r2, [r3, #0]
 8009284:	605a      	str	r2, [r3, #4]
 8009286:	609a      	str	r2, [r3, #8]
 8009288:	60da      	str	r2, [r3, #12]
 800928a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	4a2f      	ldr	r2, [pc, #188]	@ (8009350 <HAL_ADC_MspInit+0xdc>)
 8009292:	4293      	cmp	r3, r2
 8009294:	d157      	bne.n	8009346 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8009296:	2300      	movs	r3, #0
 8009298:	613b      	str	r3, [r7, #16]
 800929a:	4b2e      	ldr	r3, [pc, #184]	@ (8009354 <HAL_ADC_MspInit+0xe0>)
 800929c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800929e:	4a2d      	ldr	r2, [pc, #180]	@ (8009354 <HAL_ADC_MspInit+0xe0>)
 80092a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80092a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80092a6:	4b2b      	ldr	r3, [pc, #172]	@ (8009354 <HAL_ADC_MspInit+0xe0>)
 80092a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092ae:	613b      	str	r3, [r7, #16]
 80092b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80092b2:	2300      	movs	r3, #0
 80092b4:	60fb      	str	r3, [r7, #12]
 80092b6:	4b27      	ldr	r3, [pc, #156]	@ (8009354 <HAL_ADC_MspInit+0xe0>)
 80092b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092ba:	4a26      	ldr	r2, [pc, #152]	@ (8009354 <HAL_ADC_MspInit+0xe0>)
 80092bc:	f043 0301 	orr.w	r3, r3, #1
 80092c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80092c2:	4b24      	ldr	r3, [pc, #144]	@ (8009354 <HAL_ADC_MspInit+0xe0>)
 80092c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092c6:	f003 0301 	and.w	r3, r3, #1
 80092ca:	60fb      	str	r3, [r7, #12]
 80092cc:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = HM_ACS712_ADC_Pin|VR1_ADCIN1_Pin|VR2_ADCIN2_Pin|VC_ADCIN4_Pin
 80092ce:	232f      	movs	r3, #47	@ 0x2f
 80092d0:	617b      	str	r3, [r7, #20]
                          |HM_OPA_ADC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80092d2:	2303      	movs	r3, #3
 80092d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092d6:	2300      	movs	r3, #0
 80092d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80092da:	f107 0314 	add.w	r3, r7, #20
 80092de:	4619      	mov	r1, r3
 80092e0:	481d      	ldr	r0, [pc, #116]	@ (8009358 <HAL_ADC_MspInit+0xe4>)
 80092e2:	f002 ff0d 	bl	800c100 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80092e6:	4b1d      	ldr	r3, [pc, #116]	@ (800935c <HAL_ADC_MspInit+0xe8>)
 80092e8:	4a1d      	ldr	r2, [pc, #116]	@ (8009360 <HAL_ADC_MspInit+0xec>)
 80092ea:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80092ec:	4b1b      	ldr	r3, [pc, #108]	@ (800935c <HAL_ADC_MspInit+0xe8>)
 80092ee:	2200      	movs	r2, #0
 80092f0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80092f2:	4b1a      	ldr	r3, [pc, #104]	@ (800935c <HAL_ADC_MspInit+0xe8>)
 80092f4:	2200      	movs	r2, #0
 80092f6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80092f8:	4b18      	ldr	r3, [pc, #96]	@ (800935c <HAL_ADC_MspInit+0xe8>)
 80092fa:	2200      	movs	r2, #0
 80092fc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80092fe:	4b17      	ldr	r3, [pc, #92]	@ (800935c <HAL_ADC_MspInit+0xe8>)
 8009300:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009304:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8009306:	4b15      	ldr	r3, [pc, #84]	@ (800935c <HAL_ADC_MspInit+0xe8>)
 8009308:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800930c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800930e:	4b13      	ldr	r3, [pc, #76]	@ (800935c <HAL_ADC_MspInit+0xe8>)
 8009310:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8009314:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8009316:	4b11      	ldr	r3, [pc, #68]	@ (800935c <HAL_ADC_MspInit+0xe8>)
 8009318:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800931c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800931e:	4b0f      	ldr	r3, [pc, #60]	@ (800935c <HAL_ADC_MspInit+0xe8>)
 8009320:	2200      	movs	r2, #0
 8009322:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009324:	4b0d      	ldr	r3, [pc, #52]	@ (800935c <HAL_ADC_MspInit+0xe8>)
 8009326:	2200      	movs	r2, #0
 8009328:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800932a:	480c      	ldr	r0, [pc, #48]	@ (800935c <HAL_ADC_MspInit+0xe8>)
 800932c:	f002 fbfe 	bl	800bb2c <HAL_DMA_Init>
 8009330:	4603      	mov	r3, r0
 8009332:	2b00      	cmp	r3, #0
 8009334:	d001      	beq.n	800933a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8009336:	f001 f889 	bl	800a44c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	4a07      	ldr	r2, [pc, #28]	@ (800935c <HAL_ADC_MspInit+0xe8>)
 800933e:	639a      	str	r2, [r3, #56]	@ 0x38
 8009340:	4a06      	ldr	r2, [pc, #24]	@ (800935c <HAL_ADC_MspInit+0xe8>)
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8009346:	bf00      	nop
 8009348:	3728      	adds	r7, #40	@ 0x28
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}
 800934e:	bf00      	nop
 8009350:	40012000 	.word	0x40012000
 8009354:	40023800 	.word	0x40023800
 8009358:	40020000 	.word	0x40020000
 800935c:	200003ac 	.word	0x200003ac
 8009360:	40026410 	.word	0x40026410

08009364 <CurrentMonitor_Init>:
 * @param  monitor: 監控器結構指標
 * @param  acs712: ACS712控制結構指標
 * @retval HAL狀態
 */
HAL_StatusTypeDef CurrentMonitor_Init(Current_Monitor_t *monitor, ACS712_Handle_t *acs712)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b082      	sub	sp, #8
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
 800936c:	6039      	str	r1, [r7, #0]
    if (monitor == NULL || acs712 == NULL)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d002      	beq.n	800937a <CurrentMonitor_Init+0x16>
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d101      	bne.n	800937e <CurrentMonitor_Init+0x1a>
        return HAL_ERROR;
 800937a:	2301      	movs	r3, #1
 800937c:	e02c      	b.n	80093d8 <CurrentMonitor_Init+0x74>

    monitor->acs712 = acs712;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	683a      	ldr	r2, [r7, #0]
 8009382:	601a      	str	r2, [r3, #0]
    monitor->status = MONITOR_NORMAL;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2200      	movs	r2, #0
 8009388:	761a      	strb	r2, [r3, #24]
    monitor->voltage = 5.0f;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	4a14      	ldr	r2, [pc, #80]	@ (80093e0 <CurrentMonitor_Init+0x7c>)
 800938e:	651a      	str	r2, [r3, #80]	@ 0x50
    monitor->power = 0.0f;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f04f 0200 	mov.w	r2, #0
 8009396:	655a      	str	r2, [r3, #84]	@ 0x54
    monitor->energy_wh = 0;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2200      	movs	r2, #0
 800939c:	659a      	str	r2, [r3, #88]	@ 0x58
    monitor->energy_start_time = HAL_GetTick();
 800939e:	f001 fe91 	bl	800b0c4 <HAL_GetTick>
 80093a2:	4602      	mov	r2, r0
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	65da      	str	r2, [r3, #92]	@ 0x5c
    monitor->filter_index = 0;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2200      	movs	r2, #0
 80093ac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    monitor->last_update = 0;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2200      	movs	r2, #0
 80093b4:	64da      	str	r2, [r3, #76]	@ 0x4c
    monitor->current_now = 0.0f;  // 初始化當前電流
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f04f 0200 	mov.w	r2, #0
 80093bc:	61da      	str	r2, [r3, #28]

    // 初始化濾波器緩衝區
    memset(monitor->filter_buffer, 0, sizeof(monitor->filter_buffer));
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	3320      	adds	r3, #32
 80093c2:	2228      	movs	r2, #40	@ 0x28
 80093c4:	2100      	movs	r1, #0
 80093c6:	4618      	mov	r0, r3
 80093c8:	f00b faa6 	bl	8014918 <memset>

    // 重置統計
    ACS712_ResetStats(&monitor->stats);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	3304      	adds	r3, #4
 80093d0:	4618      	mov	r0, r3
 80093d2:	f7ff feab 	bl	800912c <ACS712_ResetStats>

    return HAL_OK;
 80093d6:	2300      	movs	r3, #0
}
 80093d8:	4618      	mov	r0, r3
 80093da:	3708      	adds	r7, #8
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}
 80093e0:	40a00000 	.word	0x40a00000

080093e4 <CurrentMonitor_ResetStats>:

// 修正重置函數，確保完全清除
void CurrentMonitor_ResetStats(Current_Monitor_t *monitor)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b082      	sub	sp, #8
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
    if (monitor == NULL || &monitor->stats == NULL)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d023      	beq.n	800943a <CurrentMonitor_ResetStats+0x56>
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	3304      	adds	r3, #4
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d01f      	beq.n	800943a <CurrentMonitor_ResetStats+0x56>
        return;

    printf("重置統計數據...\r\n");
 80093fa:	4812      	ldr	r0, [pc, #72]	@ (8009444 <CurrentMonitor_ResetStats+0x60>)
 80093fc:	f00b f970 	bl	80146e0 <puts>

    // 重置統計數據
    monitor->stats.max_current = 0.0f;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f04f 0200 	mov.w	r2, #0
 8009406:	605a      	str	r2, [r3, #4]
    monitor->stats.min_current = 0.0f;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f04f 0200 	mov.w	r2, #0
 800940e:	609a      	str	r2, [r3, #8]
    monitor->stats.rms_current = 0.0f;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f04f 0200 	mov.w	r2, #0
 8009416:	60da      	str	r2, [r3, #12]
    monitor->stats.sample_count = 0;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2200      	movs	r2, #0
 800941c:	615a      	str	r2, [r3, #20]
    monitor->stats.timestamp = HAL_GetTick();
 800941e:	f001 fe51 	bl	800b0c4 <HAL_GetTick>
 8009422:	4602      	mov	r2, r0
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	611a      	str	r2, [r3, #16]
    extern float rms_buffer[20];  // 如果是靜態的，需要另想辦法
    extern int rms_index;
    extern int rms_count;

    // 重置 RMS 緩衝區 - 在 ACS712_UpdateStats 中加入重置函數
    ACS712_ResetRMSBuffer();
 8009428:	f7ff feac 	bl	8009184 <ACS712_ResetRMSBuffer>

    // 重置移動平均
    CurrentMonitor_ResetMovingAverage(monitor);
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f000 f80d 	bl	800944c <CurrentMonitor_ResetMovingAverage>

    printf("統計數據已重置\r\n");
 8009432:	4805      	ldr	r0, [pc, #20]	@ (8009448 <CurrentMonitor_ResetStats+0x64>)
 8009434:	f00b f954 	bl	80146e0 <puts>
 8009438:	e000      	b.n	800943c <CurrentMonitor_ResetStats+0x58>
        return;
 800943a:	bf00      	nop
}
 800943c:	3708      	adds	r7, #8
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}
 8009442:	bf00      	nop
 8009444:	080169b8 	.word	0x080169b8
 8009448:	080169d0 	.word	0x080169d0

0800944c <CurrentMonitor_ResetMovingAverage>:

void CurrentMonitor_ResetMovingAverage(Current_Monitor_t *monitor)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b084      	sub	sp, #16
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
    if (monitor == NULL)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d011      	beq.n	800947e <CurrentMonitor_ResetMovingAverage+0x32>
    // 重置移動平均相關的靜態變數
    // 這裡需要重置 CurrentMonitor_MovingAverage 函數中的靜態變數

    // 由於靜態變數在函數內部，我們需要通過特殊方式重置
    // 方法1: 呼叫一次移動平均函數來重置
    for (int i = 0; i < 10; i++) {
 800945a:	2300      	movs	r3, #0
 800945c:	60fb      	str	r3, [r7, #12]
 800945e:	e007      	b.n	8009470 <CurrentMonitor_ResetMovingAverage+0x24>
        CurrentMonitor_MovingAverage(monitor, 0.0f);
 8009460:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 8009488 <CurrentMonitor_ResetMovingAverage+0x3c>
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f000 f8f7 	bl	8009658 <CurrentMonitor_MovingAverage>
    for (int i = 0; i < 10; i++) {
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	3301      	adds	r3, #1
 800946e:	60fb      	str	r3, [r7, #12]
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	2b09      	cmp	r3, #9
 8009474:	ddf4      	ble.n	8009460 <CurrentMonitor_ResetMovingAverage+0x14>
    }

    printf("移動平均已重置\r\n");
 8009476:	4805      	ldr	r0, [pc, #20]	@ (800948c <CurrentMonitor_ResetMovingAverage+0x40>)
 8009478:	f00b f932 	bl	80146e0 <puts>
 800947c:	e000      	b.n	8009480 <CurrentMonitor_ResetMovingAverage+0x34>
        return;
 800947e:	bf00      	nop
}
 8009480:	3710      	adds	r7, #16
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}
 8009486:	bf00      	nop
 8009488:	00000000 	.word	0x00000000
 800948c:	080169e8 	.word	0x080169e8

08009490 <CurrentMonitor_ManualCalibration>:
}


// 新增手動零點校準函數
void CurrentMonitor_ManualCalibration(Current_Monitor_t *monitor)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b08e      	sub	sp, #56	@ 0x38
 8009494:	af02      	add	r7, sp, #8
 8009496:	6078      	str	r0, [r7, #4]
    printf("=== 開始手動零點校準 ===\r\n");
 8009498:	4862      	ldr	r0, [pc, #392]	@ (8009624 <CurrentMonitor_ManualCalibration+0x194>)
 800949a:	f00b f921 	bl	80146e0 <puts>
    printf("請確保沒有負載連接...\r\n");
 800949e:	4862      	ldr	r0, [pc, #392]	@ (8009628 <CurrentMonitor_ManualCalibration+0x198>)
 80094a0:	f00b f91e 	bl	80146e0 <puts>

    HAL_Delay(2000);  // 等待2秒
 80094a4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80094a8:	f001 fe18 	bl	800b0dc <HAL_Delay>

    float sum = 0.0f;
 80094ac:	f04f 0300 	mov.w	r3, #0
 80094b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const int cal_samples = 100;
 80094b2:	2364      	movs	r3, #100	@ 0x64
 80094b4:	61fb      	str	r3, [r7, #28]

    printf("採集 %d 個樣本...\r\n", cal_samples);
 80094b6:	69f9      	ldr	r1, [r7, #28]
 80094b8:	485c      	ldr	r0, [pc, #368]	@ (800962c <CurrentMonitor_ManualCalibration+0x19c>)
 80094ba:	f00b f8a9 	bl	8014610 <iprintf>

    for (int i = 0; i < cal_samples; i++) {
 80094be:	2300      	movs	r3, #0
 80094c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80094c2:	e035      	b.n	8009530 <CurrentMonitor_ManualCalibration+0xa0>
        float current = ACS712_ReadCurrent(monitor->acs712);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	4618      	mov	r0, r3
 80094ca:	f7ff fdd7 	bl	800907c <ACS712_ReadCurrent>
 80094ce:	ed87 0a02 	vstr	s0, [r7, #8]
        sum += current;
 80094d2:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80094d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80094da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80094de:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

        if (i % 20 == 0) {
 80094e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80094e4:	4b52      	ldr	r3, [pc, #328]	@ (8009630 <CurrentMonitor_ManualCalibration+0x1a0>)
 80094e6:	fb83 2301 	smull	r2, r3, r3, r1
 80094ea:	10da      	asrs	r2, r3, #3
 80094ec:	17cb      	asrs	r3, r1, #31
 80094ee:	1ad2      	subs	r2, r2, r3
 80094f0:	4613      	mov	r3, r2
 80094f2:	009b      	lsls	r3, r3, #2
 80094f4:	4413      	add	r3, r2
 80094f6:	009b      	lsls	r3, r3, #2
 80094f8:	1aca      	subs	r2, r1, r3
 80094fa:	2a00      	cmp	r2, #0
 80094fc:	d112      	bne.n	8009524 <CurrentMonitor_ManualCalibration+0x94>
            printf("進度: %d/%d, 當前讀數: %.1f mA\r\n",
                   i, cal_samples, current * 1000.0f);
 80094fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8009502:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8009634 <CurrentMonitor_ManualCalibration+0x1a4>
 8009506:	ee67 7a87 	vmul.f32	s15, s15, s14
            printf("進度: %d/%d, 當前讀數: %.1f mA\r\n",
 800950a:	ee17 0a90 	vmov	r0, s15
 800950e:	f7ff f823 	bl	8008558 <__aeabi_f2d>
 8009512:	4602      	mov	r2, r0
 8009514:	460b      	mov	r3, r1
 8009516:	e9cd 2300 	strd	r2, r3, [sp]
 800951a:	69fa      	ldr	r2, [r7, #28]
 800951c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800951e:	4846      	ldr	r0, [pc, #280]	@ (8009638 <CurrentMonitor_ManualCalibration+0x1a8>)
 8009520:	f00b f876 	bl	8014610 <iprintf>
        }

        HAL_Delay(50);
 8009524:	2032      	movs	r0, #50	@ 0x32
 8009526:	f001 fdd9 	bl	800b0dc <HAL_Delay>
    for (int i = 0; i < cal_samples; i++) {
 800952a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800952c:	3301      	adds	r3, #1
 800952e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009530:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009532:	69fb      	ldr	r3, [r7, #28]
 8009534:	429a      	cmp	r2, r3
 8009536:	dbc5      	blt.n	80094c4 <CurrentMonitor_ManualCalibration+0x34>
    }

    float offset = sum / cal_samples;
 8009538:	69fb      	ldr	r3, [r7, #28]
 800953a:	ee07 3a90 	vmov	s15, r3
 800953e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009542:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8009546:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800954a:	edc7 7a06 	vstr	s15, [r7, #24]

    printf("計算出的零點偏移: %.1f mA\r\n", offset * 1000.0f);
 800954e:	edd7 7a06 	vldr	s15, [r7, #24]
 8009552:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8009634 <CurrentMonitor_ManualCalibration+0x1a4>
 8009556:	ee67 7a87 	vmul.f32	s15, s15, s14
 800955a:	ee17 0a90 	vmov	r0, s15
 800955e:	f7fe fffb 	bl	8008558 <__aeabi_f2d>
 8009562:	4602      	mov	r2, r0
 8009564:	460b      	mov	r3, r1
 8009566:	4835      	ldr	r0, [pc, #212]	@ (800963c <CurrentMonitor_ManualCalibration+0x1ac>)
 8009568:	f00b f852 	bl	8014610 <iprintf>
    printf("標準差: ");
 800956c:	4834      	ldr	r0, [pc, #208]	@ (8009640 <CurrentMonitor_ManualCalibration+0x1b0>)
 800956e:	f00b f84f 	bl	8014610 <iprintf>

    // 計算標準差
    float variance_sum = 0.0f;
 8009572:	f04f 0300 	mov.w	r3, #0
 8009576:	627b      	str	r3, [r7, #36]	@ 0x24
    for (int i = 0; i < 20; i++) {
 8009578:	2300      	movs	r3, #0
 800957a:	623b      	str	r3, [r7, #32]
 800957c:	e01e      	b.n	80095bc <CurrentMonitor_ManualCalibration+0x12c>
        float current = ACS712_ReadCurrent(monitor->acs712);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	4618      	mov	r0, r3
 8009584:	f7ff fd7a 	bl	800907c <ACS712_ReadCurrent>
 8009588:	ed87 0a04 	vstr	s0, [r7, #16]
        float diff = current - offset;
 800958c:	ed97 7a04 	vldr	s14, [r7, #16]
 8009590:	edd7 7a06 	vldr	s15, [r7, #24]
 8009594:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009598:	edc7 7a03 	vstr	s15, [r7, #12]
        variance_sum += diff * diff;
 800959c:	edd7 7a03 	vldr	s15, [r7, #12]
 80095a0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80095a4:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80095a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80095ac:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        HAL_Delay(50);
 80095b0:	2032      	movs	r0, #50	@ 0x32
 80095b2:	f001 fd93 	bl	800b0dc <HAL_Delay>
    for (int i = 0; i < 20; i++) {
 80095b6:	6a3b      	ldr	r3, [r7, #32]
 80095b8:	3301      	adds	r3, #1
 80095ba:	623b      	str	r3, [r7, #32]
 80095bc:	6a3b      	ldr	r3, [r7, #32]
 80095be:	2b13      	cmp	r3, #19
 80095c0:	dddd      	ble.n	800957e <CurrentMonitor_ManualCalibration+0xee>
    }

    float std_dev = sqrtf(variance_sum / 20.0f);
 80095c2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80095c6:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 80095ca:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80095ce:	eeb0 0a47 	vmov.f32	s0, s14
 80095d2:	f00d f9c3 	bl	801695c <sqrtf>
 80095d6:	ed87 0a05 	vstr	s0, [r7, #20]
    printf("%.1f mA\r\n", std_dev * 1000.0f);
 80095da:	edd7 7a05 	vldr	s15, [r7, #20]
 80095de:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8009634 <CurrentMonitor_ManualCalibration+0x1a4>
 80095e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80095e6:	ee17 0a90 	vmov	r0, s15
 80095ea:	f7fe ffb5 	bl	8008558 <__aeabi_f2d>
 80095ee:	4602      	mov	r2, r0
 80095f0:	460b      	mov	r3, r1
 80095f2:	4814      	ldr	r0, [pc, #80]	@ (8009644 <CurrentMonitor_ManualCalibration+0x1b4>)
 80095f4:	f00b f80c 	bl	8014610 <iprintf>

    if (std_dev > 0.020f) {  // 標準差大於20mA
 80095f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80095fc:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8009648 <CurrentMonitor_ManualCalibration+0x1b8>
 8009600:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009608:	dd02      	ble.n	8009610 <CurrentMonitor_ManualCalibration+0x180>
        printf("警告: 噪聲過大，建議檢查硬體連接！\r\n");
 800960a:	4810      	ldr	r0, [pc, #64]	@ (800964c <CurrentMonitor_ManualCalibration+0x1bc>)
 800960c:	f00b f868 	bl	80146e0 <puts>
    }

    // 可以將偏移值存儲到 EEPROM 或全域變數
    // monitor->acs712->zero_offset = offset;

    printf("校準完成！\r\n");
 8009610:	480f      	ldr	r0, [pc, #60]	@ (8009650 <CurrentMonitor_ManualCalibration+0x1c0>)
 8009612:	f00b f865 	bl	80146e0 <puts>
    printf("========================\r\n\r\n");
 8009616:	480f      	ldr	r0, [pc, #60]	@ (8009654 <CurrentMonitor_ManualCalibration+0x1c4>)
 8009618:	f00b f862 	bl	80146e0 <puts>
}
 800961c:	bf00      	nop
 800961e:	3730      	adds	r7, #48	@ 0x30
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}
 8009624:	08016d18 	.word	0x08016d18
 8009628:	08016d3c 	.word	0x08016d3c
 800962c:	08016d5c 	.word	0x08016d5c
 8009630:	66666667 	.word	0x66666667
 8009634:	447a0000 	.word	0x447a0000
 8009638:	08016d78 	.word	0x08016d78
 800963c:	08016da0 	.word	0x08016da0
 8009640:	08016dc4 	.word	0x08016dc4
 8009644:	08016dd0 	.word	0x08016dd0
 8009648:	3ca3d70a 	.word	0x3ca3d70a
 800964c:	08016ddc 	.word	0x08016ddc
 8009650:	08016e10 	.word	0x08016e10
 8009654:	08016e24 	.word	0x08016e24

08009658 <CurrentMonitor_MovingAverage>:
 * @param  monitor: 監控器結構指標
 * @param  new_value: 新數值
 * @retval 濾波後的數值
 */
float CurrentMonitor_MovingAverage(Current_Monitor_t *monitor, float new_value)
{
 8009658:	b480      	push	{r7}
 800965a:	b085      	sub	sp, #20
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
 8009660:	ed87 0a00 	vstr	s0, [r7]
    if (monitor == NULL)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d102      	bne.n	8009670 <CurrentMonitor_MovingAverage+0x18>
        return new_value;
 800966a:	edd7 7a00 	vldr	s15, [r7]
 800966e:	e03a      	b.n	80096e6 <CurrentMonitor_MovingAverage+0x8e>

    monitor->filter_buffer[monitor->filter_index] = new_value;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8009676:	687a      	ldr	r2, [r7, #4]
 8009678:	3308      	adds	r3, #8
 800967a:	009b      	lsls	r3, r3, #2
 800967c:	4413      	add	r3, r2
 800967e:	683a      	ldr	r2, [r7, #0]
 8009680:	601a      	str	r2, [r3, #0]
    monitor->filter_index = (monitor->filter_index + 1) % FILTER_SIZE;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8009688:	1c5a      	adds	r2, r3, #1
 800968a:	4b1a      	ldr	r3, [pc, #104]	@ (80096f4 <CurrentMonitor_MovingAverage+0x9c>)
 800968c:	fb83 1302 	smull	r1, r3, r3, r2
 8009690:	1099      	asrs	r1, r3, #2
 8009692:	17d3      	asrs	r3, r2, #31
 8009694:	1ac9      	subs	r1, r1, r3
 8009696:	460b      	mov	r3, r1
 8009698:	009b      	lsls	r3, r3, #2
 800969a:	440b      	add	r3, r1
 800969c:	005b      	lsls	r3, r3, #1
 800969e:	1ad1      	subs	r1, r2, r3
 80096a0:	b2ca      	uxtb	r2, r1
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    float sum = 0.0f;
 80096a8:	f04f 0300 	mov.w	r3, #0
 80096ac:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < FILTER_SIZE; i++)
 80096ae:	2300      	movs	r3, #0
 80096b0:	60bb      	str	r3, [r7, #8]
 80096b2:	e00f      	b.n	80096d4 <CurrentMonitor_MovingAverage+0x7c>
    {
        sum += monitor->filter_buffer[i];
 80096b4:	687a      	ldr	r2, [r7, #4]
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	3308      	adds	r3, #8
 80096ba:	009b      	lsls	r3, r3, #2
 80096bc:	4413      	add	r3, r2
 80096be:	edd3 7a00 	vldr	s15, [r3]
 80096c2:	ed97 7a03 	vldr	s14, [r7, #12]
 80096c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80096ca:	edc7 7a03 	vstr	s15, [r7, #12]
    for (int i = 0; i < FILTER_SIZE; i++)
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	3301      	adds	r3, #1
 80096d2:	60bb      	str	r3, [r7, #8]
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	2b09      	cmp	r3, #9
 80096d8:	ddec      	ble.n	80096b4 <CurrentMonitor_MovingAverage+0x5c>
    }

    return sum / FILTER_SIZE;
 80096da:	ed97 7a03 	vldr	s14, [r7, #12]
 80096de:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80096e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
}
 80096e6:	eeb0 0a67 	vmov.f32	s0, s15
 80096ea:	3714      	adds	r7, #20
 80096ec:	46bd      	mov	sp, r7
 80096ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f2:	4770      	bx	lr
 80096f4:	66666667 	.word	0x66666667

080096f8 <CurrentMonitor_TestFilters>:
extern volatile uint16_t adc_filtered_ma[ADC_CHANNEL_COUNT];     // 移動平均濾波
extern volatile uint16_t adc_filtered_kalman[ADC_CHANNEL_COUNT]; // 卡爾曼濾波


void CurrentMonitor_TestFilters(Current_Monitor_t *monitor)
{
 80096f8:	b5b0      	push	{r4, r5, r7, lr}
 80096fa:	b094      	sub	sp, #80	@ 0x50
 80096fc:	af02      	add	r7, sp, #8
 80096fe:	6078      	str	r0, [r7, #4]
    if (monitor == NULL) return;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2b00      	cmp	r3, #0
 8009704:	f000 81d5 	beq.w	8009ab2 <CurrentMonitor_TestFilters+0x3ba>

    printf("=== 電流濾波器測試 ===\r\n");
 8009708:	481a      	ldr	r0, [pc, #104]	@ (8009774 <CurrentMonitor_TestFilters+0x7c>)
 800970a:	f00a ffe9 	bl	80146e0 <puts>

    // 初始化濾波器
    ADC_Filter_Init();
 800970e:	f000 fae5 	bl	8009cdc <ADC_Filter_Init>

    // 設定卡爾曼濾波器參數（針對電流測量優化）
    Kalman_Set_Parameters(0, 0.1f, 5.0f);  // 通道0：低過程噪聲，中等測量噪聲
 8009712:	eef1 0a04 	vmov.f32	s1, #20	@ 0x40a00000  5.0
 8009716:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 8009778 <CurrentMonitor_TestFilters+0x80>
 800971a:	2000      	movs	r0, #0
 800971c:	f000 fc6e 	bl	8009ffc <Kalman_Set_Parameters>
    Kalman_Set_Parameters(1, 0.5f, 10.0f); // 通道1：中等過程噪聲，高測量噪聲
 8009720:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 8009724:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8009728:	2001      	movs	r0, #1
 800972a:	f000 fc67 	bl	8009ffc <Kalman_Set_Parameters>

    for (int test_count = 0; test_count < 100; test_count++) {
 800972e:	2300      	movs	r3, #0
 8009730:	647b      	str	r3, [r7, #68]	@ 0x44
 8009732:	e1b6      	b.n	8009aa2 <CurrentMonitor_TestFilters+0x3aa>
        // 讀取原始電流
        float raw_current = ACS712_ReadCurrent(monitor->acs712);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	4618      	mov	r0, r3
 800973a:	f7ff fc9f 	bl	800907c <ACS712_ReadCurrent>
 800973e:	ed87 0a0f 	vstr	s0, [r7, #60]	@ 0x3c

        // **修正 ADC 轉換範圍**
        // 假設電流範圍是 0 到 5A，對應 ADC 0-4095
        uint16_t current_as_adc;
        if (raw_current < 0) {
 8009742:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8009746:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800974a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800974e:	d503      	bpl.n	8009758 <CurrentMonitor_TestFilters+0x60>
            current_as_adc = 0;  // 負電流設為0
 8009750:	2300      	movs	r3, #0
 8009752:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8009756:	e023      	b.n	80097a0 <CurrentMonitor_TestFilters+0xa8>
        } else if (raw_current > 5.0f) {
 8009758:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800975c:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8009760:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009768:	dd0a      	ble.n	8009780 <CurrentMonitor_TestFilters+0x88>
            current_as_adc = 4095;  // 超過5A設為最大值
 800976a:	f640 73ff 	movw	r3, #4095	@ 0xfff
 800976e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8009772:	e015      	b.n	80097a0 <CurrentMonitor_TestFilters+0xa8>
 8009774:	08016e9c 	.word	0x08016e9c
 8009778:	3dcccccd 	.word	0x3dcccccd
 800977c:	457ff000 	.word	0x457ff000
        } else {
            current_as_adc = (uint16_t)(raw_current * 4095.0f / 5.0f);
 8009780:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8009784:	ed1f 7a03 	vldr	s14, [pc, #-12]	@ 800977c <CurrentMonitor_TestFilters+0x84>
 8009788:	ee27 7a87 	vmul.f32	s14, s15, s14
 800978c:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8009790:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009794:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009798:	ee17 3a90 	vmov	r3, s15
 800979c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        }
        // 處理所有濾波器
        ADC_Process_All_Filters(0, current_as_adc); // 通道0：卡爾曼參數1
 80097a0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80097a4:	4619      	mov	r1, r3
 80097a6:	2000      	movs	r0, #0
 80097a8:	f000 fbfc 	bl	8009fa4 <ADC_Process_All_Filters>
        ADC_Process_All_Filters(1, current_as_adc); // 通道1：卡爾曼參數2
 80097ac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80097b0:	4619      	mov	r1, r3
 80097b2:	2001      	movs	r0, #1
 80097b4:	f000 fbf6 	bl	8009fa4 <ADC_Process_All_Filters>

        // **修正轉換回電流值**
        float filtered_ma = ((float)adc_filtered_ma[0] * 5.0f / 4095.0f);
 80097b8:	4bc0      	ldr	r3, [pc, #768]	@ (8009abc <CurrentMonitor_TestFilters+0x3c4>)
 80097ba:	881b      	ldrh	r3, [r3, #0]
 80097bc:	b29b      	uxth	r3, r3
 80097be:	ee07 3a90 	vmov	s15, r3
 80097c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097c6:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80097ca:	ee27 7a87 	vmul.f32	s14, s15, s14
 80097ce:	eddf 6abc 	vldr	s13, [pc, #752]	@ 8009ac0 <CurrentMonitor_TestFilters+0x3c8>
 80097d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80097d6:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
        float filtered_kalman1 = ((float)adc_filtered_kalman[0] * 5.0f / 4095.0f);
 80097da:	4bba      	ldr	r3, [pc, #744]	@ (8009ac4 <CurrentMonitor_TestFilters+0x3cc>)
 80097dc:	881b      	ldrh	r3, [r3, #0]
 80097de:	b29b      	uxth	r3, r3
 80097e0:	ee07 3a90 	vmov	s15, r3
 80097e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097e8:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80097ec:	ee27 7a87 	vmul.f32	s14, s15, s14
 80097f0:	eddf 6ab3 	vldr	s13, [pc, #716]	@ 8009ac0 <CurrentMonitor_TestFilters+0x3c8>
 80097f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80097f8:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
        float filtered_kalman2 = ((float)adc_filtered_kalman[1] * 5.0f / 4095.0f);
 80097fc:	4bb1      	ldr	r3, [pc, #708]	@ (8009ac4 <CurrentMonitor_TestFilters+0x3cc>)
 80097fe:	885b      	ldrh	r3, [r3, #2]
 8009800:	b29b      	uxth	r3, r3
 8009802:	ee07 3a90 	vmov	s15, r3
 8009806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800980a:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800980e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009812:	eddf 6aab 	vldr	s13, [pc, #684]	@ 8009ac0 <CurrentMonitor_TestFilters+0x3c8>
 8009816:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800981a:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

        // **修正噪聲減少計算**
        float noise_reduction = 0.0f;
 800981e:	f04f 0300 	mov.w	r3, #0
 8009822:	62fb      	str	r3, [r7, #44]	@ 0x2c
        if (raw_current > 0.001f) {  // 避免除零
 8009824:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8009828:	ed9f 7aa7 	vldr	s14, [pc, #668]	@ 8009ac8 <CurrentMonitor_TestFilters+0x3d0>
 800982c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009834:	dd2e      	ble.n	8009894 <CurrentMonitor_TestFilters+0x19c>
            noise_reduction = (1.0f - fabs(filtered_kalman1 - raw_current) / raw_current) * 100.0f;
 8009836:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800983a:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800983e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009842:	eef0 7ae7 	vabs.f32	s15, s15
 8009846:	ee17 0a90 	vmov	r0, s15
 800984a:	f7fe fe85 	bl	8008558 <__aeabi_f2d>
 800984e:	4604      	mov	r4, r0
 8009850:	460d      	mov	r5, r1
 8009852:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009854:	f7fe fe80 	bl	8008558 <__aeabi_f2d>
 8009858:	4602      	mov	r2, r0
 800985a:	460b      	mov	r3, r1
 800985c:	4620      	mov	r0, r4
 800985e:	4629      	mov	r1, r5
 8009860:	f7fe fffc 	bl	800885c <__aeabi_ddiv>
 8009864:	4602      	mov	r2, r0
 8009866:	460b      	mov	r3, r1
 8009868:	f04f 0000 	mov.w	r0, #0
 800986c:	4997      	ldr	r1, [pc, #604]	@ (8009acc <CurrentMonitor_TestFilters+0x3d4>)
 800986e:	f7fe fd13 	bl	8008298 <__aeabi_dsub>
 8009872:	4602      	mov	r2, r0
 8009874:	460b      	mov	r3, r1
 8009876:	4610      	mov	r0, r2
 8009878:	4619      	mov	r1, r3
 800987a:	f04f 0200 	mov.w	r2, #0
 800987e:	4b94      	ldr	r3, [pc, #592]	@ (8009ad0 <CurrentMonitor_TestFilters+0x3d8>)
 8009880:	f7fe fec2 	bl	8008608 <__aeabi_dmul>
 8009884:	4602      	mov	r2, r0
 8009886:	460b      	mov	r3, r1
 8009888:	4610      	mov	r0, r2
 800988a:	4619      	mov	r1, r3
 800988c:	f7ff f994 	bl	8008bb8 <__aeabi_d2f>
 8009890:	4603      	mov	r3, r0
 8009892:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        // 每10次顯示一次結果
        if ((test_count % 10 == 0) && (test_count != 0)) {
 8009894:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009896:	4b8f      	ldr	r3, [pc, #572]	@ (8009ad4 <CurrentMonitor_TestFilters+0x3dc>)
 8009898:	fb83 2301 	smull	r2, r3, r3, r1
 800989c:	109a      	asrs	r2, r3, #2
 800989e:	17cb      	asrs	r3, r1, #31
 80098a0:	1ad2      	subs	r2, r2, r3
 80098a2:	4613      	mov	r3, r2
 80098a4:	009b      	lsls	r3, r3, #2
 80098a6:	4413      	add	r3, r2
 80098a8:	005b      	lsls	r3, r3, #1
 80098aa:	1aca      	subs	r2, r1, r3
 80098ac:	2a00      	cmp	r2, #0
 80098ae:	f040 80f2 	bne.w	8009a96 <CurrentMonitor_TestFilters+0x39e>
 80098b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	f000 80ee 	beq.w	8009a96 <CurrentMonitor_TestFilters+0x39e>
            printf("Test %d:\r\n", test_count);
 80098ba:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80098bc:	4886      	ldr	r0, [pc, #536]	@ (8009ad8 <CurrentMonitor_TestFilters+0x3e0>)
 80098be:	f00a fea7 	bl	8014610 <iprintf>
            printf("  Raw:      %.1f mA\r\n", raw_current * 1000.0f);
 80098c2:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80098c6:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 8009adc <CurrentMonitor_TestFilters+0x3e4>
 80098ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80098ce:	ee17 0a90 	vmov	r0, s15
 80098d2:	f7fe fe41 	bl	8008558 <__aeabi_f2d>
 80098d6:	4602      	mov	r2, r0
 80098d8:	460b      	mov	r3, r1
 80098da:	4881      	ldr	r0, [pc, #516]	@ (8009ae0 <CurrentMonitor_TestFilters+0x3e8>)
 80098dc:	f00a fe98 	bl	8014610 <iprintf>
            printf("  MovAvg:   %.1f mA\r\n", filtered_ma * 1000.0f);
 80098e0:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80098e4:	ed9f 7a7d 	vldr	s14, [pc, #500]	@ 8009adc <CurrentMonitor_TestFilters+0x3e4>
 80098e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80098ec:	ee17 0a90 	vmov	r0, s15
 80098f0:	f7fe fe32 	bl	8008558 <__aeabi_f2d>
 80098f4:	4602      	mov	r2, r0
 80098f6:	460b      	mov	r3, r1
 80098f8:	487a      	ldr	r0, [pc, #488]	@ (8009ae4 <CurrentMonitor_TestFilters+0x3ec>)
 80098fa:	f00a fe89 	bl	8014610 <iprintf>
            printf("  Kalman1:  %.1f mA (Q=0.1, R=5.0)\r\n", filtered_kalman1 * 1000.0f);
 80098fe:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8009902:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 8009adc <CurrentMonitor_TestFilters+0x3e4>
 8009906:	ee67 7a87 	vmul.f32	s15, s15, s14
 800990a:	ee17 0a90 	vmov	r0, s15
 800990e:	f7fe fe23 	bl	8008558 <__aeabi_f2d>
 8009912:	4602      	mov	r2, r0
 8009914:	460b      	mov	r3, r1
 8009916:	4874      	ldr	r0, [pc, #464]	@ (8009ae8 <CurrentMonitor_TestFilters+0x3f0>)
 8009918:	f00a fe7a 	bl	8014610 <iprintf>
            printf("  Kalman2:  %.1f mA (Q=0.5, R=10.0)\r\n", filtered_kalman2 * 1000.0f);
 800991c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8009920:	ed9f 7a6e 	vldr	s14, [pc, #440]	@ 8009adc <CurrentMonitor_TestFilters+0x3e4>
 8009924:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009928:	ee17 0a90 	vmov	r0, s15
 800992c:	f7fe fe14 	bl	8008558 <__aeabi_f2d>
 8009930:	4602      	mov	r2, r0
 8009932:	460b      	mov	r3, r1
 8009934:	486d      	ldr	r0, [pc, #436]	@ (8009aec <CurrentMonitor_TestFilters+0x3f4>)
 8009936:	f00a fe6b 	bl	8014610 <iprintf>
            printf("  Noise Reduction: %.1f%%\r\n",
                   (1.0f - fabs(filtered_kalman1)/fabs(raw_current)) * 100.0f);
 800993a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800993e:	eef0 7ae7 	vabs.f32	s15, s15
 8009942:	ee17 0a90 	vmov	r0, s15
 8009946:	f7fe fe07 	bl	8008558 <__aeabi_f2d>
 800994a:	4604      	mov	r4, r0
 800994c:	460d      	mov	r5, r1
 800994e:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8009952:	eef0 7ae7 	vabs.f32	s15, s15
 8009956:	ee17 0a90 	vmov	r0, s15
 800995a:	f7fe fdfd 	bl	8008558 <__aeabi_f2d>
 800995e:	4602      	mov	r2, r0
 8009960:	460b      	mov	r3, r1
 8009962:	4620      	mov	r0, r4
 8009964:	4629      	mov	r1, r5
 8009966:	f7fe ff79 	bl	800885c <__aeabi_ddiv>
 800996a:	4602      	mov	r2, r0
 800996c:	460b      	mov	r3, r1
 800996e:	f04f 0000 	mov.w	r0, #0
 8009972:	4956      	ldr	r1, [pc, #344]	@ (8009acc <CurrentMonitor_TestFilters+0x3d4>)
 8009974:	f7fe fc90 	bl	8008298 <__aeabi_dsub>
 8009978:	4602      	mov	r2, r0
 800997a:	460b      	mov	r3, r1
 800997c:	4610      	mov	r0, r2
 800997e:	4619      	mov	r1, r3
            printf("  Noise Reduction: %.1f%%\r\n",
 8009980:	f04f 0200 	mov.w	r2, #0
 8009984:	4b52      	ldr	r3, [pc, #328]	@ (8009ad0 <CurrentMonitor_TestFilters+0x3d8>)
 8009986:	f7fe fe3f 	bl	8008608 <__aeabi_dmul>
 800998a:	4602      	mov	r2, r0
 800998c:	460b      	mov	r3, r1
 800998e:	4858      	ldr	r0, [pc, #352]	@ (8009af0 <CurrentMonitor_TestFilters+0x3f8>)
 8009990:	f00a fe3e 	bl	8014610 <iprintf>
            printf("\r\n");
 8009994:	4857      	ldr	r0, [pc, #348]	@ (8009af4 <CurrentMonitor_TestFilters+0x3fc>)
 8009996:	f00a fea3 	bl	80146e0 <puts>

            char buf[32];
            ssd1306_Fill(Black);
 800999a:	2000      	movs	r0, #0
 800999c:	f000 fe00 	bl	800a5a0 <ssd1306_Fill>
            ssd1306_SetCursor(0, 0); // 設定顯示位置
 80099a0:	2100      	movs	r1, #0
 80099a2:	2000      	movs	r0, #0
 80099a4:	f000 ff48 	bl	800a838 <ssd1306_SetCursor>
          	sprintf(buf, "  Raw:      %.1f mA\r\n", raw_current * 1000.0f);
 80099a8:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80099ac:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8009adc <CurrentMonitor_TestFilters+0x3e4>
 80099b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80099b4:	ee17 0a90 	vmov	r0, s15
 80099b8:	f7fe fdce 	bl	8008558 <__aeabi_f2d>
 80099bc:	4602      	mov	r2, r0
 80099be:	460b      	mov	r3, r1
 80099c0:	f107 000c 	add.w	r0, r7, #12
 80099c4:	4946      	ldr	r1, [pc, #280]	@ (8009ae0 <CurrentMonitor_TestFilters+0x3e8>)
 80099c6:	f00a fe93 	bl	80146f0 <siprintf>
            ssd1306_WriteString(buf, Font_6x8, White);
 80099ca:	4b4b      	ldr	r3, [pc, #300]	@ (8009af8 <CurrentMonitor_TestFilters+0x400>)
 80099cc:	f107 000c 	add.w	r0, r7, #12
 80099d0:	2201      	movs	r2, #1
 80099d2:	9200      	str	r2, [sp, #0]
 80099d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80099d6:	f000 ff09 	bl	800a7ec <ssd1306_WriteString>
          	sprintf(buf, "  MovAvg:   %.1f mA\r\n", filtered_ma * 1000.0f);
 80099da:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80099de:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8009adc <CurrentMonitor_TestFilters+0x3e4>
 80099e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80099e6:	ee17 0a90 	vmov	r0, s15
 80099ea:	f7fe fdb5 	bl	8008558 <__aeabi_f2d>
 80099ee:	4602      	mov	r2, r0
 80099f0:	460b      	mov	r3, r1
 80099f2:	f107 000c 	add.w	r0, r7, #12
 80099f6:	493b      	ldr	r1, [pc, #236]	@ (8009ae4 <CurrentMonitor_TestFilters+0x3ec>)
 80099f8:	f00a fe7a 	bl	80146f0 <siprintf>
            ssd1306_SetCursor(0, 8); // 設定顯示位置
 80099fc:	2108      	movs	r1, #8
 80099fe:	2000      	movs	r0, #0
 8009a00:	f000 ff1a 	bl	800a838 <ssd1306_SetCursor>
          	sprintf(buf, "  Raw:      %.1f mA\r\n", raw_current * 1000.0f);
 8009a04:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8009a08:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8009adc <CurrentMonitor_TestFilters+0x3e4>
 8009a0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009a10:	ee17 0a90 	vmov	r0, s15
 8009a14:	f7fe fda0 	bl	8008558 <__aeabi_f2d>
 8009a18:	4602      	mov	r2, r0
 8009a1a:	460b      	mov	r3, r1
 8009a1c:	f107 000c 	add.w	r0, r7, #12
 8009a20:	492f      	ldr	r1, [pc, #188]	@ (8009ae0 <CurrentMonitor_TestFilters+0x3e8>)
 8009a22:	f00a fe65 	bl	80146f0 <siprintf>
            ssd1306_WriteString(buf, Font_6x8, White);
 8009a26:	4b34      	ldr	r3, [pc, #208]	@ (8009af8 <CurrentMonitor_TestFilters+0x400>)
 8009a28:	f107 000c 	add.w	r0, r7, #12
 8009a2c:	2201      	movs	r2, #1
 8009a2e:	9200      	str	r2, [sp, #0]
 8009a30:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009a32:	f000 fedb 	bl	800a7ec <ssd1306_WriteString>
          	sprintf(buf, "  Kalman1:  %.1f mA (Q=0.1, R=5.0)\r\n", filtered_kalman1 * 1000.0f);
 8009a36:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8009a3a:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8009adc <CurrentMonitor_TestFilters+0x3e4>
 8009a3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009a42:	ee17 0a90 	vmov	r0, s15
 8009a46:	f7fe fd87 	bl	8008558 <__aeabi_f2d>
 8009a4a:	4602      	mov	r2, r0
 8009a4c:	460b      	mov	r3, r1
 8009a4e:	f107 000c 	add.w	r0, r7, #12
 8009a52:	4925      	ldr	r1, [pc, #148]	@ (8009ae8 <CurrentMonitor_TestFilters+0x3f0>)
 8009a54:	f00a fe4c 	bl	80146f0 <siprintf>
            ssd1306_SetCursor(0, 16); // 設定顯示位置
 8009a58:	2110      	movs	r1, #16
 8009a5a:	2000      	movs	r0, #0
 8009a5c:	f000 feec 	bl	800a838 <ssd1306_SetCursor>
          	sprintf(buf, "  Raw:      %.1f mA\r\n", raw_current * 1000.0f);
 8009a60:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8009a64:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8009adc <CurrentMonitor_TestFilters+0x3e4>
 8009a68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009a6c:	ee17 0a90 	vmov	r0, s15
 8009a70:	f7fe fd72 	bl	8008558 <__aeabi_f2d>
 8009a74:	4602      	mov	r2, r0
 8009a76:	460b      	mov	r3, r1
 8009a78:	f107 000c 	add.w	r0, r7, #12
 8009a7c:	4918      	ldr	r1, [pc, #96]	@ (8009ae0 <CurrentMonitor_TestFilters+0x3e8>)
 8009a7e:	f00a fe37 	bl	80146f0 <siprintf>
            ssd1306_WriteString(buf, Font_6x8, White);
 8009a82:	4b1d      	ldr	r3, [pc, #116]	@ (8009af8 <CurrentMonitor_TestFilters+0x400>)
 8009a84:	f107 000c 	add.w	r0, r7, #12
 8009a88:	2201      	movs	r2, #1
 8009a8a:	9200      	str	r2, [sp, #0]
 8009a8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009a8e:	f000 fead 	bl	800a7ec <ssd1306_WriteString>
            ssd1306_UpdateScreen();
 8009a92:	f000 fd9d 	bl	800a5d0 <ssd1306_UpdateScreen>


        }

        HAL_Delay(100);
 8009a96:	2064      	movs	r0, #100	@ 0x64
 8009a98:	f001 fb20 	bl	800b0dc <HAL_Delay>
    for (int test_count = 0; test_count < 100; test_count++) {
 8009a9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a9e:	3301      	adds	r3, #1
 8009aa0:	647b      	str	r3, [r7, #68]	@ 0x44
 8009aa2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009aa4:	2b63      	cmp	r3, #99	@ 0x63
 8009aa6:	f77f ae45 	ble.w	8009734 <CurrentMonitor_TestFilters+0x3c>
    }

    printf("濾波器測試完成！\r\n");
 8009aaa:	4814      	ldr	r0, [pc, #80]	@ (8009afc <CurrentMonitor_TestFilters+0x404>)
 8009aac:	f00a fe18 	bl	80146e0 <puts>
 8009ab0:	e000      	b.n	8009ab4 <CurrentMonitor_TestFilters+0x3bc>
    if (monitor == NULL) return;
 8009ab2:	bf00      	nop
}
 8009ab4:	3748      	adds	r7, #72	@ 0x48
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bdb0      	pop	{r4, r5, r7, pc}
 8009aba:	bf00      	nop
 8009abc:	2000040c 	.word	0x2000040c
 8009ac0:	457ff000 	.word	0x457ff000
 8009ac4:	20000418 	.word	0x20000418
 8009ac8:	3a83126f 	.word	0x3a83126f
 8009acc:	3ff00000 	.word	0x3ff00000
 8009ad0:	40590000 	.word	0x40590000
 8009ad4:	66666667 	.word	0x66666667
 8009ad8:	08016ebc 	.word	0x08016ebc
 8009adc:	447a0000 	.word	0x447a0000
 8009ae0:	08016ec8 	.word	0x08016ec8
 8009ae4:	08016ee0 	.word	0x08016ee0
 8009ae8:	08016ef8 	.word	0x08016ef8
 8009aec:	08016f20 	.word	0x08016f20
 8009af0:	08016f48 	.word	0x08016f48
 8009af4:	08016f64 	.word	0x08016f64
 8009af8:	080177fc 	.word	0x080177fc
 8009afc:	08016f68 	.word	0x08016f68

08009b00 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b082      	sub	sp, #8
 8009b04:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8009b06:	2300      	movs	r3, #0
 8009b08:	607b      	str	r3, [r7, #4]
 8009b0a:	4b0c      	ldr	r3, [pc, #48]	@ (8009b3c <MX_DMA_Init+0x3c>)
 8009b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b0e:	4a0b      	ldr	r2, [pc, #44]	@ (8009b3c <MX_DMA_Init+0x3c>)
 8009b10:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009b14:	6313      	str	r3, [r2, #48]	@ 0x30
 8009b16:	4b09      	ldr	r3, [pc, #36]	@ (8009b3c <MX_DMA_Init+0x3c>)
 8009b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009b1e:	607b      	str	r3, [r7, #4]
 8009b20:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8009b22:	2200      	movs	r2, #0
 8009b24:	2100      	movs	r1, #0
 8009b26:	2038      	movs	r0, #56	@ 0x38
 8009b28:	f001 ffc9 	bl	800babe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8009b2c:	2038      	movs	r0, #56	@ 0x38
 8009b2e:	f001 ffe2 	bl	800baf6 <HAL_NVIC_EnableIRQ>

}
 8009b32:	bf00      	nop
 8009b34:	3708      	adds	r7, #8
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd80      	pop	{r7, pc}
 8009b3a:	bf00      	nop
 8009b3c:	40023800 	.word	0x40023800

08009b40 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b08c      	sub	sp, #48	@ 0x30
 8009b44:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009b46:	f107 031c 	add.w	r3, r7, #28
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	601a      	str	r2, [r3, #0]
 8009b4e:	605a      	str	r2, [r3, #4]
 8009b50:	609a      	str	r2, [r3, #8]
 8009b52:	60da      	str	r2, [r3, #12]
 8009b54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8009b56:	2300      	movs	r3, #0
 8009b58:	61bb      	str	r3, [r7, #24]
 8009b5a:	4b5b      	ldr	r3, [pc, #364]	@ (8009cc8 <MX_GPIO_Init+0x188>)
 8009b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b5e:	4a5a      	ldr	r2, [pc, #360]	@ (8009cc8 <MX_GPIO_Init+0x188>)
 8009b60:	f043 0310 	orr.w	r3, r3, #16
 8009b64:	6313      	str	r3, [r2, #48]	@ 0x30
 8009b66:	4b58      	ldr	r3, [pc, #352]	@ (8009cc8 <MX_GPIO_Init+0x188>)
 8009b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b6a:	f003 0310 	and.w	r3, r3, #16
 8009b6e:	61bb      	str	r3, [r7, #24]
 8009b70:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009b72:	2300      	movs	r3, #0
 8009b74:	617b      	str	r3, [r7, #20]
 8009b76:	4b54      	ldr	r3, [pc, #336]	@ (8009cc8 <MX_GPIO_Init+0x188>)
 8009b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b7a:	4a53      	ldr	r2, [pc, #332]	@ (8009cc8 <MX_GPIO_Init+0x188>)
 8009b7c:	f043 0304 	orr.w	r3, r3, #4
 8009b80:	6313      	str	r3, [r2, #48]	@ 0x30
 8009b82:	4b51      	ldr	r3, [pc, #324]	@ (8009cc8 <MX_GPIO_Init+0x188>)
 8009b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b86:	f003 0304 	and.w	r3, r3, #4
 8009b8a:	617b      	str	r3, [r7, #20]
 8009b8c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8009b8e:	2300      	movs	r3, #0
 8009b90:	613b      	str	r3, [r7, #16]
 8009b92:	4b4d      	ldr	r3, [pc, #308]	@ (8009cc8 <MX_GPIO_Init+0x188>)
 8009b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b96:	4a4c      	ldr	r2, [pc, #304]	@ (8009cc8 <MX_GPIO_Init+0x188>)
 8009b98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8009b9e:	4b4a      	ldr	r3, [pc, #296]	@ (8009cc8 <MX_GPIO_Init+0x188>)
 8009ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ba2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ba6:	613b      	str	r3, [r7, #16]
 8009ba8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009baa:	2300      	movs	r3, #0
 8009bac:	60fb      	str	r3, [r7, #12]
 8009bae:	4b46      	ldr	r3, [pc, #280]	@ (8009cc8 <MX_GPIO_Init+0x188>)
 8009bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bb2:	4a45      	ldr	r2, [pc, #276]	@ (8009cc8 <MX_GPIO_Init+0x188>)
 8009bb4:	f043 0301 	orr.w	r3, r3, #1
 8009bb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8009bba:	4b43      	ldr	r3, [pc, #268]	@ (8009cc8 <MX_GPIO_Init+0x188>)
 8009bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bbe:	f003 0301 	and.w	r3, r3, #1
 8009bc2:	60fb      	str	r3, [r7, #12]
 8009bc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	60bb      	str	r3, [r7, #8]
 8009bca:	4b3f      	ldr	r3, [pc, #252]	@ (8009cc8 <MX_GPIO_Init+0x188>)
 8009bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bce:	4a3e      	ldr	r2, [pc, #248]	@ (8009cc8 <MX_GPIO_Init+0x188>)
 8009bd0:	f043 0302 	orr.w	r3, r3, #2
 8009bd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8009bd6:	4b3c      	ldr	r3, [pc, #240]	@ (8009cc8 <MX_GPIO_Init+0x188>)
 8009bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bda:	f003 0302 	and.w	r3, r3, #2
 8009bde:	60bb      	str	r3, [r7, #8]
 8009be0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8009be2:	2300      	movs	r3, #0
 8009be4:	607b      	str	r3, [r7, #4]
 8009be6:	4b38      	ldr	r3, [pc, #224]	@ (8009cc8 <MX_GPIO_Init+0x188>)
 8009be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bea:	4a37      	ldr	r2, [pc, #220]	@ (8009cc8 <MX_GPIO_Init+0x188>)
 8009bec:	f043 0308 	orr.w	r3, r3, #8
 8009bf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8009bf2:	4b35      	ldr	r3, [pc, #212]	@ (8009cc8 <MX_GPIO_Init+0x188>)
 8009bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bf6:	f003 0308 	and.w	r3, r3, #8
 8009bfa:	607b      	str	r3, [r7, #4]
 8009bfc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(I2C1_INT_GPIO_Port, I2C1_INT_Pin, GPIO_PIN_RESET);
 8009bfe:	2200      	movs	r2, #0
 8009c00:	2120      	movs	r1, #32
 8009c02:	4832      	ldr	r0, [pc, #200]	@ (8009ccc <MX_GPIO_Init+0x18c>)
 8009c04:	f002 fc00 	bl	800c408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8009c08:	2304      	movs	r3, #4
 8009c0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c10:	2300      	movs	r3, #0
 8009c12:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8009c14:	f107 031c 	add.w	r3, r7, #28
 8009c18:	4619      	mov	r1, r3
 8009c1a:	482d      	ldr	r0, [pc, #180]	@ (8009cd0 <MX_GPIO_Init+0x190>)
 8009c1c:	f002 fa70 	bl	800c100 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_PUSH_BUTT_Pin */
  GPIO_InitStruct.Pin = BLUE_PUSH_BUTT_Pin;
 8009c20:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009c24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009c26:	2300      	movs	r3, #0
 8009c28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BLUE_PUSH_BUTT_GPIO_Port, &GPIO_InitStruct);
 8009c2e:	f107 031c 	add.w	r3, r7, #28
 8009c32:	4619      	mov	r1, r3
 8009c34:	4827      	ldr	r0, [pc, #156]	@ (8009cd4 <MX_GPIO_Init+0x194>)
 8009c36:	f002 fa63 	bl	800c100 <HAL_GPIO_Init>

  /*Configure GPIO pin : AC60HZ_S_Pin */
  GPIO_InitStruct.Pin = AC60HZ_S_Pin;
 8009c3a:	2310      	movs	r3, #16
 8009c3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8009c3e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8009c42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c44:	2300      	movs	r3, #0
 8009c46:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(AC60HZ_S_GPIO_Port, &GPIO_InitStruct);
 8009c48:	f107 031c 	add.w	r3, r7, #28
 8009c4c:	4619      	mov	r1, r3
 8009c4e:	4822      	ldr	r0, [pc, #136]	@ (8009cd8 <MX_GPIO_Init+0x198>)
 8009c50:	f002 fa56 	bl	800c100 <HAL_GPIO_Init>

  /*Configure GPIO pins : BD_Pin HM_DO_Pin */
  GPIO_InitStruct.Pin = BD_Pin|HM_DO_Pin;
 8009c54:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8009c58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c5e:	2300      	movs	r3, #0
 8009c60:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009c62:	f107 031c 	add.w	r3, r7, #28
 8009c66:	4619      	mov	r1, r3
 8009c68:	481b      	ldr	r0, [pc, #108]	@ (8009cd8 <MX_GPIO_Init+0x198>)
 8009c6a:	f002 fa49 	bl	800c100 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_EN_Pin */
  GPIO_InitStruct.Pin = USB_EN_Pin;
 8009c6e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009c72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009c74:	2300      	movs	r3, #0
 8009c76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009c78:	2301      	movs	r3, #1
 8009c7a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_EN_GPIO_Port, &GPIO_InitStruct);
 8009c7c:	f107 031c 	add.w	r3, r7, #28
 8009c80:	4619      	mov	r1, r3
 8009c82:	4812      	ldr	r0, [pc, #72]	@ (8009ccc <MX_GPIO_Init+0x18c>)
 8009c84:	f002 fa3c 	bl	800c100 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C1_INT_Pin */
  GPIO_InitStruct.Pin = I2C1_INT_Pin;
 8009c88:	2320      	movs	r3, #32
 8009c8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c90:	2300      	movs	r3, #0
 8009c92:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009c94:	2300      	movs	r3, #0
 8009c96:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(I2C1_INT_GPIO_Port, &GPIO_InitStruct);
 8009c98:	f107 031c 	add.w	r3, r7, #28
 8009c9c:	4619      	mov	r1, r3
 8009c9e:	480b      	ldr	r0, [pc, #44]	@ (8009ccc <MX_GPIO_Init+0x18c>)
 8009ca0:	f002 fa2e 	bl	800c100 <HAL_GPIO_Init>

  /*Configure GPIO pins : S2_Pin S1_Pin */
  GPIO_InitStruct.Pin = S2_Pin|S1_Pin;
 8009ca4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8009ca8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009caa:	2300      	movs	r3, #0
 8009cac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009cb2:	f107 031c 	add.w	r3, r7, #28
 8009cb6:	4619      	mov	r1, r3
 8009cb8:	4804      	ldr	r0, [pc, #16]	@ (8009ccc <MX_GPIO_Init+0x18c>)
 8009cba:	f002 fa21 	bl	800c100 <HAL_GPIO_Init>

}
 8009cbe:	bf00      	nop
 8009cc0:	3730      	adds	r7, #48	@ 0x30
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}
 8009cc6:	bf00      	nop
 8009cc8:	40023800 	.word	0x40023800
 8009ccc:	40020400 	.word	0x40020400
 8009cd0:	40021000 	.word	0x40021000
 8009cd4:	40020800 	.word	0x40020800
 8009cd8:	40020000 	.word	0x40020000

08009cdc <ADC_Filter_Init>:
// 卡爾曼濾波器（每個通道獨立）
static KalmanFilter_t kalman_filters[ADC_CHANNEL_COUNT];

// 初始化所有濾波器
void ADC_Filter_Init(void)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b084      	sub	sp, #16
 8009ce0:	af00      	add	r7, sp, #0
    // 初始化移動平均濾波器
    for(int ch = 0; ch < ADC_CHANNEL_COUNT; ch++)
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	60fb      	str	r3, [r7, #12]
 8009ce6:	e01b      	b.n	8009d20 <ADC_Filter_Init+0x44>
    {
        filter_index[ch] = 0;
 8009ce8:	4a1e      	ldr	r2, [pc, #120]	@ (8009d64 <ADC_Filter_Init+0x88>)
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	4413      	add	r3, r2
 8009cee:	2200      	movs	r2, #0
 8009cf0:	701a      	strb	r2, [r3, #0]
        for(int i = 0; i < FILTER_SIZE; i++)
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	60bb      	str	r3, [r7, #8]
 8009cf6:	e00d      	b.n	8009d14 <ADC_Filter_Init+0x38>
        {
            filter_buffer[ch][i] = 0;
 8009cf8:	491b      	ldr	r1, [pc, #108]	@ (8009d68 <ADC_Filter_Init+0x8c>)
 8009cfa:	68fa      	ldr	r2, [r7, #12]
 8009cfc:	4613      	mov	r3, r2
 8009cfe:	009b      	lsls	r3, r3, #2
 8009d00:	4413      	add	r3, r2
 8009d02:	005b      	lsls	r3, r3, #1
 8009d04:	68ba      	ldr	r2, [r7, #8]
 8009d06:	4413      	add	r3, r2
 8009d08:	2200      	movs	r2, #0
 8009d0a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        for(int i = 0; i < FILTER_SIZE; i++)
 8009d0e:	68bb      	ldr	r3, [r7, #8]
 8009d10:	3301      	adds	r3, #1
 8009d12:	60bb      	str	r3, [r7, #8]
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	2b09      	cmp	r3, #9
 8009d18:	ddee      	ble.n	8009cf8 <ADC_Filter_Init+0x1c>
    for(int ch = 0; ch < ADC_CHANNEL_COUNT; ch++)
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	3301      	adds	r3, #1
 8009d1e:	60fb      	str	r3, [r7, #12]
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	2b05      	cmp	r3, #5
 8009d24:	dde0      	ble.n	8009ce8 <ADC_Filter_Init+0xc>
        }
    }

    // 初始化卡爾曼濾波器
    for(int ch = 0; ch < ADC_CHANNEL_COUNT; ch++)
 8009d26:	2300      	movs	r3, #0
 8009d28:	607b      	str	r3, [r7, #4]
 8009d2a:	e012      	b.n	8009d52 <ADC_Filter_Init+0x76>
    {
        Kalman_Init(&kalman_filters[ch],
 8009d2c:	687a      	ldr	r2, [r7, #4]
 8009d2e:	4613      	mov	r3, r2
 8009d30:	005b      	lsls	r3, r3, #1
 8009d32:	4413      	add	r3, r2
 8009d34:	00db      	lsls	r3, r3, #3
 8009d36:	4a0d      	ldr	r2, [pc, #52]	@ (8009d6c <ADC_Filter_Init+0x90>)
 8009d38:	4413      	add	r3, r2
 8009d3a:	eeb3 1a09 	vmov.f32	s2, #57	@ 0x41c80000  25.0
 8009d3e:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8009d42:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 8009d70 <ADC_Filter_Init+0x94>
 8009d46:	4618      	mov	r0, r3
 8009d48:	f000 f870 	bl	8009e2c <Kalman_Init>
    for(int ch = 0; ch < ADC_CHANNEL_COUNT; ch++)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	3301      	adds	r3, #1
 8009d50:	607b      	str	r3, [r7, #4]
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2b05      	cmp	r3, #5
 8009d56:	dde9      	ble.n	8009d2c <ADC_Filter_Init+0x50>
                   2048.0f,    // 初始值（12位元 ADC 中點）
                   1.0f,       // 過程噪聲（可調整）
                   25.0f);     // 測量噪聲（可調整）
    }
}
 8009d58:	bf00      	nop
 8009d5a:	bf00      	nop
 8009d5c:	3710      	adds	r7, #16
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}
 8009d62:	bf00      	nop
 8009d64:	2000049c 	.word	0x2000049c
 8009d68:	20000424 	.word	0x20000424
 8009d6c:	200004a4 	.word	0x200004a4
 8009d70:	45000000 	.word	0x45000000

08009d74 <ADC_MovingAverage>:

// 移動平均濾波（每個通道獨立）
uint16_t ADC_MovingAverage(uint16_t new_value, uint8_t channel)
{
 8009d74:	b480      	push	{r7}
 8009d76:	b085      	sub	sp, #20
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	460a      	mov	r2, r1
 8009d7e:	80fb      	strh	r3, [r7, #6]
 8009d80:	4613      	mov	r3, r2
 8009d82:	717b      	strb	r3, [r7, #5]
    if(channel >= ADC_CHANNEL_COUNT) return new_value;
 8009d84:	797b      	ldrb	r3, [r7, #5]
 8009d86:	2b05      	cmp	r3, #5
 8009d88:	d901      	bls.n	8009d8e <ADC_MovingAverage+0x1a>
 8009d8a:	88fb      	ldrh	r3, [r7, #6]
 8009d8c:	e03f      	b.n	8009e0e <ADC_MovingAverage+0x9a>

    filter_buffer[channel][filter_index[channel]] = new_value;
 8009d8e:	797a      	ldrb	r2, [r7, #5]
 8009d90:	797b      	ldrb	r3, [r7, #5]
 8009d92:	4922      	ldr	r1, [pc, #136]	@ (8009e1c <ADC_MovingAverage+0xa8>)
 8009d94:	5ccb      	ldrb	r3, [r1, r3]
 8009d96:	4618      	mov	r0, r3
 8009d98:	4921      	ldr	r1, [pc, #132]	@ (8009e20 <ADC_MovingAverage+0xac>)
 8009d9a:	4613      	mov	r3, r2
 8009d9c:	009b      	lsls	r3, r3, #2
 8009d9e:	4413      	add	r3, r2
 8009da0:	005b      	lsls	r3, r3, #1
 8009da2:	4403      	add	r3, r0
 8009da4:	88fa      	ldrh	r2, [r7, #6]
 8009da6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    filter_index[channel] = (filter_index[channel] + 1) % FILTER_SIZE;
 8009daa:	797b      	ldrb	r3, [r7, #5]
 8009dac:	4a1b      	ldr	r2, [pc, #108]	@ (8009e1c <ADC_MovingAverage+0xa8>)
 8009dae:	5cd3      	ldrb	r3, [r2, r3]
 8009db0:	1c5a      	adds	r2, r3, #1
 8009db2:	4b1c      	ldr	r3, [pc, #112]	@ (8009e24 <ADC_MovingAverage+0xb0>)
 8009db4:	fb83 1302 	smull	r1, r3, r3, r2
 8009db8:	1099      	asrs	r1, r3, #2
 8009dba:	17d3      	asrs	r3, r2, #31
 8009dbc:	1ac9      	subs	r1, r1, r3
 8009dbe:	460b      	mov	r3, r1
 8009dc0:	009b      	lsls	r3, r3, #2
 8009dc2:	440b      	add	r3, r1
 8009dc4:	005b      	lsls	r3, r3, #1
 8009dc6:	1ad1      	subs	r1, r2, r3
 8009dc8:	797b      	ldrb	r3, [r7, #5]
 8009dca:	b2c9      	uxtb	r1, r1
 8009dcc:	4a13      	ldr	r2, [pc, #76]	@ (8009e1c <ADC_MovingAverage+0xa8>)
 8009dce:	54d1      	strb	r1, [r2, r3]

    uint32_t sum = 0;
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	60fb      	str	r3, [r7, #12]
    for(int i = 0; i < FILTER_SIZE; i++)
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	60bb      	str	r3, [r7, #8]
 8009dd8:	e010      	b.n	8009dfc <ADC_MovingAverage+0x88>
    {
        sum += filter_buffer[channel][i];
 8009dda:	797a      	ldrb	r2, [r7, #5]
 8009ddc:	4910      	ldr	r1, [pc, #64]	@ (8009e20 <ADC_MovingAverage+0xac>)
 8009dde:	4613      	mov	r3, r2
 8009de0:	009b      	lsls	r3, r3, #2
 8009de2:	4413      	add	r3, r2
 8009de4:	005b      	lsls	r3, r3, #1
 8009de6:	68ba      	ldr	r2, [r7, #8]
 8009de8:	4413      	add	r3, r2
 8009dea:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8009dee:	461a      	mov	r2, r3
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	4413      	add	r3, r2
 8009df4:	60fb      	str	r3, [r7, #12]
    for(int i = 0; i < FILTER_SIZE; i++)
 8009df6:	68bb      	ldr	r3, [r7, #8]
 8009df8:	3301      	adds	r3, #1
 8009dfa:	60bb      	str	r3, [r7, #8]
 8009dfc:	68bb      	ldr	r3, [r7, #8]
 8009dfe:	2b09      	cmp	r3, #9
 8009e00:	ddeb      	ble.n	8009dda <ADC_MovingAverage+0x66>
    }

    return sum / FILTER_SIZE;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	4a08      	ldr	r2, [pc, #32]	@ (8009e28 <ADC_MovingAverage+0xb4>)
 8009e06:	fba2 2303 	umull	r2, r3, r2, r3
 8009e0a:	08db      	lsrs	r3, r3, #3
 8009e0c:	b29b      	uxth	r3, r3
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	3714      	adds	r7, #20
 8009e12:	46bd      	mov	sp, r7
 8009e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e18:	4770      	bx	lr
 8009e1a:	bf00      	nop
 8009e1c:	2000049c 	.word	0x2000049c
 8009e20:	20000424 	.word	0x20000424
 8009e24:	66666667 	.word	0x66666667
 8009e28:	cccccccd 	.word	0xcccccccd

08009e2c <Kalman_Init>:

// 卡爾曼濾波器初始化
void Kalman_Init(KalmanFilter_t* kf, float initial_value, float process_noise, float measurement_noise)
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	b085      	sub	sp, #20
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	60f8      	str	r0, [r7, #12]
 8009e34:	ed87 0a02 	vstr	s0, [r7, #8]
 8009e38:	edc7 0a01 	vstr	s1, [r7, #4]
 8009e3c:	ed87 1a00 	vstr	s2, [r7]
    kf->x = initial_value;          // 初始狀態估計
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	68ba      	ldr	r2, [r7, #8]
 8009e44:	601a      	str	r2, [r3, #0]
    kf->P = 1.0f;                   // 初始估計誤差協方差
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8009e4c:	605a      	str	r2, [r3, #4]
    kf->Q = process_noise;          // 過程噪聲協方差
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	687a      	ldr	r2, [r7, #4]
 8009e52:	609a      	str	r2, [r3, #8]
    kf->R = measurement_noise;      // 測量噪聲協方差
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	683a      	ldr	r2, [r7, #0]
 8009e58:	60da      	str	r2, [r3, #12]
    kf->K = 0.0f;                   // 卡爾曼增益
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	f04f 0200 	mov.w	r2, #0
 8009e60:	611a      	str	r2, [r3, #16]
    kf->initialized = 1;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	2201      	movs	r2, #1
 8009e66:	751a      	strb	r2, [r3, #20]
}
 8009e68:	bf00      	nop
 8009e6a:	3714      	adds	r7, #20
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e72:	4770      	bx	lr

08009e74 <Kalman_Update>:

// 卡爾曼濾波器更新
float Kalman_Update(KalmanFilter_t* kf, float measurement)
{
 8009e74:	b480      	push	{r7}
 8009e76:	b085      	sub	sp, #20
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
 8009e7c:	ed87 0a00 	vstr	s0, [r7]
    if(!kf->initialized) return measurement;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	7d1b      	ldrb	r3, [r3, #20]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d101      	bne.n	8009e8c <Kalman_Update+0x18>
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	e03b      	b.n	8009f04 <Kalman_Update+0x90>

    // 預測步驟
    // x_pred = x (假設狀態轉移矩陣為1)
    // P_pred = P + Q
    float P_pred = kf->P + kf->Q;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	ed93 7a01 	vldr	s14, [r3, #4]
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	edd3 7a02 	vldr	s15, [r3, #8]
 8009e98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e9c:	edc7 7a03 	vstr	s15, [r7, #12]

    // 更新步驟
    // K = P_pred / (P_pred + R)
    kf->K = P_pred / (P_pred + kf->R);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	ed93 7a03 	vldr	s14, [r3, #12]
 8009ea6:	edd7 7a03 	vldr	s15, [r7, #12]
 8009eaa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009eae:	edd7 6a03 	vldr	s13, [r7, #12]
 8009eb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	edc3 7a04 	vstr	s15, [r3, #16]

    // x = x_pred + K * (measurement - x_pred)
    kf->x = kf->x + kf->K * (measurement - kf->x);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	ed93 7a00 	vldr	s14, [r3]
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	edd3 6a04 	vldr	s13, [r3, #16]
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	edd3 7a00 	vldr	s15, [r3]
 8009ece:	ed97 6a00 	vldr	s12, [r7]
 8009ed2:	ee76 7a67 	vsub.f32	s15, s12, s15
 8009ed6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009eda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	edc3 7a00 	vstr	s15, [r3]

    // P = (1 - K) * P_pred
    kf->P = (1.0f - kf->K) * P_pred;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	edd3 7a04 	vldr	s15, [r3, #16]
 8009eea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009eee:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009ef2:	edd7 7a03 	vldr	s15, [r7, #12]
 8009ef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	edc3 7a01 	vstr	s15, [r3, #4]

    return kf->x;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
}
 8009f04:	ee07 3a90 	vmov	s15, r3
 8009f08:	eeb0 0a67 	vmov.f32	s0, s15
 8009f0c:	3714      	adds	r7, #20
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f14:	4770      	bx	lr
	...

08009f18 <ADC_KalmanFilter>:

// 卡爾曼濾波（每個通道獨立）
uint16_t ADC_KalmanFilter(uint16_t new_value, uint8_t channel)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b084      	sub	sp, #16
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	4603      	mov	r3, r0
 8009f20:	460a      	mov	r2, r1
 8009f22:	80fb      	strh	r3, [r7, #6]
 8009f24:	4613      	mov	r3, r2
 8009f26:	717b      	strb	r3, [r7, #5]
    if(channel >= ADC_CHANNEL_COUNT) return new_value;
 8009f28:	797b      	ldrb	r3, [r7, #5]
 8009f2a:	2b05      	cmp	r3, #5
 8009f2c:	d901      	bls.n	8009f32 <ADC_KalmanFilter+0x1a>
 8009f2e:	88fb      	ldrh	r3, [r7, #6]
 8009f30:	e02e      	b.n	8009f90 <ADC_KalmanFilter+0x78>

    float filtered_value = Kalman_Update(&kalman_filters[channel], (float)new_value);
 8009f32:	797a      	ldrb	r2, [r7, #5]
 8009f34:	4613      	mov	r3, r2
 8009f36:	005b      	lsls	r3, r3, #1
 8009f38:	4413      	add	r3, r2
 8009f3a:	00db      	lsls	r3, r3, #3
 8009f3c:	4a16      	ldr	r2, [pc, #88]	@ (8009f98 <ADC_KalmanFilter+0x80>)
 8009f3e:	4413      	add	r3, r2
 8009f40:	88fa      	ldrh	r2, [r7, #6]
 8009f42:	ee07 2a90 	vmov	s15, r2
 8009f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f4a:	eeb0 0a67 	vmov.f32	s0, s15
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f7ff ff90 	bl	8009e74 <Kalman_Update>
 8009f54:	ed87 0a03 	vstr	s0, [r7, #12]

    // 限制範圍在 ADC 有效範圍內
    if(filtered_value < 0) filtered_value = 0;
 8009f58:	edd7 7a03 	vldr	s15, [r7, #12]
 8009f5c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f64:	d502      	bpl.n	8009f6c <ADC_KalmanFilter+0x54>
 8009f66:	f04f 0300 	mov.w	r3, #0
 8009f6a:	60fb      	str	r3, [r7, #12]
    if(filtered_value > 4095) filtered_value = 4095;
 8009f6c:	edd7 7a03 	vldr	s15, [r7, #12]
 8009f70:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8009f9c <ADC_KalmanFilter+0x84>
 8009f74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f7c:	dd01      	ble.n	8009f82 <ADC_KalmanFilter+0x6a>
 8009f7e:	4b08      	ldr	r3, [pc, #32]	@ (8009fa0 <ADC_KalmanFilter+0x88>)
 8009f80:	60fb      	str	r3, [r7, #12]

    return (uint16_t)filtered_value;
 8009f82:	edd7 7a03 	vldr	s15, [r7, #12]
 8009f86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f8a:	ee17 3a90 	vmov	r3, s15
 8009f8e:	b29b      	uxth	r3, r3
}
 8009f90:	4618      	mov	r0, r3
 8009f92:	3710      	adds	r7, #16
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}
 8009f98:	200004a4 	.word	0x200004a4
 8009f9c:	457ff000 	.word	0x457ff000
 8009fa0:	457ff000 	.word	0x457ff000

08009fa4 <ADC_Process_All_Filters>:

// 處理所有濾波器
void ADC_Process_All_Filters(uint8_t channel, uint16_t raw_value)
{
 8009fa4:	b590      	push	{r4, r7, lr}
 8009fa6:	b083      	sub	sp, #12
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	4603      	mov	r3, r0
 8009fac:	460a      	mov	r2, r1
 8009fae:	71fb      	strb	r3, [r7, #7]
 8009fb0:	4613      	mov	r3, r2
 8009fb2:	80bb      	strh	r3, [r7, #4]
    if(channel >= ADC_CHANNEL_COUNT) return;
 8009fb4:	79fb      	ldrb	r3, [r7, #7]
 8009fb6:	2b05      	cmp	r3, #5
 8009fb8:	d818      	bhi.n	8009fec <ADC_Process_All_Filters+0x48>

    // 移動平均濾波
    adc_filtered_ma[channel] = ADC_MovingAverage(raw_value, channel);
 8009fba:	79fc      	ldrb	r4, [r7, #7]
 8009fbc:	79fa      	ldrb	r2, [r7, #7]
 8009fbe:	88bb      	ldrh	r3, [r7, #4]
 8009fc0:	4611      	mov	r1, r2
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	f7ff fed6 	bl	8009d74 <ADC_MovingAverage>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	461a      	mov	r2, r3
 8009fcc:	4b09      	ldr	r3, [pc, #36]	@ (8009ff4 <ADC_Process_All_Filters+0x50>)
 8009fce:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
    // 卡爾曼濾波
    adc_filtered_kalman[channel] = ADC_KalmanFilter(raw_value, channel);
 8009fd2:	79fc      	ldrb	r4, [r7, #7]
 8009fd4:	79fa      	ldrb	r2, [r7, #7]
 8009fd6:	88bb      	ldrh	r3, [r7, #4]
 8009fd8:	4611      	mov	r1, r2
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f7ff ff9c 	bl	8009f18 <ADC_KalmanFilter>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	461a      	mov	r2, r3
 8009fe4:	4b04      	ldr	r3, [pc, #16]	@ (8009ff8 <ADC_Process_All_Filters+0x54>)
 8009fe6:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
 8009fea:	e000      	b.n	8009fee <ADC_Process_All_Filters+0x4a>
    if(channel >= ADC_CHANNEL_COUNT) return;
 8009fec:	bf00      	nop
}
 8009fee:	370c      	adds	r7, #12
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bd90      	pop	{r4, r7, pc}
 8009ff4:	2000040c 	.word	0x2000040c
 8009ff8:	20000418 	.word	0x20000418

08009ffc <Kalman_Set_Parameters>:

// 設定卡爾曼濾波器參數
void Kalman_Set_Parameters(uint8_t channel, float process_noise, float measurement_noise)
{
 8009ffc:	b480      	push	{r7}
 8009ffe:	b085      	sub	sp, #20
 800a000:	af00      	add	r7, sp, #0
 800a002:	4603      	mov	r3, r0
 800a004:	ed87 0a02 	vstr	s0, [r7, #8]
 800a008:	edc7 0a01 	vstr	s1, [r7, #4]
 800a00c:	73fb      	strb	r3, [r7, #15]
    if(channel >= ADC_CHANNEL_COUNT) return;
 800a00e:	7bfb      	ldrb	r3, [r7, #15]
 800a010:	2b05      	cmp	r3, #5
 800a012:	d814      	bhi.n	800a03e <Kalman_Set_Parameters+0x42>

    kalman_filters[channel].Q = process_noise;
 800a014:	7bfa      	ldrb	r2, [r7, #15]
 800a016:	490d      	ldr	r1, [pc, #52]	@ (800a04c <Kalman_Set_Parameters+0x50>)
 800a018:	4613      	mov	r3, r2
 800a01a:	005b      	lsls	r3, r3, #1
 800a01c:	4413      	add	r3, r2
 800a01e:	00db      	lsls	r3, r3, #3
 800a020:	440b      	add	r3, r1
 800a022:	3308      	adds	r3, #8
 800a024:	68ba      	ldr	r2, [r7, #8]
 800a026:	601a      	str	r2, [r3, #0]
    kalman_filters[channel].R = measurement_noise;
 800a028:	7bfa      	ldrb	r2, [r7, #15]
 800a02a:	4908      	ldr	r1, [pc, #32]	@ (800a04c <Kalman_Set_Parameters+0x50>)
 800a02c:	4613      	mov	r3, r2
 800a02e:	005b      	lsls	r3, r3, #1
 800a030:	4413      	add	r3, r2
 800a032:	00db      	lsls	r3, r3, #3
 800a034:	440b      	add	r3, r1
 800a036:	330c      	adds	r3, #12
 800a038:	687a      	ldr	r2, [r7, #4]
 800a03a:	601a      	str	r2, [r3, #0]
 800a03c:	e000      	b.n	800a040 <Kalman_Set_Parameters+0x44>
    if(channel >= ADC_CHANNEL_COUNT) return;
 800a03e:	bf00      	nop
}
 800a040:	3714      	adds	r7, #20
 800a042:	46bd      	mov	sp, r7
 800a044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a048:	4770      	bx	lr
 800a04a:	bf00      	nop
 800a04c:	200004a4 	.word	0x200004a4

0800a050 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800a054:	4b12      	ldr	r3, [pc, #72]	@ (800a0a0 <MX_I2C1_Init+0x50>)
 800a056:	4a13      	ldr	r2, [pc, #76]	@ (800a0a4 <MX_I2C1_Init+0x54>)
 800a058:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800a05a:	4b11      	ldr	r3, [pc, #68]	@ (800a0a0 <MX_I2C1_Init+0x50>)
 800a05c:	4a12      	ldr	r2, [pc, #72]	@ (800a0a8 <MX_I2C1_Init+0x58>)
 800a05e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800a060:	4b0f      	ldr	r3, [pc, #60]	@ (800a0a0 <MX_I2C1_Init+0x50>)
 800a062:	2200      	movs	r2, #0
 800a064:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800a066:	4b0e      	ldr	r3, [pc, #56]	@ (800a0a0 <MX_I2C1_Init+0x50>)
 800a068:	2200      	movs	r2, #0
 800a06a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a06c:	4b0c      	ldr	r3, [pc, #48]	@ (800a0a0 <MX_I2C1_Init+0x50>)
 800a06e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800a072:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a074:	4b0a      	ldr	r3, [pc, #40]	@ (800a0a0 <MX_I2C1_Init+0x50>)
 800a076:	2200      	movs	r2, #0
 800a078:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800a07a:	4b09      	ldr	r3, [pc, #36]	@ (800a0a0 <MX_I2C1_Init+0x50>)
 800a07c:	2200      	movs	r2, #0
 800a07e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a080:	4b07      	ldr	r3, [pc, #28]	@ (800a0a0 <MX_I2C1_Init+0x50>)
 800a082:	2200      	movs	r2, #0
 800a084:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a086:	4b06      	ldr	r3, [pc, #24]	@ (800a0a0 <MX_I2C1_Init+0x50>)
 800a088:	2200      	movs	r2, #0
 800a08a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800a08c:	4804      	ldr	r0, [pc, #16]	@ (800a0a0 <MX_I2C1_Init+0x50>)
 800a08e:	f002 f9d5 	bl	800c43c <HAL_I2C_Init>
 800a092:	4603      	mov	r3, r0
 800a094:	2b00      	cmp	r3, #0
 800a096:	d001      	beq.n	800a09c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800a098:	f000 f9d8 	bl	800a44c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800a09c:	bf00      	nop
 800a09e:	bd80      	pop	{r7, pc}
 800a0a0:	20000534 	.word	0x20000534
 800a0a4:	40005400 	.word	0x40005400
 800a0a8:	000186a0 	.word	0x000186a0

0800a0ac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b08a      	sub	sp, #40	@ 0x28
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a0b4:	f107 0314 	add.w	r3, r7, #20
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	601a      	str	r2, [r3, #0]
 800a0bc:	605a      	str	r2, [r3, #4]
 800a0be:	609a      	str	r2, [r3, #8]
 800a0c0:	60da      	str	r2, [r3, #12]
 800a0c2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	4a19      	ldr	r2, [pc, #100]	@ (800a130 <HAL_I2C_MspInit+0x84>)
 800a0ca:	4293      	cmp	r3, r2
 800a0cc:	d12b      	bne.n	800a126 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	613b      	str	r3, [r7, #16]
 800a0d2:	4b18      	ldr	r3, [pc, #96]	@ (800a134 <HAL_I2C_MspInit+0x88>)
 800a0d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0d6:	4a17      	ldr	r2, [pc, #92]	@ (800a134 <HAL_I2C_MspInit+0x88>)
 800a0d8:	f043 0302 	orr.w	r3, r3, #2
 800a0dc:	6313      	str	r3, [r2, #48]	@ 0x30
 800a0de:	4b15      	ldr	r3, [pc, #84]	@ (800a134 <HAL_I2C_MspInit+0x88>)
 800a0e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0e2:	f003 0302 	and.w	r3, r3, #2
 800a0e6:	613b      	str	r3, [r7, #16]
 800a0e8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800a0ea:	23c0      	movs	r3, #192	@ 0xc0
 800a0ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a0ee:	2312      	movs	r3, #18
 800a0f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a0f6:	2303      	movs	r3, #3
 800a0f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800a0fa:	2304      	movs	r3, #4
 800a0fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a0fe:	f107 0314 	add.w	r3, r7, #20
 800a102:	4619      	mov	r1, r3
 800a104:	480c      	ldr	r0, [pc, #48]	@ (800a138 <HAL_I2C_MspInit+0x8c>)
 800a106:	f001 fffb 	bl	800c100 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800a10a:	2300      	movs	r3, #0
 800a10c:	60fb      	str	r3, [r7, #12]
 800a10e:	4b09      	ldr	r3, [pc, #36]	@ (800a134 <HAL_I2C_MspInit+0x88>)
 800a110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a112:	4a08      	ldr	r2, [pc, #32]	@ (800a134 <HAL_I2C_MspInit+0x88>)
 800a114:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a118:	6413      	str	r3, [r2, #64]	@ 0x40
 800a11a:	4b06      	ldr	r3, [pc, #24]	@ (800a134 <HAL_I2C_MspInit+0x88>)
 800a11c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a11e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a122:	60fb      	str	r3, [r7, #12]
 800a124:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800a126:	bf00      	nop
 800a128:	3728      	adds	r7, #40	@ 0x28
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}
 800a12e:	bf00      	nop
 800a130:	40005400 	.word	0x40005400
 800a134:	40023800 	.word	0x40023800
 800a138:	40020400 	.word	0x40020400

0800a13c <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b084      	sub	sp, #16
 800a140:	af00      	add	r7, sp, #0
 800a142:	60f8      	str	r0, [r7, #12]
 800a144:	60b9      	str	r1, [r7, #8]
 800a146:	607a      	str	r2, [r7, #4]
    // 使用 10ms 超時，失敗也返回成功
    HAL_UART_Transmit(DEBUG_UART_PORT, (uint8_t*)ptr, len, 10);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	b29a      	uxth	r2, r3
 800a14c:	230a      	movs	r3, #10
 800a14e:	68b9      	ldr	r1, [r7, #8]
 800a150:	4803      	ldr	r0, [pc, #12]	@ (800a160 <_write+0x24>)
 800a152:	f005 fce5 	bl	800fb20 <HAL_UART_Transmit>
    return len;  // 總是返回成功
 800a156:	687b      	ldr	r3, [r7, #4]
}
 800a158:	4618      	mov	r0, r3
 800a15a:	3710      	adds	r7, #16
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}
 800a160:	200008e8 	.word	0x200008e8

0800a164 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b090      	sub	sp, #64	@ 0x40
 800a168:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
    // 設置向量表到APP區域
  SCB->VTOR = 0x08008000;
 800a16a:	4b6e      	ldr	r3, [pc, #440]	@ (800a324 <main+0x1c0>)
 800a16c:	4a6e      	ldr	r2, [pc, #440]	@ (800a328 <main+0x1c4>)
 800a16e:	609a      	str	r2, [r3, #8]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800a170:	b672      	cpsid	i
}
 800a172:	bf00      	nop
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800a174:	f000 ff40 	bl	800aff8 <HAL_Init>
  __ASM volatile ("cpsie i" : : : "memory");
 800a178:	b662      	cpsie	i
}
 800a17a:	bf00      	nop
  /* USER CODE BEGIN Init */
  __enable_irq();
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800a17c:	f000 f8fc 	bl	800a378 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800a180:	f7ff fcde 	bl	8009b40 <MX_GPIO_Init>
  MX_DMA_Init();
 800a184:	f7ff fcbc 	bl	8009b00 <MX_DMA_Init>
  MX_ADC1_Init();
 800a188:	f7ff f822 	bl	80091d0 <MX_ADC1_Init>
  MX_I2C1_Init();
 800a18c:	f7ff ff60 	bl	800a050 <MX_I2C1_Init>
  MX_TIM1_Init();
 800a190:	f000 fcce 	bl	800ab30 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 800a194:	f000 fe34 	bl	800ae00 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 800a198:	f000 fd6c 	bl	800ac74 <MX_TIM4_Init>
  MX_USB_DEVICE_Init();
 800a19c:	f009 f8f2 	bl	8013384 <MX_USB_DEVICE_Init>
  MX_USART6_UART_Init();
 800a1a0:	f000 fe58 	bl	800ae54 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  // 🔧 簡化測試：先測試基本功能
  printf("=== APP STARTED ===\r\n");
 800a1a4:	4861      	ldr	r0, [pc, #388]	@ (800a32c <main+0x1c8>)
 800a1a6:	f00a fa9b 	bl	80146e0 <puts>

  // 測試 LED（PA5 是板載 LED）
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a1aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	601a      	str	r2, [r3, #0]
 800a1b2:	605a      	str	r2, [r3, #4]
 800a1b4:	609a      	str	r2, [r3, #8]
 800a1b6:	60da      	str	r2, [r3, #12]
 800a1b8:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = HM_OPA_ADC_Pin;
 800a1ba:	2320      	movs	r3, #32
 800a1bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a1be:	2301      	movs	r3, #1
 800a1c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(HM_OPA_ADC_GPIO_Port, &GPIO_InitStruct);
 800a1ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a1ce:	4619      	mov	r1, r3
 800a1d0:	4857      	ldr	r0, [pc, #348]	@ (800a330 <main+0x1cc>)
 800a1d2:	f001 ff95 	bl	800c100 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(HM_OPA_ADC_GPIO_Port, HM_OPA_ADC_Pin, GPIO_PIN_SET);
 800a1d6:	2201      	movs	r2, #1
 800a1d8:	2120      	movs	r1, #32
 800a1da:	4855      	ldr	r0, [pc, #340]	@ (800a330 <main+0x1cc>)
 800a1dc:	f002 f914 	bl	800c408 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 800a1e0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800a1e4:	f000 ff7a 	bl	800b0dc <HAL_Delay>
  HAL_GPIO_WritePin(HM_OPA_ADC_GPIO_Port, HM_OPA_ADC_Pin, GPIO_PIN_RESET);
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	2120      	movs	r1, #32
 800a1ec:	4850      	ldr	r0, [pc, #320]	@ (800a330 <main+0x1cc>)
 800a1ee:	f002 f90b 	bl	800c408 <HAL_GPIO_WritePin>

  printf("LED Test completed\r\n");
 800a1f2:	4850      	ldr	r0, [pc, #320]	@ (800a334 <main+0x1d0>)
 800a1f4:	f00a fa74 	bl	80146e0 <puts>

  /* 初始化SSD1306 */
  char buf[32];
  printf("ssd1306_Init...\r\n");
 800a1f8:	484f      	ldr	r0, [pc, #316]	@ (800a338 <main+0x1d4>)
 800a1fa:	f00a fa71 	bl	80146e0 <puts>
  ssd1306_Init();
 800a1fe:	f000 f965 	bl	800a4cc <ssd1306_Init>

  ssd1306_Fill(Black);
 800a202:	2000      	movs	r0, #0
 800a204:	f000 f9cc 	bl	800a5a0 <ssd1306_Fill>
  ssd1306_SetCursor(0, 0);
 800a208:	2100      	movs	r1, #0
 800a20a:	2000      	movs	r0, #0
 800a20c:	f000 fb14 	bl	800a838 <ssd1306_SetCursor>
  ssd1306_WriteString("ACS712_Init...", Font_6x8, White);
 800a210:	4b4a      	ldr	r3, [pc, #296]	@ (800a33c <main+0x1d8>)
 800a212:	2201      	movs	r2, #1
 800a214:	9200      	str	r2, [sp, #0]
 800a216:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a218:	4849      	ldr	r0, [pc, #292]	@ (800a340 <main+0x1dc>)
 800a21a:	f000 fae7 	bl	800a7ec <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 800a21e:	f000 f9d7 	bl	800a5d0 <ssd1306_UpdateScreen>

  /* 初始化ACS712 */
  printf("ACS712_Init...\r\n");
 800a222:	4848      	ldr	r0, [pc, #288]	@ (800a344 <main+0x1e0>)
 800a224:	f00a fa5c 	bl	80146e0 <puts>
  if (ACS712_Init(&acs712, &hadc1, ACS712_05A) != HAL_OK)
 800a228:	2200      	movs	r2, #0
 800a22a:	4947      	ldr	r1, [pc, #284]	@ (800a348 <main+0x1e4>)
 800a22c:	4847      	ldr	r0, [pc, #284]	@ (800a34c <main+0x1e8>)
 800a22e:	f7fe fea9 	bl	8008f84 <ACS712_Init>
 800a232:	4603      	mov	r3, r0
 800a234:	2b00      	cmp	r3, #0
 800a236:	d004      	beq.n	800a242 <main+0xde>
  {
	  printf("ACS712_Init Fail!!!\r\n");
 800a238:	4845      	ldr	r0, [pc, #276]	@ (800a350 <main+0x1ec>)
 800a23a:	f00a fa51 	bl	80146e0 <puts>
      Error_Handler();
 800a23e:	f000 f905 	bl	800a44c <Error_Handler>
  }


  /* 校準ACS712 */
  //ssd1306_Fill(Black);
  ssd1306_SetCursor(0, 8);
 800a242:	2108      	movs	r1, #8
 800a244:	2000      	movs	r0, #0
 800a246:	f000 faf7 	bl	800a838 <ssd1306_SetCursor>
  ssd1306_WriteString("Calibrating...", Font_6x8, White);
 800a24a:	4b3c      	ldr	r3, [pc, #240]	@ (800a33c <main+0x1d8>)
 800a24c:	2201      	movs	r2, #1
 800a24e:	9200      	str	r2, [sp, #0]
 800a250:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a252:	4840      	ldr	r0, [pc, #256]	@ (800a354 <main+0x1f0>)
 800a254:	f000 faca 	bl	800a7ec <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 800a258:	f000 f9ba 	bl	800a5d0 <ssd1306_UpdateScreen>

  printf("ACS712 Calibrating ...ADC to OFFSET\r\n");
 800a25c:	483e      	ldr	r0, [pc, #248]	@ (800a358 <main+0x1f4>)
 800a25e:	f00a fa3f 	bl	80146e0 <puts>
  if (ACS712_Calibrate(&acs712) != HAL_OK)
 800a262:	483a      	ldr	r0, [pc, #232]	@ (800a34c <main+0x1e8>)
 800a264:	f7fe fec4 	bl	8008ff0 <ACS712_Calibrate>
 800a268:	4603      	mov	r3, r0
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d004      	beq.n	800a278 <main+0x114>
  {
	  printf("ACS712 Calibrating FAIL!!!\r\n");
 800a26e:	483b      	ldr	r0, [pc, #236]	@ (800a35c <main+0x1f8>)
 800a270:	f00a fa36 	bl	80146e0 <puts>
      Error_Handler();
 800a274:	f000 f8ea 	bl	800a44c <Error_Handler>
  }

  /* 初始化電流監控器 */
  ssd1306_SetCursor(0, 16);
 800a278:	2110      	movs	r1, #16
 800a27a:	2000      	movs	r0, #0
 800a27c:	f000 fadc 	bl	800a838 <ssd1306_SetCursor>
  ssd1306_WriteString("CurrentMonitor_Init...", Font_6x8, White);
 800a280:	4b2e      	ldr	r3, [pc, #184]	@ (800a33c <main+0x1d8>)
 800a282:	2201      	movs	r2, #1
 800a284:	9200      	str	r2, [sp, #0]
 800a286:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a288:	4835      	ldr	r0, [pc, #212]	@ (800a360 <main+0x1fc>)
 800a28a:	f000 faaf 	bl	800a7ec <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 800a28e:	f000 f99f 	bl	800a5d0 <ssd1306_UpdateScreen>
  printf("CurrentMonitor_Init...\r\n");
 800a292:	4834      	ldr	r0, [pc, #208]	@ (800a364 <main+0x200>)
 800a294:	f00a fa24 	bl	80146e0 <puts>
  if (CurrentMonitor_Init(&monitor, &acs712) != HAL_OK)
 800a298:	492c      	ldr	r1, [pc, #176]	@ (800a34c <main+0x1e8>)
 800a29a:	4833      	ldr	r0, [pc, #204]	@ (800a368 <main+0x204>)
 800a29c:	f7ff f862 	bl	8009364 <CurrentMonitor_Init>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d004      	beq.n	800a2b0 <main+0x14c>
  {
	  printf("CurrentMonitor_Init Fail!!!\r\n");
 800a2a6:	4831      	ldr	r0, [pc, #196]	@ (800a36c <main+0x208>)
 800a2a8:	f00a fa1a 	bl	80146e0 <puts>
      Error_Handler();
 800a2ac:	f000 f8ce 	bl	800a44c <Error_Handler>
  }
  HAL_Delay(300);
 800a2b0:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800a2b4:	f000 ff12 	bl	800b0dc <HAL_Delay>


  printf("Zero offset: %.3f V\r\n", acs712.zero_offset);
 800a2b8:	4b24      	ldr	r3, [pc, #144]	@ (800a34c <main+0x1e8>)
 800a2ba:	68db      	ldr	r3, [r3, #12]
 800a2bc:	4618      	mov	r0, r3
 800a2be:	f7fe f94b 	bl	8008558 <__aeabi_f2d>
 800a2c2:	4602      	mov	r2, r0
 800a2c4:	460b      	mov	r3, r1
 800a2c6:	482a      	ldr	r0, [pc, #168]	@ (800a370 <main+0x20c>)
 800a2c8:	f00a f9a2 	bl	8014610 <iprintf>

  sprintf(buf, "Zero offset: %.3fV", acs712.zero_offset);
 800a2cc:	4b1f      	ldr	r3, [pc, #124]	@ (800a34c <main+0x1e8>)
 800a2ce:	68db      	ldr	r3, [r3, #12]
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	f7fe f941 	bl	8008558 <__aeabi_f2d>
 800a2d6:	4602      	mov	r2, r0
 800a2d8:	460b      	mov	r3, r1
 800a2da:	1d38      	adds	r0, r7, #4
 800a2dc:	4925      	ldr	r1, [pc, #148]	@ (800a374 <main+0x210>)
 800a2de:	f00a fa07 	bl	80146f0 <siprintf>
  ssd1306_Fill(Black);
 800a2e2:	2000      	movs	r0, #0
 800a2e4:	f000 f95c 	bl	800a5a0 <ssd1306_Fill>
  ssd1306_SetCursor(0, 0); // 設定顯示位置
 800a2e8:	2100      	movs	r1, #0
 800a2ea:	2000      	movs	r0, #0
 800a2ec:	f000 faa4 	bl	800a838 <ssd1306_SetCursor>
  ssd1306_WriteString(buf, Font_6x8, White);
 800a2f0:	4b12      	ldr	r3, [pc, #72]	@ (800a33c <main+0x1d8>)
 800a2f2:	1d38      	adds	r0, r7, #4
 800a2f4:	2201      	movs	r2, #1
 800a2f6:	9200      	str	r2, [sp, #0]
 800a2f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a2fa:	f000 fa77 	bl	800a7ec <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 800a2fe:	f000 f967 	bl	800a5d0 <ssd1306_UpdateScreen>
  HAL_Delay(100);
 800a302:	2064      	movs	r0, #100	@ 0x64
 800a304:	f000 feea 	bl	800b0dc <HAL_Delay>

  // 執行校準
  CurrentMonitor_ManualCalibration(&monitor);
 800a308:	4817      	ldr	r0, [pc, #92]	@ (800a368 <main+0x204>)
 800a30a:	f7ff f8c1 	bl	8009490 <CurrentMonitor_ManualCalibration>

  CurrentMonitor_ResetStats(&monitor);
 800a30e:	4816      	ldr	r0, [pc, #88]	@ (800a368 <main+0x204>)
 800a310:	f7ff f868 	bl	80093e4 <CurrentMonitor_ResetStats>

  HAL_Delay(100);
 800a314:	2064      	movs	r0, #100	@ 0x64
 800a316:	f000 fee1 	bl	800b0dc <HAL_Delay>

  while(1)
  {
  	CurrentMonitor_TestFilters(&monitor);
 800a31a:	4813      	ldr	r0, [pc, #76]	@ (800a368 <main+0x204>)
 800a31c:	f7ff f9ec 	bl	80096f8 <CurrentMonitor_TestFilters>
 800a320:	e7fb      	b.n	800a31a <main+0x1b6>
 800a322:	bf00      	nop
 800a324:	e000ed00 	.word	0xe000ed00
 800a328:	08008000 	.word	0x08008000
 800a32c:	08017098 	.word	0x08017098
 800a330:	40020000 	.word	0x40020000
 800a334:	080170b0 	.word	0x080170b0
 800a338:	080170c4 	.word	0x080170c4
 800a33c:	080177fc 	.word	0x080177fc
 800a340:	080170d8 	.word	0x080170d8
 800a344:	080170e8 	.word	0x080170e8
 800a348:	20000364 	.word	0x20000364
 800a34c:	20000588 	.word	0x20000588
 800a350:	080170f8 	.word	0x080170f8
 800a354:	08017110 	.word	0x08017110
 800a358:	08017120 	.word	0x08017120
 800a35c:	08017148 	.word	0x08017148
 800a360:	08017164 	.word	0x08017164
 800a364:	0801717c 	.word	0x0801717c
 800a368:	200005a4 	.word	0x200005a4
 800a36c:	08017194 	.word	0x08017194
 800a370:	080171b4 	.word	0x080171b4
 800a374:	080171cc 	.word	0x080171cc

0800a378 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b094      	sub	sp, #80	@ 0x50
 800a37c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a37e:	f107 0320 	add.w	r3, r7, #32
 800a382:	2230      	movs	r2, #48	@ 0x30
 800a384:	2100      	movs	r1, #0
 800a386:	4618      	mov	r0, r3
 800a388:	f00a fac6 	bl	8014918 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a38c:	f107 030c 	add.w	r3, r7, #12
 800a390:	2200      	movs	r2, #0
 800a392:	601a      	str	r2, [r3, #0]
 800a394:	605a      	str	r2, [r3, #4]
 800a396:	609a      	str	r2, [r3, #8]
 800a398:	60da      	str	r2, [r3, #12]
 800a39a:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN */
  // 🔧 先重置到默認狀態
  HAL_RCC_DeInit();
 800a39c:	f004 fbce 	bl	800eb3c <HAL_RCC_DeInit>
  /* USER CODE END */

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	60bb      	str	r3, [r7, #8]
 800a3a4:	4b27      	ldr	r3, [pc, #156]	@ (800a444 <SystemClock_Config+0xcc>)
 800a3a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3a8:	4a26      	ldr	r2, [pc, #152]	@ (800a444 <SystemClock_Config+0xcc>)
 800a3aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a3ae:	6413      	str	r3, [r2, #64]	@ 0x40
 800a3b0:	4b24      	ldr	r3, [pc, #144]	@ (800a444 <SystemClock_Config+0xcc>)
 800a3b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a3b8:	60bb      	str	r3, [r7, #8]
 800a3ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800a3bc:	2300      	movs	r3, #0
 800a3be:	607b      	str	r3, [r7, #4]
 800a3c0:	4b21      	ldr	r3, [pc, #132]	@ (800a448 <SystemClock_Config+0xd0>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	4a20      	ldr	r2, [pc, #128]	@ (800a448 <SystemClock_Config+0xd0>)
 800a3c6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a3ca:	6013      	str	r3, [r2, #0]
 800a3cc:	4b1e      	ldr	r3, [pc, #120]	@ (800a448 <SystemClock_Config+0xd0>)
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800a3d4:	607b      	str	r3, [r7, #4]
 800a3d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800a3d8:	2301      	movs	r3, #1
 800a3da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800a3dc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800a3e0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a3e2:	2302      	movs	r3, #2
 800a3e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800a3e6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800a3ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800a3ec:	2304      	movs	r3, #4
 800a3ee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800a3f0:	2348      	movs	r3, #72	@ 0x48
 800a3f2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800a3f4:	2302      	movs	r3, #2
 800a3f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800a3f8:	2303      	movs	r3, #3
 800a3fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a3fc:	f107 0320 	add.w	r3, r7, #32
 800a400:	4618      	mov	r0, r3
 800a402:	f003 ff03 	bl	800e20c <HAL_RCC_OscConfig>
 800a406:	4603      	mov	r3, r0
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d001      	beq.n	800a410 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800a40c:	f000 f81e 	bl	800a44c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a410:	230f      	movs	r3, #15
 800a412:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a414:	2302      	movs	r3, #2
 800a416:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a418:	2300      	movs	r3, #0
 800a41a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800a41c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a420:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800a422:	2300      	movs	r3, #0
 800a424:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800a426:	f107 030c 	add.w	r3, r7, #12
 800a42a:	2102      	movs	r1, #2
 800a42c:	4618      	mov	r0, r3
 800a42e:	f004 f965 	bl	800e6fc <HAL_RCC_ClockConfig>
 800a432:	4603      	mov	r3, r0
 800a434:	2b00      	cmp	r3, #0
 800a436:	d001      	beq.n	800a43c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800a438:	f000 f808 	bl	800a44c <Error_Handler>
  }
}
 800a43c:	bf00      	nop
 800a43e:	3750      	adds	r7, #80	@ 0x50
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}
 800a444:	40023800 	.word	0x40023800
 800a448:	40007000 	.word	0x40007000

0800a44c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a44c:	b480      	push	{r7}
 800a44e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800a450:	b672      	cpsid	i
}
 800a452:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800a454:	bf00      	nop
 800a456:	e7fd      	b.n	800a454 <Error_Handler+0x8>

0800a458 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800a458:	b480      	push	{r7}
 800a45a:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 800a45c:	bf00      	nop
 800a45e:	46bd      	mov	sp, r7
 800a460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a464:	4770      	bx	lr
	...

0800a468 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800a468:	b580      	push	{r7, lr}
 800a46a:	b086      	sub	sp, #24
 800a46c:	af04      	add	r7, sp, #16
 800a46e:	4603      	mov	r3, r0
 800a470:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800a472:	f04f 33ff 	mov.w	r3, #4294967295
 800a476:	9302      	str	r3, [sp, #8]
 800a478:	2301      	movs	r3, #1
 800a47a:	9301      	str	r3, [sp, #4]
 800a47c:	1dfb      	adds	r3, r7, #7
 800a47e:	9300      	str	r3, [sp, #0]
 800a480:	2301      	movs	r3, #1
 800a482:	2200      	movs	r2, #0
 800a484:	2178      	movs	r1, #120	@ 0x78
 800a486:	4803      	ldr	r0, [pc, #12]	@ (800a494 <ssd1306_WriteCommand+0x2c>)
 800a488:	f002 f91c 	bl	800c6c4 <HAL_I2C_Mem_Write>
}
 800a48c:	bf00      	nop
 800a48e:	3708      	adds	r7, #8
 800a490:	46bd      	mov	sp, r7
 800a492:	bd80      	pop	{r7, pc}
 800a494:	20000534 	.word	0x20000534

0800a498 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800a498:	b580      	push	{r7, lr}
 800a49a:	b086      	sub	sp, #24
 800a49c:	af04      	add	r7, sp, #16
 800a49e:	6078      	str	r0, [r7, #4]
 800a4a0:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	b29b      	uxth	r3, r3
 800a4a6:	f04f 32ff 	mov.w	r2, #4294967295
 800a4aa:	9202      	str	r2, [sp, #8]
 800a4ac:	9301      	str	r3, [sp, #4]
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	9300      	str	r3, [sp, #0]
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	2240      	movs	r2, #64	@ 0x40
 800a4b6:	2178      	movs	r1, #120	@ 0x78
 800a4b8:	4803      	ldr	r0, [pc, #12]	@ (800a4c8 <ssd1306_WriteData+0x30>)
 800a4ba:	f002 f903 	bl	800c6c4 <HAL_I2C_Mem_Write>
}
 800a4be:	bf00      	nop
 800a4c0:	3708      	adds	r7, #8
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}
 800a4c6:	bf00      	nop
 800a4c8:	20000534 	.word	0x20000534

0800a4cc <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 800a4d0:	f7ff ffc2 	bl	800a458 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800a4d4:	2064      	movs	r0, #100	@ 0x64
 800a4d6:	f000 fe01 	bl	800b0dc <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800a4da:	2000      	movs	r0, #0
 800a4dc:	f000 f9d8 	bl	800a890 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 800a4e0:	2020      	movs	r0, #32
 800a4e2:	f7ff ffc1 	bl	800a468 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800a4e6:	2000      	movs	r0, #0
 800a4e8:	f7ff ffbe 	bl	800a468 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800a4ec:	20b0      	movs	r0, #176	@ 0xb0
 800a4ee:	f7ff ffbb 	bl	800a468 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800a4f2:	20c8      	movs	r0, #200	@ 0xc8
 800a4f4:	f7ff ffb8 	bl	800a468 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800a4f8:	2000      	movs	r0, #0
 800a4fa:	f7ff ffb5 	bl	800a468 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800a4fe:	2010      	movs	r0, #16
 800a500:	f7ff ffb2 	bl	800a468 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800a504:	2040      	movs	r0, #64	@ 0x40
 800a506:	f7ff ffaf 	bl	800a468 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800a50a:	20ff      	movs	r0, #255	@ 0xff
 800a50c:	f000 f9ac 	bl	800a868 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 800a510:	20a1      	movs	r0, #161	@ 0xa1
 800a512:	f7ff ffa9 	bl	800a468 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800a516:	20a6      	movs	r0, #166	@ 0xa6
 800a518:	f7ff ffa6 	bl	800a468 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800a51c:	20a8      	movs	r0, #168	@ 0xa8
 800a51e:	f7ff ffa3 	bl	800a468 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 800a522:	201f      	movs	r0, #31
 800a524:	f7ff ffa0 	bl	800a468 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800a528:	20a4      	movs	r0, #164	@ 0xa4
 800a52a:	f7ff ff9d 	bl	800a468 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800a52e:	20d3      	movs	r0, #211	@ 0xd3
 800a530:	f7ff ff9a 	bl	800a468 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800a534:	2000      	movs	r0, #0
 800a536:	f7ff ff97 	bl	800a468 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800a53a:	20d5      	movs	r0, #213	@ 0xd5
 800a53c:	f7ff ff94 	bl	800a468 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 800a540:	20f0      	movs	r0, #240	@ 0xf0
 800a542:	f7ff ff91 	bl	800a468 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800a546:	20d9      	movs	r0, #217	@ 0xd9
 800a548:	f7ff ff8e 	bl	800a468 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800a54c:	2022      	movs	r0, #34	@ 0x22
 800a54e:	f7ff ff8b 	bl	800a468 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800a552:	20da      	movs	r0, #218	@ 0xda
 800a554:	f7ff ff88 	bl	800a468 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 800a558:	2002      	movs	r0, #2
 800a55a:	f7ff ff85 	bl	800a468 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800a55e:	20db      	movs	r0, #219	@ 0xdb
 800a560:	f7ff ff82 	bl	800a468 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800a564:	2020      	movs	r0, #32
 800a566:	f7ff ff7f 	bl	800a468 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800a56a:	208d      	movs	r0, #141	@ 0x8d
 800a56c:	f7ff ff7c 	bl	800a468 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800a570:	2014      	movs	r0, #20
 800a572:	f7ff ff79 	bl	800a468 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800a576:	2001      	movs	r0, #1
 800a578:	f000 f98a 	bl	800a890 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 800a57c:	2000      	movs	r0, #0
 800a57e:	f000 f80f 	bl	800a5a0 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800a582:	f000 f825 	bl	800a5d0 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800a586:	4b05      	ldr	r3, [pc, #20]	@ (800a59c <ssd1306_Init+0xd0>)
 800a588:	2200      	movs	r2, #0
 800a58a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800a58c:	4b03      	ldr	r3, [pc, #12]	@ (800a59c <ssd1306_Init+0xd0>)
 800a58e:	2200      	movs	r2, #0
 800a590:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800a592:	4b02      	ldr	r3, [pc, #8]	@ (800a59c <ssd1306_Init+0xd0>)
 800a594:	2201      	movs	r2, #1
 800a596:	711a      	strb	r2, [r3, #4]
}
 800a598:	bf00      	nop
 800a59a:	bd80      	pop	{r7, pc}
 800a59c:	20000804 	.word	0x20000804

0800a5a0 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b082      	sub	sp, #8
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800a5aa:	79fb      	ldrb	r3, [r7, #7]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d101      	bne.n	800a5b4 <ssd1306_Fill+0x14>
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	e000      	b.n	800a5b6 <ssd1306_Fill+0x16>
 800a5b4:	23ff      	movs	r3, #255	@ 0xff
 800a5b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a5ba:	4619      	mov	r1, r3
 800a5bc:	4803      	ldr	r0, [pc, #12]	@ (800a5cc <ssd1306_Fill+0x2c>)
 800a5be:	f00a f9ab 	bl	8014918 <memset>
}
 800a5c2:	bf00      	nop
 800a5c4:	3708      	adds	r7, #8
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bd80      	pop	{r7, pc}
 800a5ca:	bf00      	nop
 800a5cc:	20000604 	.word	0x20000604

0800a5d0 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b082      	sub	sp, #8
 800a5d4:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	71fb      	strb	r3, [r7, #7]
 800a5da:	e016      	b.n	800a60a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800a5dc:	79fb      	ldrb	r3, [r7, #7]
 800a5de:	3b50      	subs	r3, #80	@ 0x50
 800a5e0:	b2db      	uxtb	r3, r3
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	f7ff ff40 	bl	800a468 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 800a5e8:	2000      	movs	r0, #0
 800a5ea:	f7ff ff3d 	bl	800a468 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800a5ee:	2010      	movs	r0, #16
 800a5f0:	f7ff ff3a 	bl	800a468 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800a5f4:	79fb      	ldrb	r3, [r7, #7]
 800a5f6:	01db      	lsls	r3, r3, #7
 800a5f8:	4a08      	ldr	r2, [pc, #32]	@ (800a61c <ssd1306_UpdateScreen+0x4c>)
 800a5fa:	4413      	add	r3, r2
 800a5fc:	2180      	movs	r1, #128	@ 0x80
 800a5fe:	4618      	mov	r0, r3
 800a600:	f7ff ff4a 	bl	800a498 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800a604:	79fb      	ldrb	r3, [r7, #7]
 800a606:	3301      	adds	r3, #1
 800a608:	71fb      	strb	r3, [r7, #7]
 800a60a:	79fb      	ldrb	r3, [r7, #7]
 800a60c:	2b03      	cmp	r3, #3
 800a60e:	d9e5      	bls.n	800a5dc <ssd1306_UpdateScreen+0xc>
    }
}
 800a610:	bf00      	nop
 800a612:	bf00      	nop
 800a614:	3708      	adds	r7, #8
 800a616:	46bd      	mov	sp, r7
 800a618:	bd80      	pop	{r7, pc}
 800a61a:	bf00      	nop
 800a61c:	20000604 	.word	0x20000604

0800a620 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 800a620:	b480      	push	{r7}
 800a622:	b083      	sub	sp, #12
 800a624:	af00      	add	r7, sp, #0
 800a626:	4603      	mov	r3, r0
 800a628:	71fb      	strb	r3, [r7, #7]
 800a62a:	460b      	mov	r3, r1
 800a62c:	71bb      	strb	r3, [r7, #6]
 800a62e:	4613      	mov	r3, r2
 800a630:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800a632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a636:	2b00      	cmp	r3, #0
 800a638:	db3d      	blt.n	800a6b6 <ssd1306_DrawPixel+0x96>
 800a63a:	79bb      	ldrb	r3, [r7, #6]
 800a63c:	2b1f      	cmp	r3, #31
 800a63e:	d83a      	bhi.n	800a6b6 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 800a640:	797b      	ldrb	r3, [r7, #5]
 800a642:	2b01      	cmp	r3, #1
 800a644:	d11a      	bne.n	800a67c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800a646:	79fa      	ldrb	r2, [r7, #7]
 800a648:	79bb      	ldrb	r3, [r7, #6]
 800a64a:	08db      	lsrs	r3, r3, #3
 800a64c:	b2d8      	uxtb	r0, r3
 800a64e:	4603      	mov	r3, r0
 800a650:	01db      	lsls	r3, r3, #7
 800a652:	4413      	add	r3, r2
 800a654:	4a1b      	ldr	r2, [pc, #108]	@ (800a6c4 <ssd1306_DrawPixel+0xa4>)
 800a656:	5cd3      	ldrb	r3, [r2, r3]
 800a658:	b25a      	sxtb	r2, r3
 800a65a:	79bb      	ldrb	r3, [r7, #6]
 800a65c:	f003 0307 	and.w	r3, r3, #7
 800a660:	2101      	movs	r1, #1
 800a662:	fa01 f303 	lsl.w	r3, r1, r3
 800a666:	b25b      	sxtb	r3, r3
 800a668:	4313      	orrs	r3, r2
 800a66a:	b259      	sxtb	r1, r3
 800a66c:	79fa      	ldrb	r2, [r7, #7]
 800a66e:	4603      	mov	r3, r0
 800a670:	01db      	lsls	r3, r3, #7
 800a672:	4413      	add	r3, r2
 800a674:	b2c9      	uxtb	r1, r1
 800a676:	4a13      	ldr	r2, [pc, #76]	@ (800a6c4 <ssd1306_DrawPixel+0xa4>)
 800a678:	54d1      	strb	r1, [r2, r3]
 800a67a:	e01d      	b.n	800a6b8 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800a67c:	79fa      	ldrb	r2, [r7, #7]
 800a67e:	79bb      	ldrb	r3, [r7, #6]
 800a680:	08db      	lsrs	r3, r3, #3
 800a682:	b2d8      	uxtb	r0, r3
 800a684:	4603      	mov	r3, r0
 800a686:	01db      	lsls	r3, r3, #7
 800a688:	4413      	add	r3, r2
 800a68a:	4a0e      	ldr	r2, [pc, #56]	@ (800a6c4 <ssd1306_DrawPixel+0xa4>)
 800a68c:	5cd3      	ldrb	r3, [r2, r3]
 800a68e:	b25a      	sxtb	r2, r3
 800a690:	79bb      	ldrb	r3, [r7, #6]
 800a692:	f003 0307 	and.w	r3, r3, #7
 800a696:	2101      	movs	r1, #1
 800a698:	fa01 f303 	lsl.w	r3, r1, r3
 800a69c:	b25b      	sxtb	r3, r3
 800a69e:	43db      	mvns	r3, r3
 800a6a0:	b25b      	sxtb	r3, r3
 800a6a2:	4013      	ands	r3, r2
 800a6a4:	b259      	sxtb	r1, r3
 800a6a6:	79fa      	ldrb	r2, [r7, #7]
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	01db      	lsls	r3, r3, #7
 800a6ac:	4413      	add	r3, r2
 800a6ae:	b2c9      	uxtb	r1, r1
 800a6b0:	4a04      	ldr	r2, [pc, #16]	@ (800a6c4 <ssd1306_DrawPixel+0xa4>)
 800a6b2:	54d1      	strb	r1, [r2, r3]
 800a6b4:	e000      	b.n	800a6b8 <ssd1306_DrawPixel+0x98>
        return;
 800a6b6:	bf00      	nop
    }
}
 800a6b8:	370c      	adds	r7, #12
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c0:	4770      	bx	lr
 800a6c2:	bf00      	nop
 800a6c4:	20000604 	.word	0x20000604

0800a6c8 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 800a6c8:	b590      	push	{r4, r7, lr}
 800a6ca:	b089      	sub	sp, #36	@ 0x24
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	4604      	mov	r4, r0
 800a6d0:	4638      	mov	r0, r7
 800a6d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800a6d6:	4623      	mov	r3, r4
 800a6d8:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800a6da:	7bfb      	ldrb	r3, [r7, #15]
 800a6dc:	2b1f      	cmp	r3, #31
 800a6de:	d902      	bls.n	800a6e6 <ssd1306_WriteChar+0x1e>
 800a6e0:	7bfb      	ldrb	r3, [r7, #15]
 800a6e2:	2b7e      	cmp	r3, #126	@ 0x7e
 800a6e4:	d901      	bls.n	800a6ea <ssd1306_WriteChar+0x22>
        return 0;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	e079      	b.n	800a7de <ssd1306_WriteChar+0x116>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 800a6ea:	68bb      	ldr	r3, [r7, #8]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d005      	beq.n	800a6fc <ssd1306_WriteChar+0x34>
 800a6f0:	68ba      	ldr	r2, [r7, #8]
 800a6f2:	7bfb      	ldrb	r3, [r7, #15]
 800a6f4:	3b20      	subs	r3, #32
 800a6f6:	4413      	add	r3, r2
 800a6f8:	781b      	ldrb	r3, [r3, #0]
 800a6fa:	e000      	b.n	800a6fe <ssd1306_WriteChar+0x36>
 800a6fc:	783b      	ldrb	r3, [r7, #0]
 800a6fe:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 800a700:	4b39      	ldr	r3, [pc, #228]	@ (800a7e8 <ssd1306_WriteChar+0x120>)
 800a702:	881b      	ldrh	r3, [r3, #0]
 800a704:	461a      	mov	r2, r3
 800a706:	7dfb      	ldrb	r3, [r7, #23]
 800a708:	4413      	add	r3, r2
 800a70a:	2b80      	cmp	r3, #128	@ 0x80
 800a70c:	dc06      	bgt.n	800a71c <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 800a70e:	4b36      	ldr	r3, [pc, #216]	@ (800a7e8 <ssd1306_WriteChar+0x120>)
 800a710:	885b      	ldrh	r3, [r3, #2]
 800a712:	461a      	mov	r2, r3
 800a714:	787b      	ldrb	r3, [r7, #1]
 800a716:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 800a718:	2b20      	cmp	r3, #32
 800a71a:	dd01      	ble.n	800a720 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 800a71c:	2300      	movs	r3, #0
 800a71e:	e05e      	b.n	800a7de <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 800a720:	2300      	movs	r3, #0
 800a722:	61fb      	str	r3, [r7, #28]
 800a724:	e04d      	b.n	800a7c2 <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 800a726:	687a      	ldr	r2, [r7, #4]
 800a728:	7bfb      	ldrb	r3, [r7, #15]
 800a72a:	3b20      	subs	r3, #32
 800a72c:	7879      	ldrb	r1, [r7, #1]
 800a72e:	fb01 f303 	mul.w	r3, r1, r3
 800a732:	4619      	mov	r1, r3
 800a734:	69fb      	ldr	r3, [r7, #28]
 800a736:	440b      	add	r3, r1
 800a738:	005b      	lsls	r3, r3, #1
 800a73a:	4413      	add	r3, r2
 800a73c:	881b      	ldrh	r3, [r3, #0]
 800a73e:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 800a740:	2300      	movs	r3, #0
 800a742:	61bb      	str	r3, [r7, #24]
 800a744:	e036      	b.n	800a7b4 <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 800a746:	693a      	ldr	r2, [r7, #16]
 800a748:	69bb      	ldr	r3, [r7, #24]
 800a74a:	fa02 f303 	lsl.w	r3, r2, r3
 800a74e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a752:	2b00      	cmp	r3, #0
 800a754:	d013      	beq.n	800a77e <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800a756:	4b24      	ldr	r3, [pc, #144]	@ (800a7e8 <ssd1306_WriteChar+0x120>)
 800a758:	881b      	ldrh	r3, [r3, #0]
 800a75a:	b2da      	uxtb	r2, r3
 800a75c:	69bb      	ldr	r3, [r7, #24]
 800a75e:	b2db      	uxtb	r3, r3
 800a760:	4413      	add	r3, r2
 800a762:	b2d8      	uxtb	r0, r3
 800a764:	4b20      	ldr	r3, [pc, #128]	@ (800a7e8 <ssd1306_WriteChar+0x120>)
 800a766:	885b      	ldrh	r3, [r3, #2]
 800a768:	b2da      	uxtb	r2, r3
 800a76a:	69fb      	ldr	r3, [r7, #28]
 800a76c:	b2db      	uxtb	r3, r3
 800a76e:	4413      	add	r3, r2
 800a770:	b2db      	uxtb	r3, r3
 800a772:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800a776:	4619      	mov	r1, r3
 800a778:	f7ff ff52 	bl	800a620 <ssd1306_DrawPixel>
 800a77c:	e017      	b.n	800a7ae <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800a77e:	4b1a      	ldr	r3, [pc, #104]	@ (800a7e8 <ssd1306_WriteChar+0x120>)
 800a780:	881b      	ldrh	r3, [r3, #0]
 800a782:	b2da      	uxtb	r2, r3
 800a784:	69bb      	ldr	r3, [r7, #24]
 800a786:	b2db      	uxtb	r3, r3
 800a788:	4413      	add	r3, r2
 800a78a:	b2d8      	uxtb	r0, r3
 800a78c:	4b16      	ldr	r3, [pc, #88]	@ (800a7e8 <ssd1306_WriteChar+0x120>)
 800a78e:	885b      	ldrh	r3, [r3, #2]
 800a790:	b2da      	uxtb	r2, r3
 800a792:	69fb      	ldr	r3, [r7, #28]
 800a794:	b2db      	uxtb	r3, r3
 800a796:	4413      	add	r3, r2
 800a798:	b2d9      	uxtb	r1, r3
 800a79a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	bf0c      	ite	eq
 800a7a2:	2301      	moveq	r3, #1
 800a7a4:	2300      	movne	r3, #0
 800a7a6:	b2db      	uxtb	r3, r3
 800a7a8:	461a      	mov	r2, r3
 800a7aa:	f7ff ff39 	bl	800a620 <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 800a7ae:	69bb      	ldr	r3, [r7, #24]
 800a7b0:	3301      	adds	r3, #1
 800a7b2:	61bb      	str	r3, [r7, #24]
 800a7b4:	7dfb      	ldrb	r3, [r7, #23]
 800a7b6:	69ba      	ldr	r2, [r7, #24]
 800a7b8:	429a      	cmp	r2, r3
 800a7ba:	d3c4      	bcc.n	800a746 <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 800a7bc:	69fb      	ldr	r3, [r7, #28]
 800a7be:	3301      	adds	r3, #1
 800a7c0:	61fb      	str	r3, [r7, #28]
 800a7c2:	787b      	ldrb	r3, [r7, #1]
 800a7c4:	461a      	mov	r2, r3
 800a7c6:	69fb      	ldr	r3, [r7, #28]
 800a7c8:	4293      	cmp	r3, r2
 800a7ca:	d3ac      	bcc.n	800a726 <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 800a7cc:	4b06      	ldr	r3, [pc, #24]	@ (800a7e8 <ssd1306_WriteChar+0x120>)
 800a7ce:	881a      	ldrh	r2, [r3, #0]
 800a7d0:	7dfb      	ldrb	r3, [r7, #23]
 800a7d2:	b29b      	uxth	r3, r3
 800a7d4:	4413      	add	r3, r2
 800a7d6:	b29a      	uxth	r2, r3
 800a7d8:	4b03      	ldr	r3, [pc, #12]	@ (800a7e8 <ssd1306_WriteChar+0x120>)
 800a7da:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800a7dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7de:	4618      	mov	r0, r3
 800a7e0:	3724      	adds	r7, #36	@ 0x24
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	bd90      	pop	{r4, r7, pc}
 800a7e6:	bf00      	nop
 800a7e8:	20000804 	.word	0x20000804

0800a7ec <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b086      	sub	sp, #24
 800a7f0:	af02      	add	r7, sp, #8
 800a7f2:	60f8      	str	r0, [r7, #12]
 800a7f4:	4638      	mov	r0, r7
 800a7f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 800a7fa:	e013      	b.n	800a824 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	7818      	ldrb	r0, [r3, #0]
 800a800:	7e3b      	ldrb	r3, [r7, #24]
 800a802:	9300      	str	r3, [sp, #0]
 800a804:	463b      	mov	r3, r7
 800a806:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a808:	f7ff ff5e 	bl	800a6c8 <ssd1306_WriteChar>
 800a80c:	4603      	mov	r3, r0
 800a80e:	461a      	mov	r2, r3
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	781b      	ldrb	r3, [r3, #0]
 800a814:	429a      	cmp	r2, r3
 800a816:	d002      	beq.n	800a81e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	781b      	ldrb	r3, [r3, #0]
 800a81c:	e008      	b.n	800a830 <ssd1306_WriteString+0x44>
        }
        str++;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	3301      	adds	r3, #1
 800a822:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	781b      	ldrb	r3, [r3, #0]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d1e7      	bne.n	800a7fc <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	781b      	ldrb	r3, [r3, #0]
}
 800a830:	4618      	mov	r0, r3
 800a832:	3710      	adds	r7, #16
 800a834:	46bd      	mov	sp, r7
 800a836:	bd80      	pop	{r7, pc}

0800a838 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 800a838:	b480      	push	{r7}
 800a83a:	b083      	sub	sp, #12
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	4603      	mov	r3, r0
 800a840:	460a      	mov	r2, r1
 800a842:	71fb      	strb	r3, [r7, #7]
 800a844:	4613      	mov	r3, r2
 800a846:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 800a848:	79fb      	ldrb	r3, [r7, #7]
 800a84a:	b29a      	uxth	r2, r3
 800a84c:	4b05      	ldr	r3, [pc, #20]	@ (800a864 <ssd1306_SetCursor+0x2c>)
 800a84e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800a850:	79bb      	ldrb	r3, [r7, #6]
 800a852:	b29a      	uxth	r2, r3
 800a854:	4b03      	ldr	r3, [pc, #12]	@ (800a864 <ssd1306_SetCursor+0x2c>)
 800a856:	805a      	strh	r2, [r3, #2]
}
 800a858:	bf00      	nop
 800a85a:	370c      	adds	r7, #12
 800a85c:	46bd      	mov	sp, r7
 800a85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a862:	4770      	bx	lr
 800a864:	20000804 	.word	0x20000804

0800a868 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 800a868:	b580      	push	{r7, lr}
 800a86a:	b084      	sub	sp, #16
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	4603      	mov	r3, r0
 800a870:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800a872:	2381      	movs	r3, #129	@ 0x81
 800a874:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800a876:	7bfb      	ldrb	r3, [r7, #15]
 800a878:	4618      	mov	r0, r3
 800a87a:	f7ff fdf5 	bl	800a468 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800a87e:	79fb      	ldrb	r3, [r7, #7]
 800a880:	4618      	mov	r0, r3
 800a882:	f7ff fdf1 	bl	800a468 <ssd1306_WriteCommand>
}
 800a886:	bf00      	nop
 800a888:	3710      	adds	r7, #16
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}
	...

0800a890 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800a890:	b580      	push	{r7, lr}
 800a892:	b084      	sub	sp, #16
 800a894:	af00      	add	r7, sp, #0
 800a896:	4603      	mov	r3, r0
 800a898:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800a89a:	79fb      	ldrb	r3, [r7, #7]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d005      	beq.n	800a8ac <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 800a8a0:	23af      	movs	r3, #175	@ 0xaf
 800a8a2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 800a8a4:	4b08      	ldr	r3, [pc, #32]	@ (800a8c8 <ssd1306_SetDisplayOn+0x38>)
 800a8a6:	2201      	movs	r2, #1
 800a8a8:	715a      	strb	r2, [r3, #5]
 800a8aa:	e004      	b.n	800a8b6 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 800a8ac:	23ae      	movs	r3, #174	@ 0xae
 800a8ae:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 800a8b0:	4b05      	ldr	r3, [pc, #20]	@ (800a8c8 <ssd1306_SetDisplayOn+0x38>)
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800a8b6:	7bfb      	ldrb	r3, [r7, #15]
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	f7ff fdd5 	bl	800a468 <ssd1306_WriteCommand>
}
 800a8be:	bf00      	nop
 800a8c0:	3710      	adds	r7, #16
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bd80      	pop	{r7, pc}
 800a8c6:	bf00      	nop
 800a8c8:	20000804 	.word	0x20000804

0800a8cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b082      	sub	sp, #8
 800a8d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	607b      	str	r3, [r7, #4]
 800a8d6:	4b10      	ldr	r3, [pc, #64]	@ (800a918 <HAL_MspInit+0x4c>)
 800a8d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a8da:	4a0f      	ldr	r2, [pc, #60]	@ (800a918 <HAL_MspInit+0x4c>)
 800a8dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a8e0:	6453      	str	r3, [r2, #68]	@ 0x44
 800a8e2:	4b0d      	ldr	r3, [pc, #52]	@ (800a918 <HAL_MspInit+0x4c>)
 800a8e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a8e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a8ea:	607b      	str	r3, [r7, #4]
 800a8ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	603b      	str	r3, [r7, #0]
 800a8f2:	4b09      	ldr	r3, [pc, #36]	@ (800a918 <HAL_MspInit+0x4c>)
 800a8f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8f6:	4a08      	ldr	r2, [pc, #32]	@ (800a918 <HAL_MspInit+0x4c>)
 800a8f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a8fc:	6413      	str	r3, [r2, #64]	@ 0x40
 800a8fe:	4b06      	ldr	r3, [pc, #24]	@ (800a918 <HAL_MspInit+0x4c>)
 800a900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a902:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a906:	603b      	str	r3, [r7, #0]
 800a908:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800a90a:	2007      	movs	r0, #7
 800a90c:	f001 f8cc 	bl	800baa8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a910:	bf00      	nop
 800a912:	3708      	adds	r7, #8
 800a914:	46bd      	mov	sp, r7
 800a916:	bd80      	pop	{r7, pc}
 800a918:	40023800 	.word	0x40023800

0800a91c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a91c:	b480      	push	{r7}
 800a91e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800a920:	bf00      	nop
 800a922:	e7fd      	b.n	800a920 <NMI_Handler+0x4>

0800a924 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a924:	b480      	push	{r7}
 800a926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a928:	bf00      	nop
 800a92a:	e7fd      	b.n	800a928 <HardFault_Handler+0x4>

0800a92c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a92c:	b480      	push	{r7}
 800a92e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a930:	bf00      	nop
 800a932:	e7fd      	b.n	800a930 <MemManage_Handler+0x4>

0800a934 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a934:	b480      	push	{r7}
 800a936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a938:	bf00      	nop
 800a93a:	e7fd      	b.n	800a938 <BusFault_Handler+0x4>

0800a93c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a93c:	b480      	push	{r7}
 800a93e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a940:	bf00      	nop
 800a942:	e7fd      	b.n	800a940 <UsageFault_Handler+0x4>

0800a944 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800a944:	b480      	push	{r7}
 800a946:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800a948:	bf00      	nop
 800a94a:	46bd      	mov	sp, r7
 800a94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a950:	4770      	bx	lr

0800a952 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a952:	b480      	push	{r7}
 800a954:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a956:	bf00      	nop
 800a958:	46bd      	mov	sp, r7
 800a95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95e:	4770      	bx	lr

0800a960 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800a960:	b480      	push	{r7}
 800a962:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800a964:	bf00      	nop
 800a966:	46bd      	mov	sp, r7
 800a968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96c:	4770      	bx	lr

0800a96e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800a96e:	b580      	push	{r7, lr}
 800a970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a972:	f000 fb93 	bl	800b09c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800a976:	bf00      	nop
 800a978:	bd80      	pop	{r7, pc}
	...

0800a97c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800a980:	4802      	ldr	r0, [pc, #8]	@ (800a98c <TIM4_IRQHandler+0x10>)
 800a982:	f004 fa51 	bl	800ee28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800a986:	bf00      	nop
 800a988:	bd80      	pop	{r7, pc}
 800a98a:	bf00      	nop
 800a98c:	20000858 	.word	0x20000858

0800a990 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800a994:	4802      	ldr	r0, [pc, #8]	@ (800a9a0 <DMA2_Stream0_IRQHandler+0x10>)
 800a996:	f001 f977 	bl	800bc88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800a99a:	bf00      	nop
 800a99c:	bd80      	pop	{r7, pc}
 800a99e:	bf00      	nop
 800a9a0:	200003ac 	.word	0x200003ac

0800a9a4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800a9a8:	4802      	ldr	r0, [pc, #8]	@ (800a9b4 <OTG_FS_IRQHandler+0x10>)
 800a9aa:	f002 fb38 	bl	800d01e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800a9ae:	bf00      	nop
 800a9b0:	bd80      	pop	{r7, pc}
 800a9b2:	bf00      	nop
 800a9b4:	20000e14 	.word	0x20000e14

0800a9b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800a9b8:	b480      	push	{r7}
 800a9ba:	af00      	add	r7, sp, #0
  return 1;
 800a9bc:	2301      	movs	r3, #1
}
 800a9be:	4618      	mov	r0, r3
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c6:	4770      	bx	lr

0800a9c8 <_kill>:

int _kill(int pid, int sig)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b082      	sub	sp, #8
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
 800a9d0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800a9d2:	f009 fff3 	bl	80149bc <__errno>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	2216      	movs	r2, #22
 800a9da:	601a      	str	r2, [r3, #0]
  return -1;
 800a9dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	3708      	adds	r7, #8
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	bd80      	pop	{r7, pc}

0800a9e8 <_exit>:

void _exit (int status)
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b082      	sub	sp, #8
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800a9f0:	f04f 31ff 	mov.w	r1, #4294967295
 800a9f4:	6878      	ldr	r0, [r7, #4]
 800a9f6:	f7ff ffe7 	bl	800a9c8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800a9fa:	bf00      	nop
 800a9fc:	e7fd      	b.n	800a9fa <_exit+0x12>

0800a9fe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800a9fe:	b580      	push	{r7, lr}
 800aa00:	b086      	sub	sp, #24
 800aa02:	af00      	add	r7, sp, #0
 800aa04:	60f8      	str	r0, [r7, #12]
 800aa06:	60b9      	str	r1, [r7, #8]
 800aa08:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	617b      	str	r3, [r7, #20]
 800aa0e:	e00a      	b.n	800aa26 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800aa10:	f3af 8000 	nop.w
 800aa14:	4601      	mov	r1, r0
 800aa16:	68bb      	ldr	r3, [r7, #8]
 800aa18:	1c5a      	adds	r2, r3, #1
 800aa1a:	60ba      	str	r2, [r7, #8]
 800aa1c:	b2ca      	uxtb	r2, r1
 800aa1e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800aa20:	697b      	ldr	r3, [r7, #20]
 800aa22:	3301      	adds	r3, #1
 800aa24:	617b      	str	r3, [r7, #20]
 800aa26:	697a      	ldr	r2, [r7, #20]
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	429a      	cmp	r2, r3
 800aa2c:	dbf0      	blt.n	800aa10 <_read+0x12>
  }

  return len;
 800aa2e:	687b      	ldr	r3, [r7, #4]
}
 800aa30:	4618      	mov	r0, r3
 800aa32:	3718      	adds	r7, #24
 800aa34:	46bd      	mov	sp, r7
 800aa36:	bd80      	pop	{r7, pc}

0800aa38 <_close>:
  }
  return len;
}

int _close(int file)
{
 800aa38:	b480      	push	{r7}
 800aa3a:	b083      	sub	sp, #12
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800aa40:	f04f 33ff 	mov.w	r3, #4294967295
}
 800aa44:	4618      	mov	r0, r3
 800aa46:	370c      	adds	r7, #12
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4e:	4770      	bx	lr

0800aa50 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800aa50:	b480      	push	{r7}
 800aa52:	b083      	sub	sp, #12
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
 800aa58:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800aa60:	605a      	str	r2, [r3, #4]
  return 0;
 800aa62:	2300      	movs	r3, #0
}
 800aa64:	4618      	mov	r0, r3
 800aa66:	370c      	adds	r7, #12
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6e:	4770      	bx	lr

0800aa70 <_isatty>:

int _isatty(int file)
{
 800aa70:	b480      	push	{r7}
 800aa72:	b083      	sub	sp, #12
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800aa78:	2301      	movs	r3, #1
}
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	370c      	adds	r7, #12
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa84:	4770      	bx	lr

0800aa86 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800aa86:	b480      	push	{r7}
 800aa88:	b085      	sub	sp, #20
 800aa8a:	af00      	add	r7, sp, #0
 800aa8c:	60f8      	str	r0, [r7, #12]
 800aa8e:	60b9      	str	r1, [r7, #8]
 800aa90:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800aa92:	2300      	movs	r3, #0
}
 800aa94:	4618      	mov	r0, r3
 800aa96:	3714      	adds	r7, #20
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9e:	4770      	bx	lr

0800aaa0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b086      	sub	sp, #24
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800aaa8:	4a14      	ldr	r2, [pc, #80]	@ (800aafc <_sbrk+0x5c>)
 800aaaa:	4b15      	ldr	r3, [pc, #84]	@ (800ab00 <_sbrk+0x60>)
 800aaac:	1ad3      	subs	r3, r2, r3
 800aaae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800aab0:	697b      	ldr	r3, [r7, #20]
 800aab2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800aab4:	4b13      	ldr	r3, [pc, #76]	@ (800ab04 <_sbrk+0x64>)
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d102      	bne.n	800aac2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800aabc:	4b11      	ldr	r3, [pc, #68]	@ (800ab04 <_sbrk+0x64>)
 800aabe:	4a12      	ldr	r2, [pc, #72]	@ (800ab08 <_sbrk+0x68>)
 800aac0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800aac2:	4b10      	ldr	r3, [pc, #64]	@ (800ab04 <_sbrk+0x64>)
 800aac4:	681a      	ldr	r2, [r3, #0]
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	4413      	add	r3, r2
 800aaca:	693a      	ldr	r2, [r7, #16]
 800aacc:	429a      	cmp	r2, r3
 800aace:	d207      	bcs.n	800aae0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800aad0:	f009 ff74 	bl	80149bc <__errno>
 800aad4:	4603      	mov	r3, r0
 800aad6:	220c      	movs	r2, #12
 800aad8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800aada:	f04f 33ff 	mov.w	r3, #4294967295
 800aade:	e009      	b.n	800aaf4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800aae0:	4b08      	ldr	r3, [pc, #32]	@ (800ab04 <_sbrk+0x64>)
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800aae6:	4b07      	ldr	r3, [pc, #28]	@ (800ab04 <_sbrk+0x64>)
 800aae8:	681a      	ldr	r2, [r3, #0]
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	4413      	add	r3, r2
 800aaee:	4a05      	ldr	r2, [pc, #20]	@ (800ab04 <_sbrk+0x64>)
 800aaf0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
}
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	3718      	adds	r7, #24
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	bd80      	pop	{r7, pc}
 800aafc:	20020000 	.word	0x20020000
 800ab00:	00000400 	.word	0x00000400
 800ab04:	2000080c 	.word	0x2000080c
 800ab08:	20001458 	.word	0x20001458

0800ab0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800ab10:	4b06      	ldr	r3, [pc, #24]	@ (800ab2c <SystemInit+0x20>)
 800ab12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab16:	4a05      	ldr	r2, [pc, #20]	@ (800ab2c <SystemInit+0x20>)
 800ab18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800ab1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800ab20:	bf00      	nop
 800ab22:	46bd      	mov	sp, r7
 800ab24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab28:	4770      	bx	lr
 800ab2a:	bf00      	nop
 800ab2c:	e000ed00 	.word	0xe000ed00

0800ab30 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b096      	sub	sp, #88	@ 0x58
 800ab34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800ab36:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	601a      	str	r2, [r3, #0]
 800ab3e:	605a      	str	r2, [r3, #4]
 800ab40:	609a      	str	r2, [r3, #8]
 800ab42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ab44:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800ab48:	2200      	movs	r2, #0
 800ab4a:	601a      	str	r2, [r3, #0]
 800ab4c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800ab4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ab52:	2200      	movs	r2, #0
 800ab54:	601a      	str	r2, [r3, #0]
 800ab56:	605a      	str	r2, [r3, #4]
 800ab58:	609a      	str	r2, [r3, #8]
 800ab5a:	60da      	str	r2, [r3, #12]
 800ab5c:	611a      	str	r2, [r3, #16]
 800ab5e:	615a      	str	r2, [r3, #20]
 800ab60:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800ab62:	1d3b      	adds	r3, r7, #4
 800ab64:	2220      	movs	r2, #32
 800ab66:	2100      	movs	r1, #0
 800ab68:	4618      	mov	r0, r3
 800ab6a:	f009 fed5 	bl	8014918 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800ab6e:	4b3f      	ldr	r3, [pc, #252]	@ (800ac6c <MX_TIM1_Init+0x13c>)
 800ab70:	4a3f      	ldr	r2, [pc, #252]	@ (800ac70 <MX_TIM1_Init+0x140>)
 800ab72:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 800ab74:	4b3d      	ldr	r3, [pc, #244]	@ (800ac6c <MX_TIM1_Init+0x13c>)
 800ab76:	2247      	movs	r2, #71	@ 0x47
 800ab78:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ab7a:	4b3c      	ldr	r3, [pc, #240]	@ (800ac6c <MX_TIM1_Init+0x13c>)
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 800ab80:	4b3a      	ldr	r3, [pc, #232]	@ (800ac6c <MX_TIM1_Init+0x13c>)
 800ab82:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800ab86:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ab88:	4b38      	ldr	r3, [pc, #224]	@ (800ac6c <MX_TIM1_Init+0x13c>)
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800ab8e:	4b37      	ldr	r3, [pc, #220]	@ (800ac6c <MX_TIM1_Init+0x13c>)
 800ab90:	2200      	movs	r2, #0
 800ab92:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ab94:	4b35      	ldr	r3, [pc, #212]	@ (800ac6c <MX_TIM1_Init+0x13c>)
 800ab96:	2200      	movs	r2, #0
 800ab98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800ab9a:	4834      	ldr	r0, [pc, #208]	@ (800ac6c <MX_TIM1_Init+0x13c>)
 800ab9c:	f004 f89c 	bl	800ecd8 <HAL_TIM_Base_Init>
 800aba0:	4603      	mov	r3, r0
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d001      	beq.n	800abaa <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800aba6:	f7ff fc51 	bl	800a44c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800abaa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800abae:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800abb0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800abb4:	4619      	mov	r1, r3
 800abb6:	482d      	ldr	r0, [pc, #180]	@ (800ac6c <MX_TIM1_Init+0x13c>)
 800abb8:	f004 fae8 	bl	800f18c <HAL_TIM_ConfigClockSource>
 800abbc:	4603      	mov	r3, r0
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d001      	beq.n	800abc6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800abc2:	f7ff fc43 	bl	800a44c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800abc6:	4829      	ldr	r0, [pc, #164]	@ (800ac6c <MX_TIM1_Init+0x13c>)
 800abc8:	f004 f8d5 	bl	800ed76 <HAL_TIM_PWM_Init>
 800abcc:	4603      	mov	r3, r0
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d001      	beq.n	800abd6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800abd2:	f7ff fc3b 	bl	800a44c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800abd6:	2300      	movs	r3, #0
 800abd8:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800abda:	2300      	movs	r3, #0
 800abdc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800abde:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800abe2:	4619      	mov	r1, r3
 800abe4:	4821      	ldr	r0, [pc, #132]	@ (800ac6c <MX_TIM1_Init+0x13c>)
 800abe6:	f004 fe77 	bl	800f8d8 <HAL_TIMEx_MasterConfigSynchronization>
 800abea:	4603      	mov	r3, r0
 800abec:	2b00      	cmp	r3, #0
 800abee:	d001      	beq.n	800abf4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800abf0:	f7ff fc2c 	bl	800a44c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800abf4:	2360      	movs	r3, #96	@ 0x60
 800abf6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 500;
 800abf8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800abfc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800abfe:	2300      	movs	r3, #0
 800ac00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800ac02:	2300      	movs	r3, #0
 800ac04:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800ac06:	2300      	movs	r3, #0
 800ac08:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800ac0e:	2300      	movs	r3, #0
 800ac10:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800ac12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ac16:	2200      	movs	r2, #0
 800ac18:	4619      	mov	r1, r3
 800ac1a:	4814      	ldr	r0, [pc, #80]	@ (800ac6c <MX_TIM1_Init+0x13c>)
 800ac1c:	f004 f9f4 	bl	800f008 <HAL_TIM_PWM_ConfigChannel>
 800ac20:	4603      	mov	r3, r0
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d001      	beq.n	800ac2a <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 800ac26:	f7ff fc11 	bl	800a44c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800ac2e:	2300      	movs	r3, #0
 800ac30:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800ac32:	2300      	movs	r3, #0
 800ac34:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800ac36:	2300      	movs	r3, #0
 800ac38:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800ac3e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ac42:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800ac44:	2300      	movs	r3, #0
 800ac46:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800ac48:	1d3b      	adds	r3, r7, #4
 800ac4a:	4619      	mov	r1, r3
 800ac4c:	4807      	ldr	r0, [pc, #28]	@ (800ac6c <MX_TIM1_Init+0x13c>)
 800ac4e:	f004 feb1 	bl	800f9b4 <HAL_TIMEx_ConfigBreakDeadTime>
 800ac52:	4603      	mov	r3, r0
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d001      	beq.n	800ac5c <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 800ac58:	f7ff fbf8 	bl	800a44c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800ac5c:	4803      	ldr	r0, [pc, #12]	@ (800ac6c <MX_TIM1_Init+0x13c>)
 800ac5e:	f000 f895 	bl	800ad8c <HAL_TIM_MspPostInit>

}
 800ac62:	bf00      	nop
 800ac64:	3758      	adds	r7, #88	@ 0x58
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd80      	pop	{r7, pc}
 800ac6a:	bf00      	nop
 800ac6c:	20000810 	.word	0x20000810
 800ac70:	40010000 	.word	0x40010000

0800ac74 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b086      	sub	sp, #24
 800ac78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800ac7a:	f107 0308 	add.w	r3, r7, #8
 800ac7e:	2200      	movs	r2, #0
 800ac80:	601a      	str	r2, [r3, #0]
 800ac82:	605a      	str	r2, [r3, #4]
 800ac84:	609a      	str	r2, [r3, #8]
 800ac86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ac88:	463b      	mov	r3, r7
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	601a      	str	r2, [r3, #0]
 800ac8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800ac90:	4b1d      	ldr	r3, [pc, #116]	@ (800ad08 <MX_TIM4_Init+0x94>)
 800ac92:	4a1e      	ldr	r2, [pc, #120]	@ (800ad0c <MX_TIM4_Init+0x98>)
 800ac94:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 800ac96:	4b1c      	ldr	r3, [pc, #112]	@ (800ad08 <MX_TIM4_Init+0x94>)
 800ac98:	2247      	movs	r2, #71	@ 0x47
 800ac9a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ac9c:	4b1a      	ldr	r3, [pc, #104]	@ (800ad08 <MX_TIM4_Init+0x94>)
 800ac9e:	2200      	movs	r2, #0
 800aca0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 800aca2:	4b19      	ldr	r3, [pc, #100]	@ (800ad08 <MX_TIM4_Init+0x94>)
 800aca4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800aca8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800acaa:	4b17      	ldr	r3, [pc, #92]	@ (800ad08 <MX_TIM4_Init+0x94>)
 800acac:	2200      	movs	r2, #0
 800acae:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800acb0:	4b15      	ldr	r3, [pc, #84]	@ (800ad08 <MX_TIM4_Init+0x94>)
 800acb2:	2200      	movs	r2, #0
 800acb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800acb6:	4814      	ldr	r0, [pc, #80]	@ (800ad08 <MX_TIM4_Init+0x94>)
 800acb8:	f004 f80e 	bl	800ecd8 <HAL_TIM_Base_Init>
 800acbc:	4603      	mov	r3, r0
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d001      	beq.n	800acc6 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800acc2:	f7ff fbc3 	bl	800a44c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800acc6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800acca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800accc:	f107 0308 	add.w	r3, r7, #8
 800acd0:	4619      	mov	r1, r3
 800acd2:	480d      	ldr	r0, [pc, #52]	@ (800ad08 <MX_TIM4_Init+0x94>)
 800acd4:	f004 fa5a 	bl	800f18c <HAL_TIM_ConfigClockSource>
 800acd8:	4603      	mov	r3, r0
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d001      	beq.n	800ace2 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800acde:	f7ff fbb5 	bl	800a44c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ace2:	2300      	movs	r3, #0
 800ace4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ace6:	2300      	movs	r3, #0
 800ace8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800acea:	463b      	mov	r3, r7
 800acec:	4619      	mov	r1, r3
 800acee:	4806      	ldr	r0, [pc, #24]	@ (800ad08 <MX_TIM4_Init+0x94>)
 800acf0:	f004 fdf2 	bl	800f8d8 <HAL_TIMEx_MasterConfigSynchronization>
 800acf4:	4603      	mov	r3, r0
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d001      	beq.n	800acfe <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800acfa:	f7ff fba7 	bl	800a44c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800acfe:	bf00      	nop
 800ad00:	3718      	adds	r7, #24
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bd80      	pop	{r7, pc}
 800ad06:	bf00      	nop
 800ad08:	20000858 	.word	0x20000858
 800ad0c:	40000800 	.word	0x40000800

0800ad10 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b084      	sub	sp, #16
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	4a18      	ldr	r2, [pc, #96]	@ (800ad80 <HAL_TIM_Base_MspInit+0x70>)
 800ad1e:	4293      	cmp	r3, r2
 800ad20:	d10e      	bne.n	800ad40 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800ad22:	2300      	movs	r3, #0
 800ad24:	60fb      	str	r3, [r7, #12]
 800ad26:	4b17      	ldr	r3, [pc, #92]	@ (800ad84 <HAL_TIM_Base_MspInit+0x74>)
 800ad28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad2a:	4a16      	ldr	r2, [pc, #88]	@ (800ad84 <HAL_TIM_Base_MspInit+0x74>)
 800ad2c:	f043 0301 	orr.w	r3, r3, #1
 800ad30:	6453      	str	r3, [r2, #68]	@ 0x44
 800ad32:	4b14      	ldr	r3, [pc, #80]	@ (800ad84 <HAL_TIM_Base_MspInit+0x74>)
 800ad34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad36:	f003 0301 	and.w	r3, r3, #1
 800ad3a:	60fb      	str	r3, [r7, #12]
 800ad3c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800ad3e:	e01a      	b.n	800ad76 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM4)
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	4a10      	ldr	r2, [pc, #64]	@ (800ad88 <HAL_TIM_Base_MspInit+0x78>)
 800ad46:	4293      	cmp	r3, r2
 800ad48:	d115      	bne.n	800ad76 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	60bb      	str	r3, [r7, #8]
 800ad4e:	4b0d      	ldr	r3, [pc, #52]	@ (800ad84 <HAL_TIM_Base_MspInit+0x74>)
 800ad50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad52:	4a0c      	ldr	r2, [pc, #48]	@ (800ad84 <HAL_TIM_Base_MspInit+0x74>)
 800ad54:	f043 0304 	orr.w	r3, r3, #4
 800ad58:	6413      	str	r3, [r2, #64]	@ 0x40
 800ad5a:	4b0a      	ldr	r3, [pc, #40]	@ (800ad84 <HAL_TIM_Base_MspInit+0x74>)
 800ad5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad5e:	f003 0304 	and.w	r3, r3, #4
 800ad62:	60bb      	str	r3, [r7, #8]
 800ad64:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800ad66:	2200      	movs	r2, #0
 800ad68:	2100      	movs	r1, #0
 800ad6a:	201e      	movs	r0, #30
 800ad6c:	f000 fea7 	bl	800babe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800ad70:	201e      	movs	r0, #30
 800ad72:	f000 fec0 	bl	800baf6 <HAL_NVIC_EnableIRQ>
}
 800ad76:	bf00      	nop
 800ad78:	3710      	adds	r7, #16
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd80      	pop	{r7, pc}
 800ad7e:	bf00      	nop
 800ad80:	40010000 	.word	0x40010000
 800ad84:	40023800 	.word	0x40023800
 800ad88:	40000800 	.word	0x40000800

0800ad8c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b088      	sub	sp, #32
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ad94:	f107 030c 	add.w	r3, r7, #12
 800ad98:	2200      	movs	r2, #0
 800ad9a:	601a      	str	r2, [r3, #0]
 800ad9c:	605a      	str	r2, [r3, #4]
 800ad9e:	609a      	str	r2, [r3, #8]
 800ada0:	60da      	str	r2, [r3, #12]
 800ada2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	4a12      	ldr	r2, [pc, #72]	@ (800adf4 <HAL_TIM_MspPostInit+0x68>)
 800adaa:	4293      	cmp	r3, r2
 800adac:	d11e      	bne.n	800adec <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800adae:	2300      	movs	r3, #0
 800adb0:	60bb      	str	r3, [r7, #8]
 800adb2:	4b11      	ldr	r3, [pc, #68]	@ (800adf8 <HAL_TIM_MspPostInit+0x6c>)
 800adb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800adb6:	4a10      	ldr	r2, [pc, #64]	@ (800adf8 <HAL_TIM_MspPostInit+0x6c>)
 800adb8:	f043 0301 	orr.w	r3, r3, #1
 800adbc:	6313      	str	r3, [r2, #48]	@ 0x30
 800adbe:	4b0e      	ldr	r3, [pc, #56]	@ (800adf8 <HAL_TIM_MspPostInit+0x6c>)
 800adc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800adc2:	f003 0301 	and.w	r3, r3, #1
 800adc6:	60bb      	str	r3, [r7, #8]
 800adc8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = VACUUM_CTRL_Pin;
 800adca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800adce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800add0:	2302      	movs	r3, #2
 800add2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800add4:	2300      	movs	r3, #0
 800add6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800add8:	2300      	movs	r3, #0
 800adda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800addc:	2301      	movs	r3, #1
 800adde:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VACUUM_CTRL_GPIO_Port, &GPIO_InitStruct);
 800ade0:	f107 030c 	add.w	r3, r7, #12
 800ade4:	4619      	mov	r1, r3
 800ade6:	4805      	ldr	r0, [pc, #20]	@ (800adfc <HAL_TIM_MspPostInit+0x70>)
 800ade8:	f001 f98a 	bl	800c100 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800adec:	bf00      	nop
 800adee:	3720      	adds	r7, #32
 800adf0:	46bd      	mov	sp, r7
 800adf2:	bd80      	pop	{r7, pc}
 800adf4:	40010000 	.word	0x40010000
 800adf8:	40023800 	.word	0x40023800
 800adfc:	40020000 	.word	0x40020000

0800ae00 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart6;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800ae04:	4b11      	ldr	r3, [pc, #68]	@ (800ae4c <MX_USART2_UART_Init+0x4c>)
 800ae06:	4a12      	ldr	r2, [pc, #72]	@ (800ae50 <MX_USART2_UART_Init+0x50>)
 800ae08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800ae0a:	4b10      	ldr	r3, [pc, #64]	@ (800ae4c <MX_USART2_UART_Init+0x4c>)
 800ae0c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800ae10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800ae12:	4b0e      	ldr	r3, [pc, #56]	@ (800ae4c <MX_USART2_UART_Init+0x4c>)
 800ae14:	2200      	movs	r2, #0
 800ae16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800ae18:	4b0c      	ldr	r3, [pc, #48]	@ (800ae4c <MX_USART2_UART_Init+0x4c>)
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800ae1e:	4b0b      	ldr	r3, [pc, #44]	@ (800ae4c <MX_USART2_UART_Init+0x4c>)
 800ae20:	2200      	movs	r2, #0
 800ae22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800ae24:	4b09      	ldr	r3, [pc, #36]	@ (800ae4c <MX_USART2_UART_Init+0x4c>)
 800ae26:	220c      	movs	r2, #12
 800ae28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800ae2a:	4b08      	ldr	r3, [pc, #32]	@ (800ae4c <MX_USART2_UART_Init+0x4c>)
 800ae2c:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800ae30:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800ae32:	4b06      	ldr	r3, [pc, #24]	@ (800ae4c <MX_USART2_UART_Init+0x4c>)
 800ae34:	2200      	movs	r2, #0
 800ae36:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800ae38:	4804      	ldr	r0, [pc, #16]	@ (800ae4c <MX_USART2_UART_Init+0x4c>)
 800ae3a:	f004 fe21 	bl	800fa80 <HAL_UART_Init>
 800ae3e:	4603      	mov	r3, r0
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d001      	beq.n	800ae48 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 800ae44:	f7ff fb02 	bl	800a44c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800ae48:	bf00      	nop
 800ae4a:	bd80      	pop	{r7, pc}
 800ae4c:	200008a0 	.word	0x200008a0
 800ae50:	40004400 	.word	0x40004400

0800ae54 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800ae58:	4b11      	ldr	r3, [pc, #68]	@ (800aea0 <MX_USART6_UART_Init+0x4c>)
 800ae5a:	4a12      	ldr	r2, [pc, #72]	@ (800aea4 <MX_USART6_UART_Init+0x50>)
 800ae5c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800ae5e:	4b10      	ldr	r3, [pc, #64]	@ (800aea0 <MX_USART6_UART_Init+0x4c>)
 800ae60:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800ae64:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800ae66:	4b0e      	ldr	r3, [pc, #56]	@ (800aea0 <MX_USART6_UART_Init+0x4c>)
 800ae68:	2200      	movs	r2, #0
 800ae6a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800ae6c:	4b0c      	ldr	r3, [pc, #48]	@ (800aea0 <MX_USART6_UART_Init+0x4c>)
 800ae6e:	2200      	movs	r2, #0
 800ae70:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800ae72:	4b0b      	ldr	r3, [pc, #44]	@ (800aea0 <MX_USART6_UART_Init+0x4c>)
 800ae74:	2200      	movs	r2, #0
 800ae76:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800ae78:	4b09      	ldr	r3, [pc, #36]	@ (800aea0 <MX_USART6_UART_Init+0x4c>)
 800ae7a:	220c      	movs	r2, #12
 800ae7c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ae7e:	4b08      	ldr	r3, [pc, #32]	@ (800aea0 <MX_USART6_UART_Init+0x4c>)
 800ae80:	2200      	movs	r2, #0
 800ae82:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800ae84:	4b06      	ldr	r3, [pc, #24]	@ (800aea0 <MX_USART6_UART_Init+0x4c>)
 800ae86:	2200      	movs	r2, #0
 800ae88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800ae8a:	4805      	ldr	r0, [pc, #20]	@ (800aea0 <MX_USART6_UART_Init+0x4c>)
 800ae8c:	f004 fdf8 	bl	800fa80 <HAL_UART_Init>
 800ae90:	4603      	mov	r3, r0
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d001      	beq.n	800ae9a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800ae96:	f7ff fad9 	bl	800a44c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800ae9a:	bf00      	nop
 800ae9c:	bd80      	pop	{r7, pc}
 800ae9e:	bf00      	nop
 800aea0:	200008e8 	.word	0x200008e8
 800aea4:	40011400 	.word	0x40011400

0800aea8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b08c      	sub	sp, #48	@ 0x30
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aeb0:	f107 031c 	add.w	r3, r7, #28
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	601a      	str	r2, [r3, #0]
 800aeb8:	605a      	str	r2, [r3, #4]
 800aeba:	609a      	str	r2, [r3, #8]
 800aebc:	60da      	str	r2, [r3, #12]
 800aebe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	4a32      	ldr	r2, [pc, #200]	@ (800af90 <HAL_UART_MspInit+0xe8>)
 800aec6:	4293      	cmp	r3, r2
 800aec8:	d12c      	bne.n	800af24 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800aeca:	2300      	movs	r3, #0
 800aecc:	61bb      	str	r3, [r7, #24]
 800aece:	4b31      	ldr	r3, [pc, #196]	@ (800af94 <HAL_UART_MspInit+0xec>)
 800aed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aed2:	4a30      	ldr	r2, [pc, #192]	@ (800af94 <HAL_UART_MspInit+0xec>)
 800aed4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800aed8:	6413      	str	r3, [r2, #64]	@ 0x40
 800aeda:	4b2e      	ldr	r3, [pc, #184]	@ (800af94 <HAL_UART_MspInit+0xec>)
 800aedc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aede:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aee2:	61bb      	str	r3, [r7, #24]
 800aee4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800aee6:	2300      	movs	r3, #0
 800aee8:	617b      	str	r3, [r7, #20]
 800aeea:	4b2a      	ldr	r3, [pc, #168]	@ (800af94 <HAL_UART_MspInit+0xec>)
 800aeec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aeee:	4a29      	ldr	r2, [pc, #164]	@ (800af94 <HAL_UART_MspInit+0xec>)
 800aef0:	f043 0308 	orr.w	r3, r3, #8
 800aef4:	6313      	str	r3, [r2, #48]	@ 0x30
 800aef6:	4b27      	ldr	r3, [pc, #156]	@ (800af94 <HAL_UART_MspInit+0xec>)
 800aef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aefa:	f003 0308 	and.w	r3, r3, #8
 800aefe:	617b      	str	r3, [r7, #20]
 800af00:	697b      	ldr	r3, [r7, #20]
    PD3     ------> USART2_CTS
    PD4     ------> USART2_RTS
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800af02:	2378      	movs	r3, #120	@ 0x78
 800af04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800af06:	2302      	movs	r3, #2
 800af08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af0a:	2300      	movs	r3, #0
 800af0c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800af0e:	2303      	movs	r3, #3
 800af10:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800af12:	2307      	movs	r3, #7
 800af14:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800af16:	f107 031c 	add.w	r3, r7, #28
 800af1a:	4619      	mov	r1, r3
 800af1c:	481e      	ldr	r0, [pc, #120]	@ (800af98 <HAL_UART_MspInit+0xf0>)
 800af1e:	f001 f8ef 	bl	800c100 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800af22:	e030      	b.n	800af86 <HAL_UART_MspInit+0xde>
  else if(uartHandle->Instance==USART6)
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	4a1c      	ldr	r2, [pc, #112]	@ (800af9c <HAL_UART_MspInit+0xf4>)
 800af2a:	4293      	cmp	r3, r2
 800af2c:	d12b      	bne.n	800af86 <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART6_CLK_ENABLE();
 800af2e:	2300      	movs	r3, #0
 800af30:	613b      	str	r3, [r7, #16]
 800af32:	4b18      	ldr	r3, [pc, #96]	@ (800af94 <HAL_UART_MspInit+0xec>)
 800af34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af36:	4a17      	ldr	r2, [pc, #92]	@ (800af94 <HAL_UART_MspInit+0xec>)
 800af38:	f043 0320 	orr.w	r3, r3, #32
 800af3c:	6453      	str	r3, [r2, #68]	@ 0x44
 800af3e:	4b15      	ldr	r3, [pc, #84]	@ (800af94 <HAL_UART_MspInit+0xec>)
 800af40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af42:	f003 0320 	and.w	r3, r3, #32
 800af46:	613b      	str	r3, [r7, #16]
 800af48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800af4a:	2300      	movs	r3, #0
 800af4c:	60fb      	str	r3, [r7, #12]
 800af4e:	4b11      	ldr	r3, [pc, #68]	@ (800af94 <HAL_UART_MspInit+0xec>)
 800af50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af52:	4a10      	ldr	r2, [pc, #64]	@ (800af94 <HAL_UART_MspInit+0xec>)
 800af54:	f043 0304 	orr.w	r3, r3, #4
 800af58:	6313      	str	r3, [r2, #48]	@ 0x30
 800af5a:	4b0e      	ldr	r3, [pc, #56]	@ (800af94 <HAL_UART_MspInit+0xec>)
 800af5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af5e:	f003 0304 	and.w	r3, r3, #4
 800af62:	60fb      	str	r3, [r7, #12]
 800af64:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800af66:	23c0      	movs	r3, #192	@ 0xc0
 800af68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800af6a:	2302      	movs	r3, #2
 800af6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af6e:	2300      	movs	r3, #0
 800af70:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800af72:	2303      	movs	r3, #3
 800af74:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800af76:	2308      	movs	r3, #8
 800af78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800af7a:	f107 031c 	add.w	r3, r7, #28
 800af7e:	4619      	mov	r1, r3
 800af80:	4807      	ldr	r0, [pc, #28]	@ (800afa0 <HAL_UART_MspInit+0xf8>)
 800af82:	f001 f8bd 	bl	800c100 <HAL_GPIO_Init>
}
 800af86:	bf00      	nop
 800af88:	3730      	adds	r7, #48	@ 0x30
 800af8a:	46bd      	mov	sp, r7
 800af8c:	bd80      	pop	{r7, pc}
 800af8e:	bf00      	nop
 800af90:	40004400 	.word	0x40004400
 800af94:	40023800 	.word	0x40023800
 800af98:	40020c00 	.word	0x40020c00
 800af9c:	40011400 	.word	0x40011400
 800afa0:	40020800 	.word	0x40020800

0800afa4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800afa4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800afdc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800afa8:	f7ff fdb0 	bl	800ab0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800afac:	480c      	ldr	r0, [pc, #48]	@ (800afe0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800afae:	490d      	ldr	r1, [pc, #52]	@ (800afe4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800afb0:	4a0d      	ldr	r2, [pc, #52]	@ (800afe8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800afb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800afb4:	e002      	b.n	800afbc <LoopCopyDataInit>

0800afb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800afb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800afb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800afba:	3304      	adds	r3, #4

0800afbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800afbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800afbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800afc0:	d3f9      	bcc.n	800afb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800afc2:	4a0a      	ldr	r2, [pc, #40]	@ (800afec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800afc4:	4c0a      	ldr	r4, [pc, #40]	@ (800aff0 <LoopFillZerobss+0x22>)
  movs r3, #0
 800afc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 800afc8:	e001      	b.n	800afce <LoopFillZerobss>

0800afca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800afca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800afcc:	3204      	adds	r2, #4

0800afce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800afce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800afd0:	d3fb      	bcc.n	800afca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800afd2:	f009 fcf9 	bl	80149c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800afd6:	f7ff f8c5 	bl	800a164 <main>
  bx  lr    
 800afda:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800afdc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800afe0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800afe4:	200002f0 	.word	0x200002f0
  ldr r2, =_sidata
 800afe8:	08017bac 	.word	0x08017bac
  ldr r2, =_sbss
 800afec:	200002f0 	.word	0x200002f0
  ldr r4, =_ebss
 800aff0:	20001458 	.word	0x20001458

0800aff4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800aff4:	e7fe      	b.n	800aff4 <ADC_IRQHandler>
	...

0800aff8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800affc:	4b0e      	ldr	r3, [pc, #56]	@ (800b038 <HAL_Init+0x40>)
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	4a0d      	ldr	r2, [pc, #52]	@ (800b038 <HAL_Init+0x40>)
 800b002:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800b006:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800b008:	4b0b      	ldr	r3, [pc, #44]	@ (800b038 <HAL_Init+0x40>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	4a0a      	ldr	r2, [pc, #40]	@ (800b038 <HAL_Init+0x40>)
 800b00e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800b012:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800b014:	4b08      	ldr	r3, [pc, #32]	@ (800b038 <HAL_Init+0x40>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	4a07      	ldr	r2, [pc, #28]	@ (800b038 <HAL_Init+0x40>)
 800b01a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b01e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b020:	2003      	movs	r0, #3
 800b022:	f000 fd41 	bl	800baa8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800b026:	2000      	movs	r0, #0
 800b028:	f000 f808 	bl	800b03c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800b02c:	f7ff fc4e 	bl	800a8cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800b030:	2300      	movs	r3, #0
}
 800b032:	4618      	mov	r0, r3
 800b034:	bd80      	pop	{r7, pc}
 800b036:	bf00      	nop
 800b038:	40023c00 	.word	0x40023c00

0800b03c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b082      	sub	sp, #8
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800b044:	4b12      	ldr	r3, [pc, #72]	@ (800b090 <HAL_InitTick+0x54>)
 800b046:	681a      	ldr	r2, [r3, #0]
 800b048:	4b12      	ldr	r3, [pc, #72]	@ (800b094 <HAL_InitTick+0x58>)
 800b04a:	781b      	ldrb	r3, [r3, #0]
 800b04c:	4619      	mov	r1, r3
 800b04e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800b052:	fbb3 f3f1 	udiv	r3, r3, r1
 800b056:	fbb2 f3f3 	udiv	r3, r2, r3
 800b05a:	4618      	mov	r0, r3
 800b05c:	f000 fd59 	bl	800bb12 <HAL_SYSTICK_Config>
 800b060:	4603      	mov	r3, r0
 800b062:	2b00      	cmp	r3, #0
 800b064:	d001      	beq.n	800b06a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800b066:	2301      	movs	r3, #1
 800b068:	e00e      	b.n	800b088 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	2b0f      	cmp	r3, #15
 800b06e:	d80a      	bhi.n	800b086 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800b070:	2200      	movs	r2, #0
 800b072:	6879      	ldr	r1, [r7, #4]
 800b074:	f04f 30ff 	mov.w	r0, #4294967295
 800b078:	f000 fd21 	bl	800babe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800b07c:	4a06      	ldr	r2, [pc, #24]	@ (800b098 <HAL_InitTick+0x5c>)
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800b082:	2300      	movs	r3, #0
 800b084:	e000      	b.n	800b088 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800b086:	2301      	movs	r3, #1
}
 800b088:	4618      	mov	r0, r3
 800b08a:	3708      	adds	r7, #8
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bd80      	pop	{r7, pc}
 800b090:	2000000c 	.word	0x2000000c
 800b094:	20000014 	.word	0x20000014
 800b098:	20000010 	.word	0x20000010

0800b09c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b09c:	b480      	push	{r7}
 800b09e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800b0a0:	4b06      	ldr	r3, [pc, #24]	@ (800b0bc <HAL_IncTick+0x20>)
 800b0a2:	781b      	ldrb	r3, [r3, #0]
 800b0a4:	461a      	mov	r2, r3
 800b0a6:	4b06      	ldr	r3, [pc, #24]	@ (800b0c0 <HAL_IncTick+0x24>)
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	4413      	add	r3, r2
 800b0ac:	4a04      	ldr	r2, [pc, #16]	@ (800b0c0 <HAL_IncTick+0x24>)
 800b0ae:	6013      	str	r3, [r2, #0]
}
 800b0b0:	bf00      	nop
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b8:	4770      	bx	lr
 800b0ba:	bf00      	nop
 800b0bc:	20000014 	.word	0x20000014
 800b0c0:	20000930 	.word	0x20000930

0800b0c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b0c4:	b480      	push	{r7}
 800b0c6:	af00      	add	r7, sp, #0
  return uwTick;
 800b0c8:	4b03      	ldr	r3, [pc, #12]	@ (800b0d8 <HAL_GetTick+0x14>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
}
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d4:	4770      	bx	lr
 800b0d6:	bf00      	nop
 800b0d8:	20000930 	.word	0x20000930

0800b0dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b084      	sub	sp, #16
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b0e4:	f7ff ffee 	bl	800b0c4 <HAL_GetTick>
 800b0e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0f4:	d005      	beq.n	800b102 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800b0f6:	4b0a      	ldr	r3, [pc, #40]	@ (800b120 <HAL_Delay+0x44>)
 800b0f8:	781b      	ldrb	r3, [r3, #0]
 800b0fa:	461a      	mov	r2, r3
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	4413      	add	r3, r2
 800b100:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800b102:	bf00      	nop
 800b104:	f7ff ffde 	bl	800b0c4 <HAL_GetTick>
 800b108:	4602      	mov	r2, r0
 800b10a:	68bb      	ldr	r3, [r7, #8]
 800b10c:	1ad3      	subs	r3, r2, r3
 800b10e:	68fa      	ldr	r2, [r7, #12]
 800b110:	429a      	cmp	r2, r3
 800b112:	d8f7      	bhi.n	800b104 <HAL_Delay+0x28>
  {
  }
}
 800b114:	bf00      	nop
 800b116:	bf00      	nop
 800b118:	3710      	adds	r7, #16
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bd80      	pop	{r7, pc}
 800b11e:	bf00      	nop
 800b120:	20000014 	.word	0x20000014

0800b124 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b084      	sub	sp, #16
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b12c:	2300      	movs	r3, #0
 800b12e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d101      	bne.n	800b13a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800b136:	2301      	movs	r3, #1
 800b138:	e033      	b.n	800b1a2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d109      	bne.n	800b156 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800b142:	6878      	ldr	r0, [r7, #4]
 800b144:	f7fe f896 	bl	8009274 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2200      	movs	r2, #0
 800b14c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	2200      	movs	r2, #0
 800b152:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b15a:	f003 0310 	and.w	r3, r3, #16
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d118      	bne.n	800b194 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b166:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800b16a:	f023 0302 	bic.w	r3, r3, #2
 800b16e:	f043 0202 	orr.w	r2, r3, #2
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800b176:	6878      	ldr	r0, [r7, #4]
 800b178:	f000 faca 	bl	800b710 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2200      	movs	r2, #0
 800b180:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b186:	f023 0303 	bic.w	r3, r3, #3
 800b18a:	f043 0201 	orr.w	r2, r3, #1
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	641a      	str	r2, [r3, #64]	@ 0x40
 800b192:	e001      	b.n	800b198 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800b194:	2301      	movs	r3, #1
 800b196:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	2200      	movs	r2, #0
 800b19c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800b1a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	3710      	adds	r7, #16
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bd80      	pop	{r7, pc}
	...

0800b1ac <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800b1ac:	b480      	push	{r7}
 800b1ae:	b085      	sub	sp, #20
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b1be:	2b01      	cmp	r3, #1
 800b1c0:	d101      	bne.n	800b1c6 <HAL_ADC_Start+0x1a>
 800b1c2:	2302      	movs	r3, #2
 800b1c4:	e097      	b.n	800b2f6 <HAL_ADC_Start+0x14a>
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	2201      	movs	r2, #1
 800b1ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	689b      	ldr	r3, [r3, #8]
 800b1d4:	f003 0301 	and.w	r3, r3, #1
 800b1d8:	2b01      	cmp	r3, #1
 800b1da:	d018      	beq.n	800b20e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	689a      	ldr	r2, [r3, #8]
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	f042 0201 	orr.w	r2, r2, #1
 800b1ea:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800b1ec:	4b45      	ldr	r3, [pc, #276]	@ (800b304 <HAL_ADC_Start+0x158>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	4a45      	ldr	r2, [pc, #276]	@ (800b308 <HAL_ADC_Start+0x15c>)
 800b1f2:	fba2 2303 	umull	r2, r3, r2, r3
 800b1f6:	0c9a      	lsrs	r2, r3, #18
 800b1f8:	4613      	mov	r3, r2
 800b1fa:	005b      	lsls	r3, r3, #1
 800b1fc:	4413      	add	r3, r2
 800b1fe:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800b200:	e002      	b.n	800b208 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800b202:	68bb      	ldr	r3, [r7, #8]
 800b204:	3b01      	subs	r3, #1
 800b206:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800b208:	68bb      	ldr	r3, [r7, #8]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d1f9      	bne.n	800b202 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	689b      	ldr	r3, [r3, #8]
 800b214:	f003 0301 	and.w	r3, r3, #1
 800b218:	2b01      	cmp	r3, #1
 800b21a:	d15f      	bne.n	800b2dc <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b220:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800b224:	f023 0301 	bic.w	r3, r3, #1
 800b228:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	685b      	ldr	r3, [r3, #4]
 800b236:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d007      	beq.n	800b24e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b242:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800b246:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b252:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b256:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b25a:	d106      	bne.n	800b26a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b260:	f023 0206 	bic.w	r2, r3, #6
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	645a      	str	r2, [r3, #68]	@ 0x44
 800b268:	e002      	b.n	800b270 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	2200      	movs	r2, #0
 800b26e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2200      	movs	r2, #0
 800b274:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800b278:	4b24      	ldr	r3, [pc, #144]	@ (800b30c <HAL_ADC_Start+0x160>)
 800b27a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800b284:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	685b      	ldr	r3, [r3, #4]
 800b28a:	f003 031f 	and.w	r3, r3, #31
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d10f      	bne.n	800b2b2 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	689b      	ldr	r3, [r3, #8]
 800b298:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d129      	bne.n	800b2f4 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	689a      	ldr	r2, [r3, #8]
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800b2ae:	609a      	str	r2, [r3, #8]
 800b2b0:	e020      	b.n	800b2f4 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	4a16      	ldr	r2, [pc, #88]	@ (800b310 <HAL_ADC_Start+0x164>)
 800b2b8:	4293      	cmp	r3, r2
 800b2ba:	d11b      	bne.n	800b2f4 <HAL_ADC_Start+0x148>
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	689b      	ldr	r3, [r3, #8]
 800b2c2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d114      	bne.n	800b2f4 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	689a      	ldr	r2, [r3, #8]
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800b2d8:	609a      	str	r2, [r3, #8]
 800b2da:	e00b      	b.n	800b2f4 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2e0:	f043 0210 	orr.w	r2, r3, #16
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b2ec:	f043 0201 	orr.w	r2, r3, #1
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800b2f4:	2300      	movs	r3, #0
}
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	3714      	adds	r7, #20
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b300:	4770      	bx	lr
 800b302:	bf00      	nop
 800b304:	2000000c 	.word	0x2000000c
 800b308:	431bde83 	.word	0x431bde83
 800b30c:	40012300 	.word	0x40012300
 800b310:	40012000 	.word	0x40012000

0800b314 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800b314:	b480      	push	{r7}
 800b316:	b083      	sub	sp, #12
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b322:	2b01      	cmp	r3, #1
 800b324:	d101      	bne.n	800b32a <HAL_ADC_Stop+0x16>
 800b326:	2302      	movs	r3, #2
 800b328:	e021      	b.n	800b36e <HAL_ADC_Stop+0x5a>
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	2201      	movs	r2, #1
 800b32e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	689a      	ldr	r2, [r3, #8]
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	f022 0201 	bic.w	r2, r2, #1
 800b340:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	689b      	ldr	r3, [r3, #8]
 800b348:	f003 0301 	and.w	r3, r3, #1
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d109      	bne.n	800b364 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b354:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800b358:	f023 0301 	bic.w	r3, r3, #1
 800b35c:	f043 0201 	orr.w	r2, r3, #1
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2200      	movs	r2, #0
 800b368:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800b36c:	2300      	movs	r3, #0
}
 800b36e:	4618      	mov	r0, r3
 800b370:	370c      	adds	r7, #12
 800b372:	46bd      	mov	sp, r7
 800b374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b378:	4770      	bx	lr

0800b37a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800b37a:	b580      	push	{r7, lr}
 800b37c:	b084      	sub	sp, #16
 800b37e:	af00      	add	r7, sp, #0
 800b380:	6078      	str	r0, [r7, #4]
 800b382:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800b384:	2300      	movs	r3, #0
 800b386:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	689b      	ldr	r3, [r3, #8]
 800b38e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b392:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b396:	d113      	bne.n	800b3c0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	689b      	ldr	r3, [r3, #8]
 800b39e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800b3a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b3a6:	d10b      	bne.n	800b3c0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b3ac:	f043 0220 	orr.w	r2, r3, #32
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800b3bc:	2301      	movs	r3, #1
 800b3be:	e063      	b.n	800b488 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800b3c0:	f7ff fe80 	bl	800b0c4 <HAL_GetTick>
 800b3c4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800b3c6:	e021      	b.n	800b40c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3ce:	d01d      	beq.n	800b40c <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d007      	beq.n	800b3e6 <HAL_ADC_PollForConversion+0x6c>
 800b3d6:	f7ff fe75 	bl	800b0c4 <HAL_GetTick>
 800b3da:	4602      	mov	r2, r0
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	1ad3      	subs	r3, r2, r3
 800b3e0:	683a      	ldr	r2, [r7, #0]
 800b3e2:	429a      	cmp	r2, r3
 800b3e4:	d212      	bcs.n	800b40c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	f003 0302 	and.w	r3, r3, #2
 800b3f0:	2b02      	cmp	r3, #2
 800b3f2:	d00b      	beq.n	800b40c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b3f8:	f043 0204 	orr.w	r2, r3, #4
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2200      	movs	r2, #0
 800b404:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 800b408:	2303      	movs	r3, #3
 800b40a:	e03d      	b.n	800b488 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	f003 0302 	and.w	r3, r3, #2
 800b416:	2b02      	cmp	r3, #2
 800b418:	d1d6      	bne.n	800b3c8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	f06f 0212 	mvn.w	r2, #18
 800b422:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b428:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	689b      	ldr	r3, [r3, #8]
 800b436:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d123      	bne.n	800b486 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800b442:	2b00      	cmp	r3, #0
 800b444:	d11f      	bne.n	800b486 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b44c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800b450:	2b00      	cmp	r3, #0
 800b452:	d006      	beq.n	800b462 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	689b      	ldr	r3, [r3, #8]
 800b45a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d111      	bne.n	800b486 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b466:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b472:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b476:	2b00      	cmp	r3, #0
 800b478:	d105      	bne.n	800b486 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b47e:	f043 0201 	orr.w	r2, r3, #1
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800b486:	2300      	movs	r3, #0
}
 800b488:	4618      	mov	r0, r3
 800b48a:	3710      	adds	r7, #16
 800b48c:	46bd      	mov	sp, r7
 800b48e:	bd80      	pop	{r7, pc}

0800b490 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800b490:	b480      	push	{r7}
 800b492:	b083      	sub	sp, #12
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800b49e:	4618      	mov	r0, r3
 800b4a0:	370c      	adds	r7, #12
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a8:	4770      	bx	lr
	...

0800b4ac <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800b4ac:	b480      	push	{r7}
 800b4ae:	b085      	sub	sp, #20
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
 800b4b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b4c0:	2b01      	cmp	r3, #1
 800b4c2:	d101      	bne.n	800b4c8 <HAL_ADC_ConfigChannel+0x1c>
 800b4c4:	2302      	movs	r3, #2
 800b4c6:	e113      	b.n	800b6f0 <HAL_ADC_ConfigChannel+0x244>
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	2201      	movs	r2, #1
 800b4cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800b4d0:	683b      	ldr	r3, [r7, #0]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	2b09      	cmp	r3, #9
 800b4d6:	d925      	bls.n	800b524 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	68d9      	ldr	r1, [r3, #12]
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	b29b      	uxth	r3, r3
 800b4e4:	461a      	mov	r2, r3
 800b4e6:	4613      	mov	r3, r2
 800b4e8:	005b      	lsls	r3, r3, #1
 800b4ea:	4413      	add	r3, r2
 800b4ec:	3b1e      	subs	r3, #30
 800b4ee:	2207      	movs	r2, #7
 800b4f0:	fa02 f303 	lsl.w	r3, r2, r3
 800b4f4:	43da      	mvns	r2, r3
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	400a      	ands	r2, r1
 800b4fc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	68d9      	ldr	r1, [r3, #12]
 800b504:	683b      	ldr	r3, [r7, #0]
 800b506:	689a      	ldr	r2, [r3, #8]
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	b29b      	uxth	r3, r3
 800b50e:	4618      	mov	r0, r3
 800b510:	4603      	mov	r3, r0
 800b512:	005b      	lsls	r3, r3, #1
 800b514:	4403      	add	r3, r0
 800b516:	3b1e      	subs	r3, #30
 800b518:	409a      	lsls	r2, r3
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	430a      	orrs	r2, r1
 800b520:	60da      	str	r2, [r3, #12]
 800b522:	e022      	b.n	800b56a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	6919      	ldr	r1, [r3, #16]
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	b29b      	uxth	r3, r3
 800b530:	461a      	mov	r2, r3
 800b532:	4613      	mov	r3, r2
 800b534:	005b      	lsls	r3, r3, #1
 800b536:	4413      	add	r3, r2
 800b538:	2207      	movs	r2, #7
 800b53a:	fa02 f303 	lsl.w	r3, r2, r3
 800b53e:	43da      	mvns	r2, r3
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	400a      	ands	r2, r1
 800b546:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	6919      	ldr	r1, [r3, #16]
 800b54e:	683b      	ldr	r3, [r7, #0]
 800b550:	689a      	ldr	r2, [r3, #8]
 800b552:	683b      	ldr	r3, [r7, #0]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	b29b      	uxth	r3, r3
 800b558:	4618      	mov	r0, r3
 800b55a:	4603      	mov	r3, r0
 800b55c:	005b      	lsls	r3, r3, #1
 800b55e:	4403      	add	r3, r0
 800b560:	409a      	lsls	r2, r3
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	430a      	orrs	r2, r1
 800b568:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	685b      	ldr	r3, [r3, #4]
 800b56e:	2b06      	cmp	r3, #6
 800b570:	d824      	bhi.n	800b5bc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	685a      	ldr	r2, [r3, #4]
 800b57c:	4613      	mov	r3, r2
 800b57e:	009b      	lsls	r3, r3, #2
 800b580:	4413      	add	r3, r2
 800b582:	3b05      	subs	r3, #5
 800b584:	221f      	movs	r2, #31
 800b586:	fa02 f303 	lsl.w	r3, r2, r3
 800b58a:	43da      	mvns	r2, r3
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	400a      	ands	r2, r1
 800b592:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	b29b      	uxth	r3, r3
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	683b      	ldr	r3, [r7, #0]
 800b5a4:	685a      	ldr	r2, [r3, #4]
 800b5a6:	4613      	mov	r3, r2
 800b5a8:	009b      	lsls	r3, r3, #2
 800b5aa:	4413      	add	r3, r2
 800b5ac:	3b05      	subs	r3, #5
 800b5ae:	fa00 f203 	lsl.w	r2, r0, r3
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	430a      	orrs	r2, r1
 800b5b8:	635a      	str	r2, [r3, #52]	@ 0x34
 800b5ba:	e04c      	b.n	800b656 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800b5bc:	683b      	ldr	r3, [r7, #0]
 800b5be:	685b      	ldr	r3, [r3, #4]
 800b5c0:	2b0c      	cmp	r3, #12
 800b5c2:	d824      	bhi.n	800b60e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800b5ca:	683b      	ldr	r3, [r7, #0]
 800b5cc:	685a      	ldr	r2, [r3, #4]
 800b5ce:	4613      	mov	r3, r2
 800b5d0:	009b      	lsls	r3, r3, #2
 800b5d2:	4413      	add	r3, r2
 800b5d4:	3b23      	subs	r3, #35	@ 0x23
 800b5d6:	221f      	movs	r2, #31
 800b5d8:	fa02 f303 	lsl.w	r3, r2, r3
 800b5dc:	43da      	mvns	r2, r3
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	400a      	ands	r2, r1
 800b5e4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	b29b      	uxth	r3, r3
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	685a      	ldr	r2, [r3, #4]
 800b5f8:	4613      	mov	r3, r2
 800b5fa:	009b      	lsls	r3, r3, #2
 800b5fc:	4413      	add	r3, r2
 800b5fe:	3b23      	subs	r3, #35	@ 0x23
 800b600:	fa00 f203 	lsl.w	r2, r0, r3
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	430a      	orrs	r2, r1
 800b60a:	631a      	str	r2, [r3, #48]	@ 0x30
 800b60c:	e023      	b.n	800b656 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	685a      	ldr	r2, [r3, #4]
 800b618:	4613      	mov	r3, r2
 800b61a:	009b      	lsls	r3, r3, #2
 800b61c:	4413      	add	r3, r2
 800b61e:	3b41      	subs	r3, #65	@ 0x41
 800b620:	221f      	movs	r2, #31
 800b622:	fa02 f303 	lsl.w	r3, r2, r3
 800b626:	43da      	mvns	r2, r3
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	400a      	ands	r2, r1
 800b62e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800b636:	683b      	ldr	r3, [r7, #0]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	b29b      	uxth	r3, r3
 800b63c:	4618      	mov	r0, r3
 800b63e:	683b      	ldr	r3, [r7, #0]
 800b640:	685a      	ldr	r2, [r3, #4]
 800b642:	4613      	mov	r3, r2
 800b644:	009b      	lsls	r3, r3, #2
 800b646:	4413      	add	r3, r2
 800b648:	3b41      	subs	r3, #65	@ 0x41
 800b64a:	fa00 f203 	lsl.w	r2, r0, r3
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	430a      	orrs	r2, r1
 800b654:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800b656:	4b29      	ldr	r3, [pc, #164]	@ (800b6fc <HAL_ADC_ConfigChannel+0x250>)
 800b658:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	4a28      	ldr	r2, [pc, #160]	@ (800b700 <HAL_ADC_ConfigChannel+0x254>)
 800b660:	4293      	cmp	r3, r2
 800b662:	d10f      	bne.n	800b684 <HAL_ADC_ConfigChannel+0x1d8>
 800b664:	683b      	ldr	r3, [r7, #0]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	2b12      	cmp	r3, #18
 800b66a:	d10b      	bne.n	800b684 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	685b      	ldr	r3, [r3, #4]
 800b670:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	685b      	ldr	r3, [r3, #4]
 800b67c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	4a1d      	ldr	r2, [pc, #116]	@ (800b700 <HAL_ADC_ConfigChannel+0x254>)
 800b68a:	4293      	cmp	r3, r2
 800b68c:	d12b      	bne.n	800b6e6 <HAL_ADC_ConfigChannel+0x23a>
 800b68e:	683b      	ldr	r3, [r7, #0]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	4a1c      	ldr	r2, [pc, #112]	@ (800b704 <HAL_ADC_ConfigChannel+0x258>)
 800b694:	4293      	cmp	r3, r2
 800b696:	d003      	beq.n	800b6a0 <HAL_ADC_ConfigChannel+0x1f4>
 800b698:	683b      	ldr	r3, [r7, #0]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	2b11      	cmp	r3, #17
 800b69e:	d122      	bne.n	800b6e6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	685b      	ldr	r3, [r3, #4]
 800b6a4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	685b      	ldr	r3, [r3, #4]
 800b6b0:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	4a11      	ldr	r2, [pc, #68]	@ (800b704 <HAL_ADC_ConfigChannel+0x258>)
 800b6be:	4293      	cmp	r3, r2
 800b6c0:	d111      	bne.n	800b6e6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800b6c2:	4b11      	ldr	r3, [pc, #68]	@ (800b708 <HAL_ADC_ConfigChannel+0x25c>)
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	4a11      	ldr	r2, [pc, #68]	@ (800b70c <HAL_ADC_ConfigChannel+0x260>)
 800b6c8:	fba2 2303 	umull	r2, r3, r2, r3
 800b6cc:	0c9a      	lsrs	r2, r3, #18
 800b6ce:	4613      	mov	r3, r2
 800b6d0:	009b      	lsls	r3, r3, #2
 800b6d2:	4413      	add	r3, r2
 800b6d4:	005b      	lsls	r3, r3, #1
 800b6d6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800b6d8:	e002      	b.n	800b6e0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800b6da:	68bb      	ldr	r3, [r7, #8]
 800b6dc:	3b01      	subs	r3, #1
 800b6de:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d1f9      	bne.n	800b6da <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800b6ee:	2300      	movs	r3, #0
}
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	3714      	adds	r7, #20
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fa:	4770      	bx	lr
 800b6fc:	40012300 	.word	0x40012300
 800b700:	40012000 	.word	0x40012000
 800b704:	10000012 	.word	0x10000012
 800b708:	2000000c 	.word	0x2000000c
 800b70c:	431bde83 	.word	0x431bde83

0800b710 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800b710:	b480      	push	{r7}
 800b712:	b085      	sub	sp, #20
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800b718:	4b79      	ldr	r3, [pc, #484]	@ (800b900 <ADC_Init+0x1f0>)
 800b71a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	685b      	ldr	r3, [r3, #4]
 800b720:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	685a      	ldr	r2, [r3, #4]
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	685b      	ldr	r3, [r3, #4]
 800b730:	431a      	orrs	r2, r3
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	685a      	ldr	r2, [r3, #4]
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b744:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	6859      	ldr	r1, [r3, #4]
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	691b      	ldr	r3, [r3, #16]
 800b750:	021a      	lsls	r2, r3, #8
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	430a      	orrs	r2, r1
 800b758:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	685a      	ldr	r2, [r3, #4]
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800b768:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	6859      	ldr	r1, [r3, #4]
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	689a      	ldr	r2, [r3, #8]
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	430a      	orrs	r2, r1
 800b77a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	689a      	ldr	r2, [r3, #8]
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b78a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	6899      	ldr	r1, [r3, #8]
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	68da      	ldr	r2, [r3, #12]
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	430a      	orrs	r2, r1
 800b79c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7a2:	4a58      	ldr	r2, [pc, #352]	@ (800b904 <ADC_Init+0x1f4>)
 800b7a4:	4293      	cmp	r3, r2
 800b7a6:	d022      	beq.n	800b7ee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	689a      	ldr	r2, [r3, #8]
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800b7b6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	6899      	ldr	r1, [r3, #8]
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	430a      	orrs	r2, r1
 800b7c8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	689a      	ldr	r2, [r3, #8]
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800b7d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	6899      	ldr	r1, [r3, #8]
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	430a      	orrs	r2, r1
 800b7ea:	609a      	str	r2, [r3, #8]
 800b7ec:	e00f      	b.n	800b80e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	689a      	ldr	r2, [r3, #8]
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800b7fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	689a      	ldr	r2, [r3, #8]
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800b80c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	689a      	ldr	r2, [r3, #8]
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	f022 0202 	bic.w	r2, r2, #2
 800b81c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	6899      	ldr	r1, [r3, #8]
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	7e1b      	ldrb	r3, [r3, #24]
 800b828:	005a      	lsls	r2, r3, #1
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	430a      	orrs	r2, r1
 800b830:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d01b      	beq.n	800b874 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	685a      	ldr	r2, [r3, #4]
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b84a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	685a      	ldr	r2, [r3, #4]
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800b85a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	6859      	ldr	r1, [r3, #4]
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b866:	3b01      	subs	r3, #1
 800b868:	035a      	lsls	r2, r3, #13
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	430a      	orrs	r2, r1
 800b870:	605a      	str	r2, [r3, #4]
 800b872:	e007      	b.n	800b884 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	685a      	ldr	r2, [r3, #4]
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b882:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800b892:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	69db      	ldr	r3, [r3, #28]
 800b89e:	3b01      	subs	r3, #1
 800b8a0:	051a      	lsls	r2, r3, #20
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	430a      	orrs	r2, r1
 800b8a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	689a      	ldr	r2, [r3, #8]
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800b8b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	6899      	ldr	r1, [r3, #8]
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b8c6:	025a      	lsls	r2, r3, #9
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	430a      	orrs	r2, r1
 800b8ce:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	689a      	ldr	r2, [r3, #8]
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b8de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	6899      	ldr	r1, [r3, #8]
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	695b      	ldr	r3, [r3, #20]
 800b8ea:	029a      	lsls	r2, r3, #10
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	430a      	orrs	r2, r1
 800b8f2:	609a      	str	r2, [r3, #8]
}
 800b8f4:	bf00      	nop
 800b8f6:	3714      	adds	r7, #20
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fe:	4770      	bx	lr
 800b900:	40012300 	.word	0x40012300
 800b904:	0f000001 	.word	0x0f000001

0800b908 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b908:	b480      	push	{r7}
 800b90a:	b085      	sub	sp, #20
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	f003 0307 	and.w	r3, r3, #7
 800b916:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b918:	4b0c      	ldr	r3, [pc, #48]	@ (800b94c <__NVIC_SetPriorityGrouping+0x44>)
 800b91a:	68db      	ldr	r3, [r3, #12]
 800b91c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b91e:	68ba      	ldr	r2, [r7, #8]
 800b920:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800b924:	4013      	ands	r3, r2
 800b926:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b92c:	68bb      	ldr	r3, [r7, #8]
 800b92e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800b930:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800b934:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b938:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b93a:	4a04      	ldr	r2, [pc, #16]	@ (800b94c <__NVIC_SetPriorityGrouping+0x44>)
 800b93c:	68bb      	ldr	r3, [r7, #8]
 800b93e:	60d3      	str	r3, [r2, #12]
}
 800b940:	bf00      	nop
 800b942:	3714      	adds	r7, #20
 800b944:	46bd      	mov	sp, r7
 800b946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94a:	4770      	bx	lr
 800b94c:	e000ed00 	.word	0xe000ed00

0800b950 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800b950:	b480      	push	{r7}
 800b952:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b954:	4b04      	ldr	r3, [pc, #16]	@ (800b968 <__NVIC_GetPriorityGrouping+0x18>)
 800b956:	68db      	ldr	r3, [r3, #12]
 800b958:	0a1b      	lsrs	r3, r3, #8
 800b95a:	f003 0307 	and.w	r3, r3, #7
}
 800b95e:	4618      	mov	r0, r3
 800b960:	46bd      	mov	sp, r7
 800b962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b966:	4770      	bx	lr
 800b968:	e000ed00 	.word	0xe000ed00

0800b96c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b96c:	b480      	push	{r7}
 800b96e:	b083      	sub	sp, #12
 800b970:	af00      	add	r7, sp, #0
 800b972:	4603      	mov	r3, r0
 800b974:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	db0b      	blt.n	800b996 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b97e:	79fb      	ldrb	r3, [r7, #7]
 800b980:	f003 021f 	and.w	r2, r3, #31
 800b984:	4907      	ldr	r1, [pc, #28]	@ (800b9a4 <__NVIC_EnableIRQ+0x38>)
 800b986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b98a:	095b      	lsrs	r3, r3, #5
 800b98c:	2001      	movs	r0, #1
 800b98e:	fa00 f202 	lsl.w	r2, r0, r2
 800b992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800b996:	bf00      	nop
 800b998:	370c      	adds	r7, #12
 800b99a:	46bd      	mov	sp, r7
 800b99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a0:	4770      	bx	lr
 800b9a2:	bf00      	nop
 800b9a4:	e000e100 	.word	0xe000e100

0800b9a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800b9a8:	b480      	push	{r7}
 800b9aa:	b083      	sub	sp, #12
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	6039      	str	r1, [r7, #0]
 800b9b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b9b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	db0a      	blt.n	800b9d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b9bc:	683b      	ldr	r3, [r7, #0]
 800b9be:	b2da      	uxtb	r2, r3
 800b9c0:	490c      	ldr	r1, [pc, #48]	@ (800b9f4 <__NVIC_SetPriority+0x4c>)
 800b9c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b9c6:	0112      	lsls	r2, r2, #4
 800b9c8:	b2d2      	uxtb	r2, r2
 800b9ca:	440b      	add	r3, r1
 800b9cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800b9d0:	e00a      	b.n	800b9e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b9d2:	683b      	ldr	r3, [r7, #0]
 800b9d4:	b2da      	uxtb	r2, r3
 800b9d6:	4908      	ldr	r1, [pc, #32]	@ (800b9f8 <__NVIC_SetPriority+0x50>)
 800b9d8:	79fb      	ldrb	r3, [r7, #7]
 800b9da:	f003 030f 	and.w	r3, r3, #15
 800b9de:	3b04      	subs	r3, #4
 800b9e0:	0112      	lsls	r2, r2, #4
 800b9e2:	b2d2      	uxtb	r2, r2
 800b9e4:	440b      	add	r3, r1
 800b9e6:	761a      	strb	r2, [r3, #24]
}
 800b9e8:	bf00      	nop
 800b9ea:	370c      	adds	r7, #12
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f2:	4770      	bx	lr
 800b9f4:	e000e100 	.word	0xe000e100
 800b9f8:	e000ed00 	.word	0xe000ed00

0800b9fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b9fc:	b480      	push	{r7}
 800b9fe:	b089      	sub	sp, #36	@ 0x24
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	60f8      	str	r0, [r7, #12]
 800ba04:	60b9      	str	r1, [r7, #8]
 800ba06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	f003 0307 	and.w	r3, r3, #7
 800ba0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800ba10:	69fb      	ldr	r3, [r7, #28]
 800ba12:	f1c3 0307 	rsb	r3, r3, #7
 800ba16:	2b04      	cmp	r3, #4
 800ba18:	bf28      	it	cs
 800ba1a:	2304      	movcs	r3, #4
 800ba1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800ba1e:	69fb      	ldr	r3, [r7, #28]
 800ba20:	3304      	adds	r3, #4
 800ba22:	2b06      	cmp	r3, #6
 800ba24:	d902      	bls.n	800ba2c <NVIC_EncodePriority+0x30>
 800ba26:	69fb      	ldr	r3, [r7, #28]
 800ba28:	3b03      	subs	r3, #3
 800ba2a:	e000      	b.n	800ba2e <NVIC_EncodePriority+0x32>
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ba30:	f04f 32ff 	mov.w	r2, #4294967295
 800ba34:	69bb      	ldr	r3, [r7, #24]
 800ba36:	fa02 f303 	lsl.w	r3, r2, r3
 800ba3a:	43da      	mvns	r2, r3
 800ba3c:	68bb      	ldr	r3, [r7, #8]
 800ba3e:	401a      	ands	r2, r3
 800ba40:	697b      	ldr	r3, [r7, #20]
 800ba42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800ba44:	f04f 31ff 	mov.w	r1, #4294967295
 800ba48:	697b      	ldr	r3, [r7, #20]
 800ba4a:	fa01 f303 	lsl.w	r3, r1, r3
 800ba4e:	43d9      	mvns	r1, r3
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ba54:	4313      	orrs	r3, r2
         );
}
 800ba56:	4618      	mov	r0, r3
 800ba58:	3724      	adds	r7, #36	@ 0x24
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba60:	4770      	bx	lr
	...

0800ba64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b082      	sub	sp, #8
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	3b01      	subs	r3, #1
 800ba70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ba74:	d301      	bcc.n	800ba7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800ba76:	2301      	movs	r3, #1
 800ba78:	e00f      	b.n	800ba9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800ba7a:	4a0a      	ldr	r2, [pc, #40]	@ (800baa4 <SysTick_Config+0x40>)
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	3b01      	subs	r3, #1
 800ba80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800ba82:	210f      	movs	r1, #15
 800ba84:	f04f 30ff 	mov.w	r0, #4294967295
 800ba88:	f7ff ff8e 	bl	800b9a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800ba8c:	4b05      	ldr	r3, [pc, #20]	@ (800baa4 <SysTick_Config+0x40>)
 800ba8e:	2200      	movs	r2, #0
 800ba90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800ba92:	4b04      	ldr	r3, [pc, #16]	@ (800baa4 <SysTick_Config+0x40>)
 800ba94:	2207      	movs	r2, #7
 800ba96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800ba98:	2300      	movs	r3, #0
}
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	3708      	adds	r7, #8
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	bd80      	pop	{r7, pc}
 800baa2:	bf00      	nop
 800baa4:	e000e010 	.word	0xe000e010

0800baa8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b082      	sub	sp, #8
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800bab0:	6878      	ldr	r0, [r7, #4]
 800bab2:	f7ff ff29 	bl	800b908 <__NVIC_SetPriorityGrouping>
}
 800bab6:	bf00      	nop
 800bab8:	3708      	adds	r7, #8
 800baba:	46bd      	mov	sp, r7
 800babc:	bd80      	pop	{r7, pc}

0800babe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800babe:	b580      	push	{r7, lr}
 800bac0:	b086      	sub	sp, #24
 800bac2:	af00      	add	r7, sp, #0
 800bac4:	4603      	mov	r3, r0
 800bac6:	60b9      	str	r1, [r7, #8]
 800bac8:	607a      	str	r2, [r7, #4]
 800baca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800bacc:	2300      	movs	r3, #0
 800bace:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800bad0:	f7ff ff3e 	bl	800b950 <__NVIC_GetPriorityGrouping>
 800bad4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800bad6:	687a      	ldr	r2, [r7, #4]
 800bad8:	68b9      	ldr	r1, [r7, #8]
 800bada:	6978      	ldr	r0, [r7, #20]
 800badc:	f7ff ff8e 	bl	800b9fc <NVIC_EncodePriority>
 800bae0:	4602      	mov	r2, r0
 800bae2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bae6:	4611      	mov	r1, r2
 800bae8:	4618      	mov	r0, r3
 800baea:	f7ff ff5d 	bl	800b9a8 <__NVIC_SetPriority>
}
 800baee:	bf00      	nop
 800baf0:	3718      	adds	r7, #24
 800baf2:	46bd      	mov	sp, r7
 800baf4:	bd80      	pop	{r7, pc}

0800baf6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800baf6:	b580      	push	{r7, lr}
 800baf8:	b082      	sub	sp, #8
 800bafa:	af00      	add	r7, sp, #0
 800bafc:	4603      	mov	r3, r0
 800bafe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800bb00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bb04:	4618      	mov	r0, r3
 800bb06:	f7ff ff31 	bl	800b96c <__NVIC_EnableIRQ>
}
 800bb0a:	bf00      	nop
 800bb0c:	3708      	adds	r7, #8
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	bd80      	pop	{r7, pc}

0800bb12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800bb12:	b580      	push	{r7, lr}
 800bb14:	b082      	sub	sp, #8
 800bb16:	af00      	add	r7, sp, #0
 800bb18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800bb1a:	6878      	ldr	r0, [r7, #4]
 800bb1c:	f7ff ffa2 	bl	800ba64 <SysTick_Config>
 800bb20:	4603      	mov	r3, r0
}
 800bb22:	4618      	mov	r0, r3
 800bb24:	3708      	adds	r7, #8
 800bb26:	46bd      	mov	sp, r7
 800bb28:	bd80      	pop	{r7, pc}
	...

0800bb2c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b086      	sub	sp, #24
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800bb34:	2300      	movs	r3, #0
 800bb36:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800bb38:	f7ff fac4 	bl	800b0c4 <HAL_GetTick>
 800bb3c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d101      	bne.n	800bb48 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800bb44:	2301      	movs	r3, #1
 800bb46:	e099      	b.n	800bc7c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	2202      	movs	r2, #2
 800bb4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	2200      	movs	r2, #0
 800bb54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	681a      	ldr	r2, [r3, #0]
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	f022 0201 	bic.w	r2, r2, #1
 800bb66:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800bb68:	e00f      	b.n	800bb8a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800bb6a:	f7ff faab 	bl	800b0c4 <HAL_GetTick>
 800bb6e:	4602      	mov	r2, r0
 800bb70:	693b      	ldr	r3, [r7, #16]
 800bb72:	1ad3      	subs	r3, r2, r3
 800bb74:	2b05      	cmp	r3, #5
 800bb76:	d908      	bls.n	800bb8a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2220      	movs	r2, #32
 800bb7c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	2203      	movs	r2, #3
 800bb82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800bb86:	2303      	movs	r3, #3
 800bb88:	e078      	b.n	800bc7c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	f003 0301 	and.w	r3, r3, #1
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d1e8      	bne.n	800bb6a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800bba0:	697a      	ldr	r2, [r7, #20]
 800bba2:	4b38      	ldr	r3, [pc, #224]	@ (800bc84 <HAL_DMA_Init+0x158>)
 800bba4:	4013      	ands	r3, r2
 800bba6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	685a      	ldr	r2, [r3, #4]
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	689b      	ldr	r3, [r3, #8]
 800bbb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800bbb6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	691b      	ldr	r3, [r3, #16]
 800bbbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800bbc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	699b      	ldr	r3, [r3, #24]
 800bbc8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800bbce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	6a1b      	ldr	r3, [r3, #32]
 800bbd4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800bbd6:	697a      	ldr	r2, [r7, #20]
 800bbd8:	4313      	orrs	r3, r2
 800bbda:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbe0:	2b04      	cmp	r3, #4
 800bbe2:	d107      	bne.n	800bbf4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bbec:	4313      	orrs	r3, r2
 800bbee:	697a      	ldr	r2, [r7, #20]
 800bbf0:	4313      	orrs	r3, r2
 800bbf2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	697a      	ldr	r2, [r7, #20]
 800bbfa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	695b      	ldr	r3, [r3, #20]
 800bc02:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800bc04:	697b      	ldr	r3, [r7, #20]
 800bc06:	f023 0307 	bic.w	r3, r3, #7
 800bc0a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc10:	697a      	ldr	r2, [r7, #20]
 800bc12:	4313      	orrs	r3, r2
 800bc14:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc1a:	2b04      	cmp	r3, #4
 800bc1c:	d117      	bne.n	800bc4e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc22:	697a      	ldr	r2, [r7, #20]
 800bc24:	4313      	orrs	r3, r2
 800bc26:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d00e      	beq.n	800bc4e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800bc30:	6878      	ldr	r0, [r7, #4]
 800bc32:	f000 f9e9 	bl	800c008 <DMA_CheckFifoParam>
 800bc36:	4603      	mov	r3, r0
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d008      	beq.n	800bc4e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	2240      	movs	r2, #64	@ 0x40
 800bc40:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	2201      	movs	r2, #1
 800bc46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800bc4a:	2301      	movs	r3, #1
 800bc4c:	e016      	b.n	800bc7c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	697a      	ldr	r2, [r7, #20]
 800bc54:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800bc56:	6878      	ldr	r0, [r7, #4]
 800bc58:	f000 f9a0 	bl	800bf9c <DMA_CalcBaseAndBitshift>
 800bc5c:	4603      	mov	r3, r0
 800bc5e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bc64:	223f      	movs	r2, #63	@ 0x3f
 800bc66:	409a      	lsls	r2, r3
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2200      	movs	r2, #0
 800bc70:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	2201      	movs	r2, #1
 800bc76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800bc7a:	2300      	movs	r3, #0
}
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	3718      	adds	r7, #24
 800bc80:	46bd      	mov	sp, r7
 800bc82:	bd80      	pop	{r7, pc}
 800bc84:	f010803f 	.word	0xf010803f

0800bc88 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b086      	sub	sp, #24
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800bc90:	2300      	movs	r3, #0
 800bc92:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800bc94:	4b8e      	ldr	r3, [pc, #568]	@ (800bed0 <HAL_DMA_IRQHandler+0x248>)
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	4a8e      	ldr	r2, [pc, #568]	@ (800bed4 <HAL_DMA_IRQHandler+0x24c>)
 800bc9a:	fba2 2303 	umull	r2, r3, r2, r3
 800bc9e:	0a9b      	lsrs	r3, r3, #10
 800bca0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bca6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800bca8:	693b      	ldr	r3, [r7, #16]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bcb2:	2208      	movs	r2, #8
 800bcb4:	409a      	lsls	r2, r3
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	4013      	ands	r3, r2
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d01a      	beq.n	800bcf4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	f003 0304 	and.w	r3, r3, #4
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d013      	beq.n	800bcf4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	681a      	ldr	r2, [r3, #0]
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	f022 0204 	bic.w	r2, r2, #4
 800bcda:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bce0:	2208      	movs	r2, #8
 800bce2:	409a      	lsls	r2, r3
 800bce4:	693b      	ldr	r3, [r7, #16]
 800bce6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bcec:	f043 0201 	orr.w	r2, r3, #1
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bcf8:	2201      	movs	r2, #1
 800bcfa:	409a      	lsls	r2, r3
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	4013      	ands	r3, r2
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d012      	beq.n	800bd2a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	695b      	ldr	r3, [r3, #20]
 800bd0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d00b      	beq.n	800bd2a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bd16:	2201      	movs	r2, #1
 800bd18:	409a      	lsls	r2, r3
 800bd1a:	693b      	ldr	r3, [r7, #16]
 800bd1c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bd22:	f043 0202 	orr.w	r2, r3, #2
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bd2e:	2204      	movs	r2, #4
 800bd30:	409a      	lsls	r2, r3
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	4013      	ands	r3, r2
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d012      	beq.n	800bd60 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	f003 0302 	and.w	r3, r3, #2
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d00b      	beq.n	800bd60 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bd4c:	2204      	movs	r2, #4
 800bd4e:	409a      	lsls	r2, r3
 800bd50:	693b      	ldr	r3, [r7, #16]
 800bd52:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bd58:	f043 0204 	orr.w	r2, r3, #4
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bd64:	2210      	movs	r2, #16
 800bd66:	409a      	lsls	r2, r3
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	4013      	ands	r3, r2
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d043      	beq.n	800bdf8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	f003 0308 	and.w	r3, r3, #8
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d03c      	beq.n	800bdf8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bd82:	2210      	movs	r2, #16
 800bd84:	409a      	lsls	r2, r3
 800bd86:	693b      	ldr	r3, [r7, #16]
 800bd88:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d018      	beq.n	800bdca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d108      	bne.n	800bdb8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d024      	beq.n	800bdf8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bdb2:	6878      	ldr	r0, [r7, #4]
 800bdb4:	4798      	blx	r3
 800bdb6:	e01f      	b.n	800bdf8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d01b      	beq.n	800bdf8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bdc4:	6878      	ldr	r0, [r7, #4]
 800bdc6:	4798      	blx	r3
 800bdc8:	e016      	b.n	800bdf8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d107      	bne.n	800bde8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	681a      	ldr	r2, [r3, #0]
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	f022 0208 	bic.w	r2, r2, #8
 800bde6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d003      	beq.n	800bdf8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bdf4:	6878      	ldr	r0, [r7, #4]
 800bdf6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bdfc:	2220      	movs	r2, #32
 800bdfe:	409a      	lsls	r2, r3
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	4013      	ands	r3, r2
 800be04:	2b00      	cmp	r3, #0
 800be06:	f000 808f 	beq.w	800bf28 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	f003 0310 	and.w	r3, r3, #16
 800be14:	2b00      	cmp	r3, #0
 800be16:	f000 8087 	beq.w	800bf28 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800be1e:	2220      	movs	r2, #32
 800be20:	409a      	lsls	r2, r3
 800be22:	693b      	ldr	r3, [r7, #16]
 800be24:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800be2c:	b2db      	uxtb	r3, r3
 800be2e:	2b05      	cmp	r3, #5
 800be30:	d136      	bne.n	800bea0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	681a      	ldr	r2, [r3, #0]
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	f022 0216 	bic.w	r2, r2, #22
 800be40:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	695a      	ldr	r2, [r3, #20]
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800be50:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be56:	2b00      	cmp	r3, #0
 800be58:	d103      	bne.n	800be62 <HAL_DMA_IRQHandler+0x1da>
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d007      	beq.n	800be72 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	681a      	ldr	r2, [r3, #0]
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	f022 0208 	bic.w	r2, r2, #8
 800be70:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800be76:	223f      	movs	r2, #63	@ 0x3f
 800be78:	409a      	lsls	r2, r3
 800be7a:	693b      	ldr	r3, [r7, #16]
 800be7c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	2201      	movs	r2, #1
 800be82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	2200      	movs	r2, #0
 800be8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800be92:	2b00      	cmp	r3, #0
 800be94:	d07e      	beq.n	800bf94 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800be9a:	6878      	ldr	r0, [r7, #4]
 800be9c:	4798      	blx	r3
        }
        return;
 800be9e:	e079      	b.n	800bf94 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d01d      	beq.n	800beea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d10d      	bne.n	800bed8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d031      	beq.n	800bf28 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bec8:	6878      	ldr	r0, [r7, #4]
 800beca:	4798      	blx	r3
 800becc:	e02c      	b.n	800bf28 <HAL_DMA_IRQHandler+0x2a0>
 800bece:	bf00      	nop
 800bed0:	2000000c 	.word	0x2000000c
 800bed4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d023      	beq.n	800bf28 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bee4:	6878      	ldr	r0, [r7, #4]
 800bee6:	4798      	blx	r3
 800bee8:	e01e      	b.n	800bf28 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d10f      	bne.n	800bf18 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	681a      	ldr	r2, [r3, #0]
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	f022 0210 	bic.w	r2, r2, #16
 800bf06:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2201      	movs	r2, #1
 800bf0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2200      	movs	r2, #0
 800bf14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d003      	beq.n	800bf28 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bf24:	6878      	ldr	r0, [r7, #4]
 800bf26:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d032      	beq.n	800bf96 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bf34:	f003 0301 	and.w	r3, r3, #1
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d022      	beq.n	800bf82 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	2205      	movs	r2, #5
 800bf40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	681a      	ldr	r2, [r3, #0]
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	f022 0201 	bic.w	r2, r2, #1
 800bf52:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800bf54:	68bb      	ldr	r3, [r7, #8]
 800bf56:	3301      	adds	r3, #1
 800bf58:	60bb      	str	r3, [r7, #8]
 800bf5a:	697a      	ldr	r2, [r7, #20]
 800bf5c:	429a      	cmp	r2, r3
 800bf5e:	d307      	bcc.n	800bf70 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	f003 0301 	and.w	r3, r3, #1
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d1f2      	bne.n	800bf54 <HAL_DMA_IRQHandler+0x2cc>
 800bf6e:	e000      	b.n	800bf72 <HAL_DMA_IRQHandler+0x2ea>
          break;
 800bf70:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	2201      	movs	r2, #1
 800bf76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	2200      	movs	r2, #0
 800bf7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d005      	beq.n	800bf96 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bf8e:	6878      	ldr	r0, [r7, #4]
 800bf90:	4798      	blx	r3
 800bf92:	e000      	b.n	800bf96 <HAL_DMA_IRQHandler+0x30e>
        return;
 800bf94:	bf00      	nop
    }
  }
}
 800bf96:	3718      	adds	r7, #24
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	bd80      	pop	{r7, pc}

0800bf9c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800bf9c:	b480      	push	{r7}
 800bf9e:	b085      	sub	sp, #20
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	b2db      	uxtb	r3, r3
 800bfaa:	3b10      	subs	r3, #16
 800bfac:	4a14      	ldr	r2, [pc, #80]	@ (800c000 <DMA_CalcBaseAndBitshift+0x64>)
 800bfae:	fba2 2303 	umull	r2, r3, r2, r3
 800bfb2:	091b      	lsrs	r3, r3, #4
 800bfb4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800bfb6:	4a13      	ldr	r2, [pc, #76]	@ (800c004 <DMA_CalcBaseAndBitshift+0x68>)
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	4413      	add	r3, r2
 800bfbc:	781b      	ldrb	r3, [r3, #0]
 800bfbe:	461a      	mov	r2, r3
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	2b03      	cmp	r3, #3
 800bfc8:	d909      	bls.n	800bfde <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800bfd2:	f023 0303 	bic.w	r3, r3, #3
 800bfd6:	1d1a      	adds	r2, r3, #4
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	659a      	str	r2, [r3, #88]	@ 0x58
 800bfdc:	e007      	b.n	800bfee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800bfe6:	f023 0303 	bic.w	r3, r3, #3
 800bfea:	687a      	ldr	r2, [r7, #4]
 800bfec:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800bff2:	4618      	mov	r0, r3
 800bff4:	3714      	adds	r7, #20
 800bff6:	46bd      	mov	sp, r7
 800bff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffc:	4770      	bx	lr
 800bffe:	bf00      	nop
 800c000:	aaaaaaab 	.word	0xaaaaaaab
 800c004:	08017820 	.word	0x08017820

0800c008 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800c008:	b480      	push	{r7}
 800c00a:	b085      	sub	sp, #20
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c010:	2300      	movs	r3, #0
 800c012:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c018:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	699b      	ldr	r3, [r3, #24]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d11f      	bne.n	800c062 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800c022:	68bb      	ldr	r3, [r7, #8]
 800c024:	2b03      	cmp	r3, #3
 800c026:	d856      	bhi.n	800c0d6 <DMA_CheckFifoParam+0xce>
 800c028:	a201      	add	r2, pc, #4	@ (adr r2, 800c030 <DMA_CheckFifoParam+0x28>)
 800c02a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c02e:	bf00      	nop
 800c030:	0800c041 	.word	0x0800c041
 800c034:	0800c053 	.word	0x0800c053
 800c038:	0800c041 	.word	0x0800c041
 800c03c:	0800c0d7 	.word	0x0800c0d7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c044:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d046      	beq.n	800c0da <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800c04c:	2301      	movs	r3, #1
 800c04e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c050:	e043      	b.n	800c0da <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c056:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800c05a:	d140      	bne.n	800c0de <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800c05c:	2301      	movs	r3, #1
 800c05e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c060:	e03d      	b.n	800c0de <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	699b      	ldr	r3, [r3, #24]
 800c066:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c06a:	d121      	bne.n	800c0b0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800c06c:	68bb      	ldr	r3, [r7, #8]
 800c06e:	2b03      	cmp	r3, #3
 800c070:	d837      	bhi.n	800c0e2 <DMA_CheckFifoParam+0xda>
 800c072:	a201      	add	r2, pc, #4	@ (adr r2, 800c078 <DMA_CheckFifoParam+0x70>)
 800c074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c078:	0800c089 	.word	0x0800c089
 800c07c:	0800c08f 	.word	0x0800c08f
 800c080:	0800c089 	.word	0x0800c089
 800c084:	0800c0a1 	.word	0x0800c0a1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800c088:	2301      	movs	r3, #1
 800c08a:	73fb      	strb	r3, [r7, #15]
      break;
 800c08c:	e030      	b.n	800c0f0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c092:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c096:	2b00      	cmp	r3, #0
 800c098:	d025      	beq.n	800c0e6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800c09a:	2301      	movs	r3, #1
 800c09c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c09e:	e022      	b.n	800c0e6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0a4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800c0a8:	d11f      	bne.n	800c0ea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800c0aa:	2301      	movs	r3, #1
 800c0ac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800c0ae:	e01c      	b.n	800c0ea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800c0b0:	68bb      	ldr	r3, [r7, #8]
 800c0b2:	2b02      	cmp	r3, #2
 800c0b4:	d903      	bls.n	800c0be <DMA_CheckFifoParam+0xb6>
 800c0b6:	68bb      	ldr	r3, [r7, #8]
 800c0b8:	2b03      	cmp	r3, #3
 800c0ba:	d003      	beq.n	800c0c4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800c0bc:	e018      	b.n	800c0f0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800c0be:	2301      	movs	r3, #1
 800c0c0:	73fb      	strb	r3, [r7, #15]
      break;
 800c0c2:	e015      	b.n	800c0f0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d00e      	beq.n	800c0ee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800c0d0:	2301      	movs	r3, #1
 800c0d2:	73fb      	strb	r3, [r7, #15]
      break;
 800c0d4:	e00b      	b.n	800c0ee <DMA_CheckFifoParam+0xe6>
      break;
 800c0d6:	bf00      	nop
 800c0d8:	e00a      	b.n	800c0f0 <DMA_CheckFifoParam+0xe8>
      break;
 800c0da:	bf00      	nop
 800c0dc:	e008      	b.n	800c0f0 <DMA_CheckFifoParam+0xe8>
      break;
 800c0de:	bf00      	nop
 800c0e0:	e006      	b.n	800c0f0 <DMA_CheckFifoParam+0xe8>
      break;
 800c0e2:	bf00      	nop
 800c0e4:	e004      	b.n	800c0f0 <DMA_CheckFifoParam+0xe8>
      break;
 800c0e6:	bf00      	nop
 800c0e8:	e002      	b.n	800c0f0 <DMA_CheckFifoParam+0xe8>
      break;   
 800c0ea:	bf00      	nop
 800c0ec:	e000      	b.n	800c0f0 <DMA_CheckFifoParam+0xe8>
      break;
 800c0ee:	bf00      	nop
    }
  } 
  
  return status; 
 800c0f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	3714      	adds	r7, #20
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fc:	4770      	bx	lr
 800c0fe:	bf00      	nop

0800c100 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c100:	b480      	push	{r7}
 800c102:	b089      	sub	sp, #36	@ 0x24
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
 800c108:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800c10a:	2300      	movs	r3, #0
 800c10c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800c10e:	2300      	movs	r3, #0
 800c110:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800c112:	2300      	movs	r3, #0
 800c114:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c116:	2300      	movs	r3, #0
 800c118:	61fb      	str	r3, [r7, #28]
 800c11a:	e159      	b.n	800c3d0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800c11c:	2201      	movs	r2, #1
 800c11e:	69fb      	ldr	r3, [r7, #28]
 800c120:	fa02 f303 	lsl.w	r3, r2, r3
 800c124:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800c126:	683b      	ldr	r3, [r7, #0]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	697a      	ldr	r2, [r7, #20]
 800c12c:	4013      	ands	r3, r2
 800c12e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800c130:	693a      	ldr	r2, [r7, #16]
 800c132:	697b      	ldr	r3, [r7, #20]
 800c134:	429a      	cmp	r2, r3
 800c136:	f040 8148 	bne.w	800c3ca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800c13a:	683b      	ldr	r3, [r7, #0]
 800c13c:	685b      	ldr	r3, [r3, #4]
 800c13e:	f003 0303 	and.w	r3, r3, #3
 800c142:	2b01      	cmp	r3, #1
 800c144:	d005      	beq.n	800c152 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c146:	683b      	ldr	r3, [r7, #0]
 800c148:	685b      	ldr	r3, [r3, #4]
 800c14a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800c14e:	2b02      	cmp	r3, #2
 800c150:	d130      	bne.n	800c1b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	689b      	ldr	r3, [r3, #8]
 800c156:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800c158:	69fb      	ldr	r3, [r7, #28]
 800c15a:	005b      	lsls	r3, r3, #1
 800c15c:	2203      	movs	r2, #3
 800c15e:	fa02 f303 	lsl.w	r3, r2, r3
 800c162:	43db      	mvns	r3, r3
 800c164:	69ba      	ldr	r2, [r7, #24]
 800c166:	4013      	ands	r3, r2
 800c168:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800c16a:	683b      	ldr	r3, [r7, #0]
 800c16c:	68da      	ldr	r2, [r3, #12]
 800c16e:	69fb      	ldr	r3, [r7, #28]
 800c170:	005b      	lsls	r3, r3, #1
 800c172:	fa02 f303 	lsl.w	r3, r2, r3
 800c176:	69ba      	ldr	r2, [r7, #24]
 800c178:	4313      	orrs	r3, r2
 800c17a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	69ba      	ldr	r2, [r7, #24]
 800c180:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	685b      	ldr	r3, [r3, #4]
 800c186:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800c188:	2201      	movs	r2, #1
 800c18a:	69fb      	ldr	r3, [r7, #28]
 800c18c:	fa02 f303 	lsl.w	r3, r2, r3
 800c190:	43db      	mvns	r3, r3
 800c192:	69ba      	ldr	r2, [r7, #24]
 800c194:	4013      	ands	r3, r2
 800c196:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	685b      	ldr	r3, [r3, #4]
 800c19c:	091b      	lsrs	r3, r3, #4
 800c19e:	f003 0201 	and.w	r2, r3, #1
 800c1a2:	69fb      	ldr	r3, [r7, #28]
 800c1a4:	fa02 f303 	lsl.w	r3, r2, r3
 800c1a8:	69ba      	ldr	r2, [r7, #24]
 800c1aa:	4313      	orrs	r3, r2
 800c1ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	69ba      	ldr	r2, [r7, #24]
 800c1b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800c1b4:	683b      	ldr	r3, [r7, #0]
 800c1b6:	685b      	ldr	r3, [r3, #4]
 800c1b8:	f003 0303 	and.w	r3, r3, #3
 800c1bc:	2b03      	cmp	r3, #3
 800c1be:	d017      	beq.n	800c1f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	68db      	ldr	r3, [r3, #12]
 800c1c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800c1c6:	69fb      	ldr	r3, [r7, #28]
 800c1c8:	005b      	lsls	r3, r3, #1
 800c1ca:	2203      	movs	r2, #3
 800c1cc:	fa02 f303 	lsl.w	r3, r2, r3
 800c1d0:	43db      	mvns	r3, r3
 800c1d2:	69ba      	ldr	r2, [r7, #24]
 800c1d4:	4013      	ands	r3, r2
 800c1d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800c1d8:	683b      	ldr	r3, [r7, #0]
 800c1da:	689a      	ldr	r2, [r3, #8]
 800c1dc:	69fb      	ldr	r3, [r7, #28]
 800c1de:	005b      	lsls	r3, r3, #1
 800c1e0:	fa02 f303 	lsl.w	r3, r2, r3
 800c1e4:	69ba      	ldr	r2, [r7, #24]
 800c1e6:	4313      	orrs	r3, r2
 800c1e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	69ba      	ldr	r2, [r7, #24]
 800c1ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c1f0:	683b      	ldr	r3, [r7, #0]
 800c1f2:	685b      	ldr	r3, [r3, #4]
 800c1f4:	f003 0303 	and.w	r3, r3, #3
 800c1f8:	2b02      	cmp	r3, #2
 800c1fa:	d123      	bne.n	800c244 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800c1fc:	69fb      	ldr	r3, [r7, #28]
 800c1fe:	08da      	lsrs	r2, r3, #3
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	3208      	adds	r2, #8
 800c204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c208:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800c20a:	69fb      	ldr	r3, [r7, #28]
 800c20c:	f003 0307 	and.w	r3, r3, #7
 800c210:	009b      	lsls	r3, r3, #2
 800c212:	220f      	movs	r2, #15
 800c214:	fa02 f303 	lsl.w	r3, r2, r3
 800c218:	43db      	mvns	r3, r3
 800c21a:	69ba      	ldr	r2, [r7, #24]
 800c21c:	4013      	ands	r3, r2
 800c21e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800c220:	683b      	ldr	r3, [r7, #0]
 800c222:	691a      	ldr	r2, [r3, #16]
 800c224:	69fb      	ldr	r3, [r7, #28]
 800c226:	f003 0307 	and.w	r3, r3, #7
 800c22a:	009b      	lsls	r3, r3, #2
 800c22c:	fa02 f303 	lsl.w	r3, r2, r3
 800c230:	69ba      	ldr	r2, [r7, #24]
 800c232:	4313      	orrs	r3, r2
 800c234:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800c236:	69fb      	ldr	r3, [r7, #28]
 800c238:	08da      	lsrs	r2, r3, #3
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	3208      	adds	r2, #8
 800c23e:	69b9      	ldr	r1, [r7, #24]
 800c240:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800c24a:	69fb      	ldr	r3, [r7, #28]
 800c24c:	005b      	lsls	r3, r3, #1
 800c24e:	2203      	movs	r2, #3
 800c250:	fa02 f303 	lsl.w	r3, r2, r3
 800c254:	43db      	mvns	r3, r3
 800c256:	69ba      	ldr	r2, [r7, #24]
 800c258:	4013      	ands	r3, r2
 800c25a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800c25c:	683b      	ldr	r3, [r7, #0]
 800c25e:	685b      	ldr	r3, [r3, #4]
 800c260:	f003 0203 	and.w	r2, r3, #3
 800c264:	69fb      	ldr	r3, [r7, #28]
 800c266:	005b      	lsls	r3, r3, #1
 800c268:	fa02 f303 	lsl.w	r3, r2, r3
 800c26c:	69ba      	ldr	r2, [r7, #24]
 800c26e:	4313      	orrs	r3, r2
 800c270:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	69ba      	ldr	r2, [r7, #24]
 800c276:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800c278:	683b      	ldr	r3, [r7, #0]
 800c27a:	685b      	ldr	r3, [r3, #4]
 800c27c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800c280:	2b00      	cmp	r3, #0
 800c282:	f000 80a2 	beq.w	800c3ca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c286:	2300      	movs	r3, #0
 800c288:	60fb      	str	r3, [r7, #12]
 800c28a:	4b57      	ldr	r3, [pc, #348]	@ (800c3e8 <HAL_GPIO_Init+0x2e8>)
 800c28c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c28e:	4a56      	ldr	r2, [pc, #344]	@ (800c3e8 <HAL_GPIO_Init+0x2e8>)
 800c290:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800c294:	6453      	str	r3, [r2, #68]	@ 0x44
 800c296:	4b54      	ldr	r3, [pc, #336]	@ (800c3e8 <HAL_GPIO_Init+0x2e8>)
 800c298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c29a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c29e:	60fb      	str	r3, [r7, #12]
 800c2a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800c2a2:	4a52      	ldr	r2, [pc, #328]	@ (800c3ec <HAL_GPIO_Init+0x2ec>)
 800c2a4:	69fb      	ldr	r3, [r7, #28]
 800c2a6:	089b      	lsrs	r3, r3, #2
 800c2a8:	3302      	adds	r3, #2
 800c2aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c2ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800c2b0:	69fb      	ldr	r3, [r7, #28]
 800c2b2:	f003 0303 	and.w	r3, r3, #3
 800c2b6:	009b      	lsls	r3, r3, #2
 800c2b8:	220f      	movs	r2, #15
 800c2ba:	fa02 f303 	lsl.w	r3, r2, r3
 800c2be:	43db      	mvns	r3, r3
 800c2c0:	69ba      	ldr	r2, [r7, #24]
 800c2c2:	4013      	ands	r3, r2
 800c2c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	4a49      	ldr	r2, [pc, #292]	@ (800c3f0 <HAL_GPIO_Init+0x2f0>)
 800c2ca:	4293      	cmp	r3, r2
 800c2cc:	d019      	beq.n	800c302 <HAL_GPIO_Init+0x202>
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	4a48      	ldr	r2, [pc, #288]	@ (800c3f4 <HAL_GPIO_Init+0x2f4>)
 800c2d2:	4293      	cmp	r3, r2
 800c2d4:	d013      	beq.n	800c2fe <HAL_GPIO_Init+0x1fe>
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	4a47      	ldr	r2, [pc, #284]	@ (800c3f8 <HAL_GPIO_Init+0x2f8>)
 800c2da:	4293      	cmp	r3, r2
 800c2dc:	d00d      	beq.n	800c2fa <HAL_GPIO_Init+0x1fa>
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	4a46      	ldr	r2, [pc, #280]	@ (800c3fc <HAL_GPIO_Init+0x2fc>)
 800c2e2:	4293      	cmp	r3, r2
 800c2e4:	d007      	beq.n	800c2f6 <HAL_GPIO_Init+0x1f6>
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	4a45      	ldr	r2, [pc, #276]	@ (800c400 <HAL_GPIO_Init+0x300>)
 800c2ea:	4293      	cmp	r3, r2
 800c2ec:	d101      	bne.n	800c2f2 <HAL_GPIO_Init+0x1f2>
 800c2ee:	2304      	movs	r3, #4
 800c2f0:	e008      	b.n	800c304 <HAL_GPIO_Init+0x204>
 800c2f2:	2307      	movs	r3, #7
 800c2f4:	e006      	b.n	800c304 <HAL_GPIO_Init+0x204>
 800c2f6:	2303      	movs	r3, #3
 800c2f8:	e004      	b.n	800c304 <HAL_GPIO_Init+0x204>
 800c2fa:	2302      	movs	r3, #2
 800c2fc:	e002      	b.n	800c304 <HAL_GPIO_Init+0x204>
 800c2fe:	2301      	movs	r3, #1
 800c300:	e000      	b.n	800c304 <HAL_GPIO_Init+0x204>
 800c302:	2300      	movs	r3, #0
 800c304:	69fa      	ldr	r2, [r7, #28]
 800c306:	f002 0203 	and.w	r2, r2, #3
 800c30a:	0092      	lsls	r2, r2, #2
 800c30c:	4093      	lsls	r3, r2
 800c30e:	69ba      	ldr	r2, [r7, #24]
 800c310:	4313      	orrs	r3, r2
 800c312:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800c314:	4935      	ldr	r1, [pc, #212]	@ (800c3ec <HAL_GPIO_Init+0x2ec>)
 800c316:	69fb      	ldr	r3, [r7, #28]
 800c318:	089b      	lsrs	r3, r3, #2
 800c31a:	3302      	adds	r3, #2
 800c31c:	69ba      	ldr	r2, [r7, #24]
 800c31e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800c322:	4b38      	ldr	r3, [pc, #224]	@ (800c404 <HAL_GPIO_Init+0x304>)
 800c324:	689b      	ldr	r3, [r3, #8]
 800c326:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c328:	693b      	ldr	r3, [r7, #16]
 800c32a:	43db      	mvns	r3, r3
 800c32c:	69ba      	ldr	r2, [r7, #24]
 800c32e:	4013      	ands	r3, r2
 800c330:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800c332:	683b      	ldr	r3, [r7, #0]
 800c334:	685b      	ldr	r3, [r3, #4]
 800c336:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d003      	beq.n	800c346 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800c33e:	69ba      	ldr	r2, [r7, #24]
 800c340:	693b      	ldr	r3, [r7, #16]
 800c342:	4313      	orrs	r3, r2
 800c344:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800c346:	4a2f      	ldr	r2, [pc, #188]	@ (800c404 <HAL_GPIO_Init+0x304>)
 800c348:	69bb      	ldr	r3, [r7, #24]
 800c34a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800c34c:	4b2d      	ldr	r3, [pc, #180]	@ (800c404 <HAL_GPIO_Init+0x304>)
 800c34e:	68db      	ldr	r3, [r3, #12]
 800c350:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c352:	693b      	ldr	r3, [r7, #16]
 800c354:	43db      	mvns	r3, r3
 800c356:	69ba      	ldr	r2, [r7, #24]
 800c358:	4013      	ands	r3, r2
 800c35a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800c35c:	683b      	ldr	r3, [r7, #0]
 800c35e:	685b      	ldr	r3, [r3, #4]
 800c360:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c364:	2b00      	cmp	r3, #0
 800c366:	d003      	beq.n	800c370 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800c368:	69ba      	ldr	r2, [r7, #24]
 800c36a:	693b      	ldr	r3, [r7, #16]
 800c36c:	4313      	orrs	r3, r2
 800c36e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800c370:	4a24      	ldr	r2, [pc, #144]	@ (800c404 <HAL_GPIO_Init+0x304>)
 800c372:	69bb      	ldr	r3, [r7, #24]
 800c374:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800c376:	4b23      	ldr	r3, [pc, #140]	@ (800c404 <HAL_GPIO_Init+0x304>)
 800c378:	685b      	ldr	r3, [r3, #4]
 800c37a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c37c:	693b      	ldr	r3, [r7, #16]
 800c37e:	43db      	mvns	r3, r3
 800c380:	69ba      	ldr	r2, [r7, #24]
 800c382:	4013      	ands	r3, r2
 800c384:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800c386:	683b      	ldr	r3, [r7, #0]
 800c388:	685b      	ldr	r3, [r3, #4]
 800c38a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d003      	beq.n	800c39a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800c392:	69ba      	ldr	r2, [r7, #24]
 800c394:	693b      	ldr	r3, [r7, #16]
 800c396:	4313      	orrs	r3, r2
 800c398:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800c39a:	4a1a      	ldr	r2, [pc, #104]	@ (800c404 <HAL_GPIO_Init+0x304>)
 800c39c:	69bb      	ldr	r3, [r7, #24]
 800c39e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800c3a0:	4b18      	ldr	r3, [pc, #96]	@ (800c404 <HAL_GPIO_Init+0x304>)
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c3a6:	693b      	ldr	r3, [r7, #16]
 800c3a8:	43db      	mvns	r3, r3
 800c3aa:	69ba      	ldr	r2, [r7, #24]
 800c3ac:	4013      	ands	r3, r2
 800c3ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800c3b0:	683b      	ldr	r3, [r7, #0]
 800c3b2:	685b      	ldr	r3, [r3, #4]
 800c3b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d003      	beq.n	800c3c4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800c3bc:	69ba      	ldr	r2, [r7, #24]
 800c3be:	693b      	ldr	r3, [r7, #16]
 800c3c0:	4313      	orrs	r3, r2
 800c3c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800c3c4:	4a0f      	ldr	r2, [pc, #60]	@ (800c404 <HAL_GPIO_Init+0x304>)
 800c3c6:	69bb      	ldr	r3, [r7, #24]
 800c3c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c3ca:	69fb      	ldr	r3, [r7, #28]
 800c3cc:	3301      	adds	r3, #1
 800c3ce:	61fb      	str	r3, [r7, #28]
 800c3d0:	69fb      	ldr	r3, [r7, #28]
 800c3d2:	2b0f      	cmp	r3, #15
 800c3d4:	f67f aea2 	bls.w	800c11c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800c3d8:	bf00      	nop
 800c3da:	bf00      	nop
 800c3dc:	3724      	adds	r7, #36	@ 0x24
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e4:	4770      	bx	lr
 800c3e6:	bf00      	nop
 800c3e8:	40023800 	.word	0x40023800
 800c3ec:	40013800 	.word	0x40013800
 800c3f0:	40020000 	.word	0x40020000
 800c3f4:	40020400 	.word	0x40020400
 800c3f8:	40020800 	.word	0x40020800
 800c3fc:	40020c00 	.word	0x40020c00
 800c400:	40021000 	.word	0x40021000
 800c404:	40013c00 	.word	0x40013c00

0800c408 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c408:	b480      	push	{r7}
 800c40a:	b083      	sub	sp, #12
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
 800c410:	460b      	mov	r3, r1
 800c412:	807b      	strh	r3, [r7, #2]
 800c414:	4613      	mov	r3, r2
 800c416:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800c418:	787b      	ldrb	r3, [r7, #1]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d003      	beq.n	800c426 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800c41e:	887a      	ldrh	r2, [r7, #2]
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800c424:	e003      	b.n	800c42e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800c426:	887b      	ldrh	r3, [r7, #2]
 800c428:	041a      	lsls	r2, r3, #16
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	619a      	str	r2, [r3, #24]
}
 800c42e:	bf00      	nop
 800c430:	370c      	adds	r7, #12
 800c432:	46bd      	mov	sp, r7
 800c434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c438:	4770      	bx	lr
	...

0800c43c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b084      	sub	sp, #16
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d101      	bne.n	800c44e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800c44a:	2301      	movs	r3, #1
 800c44c:	e12b      	b.n	800c6a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c454:	b2db      	uxtb	r3, r3
 800c456:	2b00      	cmp	r3, #0
 800c458:	d106      	bne.n	800c468 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	2200      	movs	r2, #0
 800c45e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800c462:	6878      	ldr	r0, [r7, #4]
 800c464:	f7fd fe22 	bl	800a0ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2224      	movs	r2, #36	@ 0x24
 800c46c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	681a      	ldr	r2, [r3, #0]
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	f022 0201 	bic.w	r2, r2, #1
 800c47e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	681a      	ldr	r2, [r3, #0]
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c48e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	681a      	ldr	r2, [r3, #0]
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800c49e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800c4a0:	f002 fb24 	bl	800eaec <HAL_RCC_GetPCLK1Freq>
 800c4a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	685b      	ldr	r3, [r3, #4]
 800c4aa:	4a81      	ldr	r2, [pc, #516]	@ (800c6b0 <HAL_I2C_Init+0x274>)
 800c4ac:	4293      	cmp	r3, r2
 800c4ae:	d807      	bhi.n	800c4c0 <HAL_I2C_Init+0x84>
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	4a80      	ldr	r2, [pc, #512]	@ (800c6b4 <HAL_I2C_Init+0x278>)
 800c4b4:	4293      	cmp	r3, r2
 800c4b6:	bf94      	ite	ls
 800c4b8:	2301      	movls	r3, #1
 800c4ba:	2300      	movhi	r3, #0
 800c4bc:	b2db      	uxtb	r3, r3
 800c4be:	e006      	b.n	800c4ce <HAL_I2C_Init+0x92>
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	4a7d      	ldr	r2, [pc, #500]	@ (800c6b8 <HAL_I2C_Init+0x27c>)
 800c4c4:	4293      	cmp	r3, r2
 800c4c6:	bf94      	ite	ls
 800c4c8:	2301      	movls	r3, #1
 800c4ca:	2300      	movhi	r3, #0
 800c4cc:	b2db      	uxtb	r3, r3
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d001      	beq.n	800c4d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800c4d2:	2301      	movs	r3, #1
 800c4d4:	e0e7      	b.n	800c6a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	4a78      	ldr	r2, [pc, #480]	@ (800c6bc <HAL_I2C_Init+0x280>)
 800c4da:	fba2 2303 	umull	r2, r3, r2, r3
 800c4de:	0c9b      	lsrs	r3, r3, #18
 800c4e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	685b      	ldr	r3, [r3, #4]
 800c4e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	68ba      	ldr	r2, [r7, #8]
 800c4f2:	430a      	orrs	r2, r1
 800c4f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	6a1b      	ldr	r3, [r3, #32]
 800c4fc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	685b      	ldr	r3, [r3, #4]
 800c504:	4a6a      	ldr	r2, [pc, #424]	@ (800c6b0 <HAL_I2C_Init+0x274>)
 800c506:	4293      	cmp	r3, r2
 800c508:	d802      	bhi.n	800c510 <HAL_I2C_Init+0xd4>
 800c50a:	68bb      	ldr	r3, [r7, #8]
 800c50c:	3301      	adds	r3, #1
 800c50e:	e009      	b.n	800c524 <HAL_I2C_Init+0xe8>
 800c510:	68bb      	ldr	r3, [r7, #8]
 800c512:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800c516:	fb02 f303 	mul.w	r3, r2, r3
 800c51a:	4a69      	ldr	r2, [pc, #420]	@ (800c6c0 <HAL_I2C_Init+0x284>)
 800c51c:	fba2 2303 	umull	r2, r3, r2, r3
 800c520:	099b      	lsrs	r3, r3, #6
 800c522:	3301      	adds	r3, #1
 800c524:	687a      	ldr	r2, [r7, #4]
 800c526:	6812      	ldr	r2, [r2, #0]
 800c528:	430b      	orrs	r3, r1
 800c52a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	69db      	ldr	r3, [r3, #28]
 800c532:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800c536:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	685b      	ldr	r3, [r3, #4]
 800c53e:	495c      	ldr	r1, [pc, #368]	@ (800c6b0 <HAL_I2C_Init+0x274>)
 800c540:	428b      	cmp	r3, r1
 800c542:	d819      	bhi.n	800c578 <HAL_I2C_Init+0x13c>
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	1e59      	subs	r1, r3, #1
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	685b      	ldr	r3, [r3, #4]
 800c54c:	005b      	lsls	r3, r3, #1
 800c54e:	fbb1 f3f3 	udiv	r3, r1, r3
 800c552:	1c59      	adds	r1, r3, #1
 800c554:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800c558:	400b      	ands	r3, r1
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d00a      	beq.n	800c574 <HAL_I2C_Init+0x138>
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	1e59      	subs	r1, r3, #1
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	685b      	ldr	r3, [r3, #4]
 800c566:	005b      	lsls	r3, r3, #1
 800c568:	fbb1 f3f3 	udiv	r3, r1, r3
 800c56c:	3301      	adds	r3, #1
 800c56e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c572:	e051      	b.n	800c618 <HAL_I2C_Init+0x1dc>
 800c574:	2304      	movs	r3, #4
 800c576:	e04f      	b.n	800c618 <HAL_I2C_Init+0x1dc>
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	689b      	ldr	r3, [r3, #8]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d111      	bne.n	800c5a4 <HAL_I2C_Init+0x168>
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	1e58      	subs	r0, r3, #1
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	6859      	ldr	r1, [r3, #4]
 800c588:	460b      	mov	r3, r1
 800c58a:	005b      	lsls	r3, r3, #1
 800c58c:	440b      	add	r3, r1
 800c58e:	fbb0 f3f3 	udiv	r3, r0, r3
 800c592:	3301      	adds	r3, #1
 800c594:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c598:	2b00      	cmp	r3, #0
 800c59a:	bf0c      	ite	eq
 800c59c:	2301      	moveq	r3, #1
 800c59e:	2300      	movne	r3, #0
 800c5a0:	b2db      	uxtb	r3, r3
 800c5a2:	e012      	b.n	800c5ca <HAL_I2C_Init+0x18e>
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	1e58      	subs	r0, r3, #1
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	6859      	ldr	r1, [r3, #4]
 800c5ac:	460b      	mov	r3, r1
 800c5ae:	009b      	lsls	r3, r3, #2
 800c5b0:	440b      	add	r3, r1
 800c5b2:	0099      	lsls	r1, r3, #2
 800c5b4:	440b      	add	r3, r1
 800c5b6:	fbb0 f3f3 	udiv	r3, r0, r3
 800c5ba:	3301      	adds	r3, #1
 800c5bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	bf0c      	ite	eq
 800c5c4:	2301      	moveq	r3, #1
 800c5c6:	2300      	movne	r3, #0
 800c5c8:	b2db      	uxtb	r3, r3
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d001      	beq.n	800c5d2 <HAL_I2C_Init+0x196>
 800c5ce:	2301      	movs	r3, #1
 800c5d0:	e022      	b.n	800c618 <HAL_I2C_Init+0x1dc>
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	689b      	ldr	r3, [r3, #8]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d10e      	bne.n	800c5f8 <HAL_I2C_Init+0x1bc>
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	1e58      	subs	r0, r3, #1
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	6859      	ldr	r1, [r3, #4]
 800c5e2:	460b      	mov	r3, r1
 800c5e4:	005b      	lsls	r3, r3, #1
 800c5e6:	440b      	add	r3, r1
 800c5e8:	fbb0 f3f3 	udiv	r3, r0, r3
 800c5ec:	3301      	adds	r3, #1
 800c5ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c5f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c5f6:	e00f      	b.n	800c618 <HAL_I2C_Init+0x1dc>
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	1e58      	subs	r0, r3, #1
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	6859      	ldr	r1, [r3, #4]
 800c600:	460b      	mov	r3, r1
 800c602:	009b      	lsls	r3, r3, #2
 800c604:	440b      	add	r3, r1
 800c606:	0099      	lsls	r1, r3, #2
 800c608:	440b      	add	r3, r1
 800c60a:	fbb0 f3f3 	udiv	r3, r0, r3
 800c60e:	3301      	adds	r3, #1
 800c610:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c614:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c618:	6879      	ldr	r1, [r7, #4]
 800c61a:	6809      	ldr	r1, [r1, #0]
 800c61c:	4313      	orrs	r3, r2
 800c61e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	69da      	ldr	r2, [r3, #28]
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	6a1b      	ldr	r3, [r3, #32]
 800c632:	431a      	orrs	r2, r3
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	430a      	orrs	r2, r1
 800c63a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	689b      	ldr	r3, [r3, #8]
 800c642:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800c646:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800c64a:	687a      	ldr	r2, [r7, #4]
 800c64c:	6911      	ldr	r1, [r2, #16]
 800c64e:	687a      	ldr	r2, [r7, #4]
 800c650:	68d2      	ldr	r2, [r2, #12]
 800c652:	4311      	orrs	r1, r2
 800c654:	687a      	ldr	r2, [r7, #4]
 800c656:	6812      	ldr	r2, [r2, #0]
 800c658:	430b      	orrs	r3, r1
 800c65a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	68db      	ldr	r3, [r3, #12]
 800c662:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	695a      	ldr	r2, [r3, #20]
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	699b      	ldr	r3, [r3, #24]
 800c66e:	431a      	orrs	r2, r3
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	430a      	orrs	r2, r1
 800c676:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	681a      	ldr	r2, [r3, #0]
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	f042 0201 	orr.w	r2, r2, #1
 800c686:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	2200      	movs	r2, #0
 800c68c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	2220      	movs	r2, #32
 800c692:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	2200      	movs	r2, #0
 800c69a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	2200      	movs	r2, #0
 800c6a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800c6a4:	2300      	movs	r3, #0
}
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	3710      	adds	r7, #16
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	bd80      	pop	{r7, pc}
 800c6ae:	bf00      	nop
 800c6b0:	000186a0 	.word	0x000186a0
 800c6b4:	001e847f 	.word	0x001e847f
 800c6b8:	003d08ff 	.word	0x003d08ff
 800c6bc:	431bde83 	.word	0x431bde83
 800c6c0:	10624dd3 	.word	0x10624dd3

0800c6c4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	b088      	sub	sp, #32
 800c6c8:	af02      	add	r7, sp, #8
 800c6ca:	60f8      	str	r0, [r7, #12]
 800c6cc:	4608      	mov	r0, r1
 800c6ce:	4611      	mov	r1, r2
 800c6d0:	461a      	mov	r2, r3
 800c6d2:	4603      	mov	r3, r0
 800c6d4:	817b      	strh	r3, [r7, #10]
 800c6d6:	460b      	mov	r3, r1
 800c6d8:	813b      	strh	r3, [r7, #8]
 800c6da:	4613      	mov	r3, r2
 800c6dc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800c6de:	f7fe fcf1 	bl	800b0c4 <HAL_GetTick>
 800c6e2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c6ea:	b2db      	uxtb	r3, r3
 800c6ec:	2b20      	cmp	r3, #32
 800c6ee:	f040 80d9 	bne.w	800c8a4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800c6f2:	697b      	ldr	r3, [r7, #20]
 800c6f4:	9300      	str	r3, [sp, #0]
 800c6f6:	2319      	movs	r3, #25
 800c6f8:	2201      	movs	r2, #1
 800c6fa:	496d      	ldr	r1, [pc, #436]	@ (800c8b0 <HAL_I2C_Mem_Write+0x1ec>)
 800c6fc:	68f8      	ldr	r0, [r7, #12]
 800c6fe:	f000 f971 	bl	800c9e4 <I2C_WaitOnFlagUntilTimeout>
 800c702:	4603      	mov	r3, r0
 800c704:	2b00      	cmp	r3, #0
 800c706:	d001      	beq.n	800c70c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800c708:	2302      	movs	r3, #2
 800c70a:	e0cc      	b.n	800c8a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c712:	2b01      	cmp	r3, #1
 800c714:	d101      	bne.n	800c71a <HAL_I2C_Mem_Write+0x56>
 800c716:	2302      	movs	r3, #2
 800c718:	e0c5      	b.n	800c8a6 <HAL_I2C_Mem_Write+0x1e2>
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	2201      	movs	r2, #1
 800c71e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	f003 0301 	and.w	r3, r3, #1
 800c72c:	2b01      	cmp	r3, #1
 800c72e:	d007      	beq.n	800c740 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	681a      	ldr	r2, [r3, #0]
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	f042 0201 	orr.w	r2, r2, #1
 800c73e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	681a      	ldr	r2, [r3, #0]
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800c74e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	2221      	movs	r2, #33	@ 0x21
 800c754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	2240      	movs	r2, #64	@ 0x40
 800c75c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	2200      	movs	r2, #0
 800c764:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	6a3a      	ldr	r2, [r7, #32]
 800c76a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800c770:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c776:	b29a      	uxth	r2, r3
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	4a4d      	ldr	r2, [pc, #308]	@ (800c8b4 <HAL_I2C_Mem_Write+0x1f0>)
 800c780:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c782:	88f8      	ldrh	r0, [r7, #6]
 800c784:	893a      	ldrh	r2, [r7, #8]
 800c786:	8979      	ldrh	r1, [r7, #10]
 800c788:	697b      	ldr	r3, [r7, #20]
 800c78a:	9301      	str	r3, [sp, #4]
 800c78c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c78e:	9300      	str	r3, [sp, #0]
 800c790:	4603      	mov	r3, r0
 800c792:	68f8      	ldr	r0, [r7, #12]
 800c794:	f000 f890 	bl	800c8b8 <I2C_RequestMemoryWrite>
 800c798:	4603      	mov	r3, r0
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d052      	beq.n	800c844 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800c79e:	2301      	movs	r3, #1
 800c7a0:	e081      	b.n	800c8a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c7a2:	697a      	ldr	r2, [r7, #20]
 800c7a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c7a6:	68f8      	ldr	r0, [r7, #12]
 800c7a8:	f000 fa36 	bl	800cc18 <I2C_WaitOnTXEFlagUntilTimeout>
 800c7ac:	4603      	mov	r3, r0
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d00d      	beq.n	800c7ce <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c7b6:	2b04      	cmp	r3, #4
 800c7b8:	d107      	bne.n	800c7ca <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	681a      	ldr	r2, [r3, #0]
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c7c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800c7ca:	2301      	movs	r3, #1
 800c7cc:	e06b      	b.n	800c8a6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7d2:	781a      	ldrb	r2, [r3, #0]
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7de:	1c5a      	adds	r2, r3, #1
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c7e8:	3b01      	subs	r3, #1
 800c7ea:	b29a      	uxth	r2, r3
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c7f4:	b29b      	uxth	r3, r3
 800c7f6:	3b01      	subs	r3, #1
 800c7f8:	b29a      	uxth	r2, r3
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	695b      	ldr	r3, [r3, #20]
 800c804:	f003 0304 	and.w	r3, r3, #4
 800c808:	2b04      	cmp	r3, #4
 800c80a:	d11b      	bne.n	800c844 <HAL_I2C_Mem_Write+0x180>
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c810:	2b00      	cmp	r3, #0
 800c812:	d017      	beq.n	800c844 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c818:	781a      	ldrb	r2, [r3, #0]
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c824:	1c5a      	adds	r2, r3, #1
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c82e:	3b01      	subs	r3, #1
 800c830:	b29a      	uxth	r2, r3
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c83a:	b29b      	uxth	r3, r3
 800c83c:	3b01      	subs	r3, #1
 800c83e:	b29a      	uxth	r2, r3
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d1aa      	bne.n	800c7a2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c84c:	697a      	ldr	r2, [r7, #20]
 800c84e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c850:	68f8      	ldr	r0, [r7, #12]
 800c852:	f000 fa29 	bl	800cca8 <I2C_WaitOnBTFFlagUntilTimeout>
 800c856:	4603      	mov	r3, r0
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d00d      	beq.n	800c878 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c860:	2b04      	cmp	r3, #4
 800c862:	d107      	bne.n	800c874 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	681a      	ldr	r2, [r3, #0]
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c872:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800c874:	2301      	movs	r3, #1
 800c876:	e016      	b.n	800c8a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	681a      	ldr	r2, [r3, #0]
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c886:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	2220      	movs	r2, #32
 800c88c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	2200      	movs	r2, #0
 800c894:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	2200      	movs	r2, #0
 800c89c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	e000      	b.n	800c8a6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800c8a4:	2302      	movs	r3, #2
  }
}
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	3718      	adds	r7, #24
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	bd80      	pop	{r7, pc}
 800c8ae:	bf00      	nop
 800c8b0:	00100002 	.word	0x00100002
 800c8b4:	ffff0000 	.word	0xffff0000

0800c8b8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	b088      	sub	sp, #32
 800c8bc:	af02      	add	r7, sp, #8
 800c8be:	60f8      	str	r0, [r7, #12]
 800c8c0:	4608      	mov	r0, r1
 800c8c2:	4611      	mov	r1, r2
 800c8c4:	461a      	mov	r2, r3
 800c8c6:	4603      	mov	r3, r0
 800c8c8:	817b      	strh	r3, [r7, #10]
 800c8ca:	460b      	mov	r3, r1
 800c8cc:	813b      	strh	r3, [r7, #8]
 800c8ce:	4613      	mov	r3, r2
 800c8d0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	681a      	ldr	r2, [r3, #0]
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c8e0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800c8e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8e4:	9300      	str	r3, [sp, #0]
 800c8e6:	6a3b      	ldr	r3, [r7, #32]
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800c8ee:	68f8      	ldr	r0, [r7, #12]
 800c8f0:	f000 f878 	bl	800c9e4 <I2C_WaitOnFlagUntilTimeout>
 800c8f4:	4603      	mov	r3, r0
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d00d      	beq.n	800c916 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c904:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c908:	d103      	bne.n	800c912 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c910:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800c912:	2303      	movs	r3, #3
 800c914:	e05f      	b.n	800c9d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800c916:	897b      	ldrh	r3, [r7, #10]
 800c918:	b2db      	uxtb	r3, r3
 800c91a:	461a      	mov	r2, r3
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800c924:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800c926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c928:	6a3a      	ldr	r2, [r7, #32]
 800c92a:	492d      	ldr	r1, [pc, #180]	@ (800c9e0 <I2C_RequestMemoryWrite+0x128>)
 800c92c:	68f8      	ldr	r0, [r7, #12]
 800c92e:	f000 f8d3 	bl	800cad8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c932:	4603      	mov	r3, r0
 800c934:	2b00      	cmp	r3, #0
 800c936:	d001      	beq.n	800c93c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800c938:	2301      	movs	r3, #1
 800c93a:	e04c      	b.n	800c9d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c93c:	2300      	movs	r3, #0
 800c93e:	617b      	str	r3, [r7, #20]
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	695b      	ldr	r3, [r3, #20]
 800c946:	617b      	str	r3, [r7, #20]
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	699b      	ldr	r3, [r3, #24]
 800c94e:	617b      	str	r3, [r7, #20]
 800c950:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c952:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c954:	6a39      	ldr	r1, [r7, #32]
 800c956:	68f8      	ldr	r0, [r7, #12]
 800c958:	f000 f95e 	bl	800cc18 <I2C_WaitOnTXEFlagUntilTimeout>
 800c95c:	4603      	mov	r3, r0
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d00d      	beq.n	800c97e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c966:	2b04      	cmp	r3, #4
 800c968:	d107      	bne.n	800c97a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	681a      	ldr	r2, [r3, #0]
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c978:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800c97a:	2301      	movs	r3, #1
 800c97c:	e02b      	b.n	800c9d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c97e:	88fb      	ldrh	r3, [r7, #6]
 800c980:	2b01      	cmp	r3, #1
 800c982:	d105      	bne.n	800c990 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800c984:	893b      	ldrh	r3, [r7, #8]
 800c986:	b2da      	uxtb	r2, r3
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	611a      	str	r2, [r3, #16]
 800c98e:	e021      	b.n	800c9d4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800c990:	893b      	ldrh	r3, [r7, #8]
 800c992:	0a1b      	lsrs	r3, r3, #8
 800c994:	b29b      	uxth	r3, r3
 800c996:	b2da      	uxtb	r2, r3
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c99e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c9a0:	6a39      	ldr	r1, [r7, #32]
 800c9a2:	68f8      	ldr	r0, [r7, #12]
 800c9a4:	f000 f938 	bl	800cc18 <I2C_WaitOnTXEFlagUntilTimeout>
 800c9a8:	4603      	mov	r3, r0
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d00d      	beq.n	800c9ca <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c9b2:	2b04      	cmp	r3, #4
 800c9b4:	d107      	bne.n	800c9c6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	681a      	ldr	r2, [r3, #0]
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c9c4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800c9c6:	2301      	movs	r3, #1
 800c9c8:	e005      	b.n	800c9d6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800c9ca:	893b      	ldrh	r3, [r7, #8]
 800c9cc:	b2da      	uxtb	r2, r3
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800c9d4:	2300      	movs	r3, #0
}
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	3718      	adds	r7, #24
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	bd80      	pop	{r7, pc}
 800c9de:	bf00      	nop
 800c9e0:	00010002 	.word	0x00010002

0800c9e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b084      	sub	sp, #16
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	60f8      	str	r0, [r7, #12]
 800c9ec:	60b9      	str	r1, [r7, #8]
 800c9ee:	603b      	str	r3, [r7, #0]
 800c9f0:	4613      	mov	r3, r2
 800c9f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c9f4:	e048      	b.n	800ca88 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c9f6:	683b      	ldr	r3, [r7, #0]
 800c9f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9fc:	d044      	beq.n	800ca88 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c9fe:	f7fe fb61 	bl	800b0c4 <HAL_GetTick>
 800ca02:	4602      	mov	r2, r0
 800ca04:	69bb      	ldr	r3, [r7, #24]
 800ca06:	1ad3      	subs	r3, r2, r3
 800ca08:	683a      	ldr	r2, [r7, #0]
 800ca0a:	429a      	cmp	r2, r3
 800ca0c:	d302      	bcc.n	800ca14 <I2C_WaitOnFlagUntilTimeout+0x30>
 800ca0e:	683b      	ldr	r3, [r7, #0]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d139      	bne.n	800ca88 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800ca14:	68bb      	ldr	r3, [r7, #8]
 800ca16:	0c1b      	lsrs	r3, r3, #16
 800ca18:	b2db      	uxtb	r3, r3
 800ca1a:	2b01      	cmp	r3, #1
 800ca1c:	d10d      	bne.n	800ca3a <I2C_WaitOnFlagUntilTimeout+0x56>
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	695b      	ldr	r3, [r3, #20]
 800ca24:	43da      	mvns	r2, r3
 800ca26:	68bb      	ldr	r3, [r7, #8]
 800ca28:	4013      	ands	r3, r2
 800ca2a:	b29b      	uxth	r3, r3
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	bf0c      	ite	eq
 800ca30:	2301      	moveq	r3, #1
 800ca32:	2300      	movne	r3, #0
 800ca34:	b2db      	uxtb	r3, r3
 800ca36:	461a      	mov	r2, r3
 800ca38:	e00c      	b.n	800ca54 <I2C_WaitOnFlagUntilTimeout+0x70>
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	699b      	ldr	r3, [r3, #24]
 800ca40:	43da      	mvns	r2, r3
 800ca42:	68bb      	ldr	r3, [r7, #8]
 800ca44:	4013      	ands	r3, r2
 800ca46:	b29b      	uxth	r3, r3
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	bf0c      	ite	eq
 800ca4c:	2301      	moveq	r3, #1
 800ca4e:	2300      	movne	r3, #0
 800ca50:	b2db      	uxtb	r3, r3
 800ca52:	461a      	mov	r2, r3
 800ca54:	79fb      	ldrb	r3, [r7, #7]
 800ca56:	429a      	cmp	r2, r3
 800ca58:	d116      	bne.n	800ca88 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	2200      	movs	r2, #0
 800ca5e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	2220      	movs	r2, #32
 800ca64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	2200      	movs	r2, #0
 800ca6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca74:	f043 0220 	orr.w	r2, r3, #32
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	2200      	movs	r2, #0
 800ca80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800ca84:	2301      	movs	r3, #1
 800ca86:	e023      	b.n	800cad0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ca88:	68bb      	ldr	r3, [r7, #8]
 800ca8a:	0c1b      	lsrs	r3, r3, #16
 800ca8c:	b2db      	uxtb	r3, r3
 800ca8e:	2b01      	cmp	r3, #1
 800ca90:	d10d      	bne.n	800caae <I2C_WaitOnFlagUntilTimeout+0xca>
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	695b      	ldr	r3, [r3, #20]
 800ca98:	43da      	mvns	r2, r3
 800ca9a:	68bb      	ldr	r3, [r7, #8]
 800ca9c:	4013      	ands	r3, r2
 800ca9e:	b29b      	uxth	r3, r3
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	bf0c      	ite	eq
 800caa4:	2301      	moveq	r3, #1
 800caa6:	2300      	movne	r3, #0
 800caa8:	b2db      	uxtb	r3, r3
 800caaa:	461a      	mov	r2, r3
 800caac:	e00c      	b.n	800cac8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	699b      	ldr	r3, [r3, #24]
 800cab4:	43da      	mvns	r2, r3
 800cab6:	68bb      	ldr	r3, [r7, #8]
 800cab8:	4013      	ands	r3, r2
 800caba:	b29b      	uxth	r3, r3
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	bf0c      	ite	eq
 800cac0:	2301      	moveq	r3, #1
 800cac2:	2300      	movne	r3, #0
 800cac4:	b2db      	uxtb	r3, r3
 800cac6:	461a      	mov	r2, r3
 800cac8:	79fb      	ldrb	r3, [r7, #7]
 800caca:	429a      	cmp	r2, r3
 800cacc:	d093      	beq.n	800c9f6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cace:	2300      	movs	r3, #0
}
 800cad0:	4618      	mov	r0, r3
 800cad2:	3710      	adds	r7, #16
 800cad4:	46bd      	mov	sp, r7
 800cad6:	bd80      	pop	{r7, pc}

0800cad8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b084      	sub	sp, #16
 800cadc:	af00      	add	r7, sp, #0
 800cade:	60f8      	str	r0, [r7, #12]
 800cae0:	60b9      	str	r1, [r7, #8]
 800cae2:	607a      	str	r2, [r7, #4]
 800cae4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800cae6:	e071      	b.n	800cbcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	695b      	ldr	r3, [r3, #20]
 800caee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800caf2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800caf6:	d123      	bne.n	800cb40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	681a      	ldr	r2, [r3, #0]
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cb06:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800cb10:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	2200      	movs	r2, #0
 800cb16:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	2220      	movs	r2, #32
 800cb1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	2200      	movs	r2, #0
 800cb24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb2c:	f043 0204 	orr.w	r2, r3, #4
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	2200      	movs	r2, #0
 800cb38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800cb3c:	2301      	movs	r3, #1
 800cb3e:	e067      	b.n	800cc10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb46:	d041      	beq.n	800cbcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cb48:	f7fe fabc 	bl	800b0c4 <HAL_GetTick>
 800cb4c:	4602      	mov	r2, r0
 800cb4e:	683b      	ldr	r3, [r7, #0]
 800cb50:	1ad3      	subs	r3, r2, r3
 800cb52:	687a      	ldr	r2, [r7, #4]
 800cb54:	429a      	cmp	r2, r3
 800cb56:	d302      	bcc.n	800cb5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d136      	bne.n	800cbcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800cb5e:	68bb      	ldr	r3, [r7, #8]
 800cb60:	0c1b      	lsrs	r3, r3, #16
 800cb62:	b2db      	uxtb	r3, r3
 800cb64:	2b01      	cmp	r3, #1
 800cb66:	d10c      	bne.n	800cb82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	695b      	ldr	r3, [r3, #20]
 800cb6e:	43da      	mvns	r2, r3
 800cb70:	68bb      	ldr	r3, [r7, #8]
 800cb72:	4013      	ands	r3, r2
 800cb74:	b29b      	uxth	r3, r3
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	bf14      	ite	ne
 800cb7a:	2301      	movne	r3, #1
 800cb7c:	2300      	moveq	r3, #0
 800cb7e:	b2db      	uxtb	r3, r3
 800cb80:	e00b      	b.n	800cb9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	699b      	ldr	r3, [r3, #24]
 800cb88:	43da      	mvns	r2, r3
 800cb8a:	68bb      	ldr	r3, [r7, #8]
 800cb8c:	4013      	ands	r3, r2
 800cb8e:	b29b      	uxth	r3, r3
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	bf14      	ite	ne
 800cb94:	2301      	movne	r3, #1
 800cb96:	2300      	moveq	r3, #0
 800cb98:	b2db      	uxtb	r3, r3
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d016      	beq.n	800cbcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	2200      	movs	r2, #0
 800cba2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	2220      	movs	r2, #32
 800cba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	2200      	movs	r2, #0
 800cbb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cbb8:	f043 0220 	orr.w	r2, r3, #32
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	2200      	movs	r2, #0
 800cbc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800cbc8:	2301      	movs	r3, #1
 800cbca:	e021      	b.n	800cc10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800cbcc:	68bb      	ldr	r3, [r7, #8]
 800cbce:	0c1b      	lsrs	r3, r3, #16
 800cbd0:	b2db      	uxtb	r3, r3
 800cbd2:	2b01      	cmp	r3, #1
 800cbd4:	d10c      	bne.n	800cbf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	695b      	ldr	r3, [r3, #20]
 800cbdc:	43da      	mvns	r2, r3
 800cbde:	68bb      	ldr	r3, [r7, #8]
 800cbe0:	4013      	ands	r3, r2
 800cbe2:	b29b      	uxth	r3, r3
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	bf14      	ite	ne
 800cbe8:	2301      	movne	r3, #1
 800cbea:	2300      	moveq	r3, #0
 800cbec:	b2db      	uxtb	r3, r3
 800cbee:	e00b      	b.n	800cc08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	699b      	ldr	r3, [r3, #24]
 800cbf6:	43da      	mvns	r2, r3
 800cbf8:	68bb      	ldr	r3, [r7, #8]
 800cbfa:	4013      	ands	r3, r2
 800cbfc:	b29b      	uxth	r3, r3
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	bf14      	ite	ne
 800cc02:	2301      	movne	r3, #1
 800cc04:	2300      	moveq	r3, #0
 800cc06:	b2db      	uxtb	r3, r3
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	f47f af6d 	bne.w	800cae8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800cc0e:	2300      	movs	r3, #0
}
 800cc10:	4618      	mov	r0, r3
 800cc12:	3710      	adds	r7, #16
 800cc14:	46bd      	mov	sp, r7
 800cc16:	bd80      	pop	{r7, pc}

0800cc18 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800cc18:	b580      	push	{r7, lr}
 800cc1a:	b084      	sub	sp, #16
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	60f8      	str	r0, [r7, #12]
 800cc20:	60b9      	str	r1, [r7, #8]
 800cc22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800cc24:	e034      	b.n	800cc90 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800cc26:	68f8      	ldr	r0, [r7, #12]
 800cc28:	f000 f886 	bl	800cd38 <I2C_IsAcknowledgeFailed>
 800cc2c:	4603      	mov	r3, r0
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d001      	beq.n	800cc36 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800cc32:	2301      	movs	r3, #1
 800cc34:	e034      	b.n	800cca0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cc36:	68bb      	ldr	r3, [r7, #8]
 800cc38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc3c:	d028      	beq.n	800cc90 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cc3e:	f7fe fa41 	bl	800b0c4 <HAL_GetTick>
 800cc42:	4602      	mov	r2, r0
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	1ad3      	subs	r3, r2, r3
 800cc48:	68ba      	ldr	r2, [r7, #8]
 800cc4a:	429a      	cmp	r2, r3
 800cc4c:	d302      	bcc.n	800cc54 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800cc4e:	68bb      	ldr	r3, [r7, #8]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d11d      	bne.n	800cc90 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	695b      	ldr	r3, [r3, #20]
 800cc5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cc5e:	2b80      	cmp	r3, #128	@ 0x80
 800cc60:	d016      	beq.n	800cc90 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	2200      	movs	r2, #0
 800cc66:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	2220      	movs	r2, #32
 800cc6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	2200      	movs	r2, #0
 800cc74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc7c:	f043 0220 	orr.w	r2, r3, #32
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	2200      	movs	r2, #0
 800cc88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800cc8c:	2301      	movs	r3, #1
 800cc8e:	e007      	b.n	800cca0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	695b      	ldr	r3, [r3, #20]
 800cc96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cc9a:	2b80      	cmp	r3, #128	@ 0x80
 800cc9c:	d1c3      	bne.n	800cc26 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800cc9e:	2300      	movs	r3, #0
}
 800cca0:	4618      	mov	r0, r3
 800cca2:	3710      	adds	r7, #16
 800cca4:	46bd      	mov	sp, r7
 800cca6:	bd80      	pop	{r7, pc}

0800cca8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b084      	sub	sp, #16
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	60f8      	str	r0, [r7, #12]
 800ccb0:	60b9      	str	r1, [r7, #8]
 800ccb2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ccb4:	e034      	b.n	800cd20 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800ccb6:	68f8      	ldr	r0, [r7, #12]
 800ccb8:	f000 f83e 	bl	800cd38 <I2C_IsAcknowledgeFailed>
 800ccbc:	4603      	mov	r3, r0
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d001      	beq.n	800ccc6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ccc2:	2301      	movs	r3, #1
 800ccc4:	e034      	b.n	800cd30 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ccc6:	68bb      	ldr	r3, [r7, #8]
 800ccc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cccc:	d028      	beq.n	800cd20 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ccce:	f7fe f9f9 	bl	800b0c4 <HAL_GetTick>
 800ccd2:	4602      	mov	r2, r0
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	1ad3      	subs	r3, r2, r3
 800ccd8:	68ba      	ldr	r2, [r7, #8]
 800ccda:	429a      	cmp	r2, r3
 800ccdc:	d302      	bcc.n	800cce4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800ccde:	68bb      	ldr	r3, [r7, #8]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d11d      	bne.n	800cd20 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	695b      	ldr	r3, [r3, #20]
 800ccea:	f003 0304 	and.w	r3, r3, #4
 800ccee:	2b04      	cmp	r3, #4
 800ccf0:	d016      	beq.n	800cd20 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	2200      	movs	r2, #0
 800ccf6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	2220      	movs	r2, #32
 800ccfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	2200      	movs	r2, #0
 800cd04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd0c:	f043 0220 	orr.w	r2, r3, #32
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	2200      	movs	r2, #0
 800cd18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800cd1c:	2301      	movs	r3, #1
 800cd1e:	e007      	b.n	800cd30 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	695b      	ldr	r3, [r3, #20]
 800cd26:	f003 0304 	and.w	r3, r3, #4
 800cd2a:	2b04      	cmp	r3, #4
 800cd2c:	d1c3      	bne.n	800ccb6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800cd2e:	2300      	movs	r3, #0
}
 800cd30:	4618      	mov	r0, r3
 800cd32:	3710      	adds	r7, #16
 800cd34:	46bd      	mov	sp, r7
 800cd36:	bd80      	pop	{r7, pc}

0800cd38 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800cd38:	b480      	push	{r7}
 800cd3a:	b083      	sub	sp, #12
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	695b      	ldr	r3, [r3, #20]
 800cd46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cd4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cd4e:	d11b      	bne.n	800cd88 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800cd58:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	2200      	movs	r2, #0
 800cd5e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	2220      	movs	r2, #32
 800cd64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd74:	f043 0204 	orr.w	r2, r3, #4
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	2200      	movs	r2, #0
 800cd80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800cd84:	2301      	movs	r3, #1
 800cd86:	e000      	b.n	800cd8a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800cd88:	2300      	movs	r3, #0
}
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	370c      	adds	r7, #12
 800cd8e:	46bd      	mov	sp, r7
 800cd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd94:	4770      	bx	lr

0800cd96 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800cd96:	b580      	push	{r7, lr}
 800cd98:	b086      	sub	sp, #24
 800cd9a:	af02      	add	r7, sp, #8
 800cd9c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d101      	bne.n	800cda8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800cda4:	2301      	movs	r3, #1
 800cda6:	e101      	b.n	800cfac <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800cdb4:	b2db      	uxtb	r3, r3
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d106      	bne.n	800cdc8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	2200      	movs	r2, #0
 800cdbe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800cdc2:	6878      	ldr	r0, [r7, #4]
 800cdc4:	f006 fc14 	bl	80135f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	2203      	movs	r2, #3
 800cdcc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800cdd0:	68bb      	ldr	r3, [r7, #8]
 800cdd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800cdd6:	d102      	bne.n	800cdde <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	2200      	movs	r2, #0
 800cddc:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	4618      	mov	r0, r3
 800cde4:	f003 fb6f 	bl	80104c6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	6818      	ldr	r0, [r3, #0]
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	7c1a      	ldrb	r2, [r3, #16]
 800cdf0:	f88d 2000 	strb.w	r2, [sp]
 800cdf4:	3304      	adds	r3, #4
 800cdf6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cdf8:	f003 fa4e 	bl	8010298 <USB_CoreInit>
 800cdfc:	4603      	mov	r3, r0
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d005      	beq.n	800ce0e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	2202      	movs	r2, #2
 800ce06:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800ce0a:	2301      	movs	r3, #1
 800ce0c:	e0ce      	b.n	800cfac <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	2100      	movs	r1, #0
 800ce14:	4618      	mov	r0, r3
 800ce16:	f003 fb67 	bl	80104e8 <USB_SetCurrentMode>
 800ce1a:	4603      	mov	r3, r0
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d005      	beq.n	800ce2c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	2202      	movs	r2, #2
 800ce24:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800ce28:	2301      	movs	r3, #1
 800ce2a:	e0bf      	b.n	800cfac <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	73fb      	strb	r3, [r7, #15]
 800ce30:	e04a      	b.n	800cec8 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800ce32:	7bfa      	ldrb	r2, [r7, #15]
 800ce34:	6879      	ldr	r1, [r7, #4]
 800ce36:	4613      	mov	r3, r2
 800ce38:	00db      	lsls	r3, r3, #3
 800ce3a:	4413      	add	r3, r2
 800ce3c:	009b      	lsls	r3, r3, #2
 800ce3e:	440b      	add	r3, r1
 800ce40:	3315      	adds	r3, #21
 800ce42:	2201      	movs	r2, #1
 800ce44:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800ce46:	7bfa      	ldrb	r2, [r7, #15]
 800ce48:	6879      	ldr	r1, [r7, #4]
 800ce4a:	4613      	mov	r3, r2
 800ce4c:	00db      	lsls	r3, r3, #3
 800ce4e:	4413      	add	r3, r2
 800ce50:	009b      	lsls	r3, r3, #2
 800ce52:	440b      	add	r3, r1
 800ce54:	3314      	adds	r3, #20
 800ce56:	7bfa      	ldrb	r2, [r7, #15]
 800ce58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800ce5a:	7bfa      	ldrb	r2, [r7, #15]
 800ce5c:	7bfb      	ldrb	r3, [r7, #15]
 800ce5e:	b298      	uxth	r0, r3
 800ce60:	6879      	ldr	r1, [r7, #4]
 800ce62:	4613      	mov	r3, r2
 800ce64:	00db      	lsls	r3, r3, #3
 800ce66:	4413      	add	r3, r2
 800ce68:	009b      	lsls	r3, r3, #2
 800ce6a:	440b      	add	r3, r1
 800ce6c:	332e      	adds	r3, #46	@ 0x2e
 800ce6e:	4602      	mov	r2, r0
 800ce70:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800ce72:	7bfa      	ldrb	r2, [r7, #15]
 800ce74:	6879      	ldr	r1, [r7, #4]
 800ce76:	4613      	mov	r3, r2
 800ce78:	00db      	lsls	r3, r3, #3
 800ce7a:	4413      	add	r3, r2
 800ce7c:	009b      	lsls	r3, r3, #2
 800ce7e:	440b      	add	r3, r1
 800ce80:	3318      	adds	r3, #24
 800ce82:	2200      	movs	r2, #0
 800ce84:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800ce86:	7bfa      	ldrb	r2, [r7, #15]
 800ce88:	6879      	ldr	r1, [r7, #4]
 800ce8a:	4613      	mov	r3, r2
 800ce8c:	00db      	lsls	r3, r3, #3
 800ce8e:	4413      	add	r3, r2
 800ce90:	009b      	lsls	r3, r3, #2
 800ce92:	440b      	add	r3, r1
 800ce94:	331c      	adds	r3, #28
 800ce96:	2200      	movs	r2, #0
 800ce98:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800ce9a:	7bfa      	ldrb	r2, [r7, #15]
 800ce9c:	6879      	ldr	r1, [r7, #4]
 800ce9e:	4613      	mov	r3, r2
 800cea0:	00db      	lsls	r3, r3, #3
 800cea2:	4413      	add	r3, r2
 800cea4:	009b      	lsls	r3, r3, #2
 800cea6:	440b      	add	r3, r1
 800cea8:	3320      	adds	r3, #32
 800ceaa:	2200      	movs	r2, #0
 800ceac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800ceae:	7bfa      	ldrb	r2, [r7, #15]
 800ceb0:	6879      	ldr	r1, [r7, #4]
 800ceb2:	4613      	mov	r3, r2
 800ceb4:	00db      	lsls	r3, r3, #3
 800ceb6:	4413      	add	r3, r2
 800ceb8:	009b      	lsls	r3, r3, #2
 800ceba:	440b      	add	r3, r1
 800cebc:	3324      	adds	r3, #36	@ 0x24
 800cebe:	2200      	movs	r2, #0
 800cec0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cec2:	7bfb      	ldrb	r3, [r7, #15]
 800cec4:	3301      	adds	r3, #1
 800cec6:	73fb      	strb	r3, [r7, #15]
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	791b      	ldrb	r3, [r3, #4]
 800cecc:	7bfa      	ldrb	r2, [r7, #15]
 800cece:	429a      	cmp	r2, r3
 800ced0:	d3af      	bcc.n	800ce32 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ced2:	2300      	movs	r3, #0
 800ced4:	73fb      	strb	r3, [r7, #15]
 800ced6:	e044      	b.n	800cf62 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800ced8:	7bfa      	ldrb	r2, [r7, #15]
 800ceda:	6879      	ldr	r1, [r7, #4]
 800cedc:	4613      	mov	r3, r2
 800cede:	00db      	lsls	r3, r3, #3
 800cee0:	4413      	add	r3, r2
 800cee2:	009b      	lsls	r3, r3, #2
 800cee4:	440b      	add	r3, r1
 800cee6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800ceea:	2200      	movs	r2, #0
 800ceec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800ceee:	7bfa      	ldrb	r2, [r7, #15]
 800cef0:	6879      	ldr	r1, [r7, #4]
 800cef2:	4613      	mov	r3, r2
 800cef4:	00db      	lsls	r3, r3, #3
 800cef6:	4413      	add	r3, r2
 800cef8:	009b      	lsls	r3, r3, #2
 800cefa:	440b      	add	r3, r1
 800cefc:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800cf00:	7bfa      	ldrb	r2, [r7, #15]
 800cf02:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800cf04:	7bfa      	ldrb	r2, [r7, #15]
 800cf06:	6879      	ldr	r1, [r7, #4]
 800cf08:	4613      	mov	r3, r2
 800cf0a:	00db      	lsls	r3, r3, #3
 800cf0c:	4413      	add	r3, r2
 800cf0e:	009b      	lsls	r3, r3, #2
 800cf10:	440b      	add	r3, r1
 800cf12:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800cf16:	2200      	movs	r2, #0
 800cf18:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800cf1a:	7bfa      	ldrb	r2, [r7, #15]
 800cf1c:	6879      	ldr	r1, [r7, #4]
 800cf1e:	4613      	mov	r3, r2
 800cf20:	00db      	lsls	r3, r3, #3
 800cf22:	4413      	add	r3, r2
 800cf24:	009b      	lsls	r3, r3, #2
 800cf26:	440b      	add	r3, r1
 800cf28:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800cf2c:	2200      	movs	r2, #0
 800cf2e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800cf30:	7bfa      	ldrb	r2, [r7, #15]
 800cf32:	6879      	ldr	r1, [r7, #4]
 800cf34:	4613      	mov	r3, r2
 800cf36:	00db      	lsls	r3, r3, #3
 800cf38:	4413      	add	r3, r2
 800cf3a:	009b      	lsls	r3, r3, #2
 800cf3c:	440b      	add	r3, r1
 800cf3e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800cf42:	2200      	movs	r2, #0
 800cf44:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800cf46:	7bfa      	ldrb	r2, [r7, #15]
 800cf48:	6879      	ldr	r1, [r7, #4]
 800cf4a:	4613      	mov	r3, r2
 800cf4c:	00db      	lsls	r3, r3, #3
 800cf4e:	4413      	add	r3, r2
 800cf50:	009b      	lsls	r3, r3, #2
 800cf52:	440b      	add	r3, r1
 800cf54:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800cf58:	2200      	movs	r2, #0
 800cf5a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cf5c:	7bfb      	ldrb	r3, [r7, #15]
 800cf5e:	3301      	adds	r3, #1
 800cf60:	73fb      	strb	r3, [r7, #15]
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	791b      	ldrb	r3, [r3, #4]
 800cf66:	7bfa      	ldrb	r2, [r7, #15]
 800cf68:	429a      	cmp	r2, r3
 800cf6a:	d3b5      	bcc.n	800ced8 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	6818      	ldr	r0, [r3, #0]
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	7c1a      	ldrb	r2, [r3, #16]
 800cf74:	f88d 2000 	strb.w	r2, [sp]
 800cf78:	3304      	adds	r3, #4
 800cf7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cf7c:	f003 fb00 	bl	8010580 <USB_DevInit>
 800cf80:	4603      	mov	r3, r0
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d005      	beq.n	800cf92 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	2202      	movs	r2, #2
 800cf8a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800cf8e:	2301      	movs	r3, #1
 800cf90:	e00c      	b.n	800cfac <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	2200      	movs	r2, #0
 800cf96:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	2201      	movs	r2, #1
 800cf9c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	f004 fb4a 	bl	801163e <USB_DevDisconnect>

  return HAL_OK;
 800cfaa:	2300      	movs	r3, #0
}
 800cfac:	4618      	mov	r0, r3
 800cfae:	3710      	adds	r7, #16
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	bd80      	pop	{r7, pc}

0800cfb4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	b084      	sub	sp, #16
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800cfc8:	2b01      	cmp	r3, #1
 800cfca:	d101      	bne.n	800cfd0 <HAL_PCD_Start+0x1c>
 800cfcc:	2302      	movs	r3, #2
 800cfce:	e022      	b.n	800d016 <HAL_PCD_Start+0x62>
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	2201      	movs	r2, #1
 800cfd4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	68db      	ldr	r3, [r3, #12]
 800cfdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d009      	beq.n	800cff8 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800cfe8:	2b01      	cmp	r3, #1
 800cfea:	d105      	bne.n	800cff8 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cff0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	4618      	mov	r0, r3
 800cffe:	f003 fa51 	bl	80104a4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	4618      	mov	r0, r3
 800d008:	f004 faf8 	bl	80115fc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	2200      	movs	r2, #0
 800d010:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800d014:	2300      	movs	r3, #0
}
 800d016:	4618      	mov	r0, r3
 800d018:	3710      	adds	r7, #16
 800d01a:	46bd      	mov	sp, r7
 800d01c:	bd80      	pop	{r7, pc}

0800d01e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800d01e:	b590      	push	{r4, r7, lr}
 800d020:	b08d      	sub	sp, #52	@ 0x34
 800d022:	af00      	add	r7, sp, #0
 800d024:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d02c:	6a3b      	ldr	r3, [r7, #32]
 800d02e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	4618      	mov	r0, r3
 800d036:	f004 fbb6 	bl	80117a6 <USB_GetMode>
 800d03a:	4603      	mov	r3, r0
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	f040 848c 	bne.w	800d95a <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	4618      	mov	r0, r3
 800d048:	f004 fb1a 	bl	8011680 <USB_ReadInterrupts>
 800d04c:	4603      	mov	r3, r0
 800d04e:	2b00      	cmp	r3, #0
 800d050:	f000 8482 	beq.w	800d958 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800d054:	69fb      	ldr	r3, [r7, #28]
 800d056:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d05a:	689b      	ldr	r3, [r3, #8]
 800d05c:	0a1b      	lsrs	r3, r3, #8
 800d05e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	4618      	mov	r0, r3
 800d06e:	f004 fb07 	bl	8011680 <USB_ReadInterrupts>
 800d072:	4603      	mov	r3, r0
 800d074:	f003 0302 	and.w	r3, r3, #2
 800d078:	2b02      	cmp	r3, #2
 800d07a:	d107      	bne.n	800d08c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	695a      	ldr	r2, [r3, #20]
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	f002 0202 	and.w	r2, r2, #2
 800d08a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	4618      	mov	r0, r3
 800d092:	f004 faf5 	bl	8011680 <USB_ReadInterrupts>
 800d096:	4603      	mov	r3, r0
 800d098:	f003 0310 	and.w	r3, r3, #16
 800d09c:	2b10      	cmp	r3, #16
 800d09e:	d161      	bne.n	800d164 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	699a      	ldr	r2, [r3, #24]
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	f022 0210 	bic.w	r2, r2, #16
 800d0ae:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800d0b0:	6a3b      	ldr	r3, [r7, #32]
 800d0b2:	6a1b      	ldr	r3, [r3, #32]
 800d0b4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800d0b6:	69bb      	ldr	r3, [r7, #24]
 800d0b8:	f003 020f 	and.w	r2, r3, #15
 800d0bc:	4613      	mov	r3, r2
 800d0be:	00db      	lsls	r3, r3, #3
 800d0c0:	4413      	add	r3, r2
 800d0c2:	009b      	lsls	r3, r3, #2
 800d0c4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800d0c8:	687a      	ldr	r2, [r7, #4]
 800d0ca:	4413      	add	r3, r2
 800d0cc:	3304      	adds	r3, #4
 800d0ce:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800d0d0:	69bb      	ldr	r3, [r7, #24]
 800d0d2:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800d0d6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d0da:	d124      	bne.n	800d126 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800d0dc:	69ba      	ldr	r2, [r7, #24]
 800d0de:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800d0e2:	4013      	ands	r3, r2
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d035      	beq.n	800d154 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800d0e8:	697b      	ldr	r3, [r7, #20]
 800d0ea:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800d0ec:	69bb      	ldr	r3, [r7, #24]
 800d0ee:	091b      	lsrs	r3, r3, #4
 800d0f0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800d0f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d0f6:	b29b      	uxth	r3, r3
 800d0f8:	461a      	mov	r2, r3
 800d0fa:	6a38      	ldr	r0, [r7, #32]
 800d0fc:	f004 f92c 	bl	8011358 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800d100:	697b      	ldr	r3, [r7, #20]
 800d102:	68da      	ldr	r2, [r3, #12]
 800d104:	69bb      	ldr	r3, [r7, #24]
 800d106:	091b      	lsrs	r3, r3, #4
 800d108:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d10c:	441a      	add	r2, r3
 800d10e:	697b      	ldr	r3, [r7, #20]
 800d110:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800d112:	697b      	ldr	r3, [r7, #20]
 800d114:	695a      	ldr	r2, [r3, #20]
 800d116:	69bb      	ldr	r3, [r7, #24]
 800d118:	091b      	lsrs	r3, r3, #4
 800d11a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d11e:	441a      	add	r2, r3
 800d120:	697b      	ldr	r3, [r7, #20]
 800d122:	615a      	str	r2, [r3, #20]
 800d124:	e016      	b.n	800d154 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800d126:	69bb      	ldr	r3, [r7, #24]
 800d128:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800d12c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800d130:	d110      	bne.n	800d154 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d138:	2208      	movs	r2, #8
 800d13a:	4619      	mov	r1, r3
 800d13c:	6a38      	ldr	r0, [r7, #32]
 800d13e:	f004 f90b 	bl	8011358 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800d142:	697b      	ldr	r3, [r7, #20]
 800d144:	695a      	ldr	r2, [r3, #20]
 800d146:	69bb      	ldr	r3, [r7, #24]
 800d148:	091b      	lsrs	r3, r3, #4
 800d14a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d14e:	441a      	add	r2, r3
 800d150:	697b      	ldr	r3, [r7, #20]
 800d152:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	699a      	ldr	r2, [r3, #24]
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	f042 0210 	orr.w	r2, r2, #16
 800d162:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	4618      	mov	r0, r3
 800d16a:	f004 fa89 	bl	8011680 <USB_ReadInterrupts>
 800d16e:	4603      	mov	r3, r0
 800d170:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800d174:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800d178:	f040 80a7 	bne.w	800d2ca <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800d17c:	2300      	movs	r3, #0
 800d17e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	4618      	mov	r0, r3
 800d186:	f004 fa8e 	bl	80116a6 <USB_ReadDevAllOutEpInterrupt>
 800d18a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800d18c:	e099      	b.n	800d2c2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800d18e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d190:	f003 0301 	and.w	r3, r3, #1
 800d194:	2b00      	cmp	r3, #0
 800d196:	f000 808e 	beq.w	800d2b6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d1a0:	b2d2      	uxtb	r2, r2
 800d1a2:	4611      	mov	r1, r2
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	f004 fab2 	bl	801170e <USB_ReadDevOutEPInterrupt>
 800d1aa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800d1ac:	693b      	ldr	r3, [r7, #16]
 800d1ae:	f003 0301 	and.w	r3, r3, #1
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d00c      	beq.n	800d1d0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800d1b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1b8:	015a      	lsls	r2, r3, #5
 800d1ba:	69fb      	ldr	r3, [r7, #28]
 800d1bc:	4413      	add	r3, r2
 800d1be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d1c2:	461a      	mov	r2, r3
 800d1c4:	2301      	movs	r3, #1
 800d1c6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800d1c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d1ca:	6878      	ldr	r0, [r7, #4]
 800d1cc:	f000 fe8c 	bl	800dee8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800d1d0:	693b      	ldr	r3, [r7, #16]
 800d1d2:	f003 0308 	and.w	r3, r3, #8
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d00c      	beq.n	800d1f4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800d1da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1dc:	015a      	lsls	r2, r3, #5
 800d1de:	69fb      	ldr	r3, [r7, #28]
 800d1e0:	4413      	add	r3, r2
 800d1e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d1e6:	461a      	mov	r2, r3
 800d1e8:	2308      	movs	r3, #8
 800d1ea:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800d1ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d1ee:	6878      	ldr	r0, [r7, #4]
 800d1f0:	f000 ff62 	bl	800e0b8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800d1f4:	693b      	ldr	r3, [r7, #16]
 800d1f6:	f003 0310 	and.w	r3, r3, #16
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d008      	beq.n	800d210 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800d1fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d200:	015a      	lsls	r2, r3, #5
 800d202:	69fb      	ldr	r3, [r7, #28]
 800d204:	4413      	add	r3, r2
 800d206:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d20a:	461a      	mov	r2, r3
 800d20c:	2310      	movs	r3, #16
 800d20e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800d210:	693b      	ldr	r3, [r7, #16]
 800d212:	f003 0302 	and.w	r3, r3, #2
 800d216:	2b00      	cmp	r3, #0
 800d218:	d030      	beq.n	800d27c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800d21a:	6a3b      	ldr	r3, [r7, #32]
 800d21c:	695b      	ldr	r3, [r3, #20]
 800d21e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d222:	2b80      	cmp	r3, #128	@ 0x80
 800d224:	d109      	bne.n	800d23a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800d226:	69fb      	ldr	r3, [r7, #28]
 800d228:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d22c:	685b      	ldr	r3, [r3, #4]
 800d22e:	69fa      	ldr	r2, [r7, #28]
 800d230:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d234:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800d238:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800d23a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d23c:	4613      	mov	r3, r2
 800d23e:	00db      	lsls	r3, r3, #3
 800d240:	4413      	add	r3, r2
 800d242:	009b      	lsls	r3, r3, #2
 800d244:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800d248:	687a      	ldr	r2, [r7, #4]
 800d24a:	4413      	add	r3, r2
 800d24c:	3304      	adds	r3, #4
 800d24e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800d250:	697b      	ldr	r3, [r7, #20]
 800d252:	78db      	ldrb	r3, [r3, #3]
 800d254:	2b01      	cmp	r3, #1
 800d256:	d108      	bne.n	800d26a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800d258:	697b      	ldr	r3, [r7, #20]
 800d25a:	2200      	movs	r2, #0
 800d25c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800d25e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d260:	b2db      	uxtb	r3, r3
 800d262:	4619      	mov	r1, r3
 800d264:	6878      	ldr	r0, [r7, #4]
 800d266:	f006 fabf 	bl	80137e8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800d26a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d26c:	015a      	lsls	r2, r3, #5
 800d26e:	69fb      	ldr	r3, [r7, #28]
 800d270:	4413      	add	r3, r2
 800d272:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d276:	461a      	mov	r2, r3
 800d278:	2302      	movs	r3, #2
 800d27a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800d27c:	693b      	ldr	r3, [r7, #16]
 800d27e:	f003 0320 	and.w	r3, r3, #32
 800d282:	2b00      	cmp	r3, #0
 800d284:	d008      	beq.n	800d298 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800d286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d288:	015a      	lsls	r2, r3, #5
 800d28a:	69fb      	ldr	r3, [r7, #28]
 800d28c:	4413      	add	r3, r2
 800d28e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d292:	461a      	mov	r2, r3
 800d294:	2320      	movs	r3, #32
 800d296:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800d298:	693b      	ldr	r3, [r7, #16]
 800d29a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d009      	beq.n	800d2b6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800d2a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2a4:	015a      	lsls	r2, r3, #5
 800d2a6:	69fb      	ldr	r3, [r7, #28]
 800d2a8:	4413      	add	r3, r2
 800d2aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d2ae:	461a      	mov	r2, r3
 800d2b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d2b4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800d2b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2b8:	3301      	adds	r3, #1
 800d2ba:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800d2bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2be:	085b      	lsrs	r3, r3, #1
 800d2c0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800d2c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	f47f af62 	bne.w	800d18e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	f004 f9d6 	bl	8011680 <USB_ReadInterrupts>
 800d2d4:	4603      	mov	r3, r0
 800d2d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d2da:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d2de:	f040 80db 	bne.w	800d498 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	f004 f9f7 	bl	80116da <USB_ReadDevAllInEpInterrupt>
 800d2ec:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800d2f2:	e0cd      	b.n	800d490 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800d2f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2f6:	f003 0301 	and.w	r3, r3, #1
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	f000 80c2 	beq.w	800d484 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d306:	b2d2      	uxtb	r2, r2
 800d308:	4611      	mov	r1, r2
 800d30a:	4618      	mov	r0, r3
 800d30c:	f004 fa1d 	bl	801174a <USB_ReadDevInEPInterrupt>
 800d310:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800d312:	693b      	ldr	r3, [r7, #16]
 800d314:	f003 0301 	and.w	r3, r3, #1
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d057      	beq.n	800d3cc <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800d31c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d31e:	f003 030f 	and.w	r3, r3, #15
 800d322:	2201      	movs	r2, #1
 800d324:	fa02 f303 	lsl.w	r3, r2, r3
 800d328:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800d32a:	69fb      	ldr	r3, [r7, #28]
 800d32c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d330:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	43db      	mvns	r3, r3
 800d336:	69f9      	ldr	r1, [r7, #28]
 800d338:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d33c:	4013      	ands	r3, r2
 800d33e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800d340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d342:	015a      	lsls	r2, r3, #5
 800d344:	69fb      	ldr	r3, [r7, #28]
 800d346:	4413      	add	r3, r2
 800d348:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d34c:	461a      	mov	r2, r3
 800d34e:	2301      	movs	r3, #1
 800d350:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	799b      	ldrb	r3, [r3, #6]
 800d356:	2b01      	cmp	r3, #1
 800d358:	d132      	bne.n	800d3c0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800d35a:	6879      	ldr	r1, [r7, #4]
 800d35c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d35e:	4613      	mov	r3, r2
 800d360:	00db      	lsls	r3, r3, #3
 800d362:	4413      	add	r3, r2
 800d364:	009b      	lsls	r3, r3, #2
 800d366:	440b      	add	r3, r1
 800d368:	3320      	adds	r3, #32
 800d36a:	6819      	ldr	r1, [r3, #0]
 800d36c:	6878      	ldr	r0, [r7, #4]
 800d36e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d370:	4613      	mov	r3, r2
 800d372:	00db      	lsls	r3, r3, #3
 800d374:	4413      	add	r3, r2
 800d376:	009b      	lsls	r3, r3, #2
 800d378:	4403      	add	r3, r0
 800d37a:	331c      	adds	r3, #28
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	4419      	add	r1, r3
 800d380:	6878      	ldr	r0, [r7, #4]
 800d382:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d384:	4613      	mov	r3, r2
 800d386:	00db      	lsls	r3, r3, #3
 800d388:	4413      	add	r3, r2
 800d38a:	009b      	lsls	r3, r3, #2
 800d38c:	4403      	add	r3, r0
 800d38e:	3320      	adds	r3, #32
 800d390:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800d392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d394:	2b00      	cmp	r3, #0
 800d396:	d113      	bne.n	800d3c0 <HAL_PCD_IRQHandler+0x3a2>
 800d398:	6879      	ldr	r1, [r7, #4]
 800d39a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d39c:	4613      	mov	r3, r2
 800d39e:	00db      	lsls	r3, r3, #3
 800d3a0:	4413      	add	r3, r2
 800d3a2:	009b      	lsls	r3, r3, #2
 800d3a4:	440b      	add	r3, r1
 800d3a6:	3324      	adds	r3, #36	@ 0x24
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d108      	bne.n	800d3c0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	6818      	ldr	r0, [r3, #0]
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d3b8:	461a      	mov	r2, r3
 800d3ba:	2101      	movs	r1, #1
 800d3bc:	f004 fa24 	bl	8011808 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800d3c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3c2:	b2db      	uxtb	r3, r3
 800d3c4:	4619      	mov	r1, r3
 800d3c6:	6878      	ldr	r0, [r7, #4]
 800d3c8:	f006 f993 	bl	80136f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800d3cc:	693b      	ldr	r3, [r7, #16]
 800d3ce:	f003 0308 	and.w	r3, r3, #8
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d008      	beq.n	800d3e8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800d3d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3d8:	015a      	lsls	r2, r3, #5
 800d3da:	69fb      	ldr	r3, [r7, #28]
 800d3dc:	4413      	add	r3, r2
 800d3de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d3e2:	461a      	mov	r2, r3
 800d3e4:	2308      	movs	r3, #8
 800d3e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800d3e8:	693b      	ldr	r3, [r7, #16]
 800d3ea:	f003 0310 	and.w	r3, r3, #16
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d008      	beq.n	800d404 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800d3f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3f4:	015a      	lsls	r2, r3, #5
 800d3f6:	69fb      	ldr	r3, [r7, #28]
 800d3f8:	4413      	add	r3, r2
 800d3fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d3fe:	461a      	mov	r2, r3
 800d400:	2310      	movs	r3, #16
 800d402:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800d404:	693b      	ldr	r3, [r7, #16]
 800d406:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d008      	beq.n	800d420 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800d40e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d410:	015a      	lsls	r2, r3, #5
 800d412:	69fb      	ldr	r3, [r7, #28]
 800d414:	4413      	add	r3, r2
 800d416:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d41a:	461a      	mov	r2, r3
 800d41c:	2340      	movs	r3, #64	@ 0x40
 800d41e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800d420:	693b      	ldr	r3, [r7, #16]
 800d422:	f003 0302 	and.w	r3, r3, #2
 800d426:	2b00      	cmp	r3, #0
 800d428:	d023      	beq.n	800d472 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800d42a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d42c:	6a38      	ldr	r0, [r7, #32]
 800d42e:	f003 fa0b 	bl	8010848 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800d432:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d434:	4613      	mov	r3, r2
 800d436:	00db      	lsls	r3, r3, #3
 800d438:	4413      	add	r3, r2
 800d43a:	009b      	lsls	r3, r3, #2
 800d43c:	3310      	adds	r3, #16
 800d43e:	687a      	ldr	r2, [r7, #4]
 800d440:	4413      	add	r3, r2
 800d442:	3304      	adds	r3, #4
 800d444:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800d446:	697b      	ldr	r3, [r7, #20]
 800d448:	78db      	ldrb	r3, [r3, #3]
 800d44a:	2b01      	cmp	r3, #1
 800d44c:	d108      	bne.n	800d460 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800d44e:	697b      	ldr	r3, [r7, #20]
 800d450:	2200      	movs	r2, #0
 800d452:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800d454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d456:	b2db      	uxtb	r3, r3
 800d458:	4619      	mov	r1, r3
 800d45a:	6878      	ldr	r0, [r7, #4]
 800d45c:	f006 f9d6 	bl	801380c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800d460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d462:	015a      	lsls	r2, r3, #5
 800d464:	69fb      	ldr	r3, [r7, #28]
 800d466:	4413      	add	r3, r2
 800d468:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d46c:	461a      	mov	r2, r3
 800d46e:	2302      	movs	r3, #2
 800d470:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800d472:	693b      	ldr	r3, [r7, #16]
 800d474:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d003      	beq.n	800d484 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800d47c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d47e:	6878      	ldr	r0, [r7, #4]
 800d480:	f000 fca5 	bl	800ddce <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800d484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d486:	3301      	adds	r3, #1
 800d488:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800d48a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d48c:	085b      	lsrs	r3, r3, #1
 800d48e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800d490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d492:	2b00      	cmp	r3, #0
 800d494:	f47f af2e 	bne.w	800d2f4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	4618      	mov	r0, r3
 800d49e:	f004 f8ef 	bl	8011680 <USB_ReadInterrupts>
 800d4a2:	4603      	mov	r3, r0
 800d4a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d4a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d4ac:	d122      	bne.n	800d4f4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800d4ae:	69fb      	ldr	r3, [r7, #28]
 800d4b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d4b4:	685b      	ldr	r3, [r3, #4]
 800d4b6:	69fa      	ldr	r2, [r7, #28]
 800d4b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d4bc:	f023 0301 	bic.w	r3, r3, #1
 800d4c0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800d4c8:	2b01      	cmp	r3, #1
 800d4ca:	d108      	bne.n	800d4de <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800d4d4:	2100      	movs	r1, #0
 800d4d6:	6878      	ldr	r0, [r7, #4]
 800d4d8:	f000 fe8c 	bl	800e1f4 <HAL_PCDEx_LPM_Callback>
 800d4dc:	e002      	b.n	800d4e4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800d4de:	6878      	ldr	r0, [r7, #4]
 800d4e0:	f006 f974 	bl	80137cc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	695a      	ldr	r2, [r3, #20]
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800d4f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	4618      	mov	r0, r3
 800d4fa:	f004 f8c1 	bl	8011680 <USB_ReadInterrupts>
 800d4fe:	4603      	mov	r3, r0
 800d500:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d504:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d508:	d112      	bne.n	800d530 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800d50a:	69fb      	ldr	r3, [r7, #28]
 800d50c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d510:	689b      	ldr	r3, [r3, #8]
 800d512:	f003 0301 	and.w	r3, r3, #1
 800d516:	2b01      	cmp	r3, #1
 800d518:	d102      	bne.n	800d520 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800d51a:	6878      	ldr	r0, [r7, #4]
 800d51c:	f006 f930 	bl	8013780 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	695a      	ldr	r2, [r3, #20]
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800d52e:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	4618      	mov	r0, r3
 800d536:	f004 f8a3 	bl	8011680 <USB_ReadInterrupts>
 800d53a:	4603      	mov	r3, r0
 800d53c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d540:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d544:	f040 80b7 	bne.w	800d6b6 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800d548:	69fb      	ldr	r3, [r7, #28]
 800d54a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d54e:	685b      	ldr	r3, [r3, #4]
 800d550:	69fa      	ldr	r2, [r7, #28]
 800d552:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d556:	f023 0301 	bic.w	r3, r3, #1
 800d55a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	2110      	movs	r1, #16
 800d562:	4618      	mov	r0, r3
 800d564:	f003 f970 	bl	8010848 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d568:	2300      	movs	r3, #0
 800d56a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d56c:	e046      	b.n	800d5fc <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800d56e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d570:	015a      	lsls	r2, r3, #5
 800d572:	69fb      	ldr	r3, [r7, #28]
 800d574:	4413      	add	r3, r2
 800d576:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d57a:	461a      	mov	r2, r3
 800d57c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800d580:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d584:	015a      	lsls	r2, r3, #5
 800d586:	69fb      	ldr	r3, [r7, #28]
 800d588:	4413      	add	r3, r2
 800d58a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d592:	0151      	lsls	r1, r2, #5
 800d594:	69fa      	ldr	r2, [r7, #28]
 800d596:	440a      	add	r2, r1
 800d598:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d59c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800d5a0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800d5a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5a4:	015a      	lsls	r2, r3, #5
 800d5a6:	69fb      	ldr	r3, [r7, #28]
 800d5a8:	4413      	add	r3, r2
 800d5aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d5ae:	461a      	mov	r2, r3
 800d5b0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800d5b4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d5b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5b8:	015a      	lsls	r2, r3, #5
 800d5ba:	69fb      	ldr	r3, [r7, #28]
 800d5bc:	4413      	add	r3, r2
 800d5be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d5c6:	0151      	lsls	r1, r2, #5
 800d5c8:	69fa      	ldr	r2, [r7, #28]
 800d5ca:	440a      	add	r2, r1
 800d5cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d5d0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800d5d4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800d5d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5d8:	015a      	lsls	r2, r3, #5
 800d5da:	69fb      	ldr	r3, [r7, #28]
 800d5dc:	4413      	add	r3, r2
 800d5de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d5e6:	0151      	lsls	r1, r2, #5
 800d5e8:	69fa      	ldr	r2, [r7, #28]
 800d5ea:	440a      	add	r2, r1
 800d5ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d5f0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800d5f4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d5f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5f8:	3301      	adds	r3, #1
 800d5fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	791b      	ldrb	r3, [r3, #4]
 800d600:	461a      	mov	r2, r3
 800d602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d604:	4293      	cmp	r3, r2
 800d606:	d3b2      	bcc.n	800d56e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800d608:	69fb      	ldr	r3, [r7, #28]
 800d60a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d60e:	69db      	ldr	r3, [r3, #28]
 800d610:	69fa      	ldr	r2, [r7, #28]
 800d612:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d616:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800d61a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	7bdb      	ldrb	r3, [r3, #15]
 800d620:	2b00      	cmp	r3, #0
 800d622:	d016      	beq.n	800d652 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800d624:	69fb      	ldr	r3, [r7, #28]
 800d626:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d62a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d62e:	69fa      	ldr	r2, [r7, #28]
 800d630:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d634:	f043 030b 	orr.w	r3, r3, #11
 800d638:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800d63c:	69fb      	ldr	r3, [r7, #28]
 800d63e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d642:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d644:	69fa      	ldr	r2, [r7, #28]
 800d646:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d64a:	f043 030b 	orr.w	r3, r3, #11
 800d64e:	6453      	str	r3, [r2, #68]	@ 0x44
 800d650:	e015      	b.n	800d67e <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800d652:	69fb      	ldr	r3, [r7, #28]
 800d654:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d658:	695b      	ldr	r3, [r3, #20]
 800d65a:	69fa      	ldr	r2, [r7, #28]
 800d65c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d660:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800d664:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800d668:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800d66a:	69fb      	ldr	r3, [r7, #28]
 800d66c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d670:	691b      	ldr	r3, [r3, #16]
 800d672:	69fa      	ldr	r2, [r7, #28]
 800d674:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d678:	f043 030b 	orr.w	r3, r3, #11
 800d67c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800d67e:	69fb      	ldr	r3, [r7, #28]
 800d680:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	69fa      	ldr	r2, [r7, #28]
 800d688:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d68c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800d690:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	6818      	ldr	r0, [r3, #0]
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800d6a0:	461a      	mov	r2, r3
 800d6a2:	f004 f8b1 	bl	8011808 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	695a      	ldr	r2, [r3, #20]
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800d6b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	f003 ffe0 	bl	8011680 <USB_ReadInterrupts>
 800d6c0:	4603      	mov	r3, r0
 800d6c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d6c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d6ca:	d123      	bne.n	800d714 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	f004 f876 	bl	80117c2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	4618      	mov	r0, r3
 800d6dc:	f003 f92d 	bl	801093a <USB_GetDevSpeed>
 800d6e0:	4603      	mov	r3, r0
 800d6e2:	461a      	mov	r2, r3
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	681c      	ldr	r4, [r3, #0]
 800d6ec:	f001 f9f2 	bl	800ead4 <HAL_RCC_GetHCLKFreq>
 800d6f0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800d6f6:	461a      	mov	r2, r3
 800d6f8:	4620      	mov	r0, r4
 800d6fa:	f002 fe31 	bl	8010360 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800d6fe:	6878      	ldr	r0, [r7, #4]
 800d700:	f006 f81f 	bl	8013742 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	695a      	ldr	r2, [r3, #20]
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800d712:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	4618      	mov	r0, r3
 800d71a:	f003 ffb1 	bl	8011680 <USB_ReadInterrupts>
 800d71e:	4603      	mov	r3, r0
 800d720:	f003 0308 	and.w	r3, r3, #8
 800d724:	2b08      	cmp	r3, #8
 800d726:	d10a      	bne.n	800d73e <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800d728:	6878      	ldr	r0, [r7, #4]
 800d72a:	f005 fffc 	bl	8013726 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	695a      	ldr	r2, [r3, #20]
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	f002 0208 	and.w	r2, r2, #8
 800d73c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	4618      	mov	r0, r3
 800d744:	f003 ff9c 	bl	8011680 <USB_ReadInterrupts>
 800d748:	4603      	mov	r3, r0
 800d74a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d74e:	2b80      	cmp	r3, #128	@ 0x80
 800d750:	d123      	bne.n	800d79a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800d752:	6a3b      	ldr	r3, [r7, #32]
 800d754:	699b      	ldr	r3, [r3, #24]
 800d756:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800d75a:	6a3b      	ldr	r3, [r7, #32]
 800d75c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800d75e:	2301      	movs	r3, #1
 800d760:	627b      	str	r3, [r7, #36]	@ 0x24
 800d762:	e014      	b.n	800d78e <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800d764:	6879      	ldr	r1, [r7, #4]
 800d766:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d768:	4613      	mov	r3, r2
 800d76a:	00db      	lsls	r3, r3, #3
 800d76c:	4413      	add	r3, r2
 800d76e:	009b      	lsls	r3, r3, #2
 800d770:	440b      	add	r3, r1
 800d772:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800d776:	781b      	ldrb	r3, [r3, #0]
 800d778:	2b01      	cmp	r3, #1
 800d77a:	d105      	bne.n	800d788 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800d77c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d77e:	b2db      	uxtb	r3, r3
 800d780:	4619      	mov	r1, r3
 800d782:	6878      	ldr	r0, [r7, #4]
 800d784:	f000 faf2 	bl	800dd6c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800d788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d78a:	3301      	adds	r3, #1
 800d78c:	627b      	str	r3, [r7, #36]	@ 0x24
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	791b      	ldrb	r3, [r3, #4]
 800d792:	461a      	mov	r2, r3
 800d794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d796:	4293      	cmp	r3, r2
 800d798:	d3e4      	bcc.n	800d764 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	4618      	mov	r0, r3
 800d7a0:	f003 ff6e 	bl	8011680 <USB_ReadInterrupts>
 800d7a4:	4603      	mov	r3, r0
 800d7a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d7aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d7ae:	d13c      	bne.n	800d82a <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800d7b0:	2301      	movs	r3, #1
 800d7b2:	627b      	str	r3, [r7, #36]	@ 0x24
 800d7b4:	e02b      	b.n	800d80e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800d7b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7b8:	015a      	lsls	r2, r3, #5
 800d7ba:	69fb      	ldr	r3, [r7, #28]
 800d7bc:	4413      	add	r3, r2
 800d7be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800d7c6:	6879      	ldr	r1, [r7, #4]
 800d7c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d7ca:	4613      	mov	r3, r2
 800d7cc:	00db      	lsls	r3, r3, #3
 800d7ce:	4413      	add	r3, r2
 800d7d0:	009b      	lsls	r3, r3, #2
 800d7d2:	440b      	add	r3, r1
 800d7d4:	3318      	adds	r3, #24
 800d7d6:	781b      	ldrb	r3, [r3, #0]
 800d7d8:	2b01      	cmp	r3, #1
 800d7da:	d115      	bne.n	800d808 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800d7dc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	da12      	bge.n	800d808 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800d7e2:	6879      	ldr	r1, [r7, #4]
 800d7e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d7e6:	4613      	mov	r3, r2
 800d7e8:	00db      	lsls	r3, r3, #3
 800d7ea:	4413      	add	r3, r2
 800d7ec:	009b      	lsls	r3, r3, #2
 800d7ee:	440b      	add	r3, r1
 800d7f0:	3317      	adds	r3, #23
 800d7f2:	2201      	movs	r2, #1
 800d7f4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800d7f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7f8:	b2db      	uxtb	r3, r3
 800d7fa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d7fe:	b2db      	uxtb	r3, r3
 800d800:	4619      	mov	r1, r3
 800d802:	6878      	ldr	r0, [r7, #4]
 800d804:	f000 fab2 	bl	800dd6c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800d808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d80a:	3301      	adds	r3, #1
 800d80c:	627b      	str	r3, [r7, #36]	@ 0x24
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	791b      	ldrb	r3, [r3, #4]
 800d812:	461a      	mov	r2, r3
 800d814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d816:	4293      	cmp	r3, r2
 800d818:	d3cd      	bcc.n	800d7b6 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	695a      	ldr	r2, [r3, #20]
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800d828:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	4618      	mov	r0, r3
 800d830:	f003 ff26 	bl	8011680 <USB_ReadInterrupts>
 800d834:	4603      	mov	r3, r0
 800d836:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d83a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d83e:	d156      	bne.n	800d8ee <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800d840:	2301      	movs	r3, #1
 800d842:	627b      	str	r3, [r7, #36]	@ 0x24
 800d844:	e045      	b.n	800d8d2 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800d846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d848:	015a      	lsls	r2, r3, #5
 800d84a:	69fb      	ldr	r3, [r7, #28]
 800d84c:	4413      	add	r3, r2
 800d84e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800d856:	6879      	ldr	r1, [r7, #4]
 800d858:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d85a:	4613      	mov	r3, r2
 800d85c:	00db      	lsls	r3, r3, #3
 800d85e:	4413      	add	r3, r2
 800d860:	009b      	lsls	r3, r3, #2
 800d862:	440b      	add	r3, r1
 800d864:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800d868:	781b      	ldrb	r3, [r3, #0]
 800d86a:	2b01      	cmp	r3, #1
 800d86c:	d12e      	bne.n	800d8cc <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800d86e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800d870:	2b00      	cmp	r3, #0
 800d872:	da2b      	bge.n	800d8cc <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 800d874:	69bb      	ldr	r3, [r7, #24]
 800d876:	0c1a      	lsrs	r2, r3, #16
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800d87e:	4053      	eors	r3, r2
 800d880:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800d884:	2b00      	cmp	r3, #0
 800d886:	d121      	bne.n	800d8cc <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800d888:	6879      	ldr	r1, [r7, #4]
 800d88a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d88c:	4613      	mov	r3, r2
 800d88e:	00db      	lsls	r3, r3, #3
 800d890:	4413      	add	r3, r2
 800d892:	009b      	lsls	r3, r3, #2
 800d894:	440b      	add	r3, r1
 800d896:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800d89a:	2201      	movs	r2, #1
 800d89c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800d89e:	6a3b      	ldr	r3, [r7, #32]
 800d8a0:	699b      	ldr	r3, [r3, #24]
 800d8a2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800d8a6:	6a3b      	ldr	r3, [r7, #32]
 800d8a8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800d8aa:	6a3b      	ldr	r3, [r7, #32]
 800d8ac:	695b      	ldr	r3, [r3, #20]
 800d8ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d10a      	bne.n	800d8cc <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800d8b6:	69fb      	ldr	r3, [r7, #28]
 800d8b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d8bc:	685b      	ldr	r3, [r3, #4]
 800d8be:	69fa      	ldr	r2, [r7, #28]
 800d8c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d8c4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800d8c8:	6053      	str	r3, [r2, #4]
            break;
 800d8ca:	e008      	b.n	800d8de <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800d8cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8ce:	3301      	adds	r3, #1
 800d8d0:	627b      	str	r3, [r7, #36]	@ 0x24
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	791b      	ldrb	r3, [r3, #4]
 800d8d6:	461a      	mov	r2, r3
 800d8d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8da:	4293      	cmp	r3, r2
 800d8dc:	d3b3      	bcc.n	800d846 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	695a      	ldr	r2, [r3, #20]
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800d8ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	f003 fec4 	bl	8011680 <USB_ReadInterrupts>
 800d8f8:	4603      	mov	r3, r0
 800d8fa:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d8fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d902:	d10a      	bne.n	800d91a <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800d904:	6878      	ldr	r0, [r7, #4]
 800d906:	f005 ff93 	bl	8013830 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	695a      	ldr	r2, [r3, #20]
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800d918:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	4618      	mov	r0, r3
 800d920:	f003 feae 	bl	8011680 <USB_ReadInterrupts>
 800d924:	4603      	mov	r3, r0
 800d926:	f003 0304 	and.w	r3, r3, #4
 800d92a:	2b04      	cmp	r3, #4
 800d92c:	d115      	bne.n	800d95a <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	685b      	ldr	r3, [r3, #4]
 800d934:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800d936:	69bb      	ldr	r3, [r7, #24]
 800d938:	f003 0304 	and.w	r3, r3, #4
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d002      	beq.n	800d946 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800d940:	6878      	ldr	r0, [r7, #4]
 800d942:	f005 ff83 	bl	801384c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	6859      	ldr	r1, [r3, #4]
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	69ba      	ldr	r2, [r7, #24]
 800d952:	430a      	orrs	r2, r1
 800d954:	605a      	str	r2, [r3, #4]
 800d956:	e000      	b.n	800d95a <HAL_PCD_IRQHandler+0x93c>
      return;
 800d958:	bf00      	nop
    }
  }
}
 800d95a:	3734      	adds	r7, #52	@ 0x34
 800d95c:	46bd      	mov	sp, r7
 800d95e:	bd90      	pop	{r4, r7, pc}

0800d960 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800d960:	b580      	push	{r7, lr}
 800d962:	b082      	sub	sp, #8
 800d964:	af00      	add	r7, sp, #0
 800d966:	6078      	str	r0, [r7, #4]
 800d968:	460b      	mov	r3, r1
 800d96a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800d972:	2b01      	cmp	r3, #1
 800d974:	d101      	bne.n	800d97a <HAL_PCD_SetAddress+0x1a>
 800d976:	2302      	movs	r3, #2
 800d978:	e012      	b.n	800d9a0 <HAL_PCD_SetAddress+0x40>
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	2201      	movs	r2, #1
 800d97e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	78fa      	ldrb	r2, [r7, #3]
 800d986:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	78fa      	ldrb	r2, [r7, #3]
 800d98e:	4611      	mov	r1, r2
 800d990:	4618      	mov	r0, r3
 800d992:	f003 fe0d 	bl	80115b0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	2200      	movs	r2, #0
 800d99a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800d99e:	2300      	movs	r3, #0
}
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	3708      	adds	r7, #8
 800d9a4:	46bd      	mov	sp, r7
 800d9a6:	bd80      	pop	{r7, pc}

0800d9a8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b084      	sub	sp, #16
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	6078      	str	r0, [r7, #4]
 800d9b0:	4608      	mov	r0, r1
 800d9b2:	4611      	mov	r1, r2
 800d9b4:	461a      	mov	r2, r3
 800d9b6:	4603      	mov	r3, r0
 800d9b8:	70fb      	strb	r3, [r7, #3]
 800d9ba:	460b      	mov	r3, r1
 800d9bc:	803b      	strh	r3, [r7, #0]
 800d9be:	4613      	mov	r3, r2
 800d9c0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800d9c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	da0f      	bge.n	800d9ee <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d9ce:	78fb      	ldrb	r3, [r7, #3]
 800d9d0:	f003 020f 	and.w	r2, r3, #15
 800d9d4:	4613      	mov	r3, r2
 800d9d6:	00db      	lsls	r3, r3, #3
 800d9d8:	4413      	add	r3, r2
 800d9da:	009b      	lsls	r3, r3, #2
 800d9dc:	3310      	adds	r3, #16
 800d9de:	687a      	ldr	r2, [r7, #4]
 800d9e0:	4413      	add	r3, r2
 800d9e2:	3304      	adds	r3, #4
 800d9e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	2201      	movs	r2, #1
 800d9ea:	705a      	strb	r2, [r3, #1]
 800d9ec:	e00f      	b.n	800da0e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d9ee:	78fb      	ldrb	r3, [r7, #3]
 800d9f0:	f003 020f 	and.w	r2, r3, #15
 800d9f4:	4613      	mov	r3, r2
 800d9f6:	00db      	lsls	r3, r3, #3
 800d9f8:	4413      	add	r3, r2
 800d9fa:	009b      	lsls	r3, r3, #2
 800d9fc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800da00:	687a      	ldr	r2, [r7, #4]
 800da02:	4413      	add	r3, r2
 800da04:	3304      	adds	r3, #4
 800da06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	2200      	movs	r2, #0
 800da0c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800da0e:	78fb      	ldrb	r3, [r7, #3]
 800da10:	f003 030f 	and.w	r3, r3, #15
 800da14:	b2da      	uxtb	r2, r3
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800da1a:	883b      	ldrh	r3, [r7, #0]
 800da1c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	78ba      	ldrb	r2, [r7, #2]
 800da28:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	785b      	ldrb	r3, [r3, #1]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d004      	beq.n	800da3c <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	781b      	ldrb	r3, [r3, #0]
 800da36:	461a      	mov	r2, r3
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800da3c:	78bb      	ldrb	r3, [r7, #2]
 800da3e:	2b02      	cmp	r3, #2
 800da40:	d102      	bne.n	800da48 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	2200      	movs	r2, #0
 800da46:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800da4e:	2b01      	cmp	r3, #1
 800da50:	d101      	bne.n	800da56 <HAL_PCD_EP_Open+0xae>
 800da52:	2302      	movs	r3, #2
 800da54:	e00e      	b.n	800da74 <HAL_PCD_EP_Open+0xcc>
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	2201      	movs	r2, #1
 800da5a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	68f9      	ldr	r1, [r7, #12]
 800da64:	4618      	mov	r0, r3
 800da66:	f002 ff8d 	bl	8010984 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	2200      	movs	r2, #0
 800da6e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800da72:	7afb      	ldrb	r3, [r7, #11]
}
 800da74:	4618      	mov	r0, r3
 800da76:	3710      	adds	r7, #16
 800da78:	46bd      	mov	sp, r7
 800da7a:	bd80      	pop	{r7, pc}

0800da7c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800da7c:	b580      	push	{r7, lr}
 800da7e:	b084      	sub	sp, #16
 800da80:	af00      	add	r7, sp, #0
 800da82:	6078      	str	r0, [r7, #4]
 800da84:	460b      	mov	r3, r1
 800da86:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800da88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	da0f      	bge.n	800dab0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800da90:	78fb      	ldrb	r3, [r7, #3]
 800da92:	f003 020f 	and.w	r2, r3, #15
 800da96:	4613      	mov	r3, r2
 800da98:	00db      	lsls	r3, r3, #3
 800da9a:	4413      	add	r3, r2
 800da9c:	009b      	lsls	r3, r3, #2
 800da9e:	3310      	adds	r3, #16
 800daa0:	687a      	ldr	r2, [r7, #4]
 800daa2:	4413      	add	r3, r2
 800daa4:	3304      	adds	r3, #4
 800daa6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	2201      	movs	r2, #1
 800daac:	705a      	strb	r2, [r3, #1]
 800daae:	e00f      	b.n	800dad0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800dab0:	78fb      	ldrb	r3, [r7, #3]
 800dab2:	f003 020f 	and.w	r2, r3, #15
 800dab6:	4613      	mov	r3, r2
 800dab8:	00db      	lsls	r3, r3, #3
 800daba:	4413      	add	r3, r2
 800dabc:	009b      	lsls	r3, r3, #2
 800dabe:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800dac2:	687a      	ldr	r2, [r7, #4]
 800dac4:	4413      	add	r3, r2
 800dac6:	3304      	adds	r3, #4
 800dac8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	2200      	movs	r2, #0
 800dace:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800dad0:	78fb      	ldrb	r3, [r7, #3]
 800dad2:	f003 030f 	and.w	r3, r3, #15
 800dad6:	b2da      	uxtb	r2, r3
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800dae2:	2b01      	cmp	r3, #1
 800dae4:	d101      	bne.n	800daea <HAL_PCD_EP_Close+0x6e>
 800dae6:	2302      	movs	r3, #2
 800dae8:	e00e      	b.n	800db08 <HAL_PCD_EP_Close+0x8c>
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	2201      	movs	r2, #1
 800daee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	68f9      	ldr	r1, [r7, #12]
 800daf8:	4618      	mov	r0, r3
 800dafa:	f002 ffcb 	bl	8010a94 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	2200      	movs	r2, #0
 800db02:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800db06:	2300      	movs	r3, #0
}
 800db08:	4618      	mov	r0, r3
 800db0a:	3710      	adds	r7, #16
 800db0c:	46bd      	mov	sp, r7
 800db0e:	bd80      	pop	{r7, pc}

0800db10 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800db10:	b580      	push	{r7, lr}
 800db12:	b086      	sub	sp, #24
 800db14:	af00      	add	r7, sp, #0
 800db16:	60f8      	str	r0, [r7, #12]
 800db18:	607a      	str	r2, [r7, #4]
 800db1a:	603b      	str	r3, [r7, #0]
 800db1c:	460b      	mov	r3, r1
 800db1e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800db20:	7afb      	ldrb	r3, [r7, #11]
 800db22:	f003 020f 	and.w	r2, r3, #15
 800db26:	4613      	mov	r3, r2
 800db28:	00db      	lsls	r3, r3, #3
 800db2a:	4413      	add	r3, r2
 800db2c:	009b      	lsls	r3, r3, #2
 800db2e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800db32:	68fa      	ldr	r2, [r7, #12]
 800db34:	4413      	add	r3, r2
 800db36:	3304      	adds	r3, #4
 800db38:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800db3a:	697b      	ldr	r3, [r7, #20]
 800db3c:	687a      	ldr	r2, [r7, #4]
 800db3e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800db40:	697b      	ldr	r3, [r7, #20]
 800db42:	683a      	ldr	r2, [r7, #0]
 800db44:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800db46:	697b      	ldr	r3, [r7, #20]
 800db48:	2200      	movs	r2, #0
 800db4a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800db4c:	697b      	ldr	r3, [r7, #20]
 800db4e:	2200      	movs	r2, #0
 800db50:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800db52:	7afb      	ldrb	r3, [r7, #11]
 800db54:	f003 030f 	and.w	r3, r3, #15
 800db58:	b2da      	uxtb	r2, r3
 800db5a:	697b      	ldr	r3, [r7, #20]
 800db5c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	799b      	ldrb	r3, [r3, #6]
 800db62:	2b01      	cmp	r3, #1
 800db64:	d102      	bne.n	800db6c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800db66:	687a      	ldr	r2, [r7, #4]
 800db68:	697b      	ldr	r3, [r7, #20]
 800db6a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	6818      	ldr	r0, [r3, #0]
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	799b      	ldrb	r3, [r3, #6]
 800db74:	461a      	mov	r2, r3
 800db76:	6979      	ldr	r1, [r7, #20]
 800db78:	f003 f868 	bl	8010c4c <USB_EPStartXfer>

  return HAL_OK;
 800db7c:	2300      	movs	r3, #0
}
 800db7e:	4618      	mov	r0, r3
 800db80:	3718      	adds	r7, #24
 800db82:	46bd      	mov	sp, r7
 800db84:	bd80      	pop	{r7, pc}

0800db86 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800db86:	b580      	push	{r7, lr}
 800db88:	b086      	sub	sp, #24
 800db8a:	af00      	add	r7, sp, #0
 800db8c:	60f8      	str	r0, [r7, #12]
 800db8e:	607a      	str	r2, [r7, #4]
 800db90:	603b      	str	r3, [r7, #0]
 800db92:	460b      	mov	r3, r1
 800db94:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800db96:	7afb      	ldrb	r3, [r7, #11]
 800db98:	f003 020f 	and.w	r2, r3, #15
 800db9c:	4613      	mov	r3, r2
 800db9e:	00db      	lsls	r3, r3, #3
 800dba0:	4413      	add	r3, r2
 800dba2:	009b      	lsls	r3, r3, #2
 800dba4:	3310      	adds	r3, #16
 800dba6:	68fa      	ldr	r2, [r7, #12]
 800dba8:	4413      	add	r3, r2
 800dbaa:	3304      	adds	r3, #4
 800dbac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800dbae:	697b      	ldr	r3, [r7, #20]
 800dbb0:	687a      	ldr	r2, [r7, #4]
 800dbb2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800dbb4:	697b      	ldr	r3, [r7, #20]
 800dbb6:	683a      	ldr	r2, [r7, #0]
 800dbb8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800dbba:	697b      	ldr	r3, [r7, #20]
 800dbbc:	2200      	movs	r2, #0
 800dbbe:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800dbc0:	697b      	ldr	r3, [r7, #20]
 800dbc2:	2201      	movs	r2, #1
 800dbc4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800dbc6:	7afb      	ldrb	r3, [r7, #11]
 800dbc8:	f003 030f 	and.w	r3, r3, #15
 800dbcc:	b2da      	uxtb	r2, r3
 800dbce:	697b      	ldr	r3, [r7, #20]
 800dbd0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	799b      	ldrb	r3, [r3, #6]
 800dbd6:	2b01      	cmp	r3, #1
 800dbd8:	d102      	bne.n	800dbe0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800dbda:	687a      	ldr	r2, [r7, #4]
 800dbdc:	697b      	ldr	r3, [r7, #20]
 800dbde:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	6818      	ldr	r0, [r3, #0]
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	799b      	ldrb	r3, [r3, #6]
 800dbe8:	461a      	mov	r2, r3
 800dbea:	6979      	ldr	r1, [r7, #20]
 800dbec:	f003 f82e 	bl	8010c4c <USB_EPStartXfer>

  return HAL_OK;
 800dbf0:	2300      	movs	r3, #0
}
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	3718      	adds	r7, #24
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	bd80      	pop	{r7, pc}

0800dbfa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800dbfa:	b580      	push	{r7, lr}
 800dbfc:	b084      	sub	sp, #16
 800dbfe:	af00      	add	r7, sp, #0
 800dc00:	6078      	str	r0, [r7, #4]
 800dc02:	460b      	mov	r3, r1
 800dc04:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800dc06:	78fb      	ldrb	r3, [r7, #3]
 800dc08:	f003 030f 	and.w	r3, r3, #15
 800dc0c:	687a      	ldr	r2, [r7, #4]
 800dc0e:	7912      	ldrb	r2, [r2, #4]
 800dc10:	4293      	cmp	r3, r2
 800dc12:	d901      	bls.n	800dc18 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800dc14:	2301      	movs	r3, #1
 800dc16:	e04f      	b.n	800dcb8 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800dc18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	da0f      	bge.n	800dc40 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800dc20:	78fb      	ldrb	r3, [r7, #3]
 800dc22:	f003 020f 	and.w	r2, r3, #15
 800dc26:	4613      	mov	r3, r2
 800dc28:	00db      	lsls	r3, r3, #3
 800dc2a:	4413      	add	r3, r2
 800dc2c:	009b      	lsls	r3, r3, #2
 800dc2e:	3310      	adds	r3, #16
 800dc30:	687a      	ldr	r2, [r7, #4]
 800dc32:	4413      	add	r3, r2
 800dc34:	3304      	adds	r3, #4
 800dc36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	2201      	movs	r2, #1
 800dc3c:	705a      	strb	r2, [r3, #1]
 800dc3e:	e00d      	b.n	800dc5c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800dc40:	78fa      	ldrb	r2, [r7, #3]
 800dc42:	4613      	mov	r3, r2
 800dc44:	00db      	lsls	r3, r3, #3
 800dc46:	4413      	add	r3, r2
 800dc48:	009b      	lsls	r3, r3, #2
 800dc4a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800dc4e:	687a      	ldr	r2, [r7, #4]
 800dc50:	4413      	add	r3, r2
 800dc52:	3304      	adds	r3, #4
 800dc54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	2200      	movs	r2, #0
 800dc5a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	2201      	movs	r2, #1
 800dc60:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800dc62:	78fb      	ldrb	r3, [r7, #3]
 800dc64:	f003 030f 	and.w	r3, r3, #15
 800dc68:	b2da      	uxtb	r2, r3
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800dc74:	2b01      	cmp	r3, #1
 800dc76:	d101      	bne.n	800dc7c <HAL_PCD_EP_SetStall+0x82>
 800dc78:	2302      	movs	r3, #2
 800dc7a:	e01d      	b.n	800dcb8 <HAL_PCD_EP_SetStall+0xbe>
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	2201      	movs	r2, #1
 800dc80:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	68f9      	ldr	r1, [r7, #12]
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	f003 fbbc 	bl	8011408 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800dc90:	78fb      	ldrb	r3, [r7, #3]
 800dc92:	f003 030f 	and.w	r3, r3, #15
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d109      	bne.n	800dcae <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	6818      	ldr	r0, [r3, #0]
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	7999      	ldrb	r1, [r3, #6]
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800dca8:	461a      	mov	r2, r3
 800dcaa:	f003 fdad 	bl	8011808 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	2200      	movs	r2, #0
 800dcb2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800dcb6:	2300      	movs	r3, #0
}
 800dcb8:	4618      	mov	r0, r3
 800dcba:	3710      	adds	r7, #16
 800dcbc:	46bd      	mov	sp, r7
 800dcbe:	bd80      	pop	{r7, pc}

0800dcc0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800dcc0:	b580      	push	{r7, lr}
 800dcc2:	b084      	sub	sp, #16
 800dcc4:	af00      	add	r7, sp, #0
 800dcc6:	6078      	str	r0, [r7, #4]
 800dcc8:	460b      	mov	r3, r1
 800dcca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800dccc:	78fb      	ldrb	r3, [r7, #3]
 800dcce:	f003 030f 	and.w	r3, r3, #15
 800dcd2:	687a      	ldr	r2, [r7, #4]
 800dcd4:	7912      	ldrb	r2, [r2, #4]
 800dcd6:	4293      	cmp	r3, r2
 800dcd8:	d901      	bls.n	800dcde <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800dcda:	2301      	movs	r3, #1
 800dcdc:	e042      	b.n	800dd64 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800dcde:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	da0f      	bge.n	800dd06 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800dce6:	78fb      	ldrb	r3, [r7, #3]
 800dce8:	f003 020f 	and.w	r2, r3, #15
 800dcec:	4613      	mov	r3, r2
 800dcee:	00db      	lsls	r3, r3, #3
 800dcf0:	4413      	add	r3, r2
 800dcf2:	009b      	lsls	r3, r3, #2
 800dcf4:	3310      	adds	r3, #16
 800dcf6:	687a      	ldr	r2, [r7, #4]
 800dcf8:	4413      	add	r3, r2
 800dcfa:	3304      	adds	r3, #4
 800dcfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	2201      	movs	r2, #1
 800dd02:	705a      	strb	r2, [r3, #1]
 800dd04:	e00f      	b.n	800dd26 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800dd06:	78fb      	ldrb	r3, [r7, #3]
 800dd08:	f003 020f 	and.w	r2, r3, #15
 800dd0c:	4613      	mov	r3, r2
 800dd0e:	00db      	lsls	r3, r3, #3
 800dd10:	4413      	add	r3, r2
 800dd12:	009b      	lsls	r3, r3, #2
 800dd14:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800dd18:	687a      	ldr	r2, [r7, #4]
 800dd1a:	4413      	add	r3, r2
 800dd1c:	3304      	adds	r3, #4
 800dd1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	2200      	movs	r2, #0
 800dd24:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	2200      	movs	r2, #0
 800dd2a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800dd2c:	78fb      	ldrb	r3, [r7, #3]
 800dd2e:	f003 030f 	and.w	r3, r3, #15
 800dd32:	b2da      	uxtb	r2, r3
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800dd3e:	2b01      	cmp	r3, #1
 800dd40:	d101      	bne.n	800dd46 <HAL_PCD_EP_ClrStall+0x86>
 800dd42:	2302      	movs	r3, #2
 800dd44:	e00e      	b.n	800dd64 <HAL_PCD_EP_ClrStall+0xa4>
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	2201      	movs	r2, #1
 800dd4a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	68f9      	ldr	r1, [r7, #12]
 800dd54:	4618      	mov	r0, r3
 800dd56:	f003 fbc5 	bl	80114e4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	2200      	movs	r2, #0
 800dd5e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800dd62:	2300      	movs	r3, #0
}
 800dd64:	4618      	mov	r0, r3
 800dd66:	3710      	adds	r7, #16
 800dd68:	46bd      	mov	sp, r7
 800dd6a:	bd80      	pop	{r7, pc}

0800dd6c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800dd6c:	b580      	push	{r7, lr}
 800dd6e:	b084      	sub	sp, #16
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	6078      	str	r0, [r7, #4]
 800dd74:	460b      	mov	r3, r1
 800dd76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800dd78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	da0c      	bge.n	800dd9a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800dd80:	78fb      	ldrb	r3, [r7, #3]
 800dd82:	f003 020f 	and.w	r2, r3, #15
 800dd86:	4613      	mov	r3, r2
 800dd88:	00db      	lsls	r3, r3, #3
 800dd8a:	4413      	add	r3, r2
 800dd8c:	009b      	lsls	r3, r3, #2
 800dd8e:	3310      	adds	r3, #16
 800dd90:	687a      	ldr	r2, [r7, #4]
 800dd92:	4413      	add	r3, r2
 800dd94:	3304      	adds	r3, #4
 800dd96:	60fb      	str	r3, [r7, #12]
 800dd98:	e00c      	b.n	800ddb4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800dd9a:	78fb      	ldrb	r3, [r7, #3]
 800dd9c:	f003 020f 	and.w	r2, r3, #15
 800dda0:	4613      	mov	r3, r2
 800dda2:	00db      	lsls	r3, r3, #3
 800dda4:	4413      	add	r3, r2
 800dda6:	009b      	lsls	r3, r3, #2
 800dda8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800ddac:	687a      	ldr	r2, [r7, #4]
 800ddae:	4413      	add	r3, r2
 800ddb0:	3304      	adds	r3, #4
 800ddb2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	68f9      	ldr	r1, [r7, #12]
 800ddba:	4618      	mov	r0, r3
 800ddbc:	f003 f9e4 	bl	8011188 <USB_EPStopXfer>
 800ddc0:	4603      	mov	r3, r0
 800ddc2:	72fb      	strb	r3, [r7, #11]

  return ret;
 800ddc4:	7afb      	ldrb	r3, [r7, #11]
}
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	3710      	adds	r7, #16
 800ddca:	46bd      	mov	sp, r7
 800ddcc:	bd80      	pop	{r7, pc}

0800ddce <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800ddce:	b580      	push	{r7, lr}
 800ddd0:	b08a      	sub	sp, #40	@ 0x28
 800ddd2:	af02      	add	r7, sp, #8
 800ddd4:	6078      	str	r0, [r7, #4]
 800ddd6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ddde:	697b      	ldr	r3, [r7, #20]
 800dde0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800dde2:	683a      	ldr	r2, [r7, #0]
 800dde4:	4613      	mov	r3, r2
 800dde6:	00db      	lsls	r3, r3, #3
 800dde8:	4413      	add	r3, r2
 800ddea:	009b      	lsls	r3, r3, #2
 800ddec:	3310      	adds	r3, #16
 800ddee:	687a      	ldr	r2, [r7, #4]
 800ddf0:	4413      	add	r3, r2
 800ddf2:	3304      	adds	r3, #4
 800ddf4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	695a      	ldr	r2, [r3, #20]
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	691b      	ldr	r3, [r3, #16]
 800ddfe:	429a      	cmp	r2, r3
 800de00:	d901      	bls.n	800de06 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800de02:	2301      	movs	r3, #1
 800de04:	e06b      	b.n	800dede <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	691a      	ldr	r2, [r3, #16]
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	695b      	ldr	r3, [r3, #20]
 800de0e:	1ad3      	subs	r3, r2, r3
 800de10:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	689b      	ldr	r3, [r3, #8]
 800de16:	69fa      	ldr	r2, [r7, #28]
 800de18:	429a      	cmp	r2, r3
 800de1a:	d902      	bls.n	800de22 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	689b      	ldr	r3, [r3, #8]
 800de20:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800de22:	69fb      	ldr	r3, [r7, #28]
 800de24:	3303      	adds	r3, #3
 800de26:	089b      	lsrs	r3, r3, #2
 800de28:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800de2a:	e02a      	b.n	800de82 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	691a      	ldr	r2, [r3, #16]
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	695b      	ldr	r3, [r3, #20]
 800de34:	1ad3      	subs	r3, r2, r3
 800de36:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	689b      	ldr	r3, [r3, #8]
 800de3c:	69fa      	ldr	r2, [r7, #28]
 800de3e:	429a      	cmp	r2, r3
 800de40:	d902      	bls.n	800de48 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	689b      	ldr	r3, [r3, #8]
 800de46:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800de48:	69fb      	ldr	r3, [r7, #28]
 800de4a:	3303      	adds	r3, #3
 800de4c:	089b      	lsrs	r3, r3, #2
 800de4e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	68d9      	ldr	r1, [r3, #12]
 800de54:	683b      	ldr	r3, [r7, #0]
 800de56:	b2da      	uxtb	r2, r3
 800de58:	69fb      	ldr	r3, [r7, #28]
 800de5a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800de60:	9300      	str	r3, [sp, #0]
 800de62:	4603      	mov	r3, r0
 800de64:	6978      	ldr	r0, [r7, #20]
 800de66:	f003 fa39 	bl	80112dc <USB_WritePacket>

    ep->xfer_buff  += len;
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	68da      	ldr	r2, [r3, #12]
 800de6e:	69fb      	ldr	r3, [r7, #28]
 800de70:	441a      	add	r2, r3
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	695a      	ldr	r2, [r3, #20]
 800de7a:	69fb      	ldr	r3, [r7, #28]
 800de7c:	441a      	add	r2, r3
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800de82:	683b      	ldr	r3, [r7, #0]
 800de84:	015a      	lsls	r2, r3, #5
 800de86:	693b      	ldr	r3, [r7, #16]
 800de88:	4413      	add	r3, r2
 800de8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800de8e:	699b      	ldr	r3, [r3, #24]
 800de90:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800de92:	69ba      	ldr	r2, [r7, #24]
 800de94:	429a      	cmp	r2, r3
 800de96:	d809      	bhi.n	800deac <PCD_WriteEmptyTxFifo+0xde>
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	695a      	ldr	r2, [r3, #20]
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800dea0:	429a      	cmp	r2, r3
 800dea2:	d203      	bcs.n	800deac <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	691b      	ldr	r3, [r3, #16]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d1bf      	bne.n	800de2c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	691a      	ldr	r2, [r3, #16]
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	695b      	ldr	r3, [r3, #20]
 800deb4:	429a      	cmp	r2, r3
 800deb6:	d811      	bhi.n	800dedc <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800deb8:	683b      	ldr	r3, [r7, #0]
 800deba:	f003 030f 	and.w	r3, r3, #15
 800debe:	2201      	movs	r2, #1
 800dec0:	fa02 f303 	lsl.w	r3, r2, r3
 800dec4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800dec6:	693b      	ldr	r3, [r7, #16]
 800dec8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800decc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800dece:	68bb      	ldr	r3, [r7, #8]
 800ded0:	43db      	mvns	r3, r3
 800ded2:	6939      	ldr	r1, [r7, #16]
 800ded4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ded8:	4013      	ands	r3, r2
 800deda:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800dedc:	2300      	movs	r3, #0
}
 800dede:	4618      	mov	r0, r3
 800dee0:	3720      	adds	r7, #32
 800dee2:	46bd      	mov	sp, r7
 800dee4:	bd80      	pop	{r7, pc}
	...

0800dee8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800dee8:	b580      	push	{r7, lr}
 800deea:	b088      	sub	sp, #32
 800deec:	af00      	add	r7, sp, #0
 800deee:	6078      	str	r0, [r7, #4]
 800def0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800def8:	69fb      	ldr	r3, [r7, #28]
 800defa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800defc:	69fb      	ldr	r3, [r7, #28]
 800defe:	333c      	adds	r3, #60	@ 0x3c
 800df00:	3304      	adds	r3, #4
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800df06:	683b      	ldr	r3, [r7, #0]
 800df08:	015a      	lsls	r2, r3, #5
 800df0a:	69bb      	ldr	r3, [r7, #24]
 800df0c:	4413      	add	r3, r2
 800df0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800df12:	689b      	ldr	r3, [r3, #8]
 800df14:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	799b      	ldrb	r3, [r3, #6]
 800df1a:	2b01      	cmp	r3, #1
 800df1c:	d17b      	bne.n	800e016 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800df1e:	693b      	ldr	r3, [r7, #16]
 800df20:	f003 0308 	and.w	r3, r3, #8
 800df24:	2b00      	cmp	r3, #0
 800df26:	d015      	beq.n	800df54 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800df28:	697b      	ldr	r3, [r7, #20]
 800df2a:	4a61      	ldr	r2, [pc, #388]	@ (800e0b0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800df2c:	4293      	cmp	r3, r2
 800df2e:	f240 80b9 	bls.w	800e0a4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800df32:	693b      	ldr	r3, [r7, #16]
 800df34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800df38:	2b00      	cmp	r3, #0
 800df3a:	f000 80b3 	beq.w	800e0a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800df3e:	683b      	ldr	r3, [r7, #0]
 800df40:	015a      	lsls	r2, r3, #5
 800df42:	69bb      	ldr	r3, [r7, #24]
 800df44:	4413      	add	r3, r2
 800df46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800df4a:	461a      	mov	r2, r3
 800df4c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800df50:	6093      	str	r3, [r2, #8]
 800df52:	e0a7      	b.n	800e0a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800df54:	693b      	ldr	r3, [r7, #16]
 800df56:	f003 0320 	and.w	r3, r3, #32
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d009      	beq.n	800df72 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800df5e:	683b      	ldr	r3, [r7, #0]
 800df60:	015a      	lsls	r2, r3, #5
 800df62:	69bb      	ldr	r3, [r7, #24]
 800df64:	4413      	add	r3, r2
 800df66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800df6a:	461a      	mov	r2, r3
 800df6c:	2320      	movs	r3, #32
 800df6e:	6093      	str	r3, [r2, #8]
 800df70:	e098      	b.n	800e0a4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800df72:	693b      	ldr	r3, [r7, #16]
 800df74:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800df78:	2b00      	cmp	r3, #0
 800df7a:	f040 8093 	bne.w	800e0a4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800df7e:	697b      	ldr	r3, [r7, #20]
 800df80:	4a4b      	ldr	r2, [pc, #300]	@ (800e0b0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800df82:	4293      	cmp	r3, r2
 800df84:	d90f      	bls.n	800dfa6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800df86:	693b      	ldr	r3, [r7, #16]
 800df88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d00a      	beq.n	800dfa6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800df90:	683b      	ldr	r3, [r7, #0]
 800df92:	015a      	lsls	r2, r3, #5
 800df94:	69bb      	ldr	r3, [r7, #24]
 800df96:	4413      	add	r3, r2
 800df98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800df9c:	461a      	mov	r2, r3
 800df9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dfa2:	6093      	str	r3, [r2, #8]
 800dfa4:	e07e      	b.n	800e0a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800dfa6:	683a      	ldr	r2, [r7, #0]
 800dfa8:	4613      	mov	r3, r2
 800dfaa:	00db      	lsls	r3, r3, #3
 800dfac:	4413      	add	r3, r2
 800dfae:	009b      	lsls	r3, r3, #2
 800dfb0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800dfb4:	687a      	ldr	r2, [r7, #4]
 800dfb6:	4413      	add	r3, r2
 800dfb8:	3304      	adds	r3, #4
 800dfba:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	6a1a      	ldr	r2, [r3, #32]
 800dfc0:	683b      	ldr	r3, [r7, #0]
 800dfc2:	0159      	lsls	r1, r3, #5
 800dfc4:	69bb      	ldr	r3, [r7, #24]
 800dfc6:	440b      	add	r3, r1
 800dfc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dfcc:	691b      	ldr	r3, [r3, #16]
 800dfce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800dfd2:	1ad2      	subs	r2, r2, r3
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800dfd8:	683b      	ldr	r3, [r7, #0]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d114      	bne.n	800e008 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	691b      	ldr	r3, [r3, #16]
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d109      	bne.n	800dffa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	6818      	ldr	r0, [r3, #0]
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800dff0:	461a      	mov	r2, r3
 800dff2:	2101      	movs	r1, #1
 800dff4:	f003 fc08 	bl	8011808 <USB_EP0_OutStart>
 800dff8:	e006      	b.n	800e008 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	68da      	ldr	r2, [r3, #12]
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	695b      	ldr	r3, [r3, #20]
 800e002:	441a      	add	r2, r3
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800e008:	683b      	ldr	r3, [r7, #0]
 800e00a:	b2db      	uxtb	r3, r3
 800e00c:	4619      	mov	r1, r3
 800e00e:	6878      	ldr	r0, [r7, #4]
 800e010:	f005 fb54 	bl	80136bc <HAL_PCD_DataOutStageCallback>
 800e014:	e046      	b.n	800e0a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800e016:	697b      	ldr	r3, [r7, #20]
 800e018:	4a26      	ldr	r2, [pc, #152]	@ (800e0b4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800e01a:	4293      	cmp	r3, r2
 800e01c:	d124      	bne.n	800e068 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800e01e:	693b      	ldr	r3, [r7, #16]
 800e020:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e024:	2b00      	cmp	r3, #0
 800e026:	d00a      	beq.n	800e03e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800e028:	683b      	ldr	r3, [r7, #0]
 800e02a:	015a      	lsls	r2, r3, #5
 800e02c:	69bb      	ldr	r3, [r7, #24]
 800e02e:	4413      	add	r3, r2
 800e030:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e034:	461a      	mov	r2, r3
 800e036:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e03a:	6093      	str	r3, [r2, #8]
 800e03c:	e032      	b.n	800e0a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800e03e:	693b      	ldr	r3, [r7, #16]
 800e040:	f003 0320 	and.w	r3, r3, #32
 800e044:	2b00      	cmp	r3, #0
 800e046:	d008      	beq.n	800e05a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800e048:	683b      	ldr	r3, [r7, #0]
 800e04a:	015a      	lsls	r2, r3, #5
 800e04c:	69bb      	ldr	r3, [r7, #24]
 800e04e:	4413      	add	r3, r2
 800e050:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e054:	461a      	mov	r2, r3
 800e056:	2320      	movs	r3, #32
 800e058:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800e05a:	683b      	ldr	r3, [r7, #0]
 800e05c:	b2db      	uxtb	r3, r3
 800e05e:	4619      	mov	r1, r3
 800e060:	6878      	ldr	r0, [r7, #4]
 800e062:	f005 fb2b 	bl	80136bc <HAL_PCD_DataOutStageCallback>
 800e066:	e01d      	b.n	800e0a4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800e068:	683b      	ldr	r3, [r7, #0]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d114      	bne.n	800e098 <PCD_EP_OutXfrComplete_int+0x1b0>
 800e06e:	6879      	ldr	r1, [r7, #4]
 800e070:	683a      	ldr	r2, [r7, #0]
 800e072:	4613      	mov	r3, r2
 800e074:	00db      	lsls	r3, r3, #3
 800e076:	4413      	add	r3, r2
 800e078:	009b      	lsls	r3, r3, #2
 800e07a:	440b      	add	r3, r1
 800e07c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	2b00      	cmp	r3, #0
 800e084:	d108      	bne.n	800e098 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	6818      	ldr	r0, [r3, #0]
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800e090:	461a      	mov	r2, r3
 800e092:	2100      	movs	r1, #0
 800e094:	f003 fbb8 	bl	8011808 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800e098:	683b      	ldr	r3, [r7, #0]
 800e09a:	b2db      	uxtb	r3, r3
 800e09c:	4619      	mov	r1, r3
 800e09e:	6878      	ldr	r0, [r7, #4]
 800e0a0:	f005 fb0c 	bl	80136bc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800e0a4:	2300      	movs	r3, #0
}
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	3720      	adds	r7, #32
 800e0aa:	46bd      	mov	sp, r7
 800e0ac:	bd80      	pop	{r7, pc}
 800e0ae:	bf00      	nop
 800e0b0:	4f54300a 	.word	0x4f54300a
 800e0b4:	4f54310a 	.word	0x4f54310a

0800e0b8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800e0b8:	b580      	push	{r7, lr}
 800e0ba:	b086      	sub	sp, #24
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	6078      	str	r0, [r7, #4]
 800e0c0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e0c8:	697b      	ldr	r3, [r7, #20]
 800e0ca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800e0cc:	697b      	ldr	r3, [r7, #20]
 800e0ce:	333c      	adds	r3, #60	@ 0x3c
 800e0d0:	3304      	adds	r3, #4
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800e0d6:	683b      	ldr	r3, [r7, #0]
 800e0d8:	015a      	lsls	r2, r3, #5
 800e0da:	693b      	ldr	r3, [r7, #16]
 800e0dc:	4413      	add	r3, r2
 800e0de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e0e2:	689b      	ldr	r3, [r3, #8]
 800e0e4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	4a15      	ldr	r2, [pc, #84]	@ (800e140 <PCD_EP_OutSetupPacket_int+0x88>)
 800e0ea:	4293      	cmp	r3, r2
 800e0ec:	d90e      	bls.n	800e10c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800e0ee:	68bb      	ldr	r3, [r7, #8]
 800e0f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d009      	beq.n	800e10c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800e0f8:	683b      	ldr	r3, [r7, #0]
 800e0fa:	015a      	lsls	r2, r3, #5
 800e0fc:	693b      	ldr	r3, [r7, #16]
 800e0fe:	4413      	add	r3, r2
 800e100:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e104:	461a      	mov	r2, r3
 800e106:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e10a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800e10c:	6878      	ldr	r0, [r7, #4]
 800e10e:	f005 fac3 	bl	8013698 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	4a0a      	ldr	r2, [pc, #40]	@ (800e140 <PCD_EP_OutSetupPacket_int+0x88>)
 800e116:	4293      	cmp	r3, r2
 800e118:	d90c      	bls.n	800e134 <PCD_EP_OutSetupPacket_int+0x7c>
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	799b      	ldrb	r3, [r3, #6]
 800e11e:	2b01      	cmp	r3, #1
 800e120:	d108      	bne.n	800e134 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	6818      	ldr	r0, [r3, #0]
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800e12c:	461a      	mov	r2, r3
 800e12e:	2101      	movs	r1, #1
 800e130:	f003 fb6a 	bl	8011808 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800e134:	2300      	movs	r3, #0
}
 800e136:	4618      	mov	r0, r3
 800e138:	3718      	adds	r7, #24
 800e13a:	46bd      	mov	sp, r7
 800e13c:	bd80      	pop	{r7, pc}
 800e13e:	bf00      	nop
 800e140:	4f54300a 	.word	0x4f54300a

0800e144 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800e144:	b480      	push	{r7}
 800e146:	b085      	sub	sp, #20
 800e148:	af00      	add	r7, sp, #0
 800e14a:	6078      	str	r0, [r7, #4]
 800e14c:	460b      	mov	r3, r1
 800e14e:	70fb      	strb	r3, [r7, #3]
 800e150:	4613      	mov	r3, r2
 800e152:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e15a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800e15c:	78fb      	ldrb	r3, [r7, #3]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d107      	bne.n	800e172 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800e162:	883b      	ldrh	r3, [r7, #0]
 800e164:	0419      	lsls	r1, r3, #16
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	68ba      	ldr	r2, [r7, #8]
 800e16c:	430a      	orrs	r2, r1
 800e16e:	629a      	str	r2, [r3, #40]	@ 0x28
 800e170:	e028      	b.n	800e1c4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e178:	0c1b      	lsrs	r3, r3, #16
 800e17a:	68ba      	ldr	r2, [r7, #8]
 800e17c:	4413      	add	r3, r2
 800e17e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800e180:	2300      	movs	r3, #0
 800e182:	73fb      	strb	r3, [r7, #15]
 800e184:	e00d      	b.n	800e1a2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	681a      	ldr	r2, [r3, #0]
 800e18a:	7bfb      	ldrb	r3, [r7, #15]
 800e18c:	3340      	adds	r3, #64	@ 0x40
 800e18e:	009b      	lsls	r3, r3, #2
 800e190:	4413      	add	r3, r2
 800e192:	685b      	ldr	r3, [r3, #4]
 800e194:	0c1b      	lsrs	r3, r3, #16
 800e196:	68ba      	ldr	r2, [r7, #8]
 800e198:	4413      	add	r3, r2
 800e19a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800e19c:	7bfb      	ldrb	r3, [r7, #15]
 800e19e:	3301      	adds	r3, #1
 800e1a0:	73fb      	strb	r3, [r7, #15]
 800e1a2:	7bfa      	ldrb	r2, [r7, #15]
 800e1a4:	78fb      	ldrb	r3, [r7, #3]
 800e1a6:	3b01      	subs	r3, #1
 800e1a8:	429a      	cmp	r2, r3
 800e1aa:	d3ec      	bcc.n	800e186 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800e1ac:	883b      	ldrh	r3, [r7, #0]
 800e1ae:	0418      	lsls	r0, r3, #16
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	6819      	ldr	r1, [r3, #0]
 800e1b4:	78fb      	ldrb	r3, [r7, #3]
 800e1b6:	3b01      	subs	r3, #1
 800e1b8:	68ba      	ldr	r2, [r7, #8]
 800e1ba:	4302      	orrs	r2, r0
 800e1bc:	3340      	adds	r3, #64	@ 0x40
 800e1be:	009b      	lsls	r3, r3, #2
 800e1c0:	440b      	add	r3, r1
 800e1c2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800e1c4:	2300      	movs	r3, #0
}
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	3714      	adds	r7, #20
 800e1ca:	46bd      	mov	sp, r7
 800e1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d0:	4770      	bx	lr

0800e1d2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800e1d2:	b480      	push	{r7}
 800e1d4:	b083      	sub	sp, #12
 800e1d6:	af00      	add	r7, sp, #0
 800e1d8:	6078      	str	r0, [r7, #4]
 800e1da:	460b      	mov	r3, r1
 800e1dc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	887a      	ldrh	r2, [r7, #2]
 800e1e4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800e1e6:	2300      	movs	r3, #0
}
 800e1e8:	4618      	mov	r0, r3
 800e1ea:	370c      	adds	r7, #12
 800e1ec:	46bd      	mov	sp, r7
 800e1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f2:	4770      	bx	lr

0800e1f4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800e1f4:	b480      	push	{r7}
 800e1f6:	b083      	sub	sp, #12
 800e1f8:	af00      	add	r7, sp, #0
 800e1fa:	6078      	str	r0, [r7, #4]
 800e1fc:	460b      	mov	r3, r1
 800e1fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800e200:	bf00      	nop
 800e202:	370c      	adds	r7, #12
 800e204:	46bd      	mov	sp, r7
 800e206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e20a:	4770      	bx	lr

0800e20c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e20c:	b580      	push	{r7, lr}
 800e20e:	b086      	sub	sp, #24
 800e210:	af00      	add	r7, sp, #0
 800e212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	2b00      	cmp	r3, #0
 800e218:	d101      	bne.n	800e21e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800e21a:	2301      	movs	r3, #1
 800e21c:	e267      	b.n	800e6ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	f003 0301 	and.w	r3, r3, #1
 800e226:	2b00      	cmp	r3, #0
 800e228:	d075      	beq.n	800e316 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800e22a:	4b88      	ldr	r3, [pc, #544]	@ (800e44c <HAL_RCC_OscConfig+0x240>)
 800e22c:	689b      	ldr	r3, [r3, #8]
 800e22e:	f003 030c 	and.w	r3, r3, #12
 800e232:	2b04      	cmp	r3, #4
 800e234:	d00c      	beq.n	800e250 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e236:	4b85      	ldr	r3, [pc, #532]	@ (800e44c <HAL_RCC_OscConfig+0x240>)
 800e238:	689b      	ldr	r3, [r3, #8]
 800e23a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800e23e:	2b08      	cmp	r3, #8
 800e240:	d112      	bne.n	800e268 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e242:	4b82      	ldr	r3, [pc, #520]	@ (800e44c <HAL_RCC_OscConfig+0x240>)
 800e244:	685b      	ldr	r3, [r3, #4]
 800e246:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e24a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e24e:	d10b      	bne.n	800e268 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e250:	4b7e      	ldr	r3, [pc, #504]	@ (800e44c <HAL_RCC_OscConfig+0x240>)
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d05b      	beq.n	800e314 <HAL_RCC_OscConfig+0x108>
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	685b      	ldr	r3, [r3, #4]
 800e260:	2b00      	cmp	r3, #0
 800e262:	d157      	bne.n	800e314 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800e264:	2301      	movs	r3, #1
 800e266:	e242      	b.n	800e6ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	685b      	ldr	r3, [r3, #4]
 800e26c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e270:	d106      	bne.n	800e280 <HAL_RCC_OscConfig+0x74>
 800e272:	4b76      	ldr	r3, [pc, #472]	@ (800e44c <HAL_RCC_OscConfig+0x240>)
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	4a75      	ldr	r2, [pc, #468]	@ (800e44c <HAL_RCC_OscConfig+0x240>)
 800e278:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e27c:	6013      	str	r3, [r2, #0]
 800e27e:	e01d      	b.n	800e2bc <HAL_RCC_OscConfig+0xb0>
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	685b      	ldr	r3, [r3, #4]
 800e284:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800e288:	d10c      	bne.n	800e2a4 <HAL_RCC_OscConfig+0x98>
 800e28a:	4b70      	ldr	r3, [pc, #448]	@ (800e44c <HAL_RCC_OscConfig+0x240>)
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	4a6f      	ldr	r2, [pc, #444]	@ (800e44c <HAL_RCC_OscConfig+0x240>)
 800e290:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800e294:	6013      	str	r3, [r2, #0]
 800e296:	4b6d      	ldr	r3, [pc, #436]	@ (800e44c <HAL_RCC_OscConfig+0x240>)
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	4a6c      	ldr	r2, [pc, #432]	@ (800e44c <HAL_RCC_OscConfig+0x240>)
 800e29c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e2a0:	6013      	str	r3, [r2, #0]
 800e2a2:	e00b      	b.n	800e2bc <HAL_RCC_OscConfig+0xb0>
 800e2a4:	4b69      	ldr	r3, [pc, #420]	@ (800e44c <HAL_RCC_OscConfig+0x240>)
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	4a68      	ldr	r2, [pc, #416]	@ (800e44c <HAL_RCC_OscConfig+0x240>)
 800e2aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e2ae:	6013      	str	r3, [r2, #0]
 800e2b0:	4b66      	ldr	r3, [pc, #408]	@ (800e44c <HAL_RCC_OscConfig+0x240>)
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	4a65      	ldr	r2, [pc, #404]	@ (800e44c <HAL_RCC_OscConfig+0x240>)
 800e2b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e2ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	685b      	ldr	r3, [r3, #4]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d013      	beq.n	800e2ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e2c4:	f7fc fefe 	bl	800b0c4 <HAL_GetTick>
 800e2c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e2ca:	e008      	b.n	800e2de <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e2cc:	f7fc fefa 	bl	800b0c4 <HAL_GetTick>
 800e2d0:	4602      	mov	r2, r0
 800e2d2:	693b      	ldr	r3, [r7, #16]
 800e2d4:	1ad3      	subs	r3, r2, r3
 800e2d6:	2b64      	cmp	r3, #100	@ 0x64
 800e2d8:	d901      	bls.n	800e2de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800e2da:	2303      	movs	r3, #3
 800e2dc:	e207      	b.n	800e6ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e2de:	4b5b      	ldr	r3, [pc, #364]	@ (800e44c <HAL_RCC_OscConfig+0x240>)
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d0f0      	beq.n	800e2cc <HAL_RCC_OscConfig+0xc0>
 800e2ea:	e014      	b.n	800e316 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e2ec:	f7fc feea 	bl	800b0c4 <HAL_GetTick>
 800e2f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e2f2:	e008      	b.n	800e306 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e2f4:	f7fc fee6 	bl	800b0c4 <HAL_GetTick>
 800e2f8:	4602      	mov	r2, r0
 800e2fa:	693b      	ldr	r3, [r7, #16]
 800e2fc:	1ad3      	subs	r3, r2, r3
 800e2fe:	2b64      	cmp	r3, #100	@ 0x64
 800e300:	d901      	bls.n	800e306 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800e302:	2303      	movs	r3, #3
 800e304:	e1f3      	b.n	800e6ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e306:	4b51      	ldr	r3, [pc, #324]	@ (800e44c <HAL_RCC_OscConfig+0x240>)
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d1f0      	bne.n	800e2f4 <HAL_RCC_OscConfig+0xe8>
 800e312:	e000      	b.n	800e316 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e314:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	f003 0302 	and.w	r3, r3, #2
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d063      	beq.n	800e3ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800e322:	4b4a      	ldr	r3, [pc, #296]	@ (800e44c <HAL_RCC_OscConfig+0x240>)
 800e324:	689b      	ldr	r3, [r3, #8]
 800e326:	f003 030c 	and.w	r3, r3, #12
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d00b      	beq.n	800e346 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e32e:	4b47      	ldr	r3, [pc, #284]	@ (800e44c <HAL_RCC_OscConfig+0x240>)
 800e330:	689b      	ldr	r3, [r3, #8]
 800e332:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800e336:	2b08      	cmp	r3, #8
 800e338:	d11c      	bne.n	800e374 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e33a:	4b44      	ldr	r3, [pc, #272]	@ (800e44c <HAL_RCC_OscConfig+0x240>)
 800e33c:	685b      	ldr	r3, [r3, #4]
 800e33e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e342:	2b00      	cmp	r3, #0
 800e344:	d116      	bne.n	800e374 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e346:	4b41      	ldr	r3, [pc, #260]	@ (800e44c <HAL_RCC_OscConfig+0x240>)
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	f003 0302 	and.w	r3, r3, #2
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d005      	beq.n	800e35e <HAL_RCC_OscConfig+0x152>
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	68db      	ldr	r3, [r3, #12]
 800e356:	2b01      	cmp	r3, #1
 800e358:	d001      	beq.n	800e35e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800e35a:	2301      	movs	r3, #1
 800e35c:	e1c7      	b.n	800e6ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e35e:	4b3b      	ldr	r3, [pc, #236]	@ (800e44c <HAL_RCC_OscConfig+0x240>)
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	691b      	ldr	r3, [r3, #16]
 800e36a:	00db      	lsls	r3, r3, #3
 800e36c:	4937      	ldr	r1, [pc, #220]	@ (800e44c <HAL_RCC_OscConfig+0x240>)
 800e36e:	4313      	orrs	r3, r2
 800e370:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e372:	e03a      	b.n	800e3ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	68db      	ldr	r3, [r3, #12]
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d020      	beq.n	800e3be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800e37c:	4b34      	ldr	r3, [pc, #208]	@ (800e450 <HAL_RCC_OscConfig+0x244>)
 800e37e:	2201      	movs	r2, #1
 800e380:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e382:	f7fc fe9f 	bl	800b0c4 <HAL_GetTick>
 800e386:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e388:	e008      	b.n	800e39c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e38a:	f7fc fe9b 	bl	800b0c4 <HAL_GetTick>
 800e38e:	4602      	mov	r2, r0
 800e390:	693b      	ldr	r3, [r7, #16]
 800e392:	1ad3      	subs	r3, r2, r3
 800e394:	2b02      	cmp	r3, #2
 800e396:	d901      	bls.n	800e39c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800e398:	2303      	movs	r3, #3
 800e39a:	e1a8      	b.n	800e6ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e39c:	4b2b      	ldr	r3, [pc, #172]	@ (800e44c <HAL_RCC_OscConfig+0x240>)
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	f003 0302 	and.w	r3, r3, #2
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d0f0      	beq.n	800e38a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e3a8:	4b28      	ldr	r3, [pc, #160]	@ (800e44c <HAL_RCC_OscConfig+0x240>)
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	691b      	ldr	r3, [r3, #16]
 800e3b4:	00db      	lsls	r3, r3, #3
 800e3b6:	4925      	ldr	r1, [pc, #148]	@ (800e44c <HAL_RCC_OscConfig+0x240>)
 800e3b8:	4313      	orrs	r3, r2
 800e3ba:	600b      	str	r3, [r1, #0]
 800e3bc:	e015      	b.n	800e3ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800e3be:	4b24      	ldr	r3, [pc, #144]	@ (800e450 <HAL_RCC_OscConfig+0x244>)
 800e3c0:	2200      	movs	r2, #0
 800e3c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e3c4:	f7fc fe7e 	bl	800b0c4 <HAL_GetTick>
 800e3c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e3ca:	e008      	b.n	800e3de <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e3cc:	f7fc fe7a 	bl	800b0c4 <HAL_GetTick>
 800e3d0:	4602      	mov	r2, r0
 800e3d2:	693b      	ldr	r3, [r7, #16]
 800e3d4:	1ad3      	subs	r3, r2, r3
 800e3d6:	2b02      	cmp	r3, #2
 800e3d8:	d901      	bls.n	800e3de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800e3da:	2303      	movs	r3, #3
 800e3dc:	e187      	b.n	800e6ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e3de:	4b1b      	ldr	r3, [pc, #108]	@ (800e44c <HAL_RCC_OscConfig+0x240>)
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	f003 0302 	and.w	r3, r3, #2
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d1f0      	bne.n	800e3cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	f003 0308 	and.w	r3, r3, #8
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d036      	beq.n	800e464 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	695b      	ldr	r3, [r3, #20]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d016      	beq.n	800e42c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800e3fe:	4b15      	ldr	r3, [pc, #84]	@ (800e454 <HAL_RCC_OscConfig+0x248>)
 800e400:	2201      	movs	r2, #1
 800e402:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e404:	f7fc fe5e 	bl	800b0c4 <HAL_GetTick>
 800e408:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e40a:	e008      	b.n	800e41e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e40c:	f7fc fe5a 	bl	800b0c4 <HAL_GetTick>
 800e410:	4602      	mov	r2, r0
 800e412:	693b      	ldr	r3, [r7, #16]
 800e414:	1ad3      	subs	r3, r2, r3
 800e416:	2b02      	cmp	r3, #2
 800e418:	d901      	bls.n	800e41e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800e41a:	2303      	movs	r3, #3
 800e41c:	e167      	b.n	800e6ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e41e:	4b0b      	ldr	r3, [pc, #44]	@ (800e44c <HAL_RCC_OscConfig+0x240>)
 800e420:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e422:	f003 0302 	and.w	r3, r3, #2
 800e426:	2b00      	cmp	r3, #0
 800e428:	d0f0      	beq.n	800e40c <HAL_RCC_OscConfig+0x200>
 800e42a:	e01b      	b.n	800e464 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800e42c:	4b09      	ldr	r3, [pc, #36]	@ (800e454 <HAL_RCC_OscConfig+0x248>)
 800e42e:	2200      	movs	r2, #0
 800e430:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800e432:	f7fc fe47 	bl	800b0c4 <HAL_GetTick>
 800e436:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e438:	e00e      	b.n	800e458 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e43a:	f7fc fe43 	bl	800b0c4 <HAL_GetTick>
 800e43e:	4602      	mov	r2, r0
 800e440:	693b      	ldr	r3, [r7, #16]
 800e442:	1ad3      	subs	r3, r2, r3
 800e444:	2b02      	cmp	r3, #2
 800e446:	d907      	bls.n	800e458 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800e448:	2303      	movs	r3, #3
 800e44a:	e150      	b.n	800e6ee <HAL_RCC_OscConfig+0x4e2>
 800e44c:	40023800 	.word	0x40023800
 800e450:	42470000 	.word	0x42470000
 800e454:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e458:	4b88      	ldr	r3, [pc, #544]	@ (800e67c <HAL_RCC_OscConfig+0x470>)
 800e45a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e45c:	f003 0302 	and.w	r3, r3, #2
 800e460:	2b00      	cmp	r3, #0
 800e462:	d1ea      	bne.n	800e43a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	f003 0304 	and.w	r3, r3, #4
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	f000 8097 	beq.w	800e5a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800e472:	2300      	movs	r3, #0
 800e474:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e476:	4b81      	ldr	r3, [pc, #516]	@ (800e67c <HAL_RCC_OscConfig+0x470>)
 800e478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e47a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d10f      	bne.n	800e4a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e482:	2300      	movs	r3, #0
 800e484:	60bb      	str	r3, [r7, #8]
 800e486:	4b7d      	ldr	r3, [pc, #500]	@ (800e67c <HAL_RCC_OscConfig+0x470>)
 800e488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e48a:	4a7c      	ldr	r2, [pc, #496]	@ (800e67c <HAL_RCC_OscConfig+0x470>)
 800e48c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e490:	6413      	str	r3, [r2, #64]	@ 0x40
 800e492:	4b7a      	ldr	r3, [pc, #488]	@ (800e67c <HAL_RCC_OscConfig+0x470>)
 800e494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e496:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e49a:	60bb      	str	r3, [r7, #8]
 800e49c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800e49e:	2301      	movs	r3, #1
 800e4a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e4a2:	4b77      	ldr	r3, [pc, #476]	@ (800e680 <HAL_RCC_OscConfig+0x474>)
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d118      	bne.n	800e4e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800e4ae:	4b74      	ldr	r3, [pc, #464]	@ (800e680 <HAL_RCC_OscConfig+0x474>)
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	4a73      	ldr	r2, [pc, #460]	@ (800e680 <HAL_RCC_OscConfig+0x474>)
 800e4b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e4b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800e4ba:	f7fc fe03 	bl	800b0c4 <HAL_GetTick>
 800e4be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e4c0:	e008      	b.n	800e4d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e4c2:	f7fc fdff 	bl	800b0c4 <HAL_GetTick>
 800e4c6:	4602      	mov	r2, r0
 800e4c8:	693b      	ldr	r3, [r7, #16]
 800e4ca:	1ad3      	subs	r3, r2, r3
 800e4cc:	2b02      	cmp	r3, #2
 800e4ce:	d901      	bls.n	800e4d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800e4d0:	2303      	movs	r3, #3
 800e4d2:	e10c      	b.n	800e6ee <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e4d4:	4b6a      	ldr	r3, [pc, #424]	@ (800e680 <HAL_RCC_OscConfig+0x474>)
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d0f0      	beq.n	800e4c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	689b      	ldr	r3, [r3, #8]
 800e4e4:	2b01      	cmp	r3, #1
 800e4e6:	d106      	bne.n	800e4f6 <HAL_RCC_OscConfig+0x2ea>
 800e4e8:	4b64      	ldr	r3, [pc, #400]	@ (800e67c <HAL_RCC_OscConfig+0x470>)
 800e4ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e4ec:	4a63      	ldr	r2, [pc, #396]	@ (800e67c <HAL_RCC_OscConfig+0x470>)
 800e4ee:	f043 0301 	orr.w	r3, r3, #1
 800e4f2:	6713      	str	r3, [r2, #112]	@ 0x70
 800e4f4:	e01c      	b.n	800e530 <HAL_RCC_OscConfig+0x324>
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	689b      	ldr	r3, [r3, #8]
 800e4fa:	2b05      	cmp	r3, #5
 800e4fc:	d10c      	bne.n	800e518 <HAL_RCC_OscConfig+0x30c>
 800e4fe:	4b5f      	ldr	r3, [pc, #380]	@ (800e67c <HAL_RCC_OscConfig+0x470>)
 800e500:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e502:	4a5e      	ldr	r2, [pc, #376]	@ (800e67c <HAL_RCC_OscConfig+0x470>)
 800e504:	f043 0304 	orr.w	r3, r3, #4
 800e508:	6713      	str	r3, [r2, #112]	@ 0x70
 800e50a:	4b5c      	ldr	r3, [pc, #368]	@ (800e67c <HAL_RCC_OscConfig+0x470>)
 800e50c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e50e:	4a5b      	ldr	r2, [pc, #364]	@ (800e67c <HAL_RCC_OscConfig+0x470>)
 800e510:	f043 0301 	orr.w	r3, r3, #1
 800e514:	6713      	str	r3, [r2, #112]	@ 0x70
 800e516:	e00b      	b.n	800e530 <HAL_RCC_OscConfig+0x324>
 800e518:	4b58      	ldr	r3, [pc, #352]	@ (800e67c <HAL_RCC_OscConfig+0x470>)
 800e51a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e51c:	4a57      	ldr	r2, [pc, #348]	@ (800e67c <HAL_RCC_OscConfig+0x470>)
 800e51e:	f023 0301 	bic.w	r3, r3, #1
 800e522:	6713      	str	r3, [r2, #112]	@ 0x70
 800e524:	4b55      	ldr	r3, [pc, #340]	@ (800e67c <HAL_RCC_OscConfig+0x470>)
 800e526:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e528:	4a54      	ldr	r2, [pc, #336]	@ (800e67c <HAL_RCC_OscConfig+0x470>)
 800e52a:	f023 0304 	bic.w	r3, r3, #4
 800e52e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	689b      	ldr	r3, [r3, #8]
 800e534:	2b00      	cmp	r3, #0
 800e536:	d015      	beq.n	800e564 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e538:	f7fc fdc4 	bl	800b0c4 <HAL_GetTick>
 800e53c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e53e:	e00a      	b.n	800e556 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e540:	f7fc fdc0 	bl	800b0c4 <HAL_GetTick>
 800e544:	4602      	mov	r2, r0
 800e546:	693b      	ldr	r3, [r7, #16]
 800e548:	1ad3      	subs	r3, r2, r3
 800e54a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e54e:	4293      	cmp	r3, r2
 800e550:	d901      	bls.n	800e556 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800e552:	2303      	movs	r3, #3
 800e554:	e0cb      	b.n	800e6ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e556:	4b49      	ldr	r3, [pc, #292]	@ (800e67c <HAL_RCC_OscConfig+0x470>)
 800e558:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e55a:	f003 0302 	and.w	r3, r3, #2
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d0ee      	beq.n	800e540 <HAL_RCC_OscConfig+0x334>
 800e562:	e014      	b.n	800e58e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800e564:	f7fc fdae 	bl	800b0c4 <HAL_GetTick>
 800e568:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e56a:	e00a      	b.n	800e582 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e56c:	f7fc fdaa 	bl	800b0c4 <HAL_GetTick>
 800e570:	4602      	mov	r2, r0
 800e572:	693b      	ldr	r3, [r7, #16]
 800e574:	1ad3      	subs	r3, r2, r3
 800e576:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e57a:	4293      	cmp	r3, r2
 800e57c:	d901      	bls.n	800e582 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800e57e:	2303      	movs	r3, #3
 800e580:	e0b5      	b.n	800e6ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e582:	4b3e      	ldr	r3, [pc, #248]	@ (800e67c <HAL_RCC_OscConfig+0x470>)
 800e584:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e586:	f003 0302 	and.w	r3, r3, #2
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d1ee      	bne.n	800e56c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800e58e:	7dfb      	ldrb	r3, [r7, #23]
 800e590:	2b01      	cmp	r3, #1
 800e592:	d105      	bne.n	800e5a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800e594:	4b39      	ldr	r3, [pc, #228]	@ (800e67c <HAL_RCC_OscConfig+0x470>)
 800e596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e598:	4a38      	ldr	r2, [pc, #224]	@ (800e67c <HAL_RCC_OscConfig+0x470>)
 800e59a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e59e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	699b      	ldr	r3, [r3, #24]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	f000 80a1 	beq.w	800e6ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800e5aa:	4b34      	ldr	r3, [pc, #208]	@ (800e67c <HAL_RCC_OscConfig+0x470>)
 800e5ac:	689b      	ldr	r3, [r3, #8]
 800e5ae:	f003 030c 	and.w	r3, r3, #12
 800e5b2:	2b08      	cmp	r3, #8
 800e5b4:	d05c      	beq.n	800e670 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	699b      	ldr	r3, [r3, #24]
 800e5ba:	2b02      	cmp	r3, #2
 800e5bc:	d141      	bne.n	800e642 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e5be:	4b31      	ldr	r3, [pc, #196]	@ (800e684 <HAL_RCC_OscConfig+0x478>)
 800e5c0:	2200      	movs	r2, #0
 800e5c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e5c4:	f7fc fd7e 	bl	800b0c4 <HAL_GetTick>
 800e5c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e5ca:	e008      	b.n	800e5de <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e5cc:	f7fc fd7a 	bl	800b0c4 <HAL_GetTick>
 800e5d0:	4602      	mov	r2, r0
 800e5d2:	693b      	ldr	r3, [r7, #16]
 800e5d4:	1ad3      	subs	r3, r2, r3
 800e5d6:	2b02      	cmp	r3, #2
 800e5d8:	d901      	bls.n	800e5de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800e5da:	2303      	movs	r3, #3
 800e5dc:	e087      	b.n	800e6ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e5de:	4b27      	ldr	r3, [pc, #156]	@ (800e67c <HAL_RCC_OscConfig+0x470>)
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d1f0      	bne.n	800e5cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	69da      	ldr	r2, [r3, #28]
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	6a1b      	ldr	r3, [r3, #32]
 800e5f2:	431a      	orrs	r2, r3
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e5f8:	019b      	lsls	r3, r3, #6
 800e5fa:	431a      	orrs	r2, r3
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e600:	085b      	lsrs	r3, r3, #1
 800e602:	3b01      	subs	r3, #1
 800e604:	041b      	lsls	r3, r3, #16
 800e606:	431a      	orrs	r2, r3
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e60c:	061b      	lsls	r3, r3, #24
 800e60e:	491b      	ldr	r1, [pc, #108]	@ (800e67c <HAL_RCC_OscConfig+0x470>)
 800e610:	4313      	orrs	r3, r2
 800e612:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800e614:	4b1b      	ldr	r3, [pc, #108]	@ (800e684 <HAL_RCC_OscConfig+0x478>)
 800e616:	2201      	movs	r2, #1
 800e618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e61a:	f7fc fd53 	bl	800b0c4 <HAL_GetTick>
 800e61e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e620:	e008      	b.n	800e634 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e622:	f7fc fd4f 	bl	800b0c4 <HAL_GetTick>
 800e626:	4602      	mov	r2, r0
 800e628:	693b      	ldr	r3, [r7, #16]
 800e62a:	1ad3      	subs	r3, r2, r3
 800e62c:	2b02      	cmp	r3, #2
 800e62e:	d901      	bls.n	800e634 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800e630:	2303      	movs	r3, #3
 800e632:	e05c      	b.n	800e6ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e634:	4b11      	ldr	r3, [pc, #68]	@ (800e67c <HAL_RCC_OscConfig+0x470>)
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d0f0      	beq.n	800e622 <HAL_RCC_OscConfig+0x416>
 800e640:	e054      	b.n	800e6ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e642:	4b10      	ldr	r3, [pc, #64]	@ (800e684 <HAL_RCC_OscConfig+0x478>)
 800e644:	2200      	movs	r2, #0
 800e646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e648:	f7fc fd3c 	bl	800b0c4 <HAL_GetTick>
 800e64c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e64e:	e008      	b.n	800e662 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e650:	f7fc fd38 	bl	800b0c4 <HAL_GetTick>
 800e654:	4602      	mov	r2, r0
 800e656:	693b      	ldr	r3, [r7, #16]
 800e658:	1ad3      	subs	r3, r2, r3
 800e65a:	2b02      	cmp	r3, #2
 800e65c:	d901      	bls.n	800e662 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800e65e:	2303      	movs	r3, #3
 800e660:	e045      	b.n	800e6ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e662:	4b06      	ldr	r3, [pc, #24]	@ (800e67c <HAL_RCC_OscConfig+0x470>)
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d1f0      	bne.n	800e650 <HAL_RCC_OscConfig+0x444>
 800e66e:	e03d      	b.n	800e6ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	699b      	ldr	r3, [r3, #24]
 800e674:	2b01      	cmp	r3, #1
 800e676:	d107      	bne.n	800e688 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800e678:	2301      	movs	r3, #1
 800e67a:	e038      	b.n	800e6ee <HAL_RCC_OscConfig+0x4e2>
 800e67c:	40023800 	.word	0x40023800
 800e680:	40007000 	.word	0x40007000
 800e684:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800e688:	4b1b      	ldr	r3, [pc, #108]	@ (800e6f8 <HAL_RCC_OscConfig+0x4ec>)
 800e68a:	685b      	ldr	r3, [r3, #4]
 800e68c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	699b      	ldr	r3, [r3, #24]
 800e692:	2b01      	cmp	r3, #1
 800e694:	d028      	beq.n	800e6e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e6a0:	429a      	cmp	r2, r3
 800e6a2:	d121      	bne.n	800e6e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e6ae:	429a      	cmp	r2, r3
 800e6b0:	d11a      	bne.n	800e6e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800e6b2:	68fa      	ldr	r2, [r7, #12]
 800e6b4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800e6b8:	4013      	ands	r3, r2
 800e6ba:	687a      	ldr	r2, [r7, #4]
 800e6bc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800e6be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800e6c0:	4293      	cmp	r3, r2
 800e6c2:	d111      	bne.n	800e6e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e6ce:	085b      	lsrs	r3, r3, #1
 800e6d0:	3b01      	subs	r3, #1
 800e6d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800e6d4:	429a      	cmp	r2, r3
 800e6d6:	d107      	bne.n	800e6e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800e6e4:	429a      	cmp	r2, r3
 800e6e6:	d001      	beq.n	800e6ec <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800e6e8:	2301      	movs	r3, #1
 800e6ea:	e000      	b.n	800e6ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800e6ec:	2300      	movs	r3, #0
}
 800e6ee:	4618      	mov	r0, r3
 800e6f0:	3718      	adds	r7, #24
 800e6f2:	46bd      	mov	sp, r7
 800e6f4:	bd80      	pop	{r7, pc}
 800e6f6:	bf00      	nop
 800e6f8:	40023800 	.word	0x40023800

0800e6fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e6fc:	b580      	push	{r7, lr}
 800e6fe:	b084      	sub	sp, #16
 800e700:	af00      	add	r7, sp, #0
 800e702:	6078      	str	r0, [r7, #4]
 800e704:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d101      	bne.n	800e710 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800e70c:	2301      	movs	r3, #1
 800e70e:	e0cc      	b.n	800e8aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800e710:	4b68      	ldr	r3, [pc, #416]	@ (800e8b4 <HAL_RCC_ClockConfig+0x1b8>)
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	f003 0307 	and.w	r3, r3, #7
 800e718:	683a      	ldr	r2, [r7, #0]
 800e71a:	429a      	cmp	r2, r3
 800e71c:	d90c      	bls.n	800e738 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e71e:	4b65      	ldr	r3, [pc, #404]	@ (800e8b4 <HAL_RCC_ClockConfig+0x1b8>)
 800e720:	683a      	ldr	r2, [r7, #0]
 800e722:	b2d2      	uxtb	r2, r2
 800e724:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e726:	4b63      	ldr	r3, [pc, #396]	@ (800e8b4 <HAL_RCC_ClockConfig+0x1b8>)
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	f003 0307 	and.w	r3, r3, #7
 800e72e:	683a      	ldr	r2, [r7, #0]
 800e730:	429a      	cmp	r2, r3
 800e732:	d001      	beq.n	800e738 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800e734:	2301      	movs	r3, #1
 800e736:	e0b8      	b.n	800e8aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	f003 0302 	and.w	r3, r3, #2
 800e740:	2b00      	cmp	r3, #0
 800e742:	d020      	beq.n	800e786 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	f003 0304 	and.w	r3, r3, #4
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d005      	beq.n	800e75c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800e750:	4b59      	ldr	r3, [pc, #356]	@ (800e8b8 <HAL_RCC_ClockConfig+0x1bc>)
 800e752:	689b      	ldr	r3, [r3, #8]
 800e754:	4a58      	ldr	r2, [pc, #352]	@ (800e8b8 <HAL_RCC_ClockConfig+0x1bc>)
 800e756:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800e75a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	f003 0308 	and.w	r3, r3, #8
 800e764:	2b00      	cmp	r3, #0
 800e766:	d005      	beq.n	800e774 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800e768:	4b53      	ldr	r3, [pc, #332]	@ (800e8b8 <HAL_RCC_ClockConfig+0x1bc>)
 800e76a:	689b      	ldr	r3, [r3, #8]
 800e76c:	4a52      	ldr	r2, [pc, #328]	@ (800e8b8 <HAL_RCC_ClockConfig+0x1bc>)
 800e76e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800e772:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e774:	4b50      	ldr	r3, [pc, #320]	@ (800e8b8 <HAL_RCC_ClockConfig+0x1bc>)
 800e776:	689b      	ldr	r3, [r3, #8]
 800e778:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	689b      	ldr	r3, [r3, #8]
 800e780:	494d      	ldr	r1, [pc, #308]	@ (800e8b8 <HAL_RCC_ClockConfig+0x1bc>)
 800e782:	4313      	orrs	r3, r2
 800e784:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	f003 0301 	and.w	r3, r3, #1
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d044      	beq.n	800e81c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	685b      	ldr	r3, [r3, #4]
 800e796:	2b01      	cmp	r3, #1
 800e798:	d107      	bne.n	800e7aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e79a:	4b47      	ldr	r3, [pc, #284]	@ (800e8b8 <HAL_RCC_ClockConfig+0x1bc>)
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d119      	bne.n	800e7da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e7a6:	2301      	movs	r3, #1
 800e7a8:	e07f      	b.n	800e8aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	685b      	ldr	r3, [r3, #4]
 800e7ae:	2b02      	cmp	r3, #2
 800e7b0:	d003      	beq.n	800e7ba <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800e7b6:	2b03      	cmp	r3, #3
 800e7b8:	d107      	bne.n	800e7ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e7ba:	4b3f      	ldr	r3, [pc, #252]	@ (800e8b8 <HAL_RCC_ClockConfig+0x1bc>)
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d109      	bne.n	800e7da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e7c6:	2301      	movs	r3, #1
 800e7c8:	e06f      	b.n	800e8aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e7ca:	4b3b      	ldr	r3, [pc, #236]	@ (800e8b8 <HAL_RCC_ClockConfig+0x1bc>)
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	f003 0302 	and.w	r3, r3, #2
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d101      	bne.n	800e7da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e7d6:	2301      	movs	r3, #1
 800e7d8:	e067      	b.n	800e8aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800e7da:	4b37      	ldr	r3, [pc, #220]	@ (800e8b8 <HAL_RCC_ClockConfig+0x1bc>)
 800e7dc:	689b      	ldr	r3, [r3, #8]
 800e7de:	f023 0203 	bic.w	r2, r3, #3
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	685b      	ldr	r3, [r3, #4]
 800e7e6:	4934      	ldr	r1, [pc, #208]	@ (800e8b8 <HAL_RCC_ClockConfig+0x1bc>)
 800e7e8:	4313      	orrs	r3, r2
 800e7ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800e7ec:	f7fc fc6a 	bl	800b0c4 <HAL_GetTick>
 800e7f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e7f2:	e00a      	b.n	800e80a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e7f4:	f7fc fc66 	bl	800b0c4 <HAL_GetTick>
 800e7f8:	4602      	mov	r2, r0
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	1ad3      	subs	r3, r2, r3
 800e7fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e802:	4293      	cmp	r3, r2
 800e804:	d901      	bls.n	800e80a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800e806:	2303      	movs	r3, #3
 800e808:	e04f      	b.n	800e8aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e80a:	4b2b      	ldr	r3, [pc, #172]	@ (800e8b8 <HAL_RCC_ClockConfig+0x1bc>)
 800e80c:	689b      	ldr	r3, [r3, #8]
 800e80e:	f003 020c 	and.w	r2, r3, #12
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	685b      	ldr	r3, [r3, #4]
 800e816:	009b      	lsls	r3, r3, #2
 800e818:	429a      	cmp	r2, r3
 800e81a:	d1eb      	bne.n	800e7f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800e81c:	4b25      	ldr	r3, [pc, #148]	@ (800e8b4 <HAL_RCC_ClockConfig+0x1b8>)
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	f003 0307 	and.w	r3, r3, #7
 800e824:	683a      	ldr	r2, [r7, #0]
 800e826:	429a      	cmp	r2, r3
 800e828:	d20c      	bcs.n	800e844 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e82a:	4b22      	ldr	r3, [pc, #136]	@ (800e8b4 <HAL_RCC_ClockConfig+0x1b8>)
 800e82c:	683a      	ldr	r2, [r7, #0]
 800e82e:	b2d2      	uxtb	r2, r2
 800e830:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e832:	4b20      	ldr	r3, [pc, #128]	@ (800e8b4 <HAL_RCC_ClockConfig+0x1b8>)
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	f003 0307 	and.w	r3, r3, #7
 800e83a:	683a      	ldr	r2, [r7, #0]
 800e83c:	429a      	cmp	r2, r3
 800e83e:	d001      	beq.n	800e844 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800e840:	2301      	movs	r3, #1
 800e842:	e032      	b.n	800e8aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	f003 0304 	and.w	r3, r3, #4
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d008      	beq.n	800e862 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800e850:	4b19      	ldr	r3, [pc, #100]	@ (800e8b8 <HAL_RCC_ClockConfig+0x1bc>)
 800e852:	689b      	ldr	r3, [r3, #8]
 800e854:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	68db      	ldr	r3, [r3, #12]
 800e85c:	4916      	ldr	r1, [pc, #88]	@ (800e8b8 <HAL_RCC_ClockConfig+0x1bc>)
 800e85e:	4313      	orrs	r3, r2
 800e860:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	f003 0308 	and.w	r3, r3, #8
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d009      	beq.n	800e882 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800e86e:	4b12      	ldr	r3, [pc, #72]	@ (800e8b8 <HAL_RCC_ClockConfig+0x1bc>)
 800e870:	689b      	ldr	r3, [r3, #8]
 800e872:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	691b      	ldr	r3, [r3, #16]
 800e87a:	00db      	lsls	r3, r3, #3
 800e87c:	490e      	ldr	r1, [pc, #56]	@ (800e8b8 <HAL_RCC_ClockConfig+0x1bc>)
 800e87e:	4313      	orrs	r3, r2
 800e880:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800e882:	f000 f821 	bl	800e8c8 <HAL_RCC_GetSysClockFreq>
 800e886:	4602      	mov	r2, r0
 800e888:	4b0b      	ldr	r3, [pc, #44]	@ (800e8b8 <HAL_RCC_ClockConfig+0x1bc>)
 800e88a:	689b      	ldr	r3, [r3, #8]
 800e88c:	091b      	lsrs	r3, r3, #4
 800e88e:	f003 030f 	and.w	r3, r3, #15
 800e892:	490a      	ldr	r1, [pc, #40]	@ (800e8bc <HAL_RCC_ClockConfig+0x1c0>)
 800e894:	5ccb      	ldrb	r3, [r1, r3]
 800e896:	fa22 f303 	lsr.w	r3, r2, r3
 800e89a:	4a09      	ldr	r2, [pc, #36]	@ (800e8c0 <HAL_RCC_ClockConfig+0x1c4>)
 800e89c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800e89e:	4b09      	ldr	r3, [pc, #36]	@ (800e8c4 <HAL_RCC_ClockConfig+0x1c8>)
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	4618      	mov	r0, r3
 800e8a4:	f7fc fbca 	bl	800b03c <HAL_InitTick>

  return HAL_OK;
 800e8a8:	2300      	movs	r3, #0
}
 800e8aa:	4618      	mov	r0, r3
 800e8ac:	3710      	adds	r7, #16
 800e8ae:	46bd      	mov	sp, r7
 800e8b0:	bd80      	pop	{r7, pc}
 800e8b2:	bf00      	nop
 800e8b4:	40023c00 	.word	0x40023c00
 800e8b8:	40023800 	.word	0x40023800
 800e8bc:	08017808 	.word	0x08017808
 800e8c0:	2000000c 	.word	0x2000000c
 800e8c4:	20000010 	.word	0x20000010

0800e8c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e8c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e8cc:	b094      	sub	sp, #80	@ 0x50
 800e8ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800e8d0:	2300      	movs	r3, #0
 800e8d2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800e8d8:	2300      	movs	r3, #0
 800e8da:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800e8dc:	2300      	movs	r3, #0
 800e8de:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e8e0:	4b79      	ldr	r3, [pc, #484]	@ (800eac8 <HAL_RCC_GetSysClockFreq+0x200>)
 800e8e2:	689b      	ldr	r3, [r3, #8]
 800e8e4:	f003 030c 	and.w	r3, r3, #12
 800e8e8:	2b08      	cmp	r3, #8
 800e8ea:	d00d      	beq.n	800e908 <HAL_RCC_GetSysClockFreq+0x40>
 800e8ec:	2b08      	cmp	r3, #8
 800e8ee:	f200 80e1 	bhi.w	800eab4 <HAL_RCC_GetSysClockFreq+0x1ec>
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d002      	beq.n	800e8fc <HAL_RCC_GetSysClockFreq+0x34>
 800e8f6:	2b04      	cmp	r3, #4
 800e8f8:	d003      	beq.n	800e902 <HAL_RCC_GetSysClockFreq+0x3a>
 800e8fa:	e0db      	b.n	800eab4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800e8fc:	4b73      	ldr	r3, [pc, #460]	@ (800eacc <HAL_RCC_GetSysClockFreq+0x204>)
 800e8fe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800e900:	e0db      	b.n	800eaba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800e902:	4b73      	ldr	r3, [pc, #460]	@ (800ead0 <HAL_RCC_GetSysClockFreq+0x208>)
 800e904:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800e906:	e0d8      	b.n	800eaba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800e908:	4b6f      	ldr	r3, [pc, #444]	@ (800eac8 <HAL_RCC_GetSysClockFreq+0x200>)
 800e90a:	685b      	ldr	r3, [r3, #4]
 800e90c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e910:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800e912:	4b6d      	ldr	r3, [pc, #436]	@ (800eac8 <HAL_RCC_GetSysClockFreq+0x200>)
 800e914:	685b      	ldr	r3, [r3, #4]
 800e916:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d063      	beq.n	800e9e6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e91e:	4b6a      	ldr	r3, [pc, #424]	@ (800eac8 <HAL_RCC_GetSysClockFreq+0x200>)
 800e920:	685b      	ldr	r3, [r3, #4]
 800e922:	099b      	lsrs	r3, r3, #6
 800e924:	2200      	movs	r2, #0
 800e926:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e928:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800e92a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e92c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e930:	633b      	str	r3, [r7, #48]	@ 0x30
 800e932:	2300      	movs	r3, #0
 800e934:	637b      	str	r3, [r7, #52]	@ 0x34
 800e936:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800e93a:	4622      	mov	r2, r4
 800e93c:	462b      	mov	r3, r5
 800e93e:	f04f 0000 	mov.w	r0, #0
 800e942:	f04f 0100 	mov.w	r1, #0
 800e946:	0159      	lsls	r1, r3, #5
 800e948:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e94c:	0150      	lsls	r0, r2, #5
 800e94e:	4602      	mov	r2, r0
 800e950:	460b      	mov	r3, r1
 800e952:	4621      	mov	r1, r4
 800e954:	1a51      	subs	r1, r2, r1
 800e956:	6139      	str	r1, [r7, #16]
 800e958:	4629      	mov	r1, r5
 800e95a:	eb63 0301 	sbc.w	r3, r3, r1
 800e95e:	617b      	str	r3, [r7, #20]
 800e960:	f04f 0200 	mov.w	r2, #0
 800e964:	f04f 0300 	mov.w	r3, #0
 800e968:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800e96c:	4659      	mov	r1, fp
 800e96e:	018b      	lsls	r3, r1, #6
 800e970:	4651      	mov	r1, sl
 800e972:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800e976:	4651      	mov	r1, sl
 800e978:	018a      	lsls	r2, r1, #6
 800e97a:	4651      	mov	r1, sl
 800e97c:	ebb2 0801 	subs.w	r8, r2, r1
 800e980:	4659      	mov	r1, fp
 800e982:	eb63 0901 	sbc.w	r9, r3, r1
 800e986:	f04f 0200 	mov.w	r2, #0
 800e98a:	f04f 0300 	mov.w	r3, #0
 800e98e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800e992:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800e996:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800e99a:	4690      	mov	r8, r2
 800e99c:	4699      	mov	r9, r3
 800e99e:	4623      	mov	r3, r4
 800e9a0:	eb18 0303 	adds.w	r3, r8, r3
 800e9a4:	60bb      	str	r3, [r7, #8]
 800e9a6:	462b      	mov	r3, r5
 800e9a8:	eb49 0303 	adc.w	r3, r9, r3
 800e9ac:	60fb      	str	r3, [r7, #12]
 800e9ae:	f04f 0200 	mov.w	r2, #0
 800e9b2:	f04f 0300 	mov.w	r3, #0
 800e9b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800e9ba:	4629      	mov	r1, r5
 800e9bc:	024b      	lsls	r3, r1, #9
 800e9be:	4621      	mov	r1, r4
 800e9c0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800e9c4:	4621      	mov	r1, r4
 800e9c6:	024a      	lsls	r2, r1, #9
 800e9c8:	4610      	mov	r0, r2
 800e9ca:	4619      	mov	r1, r3
 800e9cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e9ce:	2200      	movs	r2, #0
 800e9d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e9d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e9d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800e9d8:	f7fa f93e 	bl	8008c58 <__aeabi_uldivmod>
 800e9dc:	4602      	mov	r2, r0
 800e9de:	460b      	mov	r3, r1
 800e9e0:	4613      	mov	r3, r2
 800e9e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e9e4:	e058      	b.n	800ea98 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e9e6:	4b38      	ldr	r3, [pc, #224]	@ (800eac8 <HAL_RCC_GetSysClockFreq+0x200>)
 800e9e8:	685b      	ldr	r3, [r3, #4]
 800e9ea:	099b      	lsrs	r3, r3, #6
 800e9ec:	2200      	movs	r2, #0
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	4611      	mov	r1, r2
 800e9f2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800e9f6:	623b      	str	r3, [r7, #32]
 800e9f8:	2300      	movs	r3, #0
 800e9fa:	627b      	str	r3, [r7, #36]	@ 0x24
 800e9fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800ea00:	4642      	mov	r2, r8
 800ea02:	464b      	mov	r3, r9
 800ea04:	f04f 0000 	mov.w	r0, #0
 800ea08:	f04f 0100 	mov.w	r1, #0
 800ea0c:	0159      	lsls	r1, r3, #5
 800ea0e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ea12:	0150      	lsls	r0, r2, #5
 800ea14:	4602      	mov	r2, r0
 800ea16:	460b      	mov	r3, r1
 800ea18:	4641      	mov	r1, r8
 800ea1a:	ebb2 0a01 	subs.w	sl, r2, r1
 800ea1e:	4649      	mov	r1, r9
 800ea20:	eb63 0b01 	sbc.w	fp, r3, r1
 800ea24:	f04f 0200 	mov.w	r2, #0
 800ea28:	f04f 0300 	mov.w	r3, #0
 800ea2c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800ea30:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800ea34:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800ea38:	ebb2 040a 	subs.w	r4, r2, sl
 800ea3c:	eb63 050b 	sbc.w	r5, r3, fp
 800ea40:	f04f 0200 	mov.w	r2, #0
 800ea44:	f04f 0300 	mov.w	r3, #0
 800ea48:	00eb      	lsls	r3, r5, #3
 800ea4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ea4e:	00e2      	lsls	r2, r4, #3
 800ea50:	4614      	mov	r4, r2
 800ea52:	461d      	mov	r5, r3
 800ea54:	4643      	mov	r3, r8
 800ea56:	18e3      	adds	r3, r4, r3
 800ea58:	603b      	str	r3, [r7, #0]
 800ea5a:	464b      	mov	r3, r9
 800ea5c:	eb45 0303 	adc.w	r3, r5, r3
 800ea60:	607b      	str	r3, [r7, #4]
 800ea62:	f04f 0200 	mov.w	r2, #0
 800ea66:	f04f 0300 	mov.w	r3, #0
 800ea6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800ea6e:	4629      	mov	r1, r5
 800ea70:	028b      	lsls	r3, r1, #10
 800ea72:	4621      	mov	r1, r4
 800ea74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800ea78:	4621      	mov	r1, r4
 800ea7a:	028a      	lsls	r2, r1, #10
 800ea7c:	4610      	mov	r0, r2
 800ea7e:	4619      	mov	r1, r3
 800ea80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ea82:	2200      	movs	r2, #0
 800ea84:	61bb      	str	r3, [r7, #24]
 800ea86:	61fa      	str	r2, [r7, #28]
 800ea88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ea8c:	f7fa f8e4 	bl	8008c58 <__aeabi_uldivmod>
 800ea90:	4602      	mov	r2, r0
 800ea92:	460b      	mov	r3, r1
 800ea94:	4613      	mov	r3, r2
 800ea96:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800ea98:	4b0b      	ldr	r3, [pc, #44]	@ (800eac8 <HAL_RCC_GetSysClockFreq+0x200>)
 800ea9a:	685b      	ldr	r3, [r3, #4]
 800ea9c:	0c1b      	lsrs	r3, r3, #16
 800ea9e:	f003 0303 	and.w	r3, r3, #3
 800eaa2:	3301      	adds	r3, #1
 800eaa4:	005b      	lsls	r3, r3, #1
 800eaa6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800eaa8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800eaaa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800eaac:	fbb2 f3f3 	udiv	r3, r2, r3
 800eab0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800eab2:	e002      	b.n	800eaba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800eab4:	4b05      	ldr	r3, [pc, #20]	@ (800eacc <HAL_RCC_GetSysClockFreq+0x204>)
 800eab6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800eab8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800eaba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800eabc:	4618      	mov	r0, r3
 800eabe:	3750      	adds	r7, #80	@ 0x50
 800eac0:	46bd      	mov	sp, r7
 800eac2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800eac6:	bf00      	nop
 800eac8:	40023800 	.word	0x40023800
 800eacc:	00f42400 	.word	0x00f42400
 800ead0:	007a1200 	.word	0x007a1200

0800ead4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ead4:	b480      	push	{r7}
 800ead6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ead8:	4b03      	ldr	r3, [pc, #12]	@ (800eae8 <HAL_RCC_GetHCLKFreq+0x14>)
 800eada:	681b      	ldr	r3, [r3, #0]
}
 800eadc:	4618      	mov	r0, r3
 800eade:	46bd      	mov	sp, r7
 800eae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae4:	4770      	bx	lr
 800eae6:	bf00      	nop
 800eae8:	2000000c 	.word	0x2000000c

0800eaec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800eaec:	b580      	push	{r7, lr}
 800eaee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800eaf0:	f7ff fff0 	bl	800ead4 <HAL_RCC_GetHCLKFreq>
 800eaf4:	4602      	mov	r2, r0
 800eaf6:	4b05      	ldr	r3, [pc, #20]	@ (800eb0c <HAL_RCC_GetPCLK1Freq+0x20>)
 800eaf8:	689b      	ldr	r3, [r3, #8]
 800eafa:	0a9b      	lsrs	r3, r3, #10
 800eafc:	f003 0307 	and.w	r3, r3, #7
 800eb00:	4903      	ldr	r1, [pc, #12]	@ (800eb10 <HAL_RCC_GetPCLK1Freq+0x24>)
 800eb02:	5ccb      	ldrb	r3, [r1, r3]
 800eb04:	fa22 f303 	lsr.w	r3, r2, r3
}
 800eb08:	4618      	mov	r0, r3
 800eb0a:	bd80      	pop	{r7, pc}
 800eb0c:	40023800 	.word	0x40023800
 800eb10:	08017818 	.word	0x08017818

0800eb14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800eb14:	b580      	push	{r7, lr}
 800eb16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800eb18:	f7ff ffdc 	bl	800ead4 <HAL_RCC_GetHCLKFreq>
 800eb1c:	4602      	mov	r2, r0
 800eb1e:	4b05      	ldr	r3, [pc, #20]	@ (800eb34 <HAL_RCC_GetPCLK2Freq+0x20>)
 800eb20:	689b      	ldr	r3, [r3, #8]
 800eb22:	0b5b      	lsrs	r3, r3, #13
 800eb24:	f003 0307 	and.w	r3, r3, #7
 800eb28:	4903      	ldr	r1, [pc, #12]	@ (800eb38 <HAL_RCC_GetPCLK2Freq+0x24>)
 800eb2a:	5ccb      	ldrb	r3, [r1, r3]
 800eb2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800eb30:	4618      	mov	r0, r3
 800eb32:	bd80      	pop	{r7, pc}
 800eb34:	40023800 	.word	0x40023800
 800eb38:	08017818 	.word	0x08017818

0800eb3c <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 800eb3c:	b580      	push	{r7, lr}
 800eb3e:	b082      	sub	sp, #8
 800eb40:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800eb42:	f7fc fabf 	bl	800b0c4 <HAL_GetTick>
 800eb46:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800eb48:	4b5d      	ldr	r3, [pc, #372]	@ (800ecc0 <HAL_RCC_DeInit+0x184>)
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	4a5c      	ldr	r2, [pc, #368]	@ (800ecc0 <HAL_RCC_DeInit+0x184>)
 800eb4e:	f043 0301 	orr.w	r3, r3, #1
 800eb52:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800eb54:	e008      	b.n	800eb68 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800eb56:	f7fc fab5 	bl	800b0c4 <HAL_GetTick>
 800eb5a:	4602      	mov	r2, r0
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	1ad3      	subs	r3, r2, r3
 800eb60:	2b02      	cmp	r3, #2
 800eb62:	d901      	bls.n	800eb68 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 800eb64:	2303      	movs	r3, #3
 800eb66:	e0a7      	b.n	800ecb8 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800eb68:	4b55      	ldr	r3, [pc, #340]	@ (800ecc0 <HAL_RCC_DeInit+0x184>)
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	f003 0302 	and.w	r3, r3, #2
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d0f0      	beq.n	800eb56 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 800eb74:	4b52      	ldr	r3, [pc, #328]	@ (800ecc0 <HAL_RCC_DeInit+0x184>)
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	4a51      	ldr	r2, [pc, #324]	@ (800ecc0 <HAL_RCC_DeInit+0x184>)
 800eb7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eb7e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800eb80:	f7fc faa0 	bl	800b0c4 <HAL_GetTick>
 800eb84:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 800eb86:	4b4e      	ldr	r3, [pc, #312]	@ (800ecc0 <HAL_RCC_DeInit+0x184>)
 800eb88:	2200      	movs	r2, #0
 800eb8a:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 800eb8c:	e00a      	b.n	800eba4 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800eb8e:	f7fc fa99 	bl	800b0c4 <HAL_GetTick>
 800eb92:	4602      	mov	r2, r0
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	1ad3      	subs	r3, r2, r3
 800eb98:	f241 3288 	movw	r2, #5000	@ 0x1388
 800eb9c:	4293      	cmp	r3, r2
 800eb9e:	d901      	bls.n	800eba4 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 800eba0:	2303      	movs	r3, #3
 800eba2:	e089      	b.n	800ecb8 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 800eba4:	4b46      	ldr	r3, [pc, #280]	@ (800ecc0 <HAL_RCC_DeInit+0x184>)
 800eba6:	689b      	ldr	r3, [r3, #8]
 800eba8:	f003 030c 	and.w	r3, r3, #12
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d1ee      	bne.n	800eb8e <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800ebb0:	f7fc fa88 	bl	800b0c4 <HAL_GetTick>
 800ebb4:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 800ebb6:	4b42      	ldr	r3, [pc, #264]	@ (800ecc0 <HAL_RCC_DeInit+0x184>)
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	4a41      	ldr	r2, [pc, #260]	@ (800ecc0 <HAL_RCC_DeInit+0x184>)
 800ebbc:	f423 2350 	bic.w	r3, r3, #851968	@ 0xd0000
 800ebc0:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800ebc2:	e008      	b.n	800ebd6 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ebc4:	f7fc fa7e 	bl	800b0c4 <HAL_GetTick>
 800ebc8:	4602      	mov	r2, r0
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	1ad3      	subs	r3, r2, r3
 800ebce:	2b64      	cmp	r3, #100	@ 0x64
 800ebd0:	d901      	bls.n	800ebd6 <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 800ebd2:	2303      	movs	r3, #3
 800ebd4:	e070      	b.n	800ecb8 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800ebd6:	4b3a      	ldr	r3, [pc, #232]	@ (800ecc0 <HAL_RCC_DeInit+0x184>)
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d1f0      	bne.n	800ebc4 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800ebe2:	f7fc fa6f 	bl	800b0c4 <HAL_GetTick>
 800ebe6:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800ebe8:	4b35      	ldr	r3, [pc, #212]	@ (800ecc0 <HAL_RCC_DeInit+0x184>)
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	4a34      	ldr	r2, [pc, #208]	@ (800ecc0 <HAL_RCC_DeInit+0x184>)
 800ebee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ebf2:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800ebf4:	e008      	b.n	800ec08 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ebf6:	f7fc fa65 	bl	800b0c4 <HAL_GetTick>
 800ebfa:	4602      	mov	r2, r0
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	1ad3      	subs	r3, r2, r3
 800ec00:	2b02      	cmp	r3, #2
 800ec02:	d901      	bls.n	800ec08 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 800ec04:	2303      	movs	r3, #3
 800ec06:	e057      	b.n	800ecb8 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800ec08:	4b2d      	ldr	r3, [pc, #180]	@ (800ecc0 <HAL_RCC_DeInit+0x184>)
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d1f0      	bne.n	800ebf6 <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800ec14:	f7fc fa56 	bl	800b0c4 <HAL_GetTick>
 800ec18:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 800ec1a:	4b29      	ldr	r3, [pc, #164]	@ (800ecc0 <HAL_RCC_DeInit+0x184>)
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	4a28      	ldr	r2, [pc, #160]	@ (800ecc0 <HAL_RCC_DeInit+0x184>)
 800ec20:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ec24:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 800ec26:	e008      	b.n	800ec3a <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800ec28:	f7fc fa4c 	bl	800b0c4 <HAL_GetTick>
 800ec2c:	4602      	mov	r2, r0
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	1ad3      	subs	r3, r2, r3
 800ec32:	2b02      	cmp	r3, #2
 800ec34:	d901      	bls.n	800ec3a <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 800ec36:	2303      	movs	r3, #3
 800ec38:	e03e      	b.n	800ecb8 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 800ec3a:	4b21      	ldr	r3, [pc, #132]	@ (800ecc0 <HAL_RCC_DeInit+0x184>)
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d1f0      	bne.n	800ec28 <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 800ec46:	4b1e      	ldr	r3, [pc, #120]	@ (800ecc0 <HAL_RCC_DeInit+0x184>)
 800ec48:	4a1e      	ldr	r2, [pc, #120]	@ (800ecc4 <HAL_RCC_DeInit+0x188>)
 800ec4a:	605a      	str	r2, [r3, #4]
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F411xE)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 800ec4c:	4b1c      	ldr	r3, [pc, #112]	@ (800ecc0 <HAL_RCC_DeInit+0x184>)
 800ec4e:	4a1e      	ldr	r2, [pc, #120]	@ (800ecc8 <HAL_RCC_DeInit+0x18c>)
 800ec50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 800ec54:	4b1a      	ldr	r3, [pc, #104]	@ (800ecc0 <HAL_RCC_DeInit+0x184>)
 800ec56:	68db      	ldr	r3, [r3, #12]
 800ec58:	4a19      	ldr	r2, [pc, #100]	@ (800ecc0 <HAL_RCC_DeInit+0x184>)
 800ec5a:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 800ec5e:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 800ec60:	4b17      	ldr	r3, [pc, #92]	@ (800ecc0 <HAL_RCC_DeInit+0x184>)
 800ec62:	68db      	ldr	r3, [r3, #12]
 800ec64:	4a16      	ldr	r2, [pc, #88]	@ (800ecc0 <HAL_RCC_DeInit+0x184>)
 800ec66:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ec6a:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC |
 800ec6c:	4b14      	ldr	r3, [pc, #80]	@ (800ecc0 <HAL_RCC_DeInit+0x184>)
 800ec6e:	68db      	ldr	r3, [r3, #12]
 800ec70:	4a13      	ldr	r2, [pc, #76]	@ (800ecc0 <HAL_RCC_DeInit+0x184>)
 800ec72:	f443 031f 	orr.w	r3, r3, #10420224	@ 0x9f0000
 800ec76:	60d3      	str	r3, [r2, #12]
          RCC_CIR_CSSC);

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 800ec78:	4b11      	ldr	r3, [pc, #68]	@ (800ecc0 <HAL_RCC_DeInit+0x184>)
 800ec7a:	68db      	ldr	r3, [r3, #12]
 800ec7c:	4a10      	ldr	r2, [pc, #64]	@ (800ecc0 <HAL_RCC_DeInit+0x184>)
 800ec7e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ec82:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800ec84:	4b0e      	ldr	r3, [pc, #56]	@ (800ecc0 <HAL_RCC_DeInit+0x184>)
 800ec86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ec88:	4a0d      	ldr	r2, [pc, #52]	@ (800ecc0 <HAL_RCC_DeInit+0x184>)
 800ec8a:	f023 0301 	bic.w	r3, r3, #1
 800ec8e:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 800ec90:	4b0b      	ldr	r3, [pc, #44]	@ (800ecc0 <HAL_RCC_DeInit+0x184>)
 800ec92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ec94:	4a0a      	ldr	r2, [pc, #40]	@ (800ecc0 <HAL_RCC_DeInit+0x184>)
 800ec96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800ec9a:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 800ec9c:	4b0b      	ldr	r3, [pc, #44]	@ (800eccc <HAL_RCC_DeInit+0x190>)
 800ec9e:	4a0c      	ldr	r2, [pc, #48]	@ (800ecd0 <HAL_RCC_DeInit+0x194>)
 800eca0:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800eca2:	4b0c      	ldr	r3, [pc, #48]	@ (800ecd4 <HAL_RCC_DeInit+0x198>)
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	4618      	mov	r0, r3
 800eca8:	f7fc f9c8 	bl	800b03c <HAL_InitTick>
 800ecac:	4603      	mov	r3, r0
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d001      	beq.n	800ecb6 <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 800ecb2:	2301      	movs	r3, #1
 800ecb4:	e000      	b.n	800ecb8 <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 800ecb6:	2300      	movs	r3, #0
  }
}
 800ecb8:	4618      	mov	r0, r3
 800ecba:	3708      	adds	r7, #8
 800ecbc:	46bd      	mov	sp, r7
 800ecbe:	bd80      	pop	{r7, pc}
 800ecc0:	40023800 	.word	0x40023800
 800ecc4:	04003010 	.word	0x04003010
 800ecc8:	20003010 	.word	0x20003010
 800eccc:	2000000c 	.word	0x2000000c
 800ecd0:	00f42400 	.word	0x00f42400
 800ecd4:	20000010 	.word	0x20000010

0800ecd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ecd8:	b580      	push	{r7, lr}
 800ecda:	b082      	sub	sp, #8
 800ecdc:	af00      	add	r7, sp, #0
 800ecde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d101      	bne.n	800ecea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ece6:	2301      	movs	r3, #1
 800ece8:	e041      	b.n	800ed6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ecf0:	b2db      	uxtb	r3, r3
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d106      	bne.n	800ed04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	2200      	movs	r2, #0
 800ecfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ecfe:	6878      	ldr	r0, [r7, #4]
 800ed00:	f7fc f806 	bl	800ad10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	2202      	movs	r2, #2
 800ed08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	681a      	ldr	r2, [r3, #0]
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	3304      	adds	r3, #4
 800ed14:	4619      	mov	r1, r3
 800ed16:	4610      	mov	r0, r2
 800ed18:	f000 fb32 	bl	800f380 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	2201      	movs	r2, #1
 800ed20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	2201      	movs	r2, #1
 800ed28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	2201      	movs	r2, #1
 800ed30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	2201      	movs	r2, #1
 800ed38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	2201      	movs	r2, #1
 800ed40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	2201      	movs	r2, #1
 800ed48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	2201      	movs	r2, #1
 800ed50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	2201      	movs	r2, #1
 800ed58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	2201      	movs	r2, #1
 800ed60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	2201      	movs	r2, #1
 800ed68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ed6c:	2300      	movs	r3, #0
}
 800ed6e:	4618      	mov	r0, r3
 800ed70:	3708      	adds	r7, #8
 800ed72:	46bd      	mov	sp, r7
 800ed74:	bd80      	pop	{r7, pc}

0800ed76 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ed76:	b580      	push	{r7, lr}
 800ed78:	b082      	sub	sp, #8
 800ed7a:	af00      	add	r7, sp, #0
 800ed7c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d101      	bne.n	800ed88 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ed84:	2301      	movs	r3, #1
 800ed86:	e041      	b.n	800ee0c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ed8e:	b2db      	uxtb	r3, r3
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d106      	bne.n	800eda2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	2200      	movs	r2, #0
 800ed98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ed9c:	6878      	ldr	r0, [r7, #4]
 800ed9e:	f000 f839 	bl	800ee14 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	2202      	movs	r2, #2
 800eda6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	681a      	ldr	r2, [r3, #0]
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	3304      	adds	r3, #4
 800edb2:	4619      	mov	r1, r3
 800edb4:	4610      	mov	r0, r2
 800edb6:	f000 fae3 	bl	800f380 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	2201      	movs	r2, #1
 800edbe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	2201      	movs	r2, #1
 800edc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	2201      	movs	r2, #1
 800edce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	2201      	movs	r2, #1
 800edd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	2201      	movs	r2, #1
 800edde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	2201      	movs	r2, #1
 800ede6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	2201      	movs	r2, #1
 800edee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	2201      	movs	r2, #1
 800edf6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	2201      	movs	r2, #1
 800edfe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	2201      	movs	r2, #1
 800ee06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ee0a:	2300      	movs	r3, #0
}
 800ee0c:	4618      	mov	r0, r3
 800ee0e:	3708      	adds	r7, #8
 800ee10:	46bd      	mov	sp, r7
 800ee12:	bd80      	pop	{r7, pc}

0800ee14 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800ee14:	b480      	push	{r7}
 800ee16:	b083      	sub	sp, #12
 800ee18:	af00      	add	r7, sp, #0
 800ee1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ee1c:	bf00      	nop
 800ee1e:	370c      	adds	r7, #12
 800ee20:	46bd      	mov	sp, r7
 800ee22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee26:	4770      	bx	lr

0800ee28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ee28:	b580      	push	{r7, lr}
 800ee2a:	b084      	sub	sp, #16
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	68db      	ldr	r3, [r3, #12]
 800ee36:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	691b      	ldr	r3, [r3, #16]
 800ee3e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ee40:	68bb      	ldr	r3, [r7, #8]
 800ee42:	f003 0302 	and.w	r3, r3, #2
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d020      	beq.n	800ee8c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	f003 0302 	and.w	r3, r3, #2
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d01b      	beq.n	800ee8c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	f06f 0202 	mvn.w	r2, #2
 800ee5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	2201      	movs	r2, #1
 800ee62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	699b      	ldr	r3, [r3, #24]
 800ee6a:	f003 0303 	and.w	r3, r3, #3
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d003      	beq.n	800ee7a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ee72:	6878      	ldr	r0, [r7, #4]
 800ee74:	f000 fa65 	bl	800f342 <HAL_TIM_IC_CaptureCallback>
 800ee78:	e005      	b.n	800ee86 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ee7a:	6878      	ldr	r0, [r7, #4]
 800ee7c:	f000 fa57 	bl	800f32e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ee80:	6878      	ldr	r0, [r7, #4]
 800ee82:	f000 fa68 	bl	800f356 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	2200      	movs	r2, #0
 800ee8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ee8c:	68bb      	ldr	r3, [r7, #8]
 800ee8e:	f003 0304 	and.w	r3, r3, #4
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d020      	beq.n	800eed8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	f003 0304 	and.w	r3, r3, #4
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d01b      	beq.n	800eed8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	f06f 0204 	mvn.w	r2, #4
 800eea8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	2202      	movs	r2, #2
 800eeae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	699b      	ldr	r3, [r3, #24]
 800eeb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d003      	beq.n	800eec6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800eebe:	6878      	ldr	r0, [r7, #4]
 800eec0:	f000 fa3f 	bl	800f342 <HAL_TIM_IC_CaptureCallback>
 800eec4:	e005      	b.n	800eed2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800eec6:	6878      	ldr	r0, [r7, #4]
 800eec8:	f000 fa31 	bl	800f32e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eecc:	6878      	ldr	r0, [r7, #4]
 800eece:	f000 fa42 	bl	800f356 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	2200      	movs	r2, #0
 800eed6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800eed8:	68bb      	ldr	r3, [r7, #8]
 800eeda:	f003 0308 	and.w	r3, r3, #8
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d020      	beq.n	800ef24 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	f003 0308 	and.w	r3, r3, #8
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d01b      	beq.n	800ef24 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	f06f 0208 	mvn.w	r2, #8
 800eef4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	2204      	movs	r2, #4
 800eefa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	69db      	ldr	r3, [r3, #28]
 800ef02:	f003 0303 	and.w	r3, r3, #3
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d003      	beq.n	800ef12 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ef0a:	6878      	ldr	r0, [r7, #4]
 800ef0c:	f000 fa19 	bl	800f342 <HAL_TIM_IC_CaptureCallback>
 800ef10:	e005      	b.n	800ef1e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ef12:	6878      	ldr	r0, [r7, #4]
 800ef14:	f000 fa0b 	bl	800f32e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ef18:	6878      	ldr	r0, [r7, #4]
 800ef1a:	f000 fa1c 	bl	800f356 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	2200      	movs	r2, #0
 800ef22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800ef24:	68bb      	ldr	r3, [r7, #8]
 800ef26:	f003 0310 	and.w	r3, r3, #16
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d020      	beq.n	800ef70 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	f003 0310 	and.w	r3, r3, #16
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d01b      	beq.n	800ef70 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	f06f 0210 	mvn.w	r2, #16
 800ef40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	2208      	movs	r2, #8
 800ef46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	69db      	ldr	r3, [r3, #28]
 800ef4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d003      	beq.n	800ef5e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ef56:	6878      	ldr	r0, [r7, #4]
 800ef58:	f000 f9f3 	bl	800f342 <HAL_TIM_IC_CaptureCallback>
 800ef5c:	e005      	b.n	800ef6a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ef5e:	6878      	ldr	r0, [r7, #4]
 800ef60:	f000 f9e5 	bl	800f32e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ef64:	6878      	ldr	r0, [r7, #4]
 800ef66:	f000 f9f6 	bl	800f356 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	2200      	movs	r2, #0
 800ef6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ef70:	68bb      	ldr	r3, [r7, #8]
 800ef72:	f003 0301 	and.w	r3, r3, #1
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d00c      	beq.n	800ef94 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	f003 0301 	and.w	r3, r3, #1
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d007      	beq.n	800ef94 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	f06f 0201 	mvn.w	r2, #1
 800ef8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ef8e:	6878      	ldr	r0, [r7, #4]
 800ef90:	f000 f9c3 	bl	800f31a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800ef94:	68bb      	ldr	r3, [r7, #8]
 800ef96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d00c      	beq.n	800efb8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d007      	beq.n	800efb8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800efb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800efb2:	6878      	ldr	r0, [r7, #4]
 800efb4:	f000 fd5a 	bl	800fa6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800efb8:	68bb      	ldr	r3, [r7, #8]
 800efba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d00c      	beq.n	800efdc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d007      	beq.n	800efdc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800efd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800efd6:	6878      	ldr	r0, [r7, #4]
 800efd8:	f000 f9c7 	bl	800f36a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800efdc:	68bb      	ldr	r3, [r7, #8]
 800efde:	f003 0320 	and.w	r3, r3, #32
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d00c      	beq.n	800f000 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	f003 0320 	and.w	r3, r3, #32
 800efec:	2b00      	cmp	r3, #0
 800efee:	d007      	beq.n	800f000 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	f06f 0220 	mvn.w	r2, #32
 800eff8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800effa:	6878      	ldr	r0, [r7, #4]
 800effc:	f000 fd2c 	bl	800fa58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f000:	bf00      	nop
 800f002:	3710      	adds	r7, #16
 800f004:	46bd      	mov	sp, r7
 800f006:	bd80      	pop	{r7, pc}

0800f008 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f008:	b580      	push	{r7, lr}
 800f00a:	b086      	sub	sp, #24
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	60f8      	str	r0, [r7, #12]
 800f010:	60b9      	str	r1, [r7, #8]
 800f012:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f014:	2300      	movs	r3, #0
 800f016:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f01e:	2b01      	cmp	r3, #1
 800f020:	d101      	bne.n	800f026 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800f022:	2302      	movs	r3, #2
 800f024:	e0ae      	b.n	800f184 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	2201      	movs	r2, #1
 800f02a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	2b0c      	cmp	r3, #12
 800f032:	f200 809f 	bhi.w	800f174 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800f036:	a201      	add	r2, pc, #4	@ (adr r2, 800f03c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800f038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f03c:	0800f071 	.word	0x0800f071
 800f040:	0800f175 	.word	0x0800f175
 800f044:	0800f175 	.word	0x0800f175
 800f048:	0800f175 	.word	0x0800f175
 800f04c:	0800f0b1 	.word	0x0800f0b1
 800f050:	0800f175 	.word	0x0800f175
 800f054:	0800f175 	.word	0x0800f175
 800f058:	0800f175 	.word	0x0800f175
 800f05c:	0800f0f3 	.word	0x0800f0f3
 800f060:	0800f175 	.word	0x0800f175
 800f064:	0800f175 	.word	0x0800f175
 800f068:	0800f175 	.word	0x0800f175
 800f06c:	0800f133 	.word	0x0800f133
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	68b9      	ldr	r1, [r7, #8]
 800f076:	4618      	mov	r0, r3
 800f078:	f000 fa08 	bl	800f48c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	699a      	ldr	r2, [r3, #24]
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	f042 0208 	orr.w	r2, r2, #8
 800f08a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	699a      	ldr	r2, [r3, #24]
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	f022 0204 	bic.w	r2, r2, #4
 800f09a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	6999      	ldr	r1, [r3, #24]
 800f0a2:	68bb      	ldr	r3, [r7, #8]
 800f0a4:	691a      	ldr	r2, [r3, #16]
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	430a      	orrs	r2, r1
 800f0ac:	619a      	str	r2, [r3, #24]
      break;
 800f0ae:	e064      	b.n	800f17a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	68b9      	ldr	r1, [r7, #8]
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	f000 fa4e 	bl	800f558 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	699a      	ldr	r2, [r3, #24]
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f0ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	699a      	ldr	r2, [r3, #24]
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f0da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	6999      	ldr	r1, [r3, #24]
 800f0e2:	68bb      	ldr	r3, [r7, #8]
 800f0e4:	691b      	ldr	r3, [r3, #16]
 800f0e6:	021a      	lsls	r2, r3, #8
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	430a      	orrs	r2, r1
 800f0ee:	619a      	str	r2, [r3, #24]
      break;
 800f0f0:	e043      	b.n	800f17a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	68b9      	ldr	r1, [r7, #8]
 800f0f8:	4618      	mov	r0, r3
 800f0fa:	f000 fa99 	bl	800f630 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	69da      	ldr	r2, [r3, #28]
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	f042 0208 	orr.w	r2, r2, #8
 800f10c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	69da      	ldr	r2, [r3, #28]
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	f022 0204 	bic.w	r2, r2, #4
 800f11c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	69d9      	ldr	r1, [r3, #28]
 800f124:	68bb      	ldr	r3, [r7, #8]
 800f126:	691a      	ldr	r2, [r3, #16]
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	430a      	orrs	r2, r1
 800f12e:	61da      	str	r2, [r3, #28]
      break;
 800f130:	e023      	b.n	800f17a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	68b9      	ldr	r1, [r7, #8]
 800f138:	4618      	mov	r0, r3
 800f13a:	f000 fae3 	bl	800f704 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	69da      	ldr	r2, [r3, #28]
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f14c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	69da      	ldr	r2, [r3, #28]
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f15c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	69d9      	ldr	r1, [r3, #28]
 800f164:	68bb      	ldr	r3, [r7, #8]
 800f166:	691b      	ldr	r3, [r3, #16]
 800f168:	021a      	lsls	r2, r3, #8
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	430a      	orrs	r2, r1
 800f170:	61da      	str	r2, [r3, #28]
      break;
 800f172:	e002      	b.n	800f17a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800f174:	2301      	movs	r3, #1
 800f176:	75fb      	strb	r3, [r7, #23]
      break;
 800f178:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	2200      	movs	r2, #0
 800f17e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800f182:	7dfb      	ldrb	r3, [r7, #23]
}
 800f184:	4618      	mov	r0, r3
 800f186:	3718      	adds	r7, #24
 800f188:	46bd      	mov	sp, r7
 800f18a:	bd80      	pop	{r7, pc}

0800f18c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f18c:	b580      	push	{r7, lr}
 800f18e:	b084      	sub	sp, #16
 800f190:	af00      	add	r7, sp, #0
 800f192:	6078      	str	r0, [r7, #4]
 800f194:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f196:	2300      	movs	r3, #0
 800f198:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f1a0:	2b01      	cmp	r3, #1
 800f1a2:	d101      	bne.n	800f1a8 <HAL_TIM_ConfigClockSource+0x1c>
 800f1a4:	2302      	movs	r3, #2
 800f1a6:	e0b4      	b.n	800f312 <HAL_TIM_ConfigClockSource+0x186>
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	2201      	movs	r2, #1
 800f1ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	2202      	movs	r2, #2
 800f1b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	689b      	ldr	r3, [r3, #8]
 800f1be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f1c0:	68bb      	ldr	r3, [r7, #8]
 800f1c2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800f1c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f1c8:	68bb      	ldr	r3, [r7, #8]
 800f1ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f1ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	68ba      	ldr	r2, [r7, #8]
 800f1d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f1d8:	683b      	ldr	r3, [r7, #0]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f1e0:	d03e      	beq.n	800f260 <HAL_TIM_ConfigClockSource+0xd4>
 800f1e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f1e6:	f200 8087 	bhi.w	800f2f8 <HAL_TIM_ConfigClockSource+0x16c>
 800f1ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f1ee:	f000 8086 	beq.w	800f2fe <HAL_TIM_ConfigClockSource+0x172>
 800f1f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f1f6:	d87f      	bhi.n	800f2f8 <HAL_TIM_ConfigClockSource+0x16c>
 800f1f8:	2b70      	cmp	r3, #112	@ 0x70
 800f1fa:	d01a      	beq.n	800f232 <HAL_TIM_ConfigClockSource+0xa6>
 800f1fc:	2b70      	cmp	r3, #112	@ 0x70
 800f1fe:	d87b      	bhi.n	800f2f8 <HAL_TIM_ConfigClockSource+0x16c>
 800f200:	2b60      	cmp	r3, #96	@ 0x60
 800f202:	d050      	beq.n	800f2a6 <HAL_TIM_ConfigClockSource+0x11a>
 800f204:	2b60      	cmp	r3, #96	@ 0x60
 800f206:	d877      	bhi.n	800f2f8 <HAL_TIM_ConfigClockSource+0x16c>
 800f208:	2b50      	cmp	r3, #80	@ 0x50
 800f20a:	d03c      	beq.n	800f286 <HAL_TIM_ConfigClockSource+0xfa>
 800f20c:	2b50      	cmp	r3, #80	@ 0x50
 800f20e:	d873      	bhi.n	800f2f8 <HAL_TIM_ConfigClockSource+0x16c>
 800f210:	2b40      	cmp	r3, #64	@ 0x40
 800f212:	d058      	beq.n	800f2c6 <HAL_TIM_ConfigClockSource+0x13a>
 800f214:	2b40      	cmp	r3, #64	@ 0x40
 800f216:	d86f      	bhi.n	800f2f8 <HAL_TIM_ConfigClockSource+0x16c>
 800f218:	2b30      	cmp	r3, #48	@ 0x30
 800f21a:	d064      	beq.n	800f2e6 <HAL_TIM_ConfigClockSource+0x15a>
 800f21c:	2b30      	cmp	r3, #48	@ 0x30
 800f21e:	d86b      	bhi.n	800f2f8 <HAL_TIM_ConfigClockSource+0x16c>
 800f220:	2b20      	cmp	r3, #32
 800f222:	d060      	beq.n	800f2e6 <HAL_TIM_ConfigClockSource+0x15a>
 800f224:	2b20      	cmp	r3, #32
 800f226:	d867      	bhi.n	800f2f8 <HAL_TIM_ConfigClockSource+0x16c>
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d05c      	beq.n	800f2e6 <HAL_TIM_ConfigClockSource+0x15a>
 800f22c:	2b10      	cmp	r3, #16
 800f22e:	d05a      	beq.n	800f2e6 <HAL_TIM_ConfigClockSource+0x15a>
 800f230:	e062      	b.n	800f2f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f236:	683b      	ldr	r3, [r7, #0]
 800f238:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f23a:	683b      	ldr	r3, [r7, #0]
 800f23c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f23e:	683b      	ldr	r3, [r7, #0]
 800f240:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f242:	f000 fb29 	bl	800f898 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	689b      	ldr	r3, [r3, #8]
 800f24c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f24e:	68bb      	ldr	r3, [r7, #8]
 800f250:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800f254:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	68ba      	ldr	r2, [r7, #8]
 800f25c:	609a      	str	r2, [r3, #8]
      break;
 800f25e:	e04f      	b.n	800f300 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f264:	683b      	ldr	r3, [r7, #0]
 800f266:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f268:	683b      	ldr	r3, [r7, #0]
 800f26a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f26c:	683b      	ldr	r3, [r7, #0]
 800f26e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f270:	f000 fb12 	bl	800f898 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	689a      	ldr	r2, [r3, #8]
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f282:	609a      	str	r2, [r3, #8]
      break;
 800f284:	e03c      	b.n	800f300 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f28a:	683b      	ldr	r3, [r7, #0]
 800f28c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f28e:	683b      	ldr	r3, [r7, #0]
 800f290:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f292:	461a      	mov	r2, r3
 800f294:	f000 fa86 	bl	800f7a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	2150      	movs	r1, #80	@ 0x50
 800f29e:	4618      	mov	r0, r3
 800f2a0:	f000 fadf 	bl	800f862 <TIM_ITRx_SetConfig>
      break;
 800f2a4:	e02c      	b.n	800f300 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f2aa:	683b      	ldr	r3, [r7, #0]
 800f2ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f2ae:	683b      	ldr	r3, [r7, #0]
 800f2b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f2b2:	461a      	mov	r2, r3
 800f2b4:	f000 faa5 	bl	800f802 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	2160      	movs	r1, #96	@ 0x60
 800f2be:	4618      	mov	r0, r3
 800f2c0:	f000 facf 	bl	800f862 <TIM_ITRx_SetConfig>
      break;
 800f2c4:	e01c      	b.n	800f300 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f2ca:	683b      	ldr	r3, [r7, #0]
 800f2cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f2ce:	683b      	ldr	r3, [r7, #0]
 800f2d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f2d2:	461a      	mov	r2, r3
 800f2d4:	f000 fa66 	bl	800f7a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	2140      	movs	r1, #64	@ 0x40
 800f2de:	4618      	mov	r0, r3
 800f2e0:	f000 fabf 	bl	800f862 <TIM_ITRx_SetConfig>
      break;
 800f2e4:	e00c      	b.n	800f300 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	681a      	ldr	r2, [r3, #0]
 800f2ea:	683b      	ldr	r3, [r7, #0]
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	4619      	mov	r1, r3
 800f2f0:	4610      	mov	r0, r2
 800f2f2:	f000 fab6 	bl	800f862 <TIM_ITRx_SetConfig>
      break;
 800f2f6:	e003      	b.n	800f300 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800f2f8:	2301      	movs	r3, #1
 800f2fa:	73fb      	strb	r3, [r7, #15]
      break;
 800f2fc:	e000      	b.n	800f300 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800f2fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	2201      	movs	r2, #1
 800f304:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	2200      	movs	r2, #0
 800f30c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800f310:	7bfb      	ldrb	r3, [r7, #15]
}
 800f312:	4618      	mov	r0, r3
 800f314:	3710      	adds	r7, #16
 800f316:	46bd      	mov	sp, r7
 800f318:	bd80      	pop	{r7, pc}

0800f31a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f31a:	b480      	push	{r7}
 800f31c:	b083      	sub	sp, #12
 800f31e:	af00      	add	r7, sp, #0
 800f320:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800f322:	bf00      	nop
 800f324:	370c      	adds	r7, #12
 800f326:	46bd      	mov	sp, r7
 800f328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f32c:	4770      	bx	lr

0800f32e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f32e:	b480      	push	{r7}
 800f330:	b083      	sub	sp, #12
 800f332:	af00      	add	r7, sp, #0
 800f334:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f336:	bf00      	nop
 800f338:	370c      	adds	r7, #12
 800f33a:	46bd      	mov	sp, r7
 800f33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f340:	4770      	bx	lr

0800f342 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f342:	b480      	push	{r7}
 800f344:	b083      	sub	sp, #12
 800f346:	af00      	add	r7, sp, #0
 800f348:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f34a:	bf00      	nop
 800f34c:	370c      	adds	r7, #12
 800f34e:	46bd      	mov	sp, r7
 800f350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f354:	4770      	bx	lr

0800f356 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f356:	b480      	push	{r7}
 800f358:	b083      	sub	sp, #12
 800f35a:	af00      	add	r7, sp, #0
 800f35c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f35e:	bf00      	nop
 800f360:	370c      	adds	r7, #12
 800f362:	46bd      	mov	sp, r7
 800f364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f368:	4770      	bx	lr

0800f36a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f36a:	b480      	push	{r7}
 800f36c:	b083      	sub	sp, #12
 800f36e:	af00      	add	r7, sp, #0
 800f370:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f372:	bf00      	nop
 800f374:	370c      	adds	r7, #12
 800f376:	46bd      	mov	sp, r7
 800f378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f37c:	4770      	bx	lr
	...

0800f380 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f380:	b480      	push	{r7}
 800f382:	b085      	sub	sp, #20
 800f384:	af00      	add	r7, sp, #0
 800f386:	6078      	str	r0, [r7, #4]
 800f388:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	4a37      	ldr	r2, [pc, #220]	@ (800f470 <TIM_Base_SetConfig+0xf0>)
 800f394:	4293      	cmp	r3, r2
 800f396:	d00f      	beq.n	800f3b8 <TIM_Base_SetConfig+0x38>
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f39e:	d00b      	beq.n	800f3b8 <TIM_Base_SetConfig+0x38>
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	4a34      	ldr	r2, [pc, #208]	@ (800f474 <TIM_Base_SetConfig+0xf4>)
 800f3a4:	4293      	cmp	r3, r2
 800f3a6:	d007      	beq.n	800f3b8 <TIM_Base_SetConfig+0x38>
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	4a33      	ldr	r2, [pc, #204]	@ (800f478 <TIM_Base_SetConfig+0xf8>)
 800f3ac:	4293      	cmp	r3, r2
 800f3ae:	d003      	beq.n	800f3b8 <TIM_Base_SetConfig+0x38>
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	4a32      	ldr	r2, [pc, #200]	@ (800f47c <TIM_Base_SetConfig+0xfc>)
 800f3b4:	4293      	cmp	r3, r2
 800f3b6:	d108      	bne.n	800f3ca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f3be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f3c0:	683b      	ldr	r3, [r7, #0]
 800f3c2:	685b      	ldr	r3, [r3, #4]
 800f3c4:	68fa      	ldr	r2, [r7, #12]
 800f3c6:	4313      	orrs	r3, r2
 800f3c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	4a28      	ldr	r2, [pc, #160]	@ (800f470 <TIM_Base_SetConfig+0xf0>)
 800f3ce:	4293      	cmp	r3, r2
 800f3d0:	d01b      	beq.n	800f40a <TIM_Base_SetConfig+0x8a>
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f3d8:	d017      	beq.n	800f40a <TIM_Base_SetConfig+0x8a>
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	4a25      	ldr	r2, [pc, #148]	@ (800f474 <TIM_Base_SetConfig+0xf4>)
 800f3de:	4293      	cmp	r3, r2
 800f3e0:	d013      	beq.n	800f40a <TIM_Base_SetConfig+0x8a>
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	4a24      	ldr	r2, [pc, #144]	@ (800f478 <TIM_Base_SetConfig+0xf8>)
 800f3e6:	4293      	cmp	r3, r2
 800f3e8:	d00f      	beq.n	800f40a <TIM_Base_SetConfig+0x8a>
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	4a23      	ldr	r2, [pc, #140]	@ (800f47c <TIM_Base_SetConfig+0xfc>)
 800f3ee:	4293      	cmp	r3, r2
 800f3f0:	d00b      	beq.n	800f40a <TIM_Base_SetConfig+0x8a>
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	4a22      	ldr	r2, [pc, #136]	@ (800f480 <TIM_Base_SetConfig+0x100>)
 800f3f6:	4293      	cmp	r3, r2
 800f3f8:	d007      	beq.n	800f40a <TIM_Base_SetConfig+0x8a>
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	4a21      	ldr	r2, [pc, #132]	@ (800f484 <TIM_Base_SetConfig+0x104>)
 800f3fe:	4293      	cmp	r3, r2
 800f400:	d003      	beq.n	800f40a <TIM_Base_SetConfig+0x8a>
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	4a20      	ldr	r2, [pc, #128]	@ (800f488 <TIM_Base_SetConfig+0x108>)
 800f406:	4293      	cmp	r3, r2
 800f408:	d108      	bne.n	800f41c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f410:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f412:	683b      	ldr	r3, [r7, #0]
 800f414:	68db      	ldr	r3, [r3, #12]
 800f416:	68fa      	ldr	r2, [r7, #12]
 800f418:	4313      	orrs	r3, r2
 800f41a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800f422:	683b      	ldr	r3, [r7, #0]
 800f424:	695b      	ldr	r3, [r3, #20]
 800f426:	4313      	orrs	r3, r2
 800f428:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f42a:	683b      	ldr	r3, [r7, #0]
 800f42c:	689a      	ldr	r2, [r3, #8]
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f432:	683b      	ldr	r3, [r7, #0]
 800f434:	681a      	ldr	r2, [r3, #0]
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	4a0c      	ldr	r2, [pc, #48]	@ (800f470 <TIM_Base_SetConfig+0xf0>)
 800f43e:	4293      	cmp	r3, r2
 800f440:	d103      	bne.n	800f44a <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f442:	683b      	ldr	r3, [r7, #0]
 800f444:	691a      	ldr	r2, [r3, #16]
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	f043 0204 	orr.w	r2, r3, #4
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	2201      	movs	r2, #1
 800f45a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	68fa      	ldr	r2, [r7, #12]
 800f460:	601a      	str	r2, [r3, #0]
}
 800f462:	bf00      	nop
 800f464:	3714      	adds	r7, #20
 800f466:	46bd      	mov	sp, r7
 800f468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f46c:	4770      	bx	lr
 800f46e:	bf00      	nop
 800f470:	40010000 	.word	0x40010000
 800f474:	40000400 	.word	0x40000400
 800f478:	40000800 	.word	0x40000800
 800f47c:	40000c00 	.word	0x40000c00
 800f480:	40014000 	.word	0x40014000
 800f484:	40014400 	.word	0x40014400
 800f488:	40014800 	.word	0x40014800

0800f48c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f48c:	b480      	push	{r7}
 800f48e:	b087      	sub	sp, #28
 800f490:	af00      	add	r7, sp, #0
 800f492:	6078      	str	r0, [r7, #4]
 800f494:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	6a1b      	ldr	r3, [r3, #32]
 800f49a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	6a1b      	ldr	r3, [r3, #32]
 800f4a0:	f023 0201 	bic.w	r2, r3, #1
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	685b      	ldr	r3, [r3, #4]
 800f4ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	699b      	ldr	r3, [r3, #24]
 800f4b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f4ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	f023 0303 	bic.w	r3, r3, #3
 800f4c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f4c4:	683b      	ldr	r3, [r7, #0]
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	68fa      	ldr	r2, [r7, #12]
 800f4ca:	4313      	orrs	r3, r2
 800f4cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f4ce:	697b      	ldr	r3, [r7, #20]
 800f4d0:	f023 0302 	bic.w	r3, r3, #2
 800f4d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f4d6:	683b      	ldr	r3, [r7, #0]
 800f4d8:	689b      	ldr	r3, [r3, #8]
 800f4da:	697a      	ldr	r2, [r7, #20]
 800f4dc:	4313      	orrs	r3, r2
 800f4de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	4a1c      	ldr	r2, [pc, #112]	@ (800f554 <TIM_OC1_SetConfig+0xc8>)
 800f4e4:	4293      	cmp	r3, r2
 800f4e6:	d10c      	bne.n	800f502 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f4e8:	697b      	ldr	r3, [r7, #20]
 800f4ea:	f023 0308 	bic.w	r3, r3, #8
 800f4ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f4f0:	683b      	ldr	r3, [r7, #0]
 800f4f2:	68db      	ldr	r3, [r3, #12]
 800f4f4:	697a      	ldr	r2, [r7, #20]
 800f4f6:	4313      	orrs	r3, r2
 800f4f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f4fa:	697b      	ldr	r3, [r7, #20]
 800f4fc:	f023 0304 	bic.w	r3, r3, #4
 800f500:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	4a13      	ldr	r2, [pc, #76]	@ (800f554 <TIM_OC1_SetConfig+0xc8>)
 800f506:	4293      	cmp	r3, r2
 800f508:	d111      	bne.n	800f52e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f50a:	693b      	ldr	r3, [r7, #16]
 800f50c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f510:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f512:	693b      	ldr	r3, [r7, #16]
 800f514:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800f518:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f51a:	683b      	ldr	r3, [r7, #0]
 800f51c:	695b      	ldr	r3, [r3, #20]
 800f51e:	693a      	ldr	r2, [r7, #16]
 800f520:	4313      	orrs	r3, r2
 800f522:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f524:	683b      	ldr	r3, [r7, #0]
 800f526:	699b      	ldr	r3, [r3, #24]
 800f528:	693a      	ldr	r2, [r7, #16]
 800f52a:	4313      	orrs	r3, r2
 800f52c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	693a      	ldr	r2, [r7, #16]
 800f532:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	68fa      	ldr	r2, [r7, #12]
 800f538:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f53a:	683b      	ldr	r3, [r7, #0]
 800f53c:	685a      	ldr	r2, [r3, #4]
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	697a      	ldr	r2, [r7, #20]
 800f546:	621a      	str	r2, [r3, #32]
}
 800f548:	bf00      	nop
 800f54a:	371c      	adds	r7, #28
 800f54c:	46bd      	mov	sp, r7
 800f54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f552:	4770      	bx	lr
 800f554:	40010000 	.word	0x40010000

0800f558 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f558:	b480      	push	{r7}
 800f55a:	b087      	sub	sp, #28
 800f55c:	af00      	add	r7, sp, #0
 800f55e:	6078      	str	r0, [r7, #4]
 800f560:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	6a1b      	ldr	r3, [r3, #32]
 800f566:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	6a1b      	ldr	r3, [r3, #32]
 800f56c:	f023 0210 	bic.w	r2, r3, #16
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	685b      	ldr	r3, [r3, #4]
 800f578:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	699b      	ldr	r3, [r3, #24]
 800f57e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f586:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f58e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f590:	683b      	ldr	r3, [r7, #0]
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	021b      	lsls	r3, r3, #8
 800f596:	68fa      	ldr	r2, [r7, #12]
 800f598:	4313      	orrs	r3, r2
 800f59a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f59c:	697b      	ldr	r3, [r7, #20]
 800f59e:	f023 0320 	bic.w	r3, r3, #32
 800f5a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f5a4:	683b      	ldr	r3, [r7, #0]
 800f5a6:	689b      	ldr	r3, [r3, #8]
 800f5a8:	011b      	lsls	r3, r3, #4
 800f5aa:	697a      	ldr	r2, [r7, #20]
 800f5ac:	4313      	orrs	r3, r2
 800f5ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	4a1e      	ldr	r2, [pc, #120]	@ (800f62c <TIM_OC2_SetConfig+0xd4>)
 800f5b4:	4293      	cmp	r3, r2
 800f5b6:	d10d      	bne.n	800f5d4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f5b8:	697b      	ldr	r3, [r7, #20]
 800f5ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f5be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f5c0:	683b      	ldr	r3, [r7, #0]
 800f5c2:	68db      	ldr	r3, [r3, #12]
 800f5c4:	011b      	lsls	r3, r3, #4
 800f5c6:	697a      	ldr	r2, [r7, #20]
 800f5c8:	4313      	orrs	r3, r2
 800f5ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f5cc:	697b      	ldr	r3, [r7, #20]
 800f5ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f5d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	4a15      	ldr	r2, [pc, #84]	@ (800f62c <TIM_OC2_SetConfig+0xd4>)
 800f5d8:	4293      	cmp	r3, r2
 800f5da:	d113      	bne.n	800f604 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f5dc:	693b      	ldr	r3, [r7, #16]
 800f5de:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f5e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f5e4:	693b      	ldr	r3, [r7, #16]
 800f5e6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f5ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f5ec:	683b      	ldr	r3, [r7, #0]
 800f5ee:	695b      	ldr	r3, [r3, #20]
 800f5f0:	009b      	lsls	r3, r3, #2
 800f5f2:	693a      	ldr	r2, [r7, #16]
 800f5f4:	4313      	orrs	r3, r2
 800f5f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f5f8:	683b      	ldr	r3, [r7, #0]
 800f5fa:	699b      	ldr	r3, [r3, #24]
 800f5fc:	009b      	lsls	r3, r3, #2
 800f5fe:	693a      	ldr	r2, [r7, #16]
 800f600:	4313      	orrs	r3, r2
 800f602:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	693a      	ldr	r2, [r7, #16]
 800f608:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	68fa      	ldr	r2, [r7, #12]
 800f60e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f610:	683b      	ldr	r3, [r7, #0]
 800f612:	685a      	ldr	r2, [r3, #4]
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	697a      	ldr	r2, [r7, #20]
 800f61c:	621a      	str	r2, [r3, #32]
}
 800f61e:	bf00      	nop
 800f620:	371c      	adds	r7, #28
 800f622:	46bd      	mov	sp, r7
 800f624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f628:	4770      	bx	lr
 800f62a:	bf00      	nop
 800f62c:	40010000 	.word	0x40010000

0800f630 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f630:	b480      	push	{r7}
 800f632:	b087      	sub	sp, #28
 800f634:	af00      	add	r7, sp, #0
 800f636:	6078      	str	r0, [r7, #4]
 800f638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	6a1b      	ldr	r3, [r3, #32]
 800f63e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	6a1b      	ldr	r3, [r3, #32]
 800f644:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	685b      	ldr	r3, [r3, #4]
 800f650:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	69db      	ldr	r3, [r3, #28]
 800f656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f65e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	f023 0303 	bic.w	r3, r3, #3
 800f666:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f668:	683b      	ldr	r3, [r7, #0]
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	68fa      	ldr	r2, [r7, #12]
 800f66e:	4313      	orrs	r3, r2
 800f670:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f672:	697b      	ldr	r3, [r7, #20]
 800f674:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800f678:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f67a:	683b      	ldr	r3, [r7, #0]
 800f67c:	689b      	ldr	r3, [r3, #8]
 800f67e:	021b      	lsls	r3, r3, #8
 800f680:	697a      	ldr	r2, [r7, #20]
 800f682:	4313      	orrs	r3, r2
 800f684:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	4a1d      	ldr	r2, [pc, #116]	@ (800f700 <TIM_OC3_SetConfig+0xd0>)
 800f68a:	4293      	cmp	r3, r2
 800f68c:	d10d      	bne.n	800f6aa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f68e:	697b      	ldr	r3, [r7, #20]
 800f690:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f694:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f696:	683b      	ldr	r3, [r7, #0]
 800f698:	68db      	ldr	r3, [r3, #12]
 800f69a:	021b      	lsls	r3, r3, #8
 800f69c:	697a      	ldr	r2, [r7, #20]
 800f69e:	4313      	orrs	r3, r2
 800f6a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f6a2:	697b      	ldr	r3, [r7, #20]
 800f6a4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f6a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	4a14      	ldr	r2, [pc, #80]	@ (800f700 <TIM_OC3_SetConfig+0xd0>)
 800f6ae:	4293      	cmp	r3, r2
 800f6b0:	d113      	bne.n	800f6da <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f6b2:	693b      	ldr	r3, [r7, #16]
 800f6b4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f6b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f6ba:	693b      	ldr	r3, [r7, #16]
 800f6bc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f6c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f6c2:	683b      	ldr	r3, [r7, #0]
 800f6c4:	695b      	ldr	r3, [r3, #20]
 800f6c6:	011b      	lsls	r3, r3, #4
 800f6c8:	693a      	ldr	r2, [r7, #16]
 800f6ca:	4313      	orrs	r3, r2
 800f6cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f6ce:	683b      	ldr	r3, [r7, #0]
 800f6d0:	699b      	ldr	r3, [r3, #24]
 800f6d2:	011b      	lsls	r3, r3, #4
 800f6d4:	693a      	ldr	r2, [r7, #16]
 800f6d6:	4313      	orrs	r3, r2
 800f6d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	693a      	ldr	r2, [r7, #16]
 800f6de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	68fa      	ldr	r2, [r7, #12]
 800f6e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f6e6:	683b      	ldr	r3, [r7, #0]
 800f6e8:	685a      	ldr	r2, [r3, #4]
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	697a      	ldr	r2, [r7, #20]
 800f6f2:	621a      	str	r2, [r3, #32]
}
 800f6f4:	bf00      	nop
 800f6f6:	371c      	adds	r7, #28
 800f6f8:	46bd      	mov	sp, r7
 800f6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6fe:	4770      	bx	lr
 800f700:	40010000 	.word	0x40010000

0800f704 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f704:	b480      	push	{r7}
 800f706:	b087      	sub	sp, #28
 800f708:	af00      	add	r7, sp, #0
 800f70a:	6078      	str	r0, [r7, #4]
 800f70c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	6a1b      	ldr	r3, [r3, #32]
 800f712:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	6a1b      	ldr	r3, [r3, #32]
 800f718:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	685b      	ldr	r3, [r3, #4]
 800f724:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	69db      	ldr	r3, [r3, #28]
 800f72a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f73a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f73c:	683b      	ldr	r3, [r7, #0]
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	021b      	lsls	r3, r3, #8
 800f742:	68fa      	ldr	r2, [r7, #12]
 800f744:	4313      	orrs	r3, r2
 800f746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f748:	693b      	ldr	r3, [r7, #16]
 800f74a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f74e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f750:	683b      	ldr	r3, [r7, #0]
 800f752:	689b      	ldr	r3, [r3, #8]
 800f754:	031b      	lsls	r3, r3, #12
 800f756:	693a      	ldr	r2, [r7, #16]
 800f758:	4313      	orrs	r3, r2
 800f75a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	4a10      	ldr	r2, [pc, #64]	@ (800f7a0 <TIM_OC4_SetConfig+0x9c>)
 800f760:	4293      	cmp	r3, r2
 800f762:	d109      	bne.n	800f778 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f764:	697b      	ldr	r3, [r7, #20]
 800f766:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f76a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f76c:	683b      	ldr	r3, [r7, #0]
 800f76e:	695b      	ldr	r3, [r3, #20]
 800f770:	019b      	lsls	r3, r3, #6
 800f772:	697a      	ldr	r2, [r7, #20]
 800f774:	4313      	orrs	r3, r2
 800f776:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	697a      	ldr	r2, [r7, #20]
 800f77c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	68fa      	ldr	r2, [r7, #12]
 800f782:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f784:	683b      	ldr	r3, [r7, #0]
 800f786:	685a      	ldr	r2, [r3, #4]
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	693a      	ldr	r2, [r7, #16]
 800f790:	621a      	str	r2, [r3, #32]
}
 800f792:	bf00      	nop
 800f794:	371c      	adds	r7, #28
 800f796:	46bd      	mov	sp, r7
 800f798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f79c:	4770      	bx	lr
 800f79e:	bf00      	nop
 800f7a0:	40010000 	.word	0x40010000

0800f7a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f7a4:	b480      	push	{r7}
 800f7a6:	b087      	sub	sp, #28
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	60f8      	str	r0, [r7, #12]
 800f7ac:	60b9      	str	r1, [r7, #8]
 800f7ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	6a1b      	ldr	r3, [r3, #32]
 800f7b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	6a1b      	ldr	r3, [r3, #32]
 800f7ba:	f023 0201 	bic.w	r2, r3, #1
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	699b      	ldr	r3, [r3, #24]
 800f7c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f7c8:	693b      	ldr	r3, [r7, #16]
 800f7ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800f7ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	011b      	lsls	r3, r3, #4
 800f7d4:	693a      	ldr	r2, [r7, #16]
 800f7d6:	4313      	orrs	r3, r2
 800f7d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f7da:	697b      	ldr	r3, [r7, #20]
 800f7dc:	f023 030a 	bic.w	r3, r3, #10
 800f7e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f7e2:	697a      	ldr	r2, [r7, #20]
 800f7e4:	68bb      	ldr	r3, [r7, #8]
 800f7e6:	4313      	orrs	r3, r2
 800f7e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	693a      	ldr	r2, [r7, #16]
 800f7ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	697a      	ldr	r2, [r7, #20]
 800f7f4:	621a      	str	r2, [r3, #32]
}
 800f7f6:	bf00      	nop
 800f7f8:	371c      	adds	r7, #28
 800f7fa:	46bd      	mov	sp, r7
 800f7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f800:	4770      	bx	lr

0800f802 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f802:	b480      	push	{r7}
 800f804:	b087      	sub	sp, #28
 800f806:	af00      	add	r7, sp, #0
 800f808:	60f8      	str	r0, [r7, #12]
 800f80a:	60b9      	str	r1, [r7, #8]
 800f80c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	6a1b      	ldr	r3, [r3, #32]
 800f812:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	6a1b      	ldr	r3, [r3, #32]
 800f818:	f023 0210 	bic.w	r2, r3, #16
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	699b      	ldr	r3, [r3, #24]
 800f824:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f826:	693b      	ldr	r3, [r7, #16]
 800f828:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800f82c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	031b      	lsls	r3, r3, #12
 800f832:	693a      	ldr	r2, [r7, #16]
 800f834:	4313      	orrs	r3, r2
 800f836:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f838:	697b      	ldr	r3, [r7, #20]
 800f83a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800f83e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f840:	68bb      	ldr	r3, [r7, #8]
 800f842:	011b      	lsls	r3, r3, #4
 800f844:	697a      	ldr	r2, [r7, #20]
 800f846:	4313      	orrs	r3, r2
 800f848:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	693a      	ldr	r2, [r7, #16]
 800f84e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	697a      	ldr	r2, [r7, #20]
 800f854:	621a      	str	r2, [r3, #32]
}
 800f856:	bf00      	nop
 800f858:	371c      	adds	r7, #28
 800f85a:	46bd      	mov	sp, r7
 800f85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f860:	4770      	bx	lr

0800f862 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f862:	b480      	push	{r7}
 800f864:	b085      	sub	sp, #20
 800f866:	af00      	add	r7, sp, #0
 800f868:	6078      	str	r0, [r7, #4]
 800f86a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	689b      	ldr	r3, [r3, #8]
 800f870:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f878:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f87a:	683a      	ldr	r2, [r7, #0]
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	4313      	orrs	r3, r2
 800f880:	f043 0307 	orr.w	r3, r3, #7
 800f884:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	68fa      	ldr	r2, [r7, #12]
 800f88a:	609a      	str	r2, [r3, #8]
}
 800f88c:	bf00      	nop
 800f88e:	3714      	adds	r7, #20
 800f890:	46bd      	mov	sp, r7
 800f892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f896:	4770      	bx	lr

0800f898 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f898:	b480      	push	{r7}
 800f89a:	b087      	sub	sp, #28
 800f89c:	af00      	add	r7, sp, #0
 800f89e:	60f8      	str	r0, [r7, #12]
 800f8a0:	60b9      	str	r1, [r7, #8]
 800f8a2:	607a      	str	r2, [r7, #4]
 800f8a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	689b      	ldr	r3, [r3, #8]
 800f8aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f8ac:	697b      	ldr	r3, [r7, #20]
 800f8ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f8b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f8b4:	683b      	ldr	r3, [r7, #0]
 800f8b6:	021a      	lsls	r2, r3, #8
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	431a      	orrs	r2, r3
 800f8bc:	68bb      	ldr	r3, [r7, #8]
 800f8be:	4313      	orrs	r3, r2
 800f8c0:	697a      	ldr	r2, [r7, #20]
 800f8c2:	4313      	orrs	r3, r2
 800f8c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	697a      	ldr	r2, [r7, #20]
 800f8ca:	609a      	str	r2, [r3, #8]
}
 800f8cc:	bf00      	nop
 800f8ce:	371c      	adds	r7, #28
 800f8d0:	46bd      	mov	sp, r7
 800f8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d6:	4770      	bx	lr

0800f8d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f8d8:	b480      	push	{r7}
 800f8da:	b085      	sub	sp, #20
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	6078      	str	r0, [r7, #4]
 800f8e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f8e8:	2b01      	cmp	r3, #1
 800f8ea:	d101      	bne.n	800f8f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f8ec:	2302      	movs	r3, #2
 800f8ee:	e050      	b.n	800f992 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	2201      	movs	r2, #1
 800f8f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	2202      	movs	r2, #2
 800f8fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	685b      	ldr	r3, [r3, #4]
 800f906:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	689b      	ldr	r3, [r3, #8]
 800f90e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f916:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f918:	683b      	ldr	r3, [r7, #0]
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	68fa      	ldr	r2, [r7, #12]
 800f91e:	4313      	orrs	r3, r2
 800f920:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	68fa      	ldr	r2, [r7, #12]
 800f928:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	4a1c      	ldr	r2, [pc, #112]	@ (800f9a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800f930:	4293      	cmp	r3, r2
 800f932:	d018      	beq.n	800f966 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f93c:	d013      	beq.n	800f966 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	4a18      	ldr	r2, [pc, #96]	@ (800f9a4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800f944:	4293      	cmp	r3, r2
 800f946:	d00e      	beq.n	800f966 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	4a16      	ldr	r2, [pc, #88]	@ (800f9a8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800f94e:	4293      	cmp	r3, r2
 800f950:	d009      	beq.n	800f966 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	4a15      	ldr	r2, [pc, #84]	@ (800f9ac <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800f958:	4293      	cmp	r3, r2
 800f95a:	d004      	beq.n	800f966 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	4a13      	ldr	r2, [pc, #76]	@ (800f9b0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800f962:	4293      	cmp	r3, r2
 800f964:	d10c      	bne.n	800f980 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f966:	68bb      	ldr	r3, [r7, #8]
 800f968:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f96c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f96e:	683b      	ldr	r3, [r7, #0]
 800f970:	685b      	ldr	r3, [r3, #4]
 800f972:	68ba      	ldr	r2, [r7, #8]
 800f974:	4313      	orrs	r3, r2
 800f976:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	68ba      	ldr	r2, [r7, #8]
 800f97e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	2201      	movs	r2, #1
 800f984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	2200      	movs	r2, #0
 800f98c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f990:	2300      	movs	r3, #0
}
 800f992:	4618      	mov	r0, r3
 800f994:	3714      	adds	r7, #20
 800f996:	46bd      	mov	sp, r7
 800f998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f99c:	4770      	bx	lr
 800f99e:	bf00      	nop
 800f9a0:	40010000 	.word	0x40010000
 800f9a4:	40000400 	.word	0x40000400
 800f9a8:	40000800 	.word	0x40000800
 800f9ac:	40000c00 	.word	0x40000c00
 800f9b0:	40014000 	.word	0x40014000

0800f9b4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f9b4:	b480      	push	{r7}
 800f9b6:	b085      	sub	sp, #20
 800f9b8:	af00      	add	r7, sp, #0
 800f9ba:	6078      	str	r0, [r7, #4]
 800f9bc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f9be:	2300      	movs	r3, #0
 800f9c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f9c8:	2b01      	cmp	r3, #1
 800f9ca:	d101      	bne.n	800f9d0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f9cc:	2302      	movs	r3, #2
 800f9ce:	e03d      	b.n	800fa4c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	2201      	movs	r2, #1
 800f9d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800f9de:	683b      	ldr	r3, [r7, #0]
 800f9e0:	68db      	ldr	r3, [r3, #12]
 800f9e2:	4313      	orrs	r3, r2
 800f9e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800f9ec:	683b      	ldr	r3, [r7, #0]
 800f9ee:	689b      	ldr	r3, [r3, #8]
 800f9f0:	4313      	orrs	r3, r2
 800f9f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800f9fa:	683b      	ldr	r3, [r7, #0]
 800f9fc:	685b      	ldr	r3, [r3, #4]
 800f9fe:	4313      	orrs	r3, r2
 800fa00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800fa08:	683b      	ldr	r3, [r7, #0]
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	4313      	orrs	r3, r2
 800fa0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800fa16:	683b      	ldr	r3, [r7, #0]
 800fa18:	691b      	ldr	r3, [r3, #16]
 800fa1a:	4313      	orrs	r3, r2
 800fa1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800fa24:	683b      	ldr	r3, [r7, #0]
 800fa26:	695b      	ldr	r3, [r3, #20]
 800fa28:	4313      	orrs	r3, r2
 800fa2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800fa32:	683b      	ldr	r3, [r7, #0]
 800fa34:	69db      	ldr	r3, [r3, #28]
 800fa36:	4313      	orrs	r3, r2
 800fa38:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	68fa      	ldr	r2, [r7, #12]
 800fa40:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	2200      	movs	r2, #0
 800fa46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800fa4a:	2300      	movs	r3, #0
}
 800fa4c:	4618      	mov	r0, r3
 800fa4e:	3714      	adds	r7, #20
 800fa50:	46bd      	mov	sp, r7
 800fa52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa56:	4770      	bx	lr

0800fa58 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800fa58:	b480      	push	{r7}
 800fa5a:	b083      	sub	sp, #12
 800fa5c:	af00      	add	r7, sp, #0
 800fa5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800fa60:	bf00      	nop
 800fa62:	370c      	adds	r7, #12
 800fa64:	46bd      	mov	sp, r7
 800fa66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa6a:	4770      	bx	lr

0800fa6c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800fa6c:	b480      	push	{r7}
 800fa6e:	b083      	sub	sp, #12
 800fa70:	af00      	add	r7, sp, #0
 800fa72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800fa74:	bf00      	nop
 800fa76:	370c      	adds	r7, #12
 800fa78:	46bd      	mov	sp, r7
 800fa7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa7e:	4770      	bx	lr

0800fa80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fa80:	b580      	push	{r7, lr}
 800fa82:	b082      	sub	sp, #8
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d101      	bne.n	800fa92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fa8e:	2301      	movs	r3, #1
 800fa90:	e042      	b.n	800fb18 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fa98:	b2db      	uxtb	r3, r3
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d106      	bne.n	800faac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	2200      	movs	r2, #0
 800faa2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800faa6:	6878      	ldr	r0, [r7, #4]
 800faa8:	f7fb f9fe 	bl	800aea8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	2224      	movs	r2, #36	@ 0x24
 800fab0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	68da      	ldr	r2, [r3, #12]
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800fac2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800fac4:	6878      	ldr	r0, [r7, #4]
 800fac6:	f000 f973 	bl	800fdb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	691a      	ldr	r2, [r3, #16]
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800fad8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	695a      	ldr	r2, [r3, #20]
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800fae8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	68da      	ldr	r2, [r3, #12]
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800faf8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	2200      	movs	r2, #0
 800fafe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	2220      	movs	r2, #32
 800fb04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	2220      	movs	r2, #32
 800fb0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	2200      	movs	r2, #0
 800fb14:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800fb16:	2300      	movs	r3, #0
}
 800fb18:	4618      	mov	r0, r3
 800fb1a:	3708      	adds	r7, #8
 800fb1c:	46bd      	mov	sp, r7
 800fb1e:	bd80      	pop	{r7, pc}

0800fb20 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fb20:	b580      	push	{r7, lr}
 800fb22:	b08a      	sub	sp, #40	@ 0x28
 800fb24:	af02      	add	r7, sp, #8
 800fb26:	60f8      	str	r0, [r7, #12]
 800fb28:	60b9      	str	r1, [r7, #8]
 800fb2a:	603b      	str	r3, [r7, #0]
 800fb2c:	4613      	mov	r3, r2
 800fb2e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800fb30:	2300      	movs	r3, #0
 800fb32:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fb3a:	b2db      	uxtb	r3, r3
 800fb3c:	2b20      	cmp	r3, #32
 800fb3e:	d175      	bne.n	800fc2c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800fb40:	68bb      	ldr	r3, [r7, #8]
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d002      	beq.n	800fb4c <HAL_UART_Transmit+0x2c>
 800fb46:	88fb      	ldrh	r3, [r7, #6]
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d101      	bne.n	800fb50 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800fb4c:	2301      	movs	r3, #1
 800fb4e:	e06e      	b.n	800fc2e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	2200      	movs	r2, #0
 800fb54:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	2221      	movs	r2, #33	@ 0x21
 800fb5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800fb5e:	f7fb fab1 	bl	800b0c4 <HAL_GetTick>
 800fb62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	88fa      	ldrh	r2, [r7, #6]
 800fb68:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	88fa      	ldrh	r2, [r7, #6]
 800fb6e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	689b      	ldr	r3, [r3, #8]
 800fb74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fb78:	d108      	bne.n	800fb8c <HAL_UART_Transmit+0x6c>
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	691b      	ldr	r3, [r3, #16]
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d104      	bne.n	800fb8c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800fb82:	2300      	movs	r3, #0
 800fb84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800fb86:	68bb      	ldr	r3, [r7, #8]
 800fb88:	61bb      	str	r3, [r7, #24]
 800fb8a:	e003      	b.n	800fb94 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800fb8c:	68bb      	ldr	r3, [r7, #8]
 800fb8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800fb90:	2300      	movs	r3, #0
 800fb92:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800fb94:	e02e      	b.n	800fbf4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800fb96:	683b      	ldr	r3, [r7, #0]
 800fb98:	9300      	str	r3, [sp, #0]
 800fb9a:	697b      	ldr	r3, [r7, #20]
 800fb9c:	2200      	movs	r2, #0
 800fb9e:	2180      	movs	r1, #128	@ 0x80
 800fba0:	68f8      	ldr	r0, [r7, #12]
 800fba2:	f000 f848 	bl	800fc36 <UART_WaitOnFlagUntilTimeout>
 800fba6:	4603      	mov	r3, r0
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d005      	beq.n	800fbb8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	2220      	movs	r2, #32
 800fbb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800fbb4:	2303      	movs	r3, #3
 800fbb6:	e03a      	b.n	800fc2e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800fbb8:	69fb      	ldr	r3, [r7, #28]
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d10b      	bne.n	800fbd6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800fbbe:	69bb      	ldr	r3, [r7, #24]
 800fbc0:	881b      	ldrh	r3, [r3, #0]
 800fbc2:	461a      	mov	r2, r3
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800fbcc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800fbce:	69bb      	ldr	r3, [r7, #24]
 800fbd0:	3302      	adds	r3, #2
 800fbd2:	61bb      	str	r3, [r7, #24]
 800fbd4:	e007      	b.n	800fbe6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800fbd6:	69fb      	ldr	r3, [r7, #28]
 800fbd8:	781a      	ldrb	r2, [r3, #0]
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	681b      	ldr	r3, [r3, #0]
 800fbde:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800fbe0:	69fb      	ldr	r3, [r7, #28]
 800fbe2:	3301      	adds	r3, #1
 800fbe4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800fbea:	b29b      	uxth	r3, r3
 800fbec:	3b01      	subs	r3, #1
 800fbee:	b29a      	uxth	r2, r3
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800fbf8:	b29b      	uxth	r3, r3
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d1cb      	bne.n	800fb96 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800fbfe:	683b      	ldr	r3, [r7, #0]
 800fc00:	9300      	str	r3, [sp, #0]
 800fc02:	697b      	ldr	r3, [r7, #20]
 800fc04:	2200      	movs	r2, #0
 800fc06:	2140      	movs	r1, #64	@ 0x40
 800fc08:	68f8      	ldr	r0, [r7, #12]
 800fc0a:	f000 f814 	bl	800fc36 <UART_WaitOnFlagUntilTimeout>
 800fc0e:	4603      	mov	r3, r0
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d005      	beq.n	800fc20 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	2220      	movs	r2, #32
 800fc18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800fc1c:	2303      	movs	r3, #3
 800fc1e:	e006      	b.n	800fc2e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	2220      	movs	r2, #32
 800fc24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800fc28:	2300      	movs	r3, #0
 800fc2a:	e000      	b.n	800fc2e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800fc2c:	2302      	movs	r3, #2
  }
}
 800fc2e:	4618      	mov	r0, r3
 800fc30:	3720      	adds	r7, #32
 800fc32:	46bd      	mov	sp, r7
 800fc34:	bd80      	pop	{r7, pc}

0800fc36 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800fc36:	b580      	push	{r7, lr}
 800fc38:	b086      	sub	sp, #24
 800fc3a:	af00      	add	r7, sp, #0
 800fc3c:	60f8      	str	r0, [r7, #12]
 800fc3e:	60b9      	str	r1, [r7, #8]
 800fc40:	603b      	str	r3, [r7, #0]
 800fc42:	4613      	mov	r3, r2
 800fc44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fc46:	e03b      	b.n	800fcc0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fc48:	6a3b      	ldr	r3, [r7, #32]
 800fc4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc4e:	d037      	beq.n	800fcc0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fc50:	f7fb fa38 	bl	800b0c4 <HAL_GetTick>
 800fc54:	4602      	mov	r2, r0
 800fc56:	683b      	ldr	r3, [r7, #0]
 800fc58:	1ad3      	subs	r3, r2, r3
 800fc5a:	6a3a      	ldr	r2, [r7, #32]
 800fc5c:	429a      	cmp	r2, r3
 800fc5e:	d302      	bcc.n	800fc66 <UART_WaitOnFlagUntilTimeout+0x30>
 800fc60:	6a3b      	ldr	r3, [r7, #32]
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d101      	bne.n	800fc6a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800fc66:	2303      	movs	r3, #3
 800fc68:	e03a      	b.n	800fce0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	68db      	ldr	r3, [r3, #12]
 800fc70:	f003 0304 	and.w	r3, r3, #4
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d023      	beq.n	800fcc0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800fc78:	68bb      	ldr	r3, [r7, #8]
 800fc7a:	2b80      	cmp	r3, #128	@ 0x80
 800fc7c:	d020      	beq.n	800fcc0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800fc7e:	68bb      	ldr	r3, [r7, #8]
 800fc80:	2b40      	cmp	r3, #64	@ 0x40
 800fc82:	d01d      	beq.n	800fcc0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	f003 0308 	and.w	r3, r3, #8
 800fc8e:	2b08      	cmp	r3, #8
 800fc90:	d116      	bne.n	800fcc0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800fc92:	2300      	movs	r3, #0
 800fc94:	617b      	str	r3, [r7, #20]
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	617b      	str	r3, [r7, #20]
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	685b      	ldr	r3, [r3, #4]
 800fca4:	617b      	str	r3, [r7, #20]
 800fca6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fca8:	68f8      	ldr	r0, [r7, #12]
 800fcaa:	f000 f81d 	bl	800fce8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	2208      	movs	r2, #8
 800fcb2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	2200      	movs	r2, #0
 800fcb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800fcbc:	2301      	movs	r3, #1
 800fcbe:	e00f      	b.n	800fce0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	681a      	ldr	r2, [r3, #0]
 800fcc6:	68bb      	ldr	r3, [r7, #8]
 800fcc8:	4013      	ands	r3, r2
 800fcca:	68ba      	ldr	r2, [r7, #8]
 800fccc:	429a      	cmp	r2, r3
 800fcce:	bf0c      	ite	eq
 800fcd0:	2301      	moveq	r3, #1
 800fcd2:	2300      	movne	r3, #0
 800fcd4:	b2db      	uxtb	r3, r3
 800fcd6:	461a      	mov	r2, r3
 800fcd8:	79fb      	ldrb	r3, [r7, #7]
 800fcda:	429a      	cmp	r2, r3
 800fcdc:	d0b4      	beq.n	800fc48 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fcde:	2300      	movs	r3, #0
}
 800fce0:	4618      	mov	r0, r3
 800fce2:	3718      	adds	r7, #24
 800fce4:	46bd      	mov	sp, r7
 800fce6:	bd80      	pop	{r7, pc}

0800fce8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fce8:	b480      	push	{r7}
 800fcea:	b095      	sub	sp, #84	@ 0x54
 800fcec:	af00      	add	r7, sp, #0
 800fcee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	330c      	adds	r3, #12
 800fcf6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fcfa:	e853 3f00 	ldrex	r3, [r3]
 800fcfe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800fd00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd02:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fd06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	330c      	adds	r3, #12
 800fd0e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800fd10:	643a      	str	r2, [r7, #64]	@ 0x40
 800fd12:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd14:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800fd16:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800fd18:	e841 2300 	strex	r3, r2, [r1]
 800fd1c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800fd1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d1e5      	bne.n	800fcf0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	3314      	adds	r3, #20
 800fd2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd2c:	6a3b      	ldr	r3, [r7, #32]
 800fd2e:	e853 3f00 	ldrex	r3, [r3]
 800fd32:	61fb      	str	r3, [r7, #28]
   return(result);
 800fd34:	69fb      	ldr	r3, [r7, #28]
 800fd36:	f023 0301 	bic.w	r3, r3, #1
 800fd3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	3314      	adds	r3, #20
 800fd42:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fd44:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800fd46:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd48:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fd4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fd4c:	e841 2300 	strex	r3, r2, [r1]
 800fd50:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800fd52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d1e5      	bne.n	800fd24 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fd5c:	2b01      	cmp	r3, #1
 800fd5e:	d119      	bne.n	800fd94 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	330c      	adds	r3, #12
 800fd66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	e853 3f00 	ldrex	r3, [r3]
 800fd6e:	60bb      	str	r3, [r7, #8]
   return(result);
 800fd70:	68bb      	ldr	r3, [r7, #8]
 800fd72:	f023 0310 	bic.w	r3, r3, #16
 800fd76:	647b      	str	r3, [r7, #68]	@ 0x44
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	330c      	adds	r3, #12
 800fd7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fd80:	61ba      	str	r2, [r7, #24]
 800fd82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd84:	6979      	ldr	r1, [r7, #20]
 800fd86:	69ba      	ldr	r2, [r7, #24]
 800fd88:	e841 2300 	strex	r3, r2, [r1]
 800fd8c:	613b      	str	r3, [r7, #16]
   return(result);
 800fd8e:	693b      	ldr	r3, [r7, #16]
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d1e5      	bne.n	800fd60 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	2220      	movs	r2, #32
 800fd98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	2200      	movs	r2, #0
 800fda0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800fda2:	bf00      	nop
 800fda4:	3754      	adds	r7, #84	@ 0x54
 800fda6:	46bd      	mov	sp, r7
 800fda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdac:	4770      	bx	lr
	...

0800fdb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fdb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fdb4:	b0c0      	sub	sp, #256	@ 0x100
 800fdb6:	af00      	add	r7, sp, #0
 800fdb8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fdbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	691b      	ldr	r3, [r3, #16]
 800fdc4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800fdc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800fdcc:	68d9      	ldr	r1, [r3, #12]
 800fdce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800fdd2:	681a      	ldr	r2, [r3, #0]
 800fdd4:	ea40 0301 	orr.w	r3, r0, r1
 800fdd8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800fdda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800fdde:	689a      	ldr	r2, [r3, #8]
 800fde0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800fde4:	691b      	ldr	r3, [r3, #16]
 800fde6:	431a      	orrs	r2, r3
 800fde8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800fdec:	695b      	ldr	r3, [r3, #20]
 800fdee:	431a      	orrs	r2, r3
 800fdf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800fdf4:	69db      	ldr	r3, [r3, #28]
 800fdf6:	4313      	orrs	r3, r2
 800fdf8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800fdfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	68db      	ldr	r3, [r3, #12]
 800fe04:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800fe08:	f021 010c 	bic.w	r1, r1, #12
 800fe0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800fe10:	681a      	ldr	r2, [r3, #0]
 800fe12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800fe16:	430b      	orrs	r3, r1
 800fe18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800fe1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	695b      	ldr	r3, [r3, #20]
 800fe22:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800fe26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800fe2a:	6999      	ldr	r1, [r3, #24]
 800fe2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800fe30:	681a      	ldr	r2, [r3, #0]
 800fe32:	ea40 0301 	orr.w	r3, r0, r1
 800fe36:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800fe38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800fe3c:	681a      	ldr	r2, [r3, #0]
 800fe3e:	4b8f      	ldr	r3, [pc, #572]	@ (801007c <UART_SetConfig+0x2cc>)
 800fe40:	429a      	cmp	r2, r3
 800fe42:	d005      	beq.n	800fe50 <UART_SetConfig+0xa0>
 800fe44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800fe48:	681a      	ldr	r2, [r3, #0]
 800fe4a:	4b8d      	ldr	r3, [pc, #564]	@ (8010080 <UART_SetConfig+0x2d0>)
 800fe4c:	429a      	cmp	r2, r3
 800fe4e:	d104      	bne.n	800fe5a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800fe50:	f7fe fe60 	bl	800eb14 <HAL_RCC_GetPCLK2Freq>
 800fe54:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800fe58:	e003      	b.n	800fe62 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800fe5a:	f7fe fe47 	bl	800eaec <HAL_RCC_GetPCLK1Freq>
 800fe5e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fe62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800fe66:	69db      	ldr	r3, [r3, #28]
 800fe68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800fe6c:	f040 810c 	bne.w	8010088 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800fe70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800fe74:	2200      	movs	r2, #0
 800fe76:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800fe7a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800fe7e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800fe82:	4622      	mov	r2, r4
 800fe84:	462b      	mov	r3, r5
 800fe86:	1891      	adds	r1, r2, r2
 800fe88:	65b9      	str	r1, [r7, #88]	@ 0x58
 800fe8a:	415b      	adcs	r3, r3
 800fe8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800fe8e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800fe92:	4621      	mov	r1, r4
 800fe94:	eb12 0801 	adds.w	r8, r2, r1
 800fe98:	4629      	mov	r1, r5
 800fe9a:	eb43 0901 	adc.w	r9, r3, r1
 800fe9e:	f04f 0200 	mov.w	r2, #0
 800fea2:	f04f 0300 	mov.w	r3, #0
 800fea6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800feaa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800feae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800feb2:	4690      	mov	r8, r2
 800feb4:	4699      	mov	r9, r3
 800feb6:	4623      	mov	r3, r4
 800feb8:	eb18 0303 	adds.w	r3, r8, r3
 800febc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800fec0:	462b      	mov	r3, r5
 800fec2:	eb49 0303 	adc.w	r3, r9, r3
 800fec6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800feca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800fece:	685b      	ldr	r3, [r3, #4]
 800fed0:	2200      	movs	r2, #0
 800fed2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800fed6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800feda:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800fede:	460b      	mov	r3, r1
 800fee0:	18db      	adds	r3, r3, r3
 800fee2:	653b      	str	r3, [r7, #80]	@ 0x50
 800fee4:	4613      	mov	r3, r2
 800fee6:	eb42 0303 	adc.w	r3, r2, r3
 800feea:	657b      	str	r3, [r7, #84]	@ 0x54
 800feec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800fef0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800fef4:	f7f8 feb0 	bl	8008c58 <__aeabi_uldivmod>
 800fef8:	4602      	mov	r2, r0
 800fefa:	460b      	mov	r3, r1
 800fefc:	4b61      	ldr	r3, [pc, #388]	@ (8010084 <UART_SetConfig+0x2d4>)
 800fefe:	fba3 2302 	umull	r2, r3, r3, r2
 800ff02:	095b      	lsrs	r3, r3, #5
 800ff04:	011c      	lsls	r4, r3, #4
 800ff06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ff0a:	2200      	movs	r2, #0
 800ff0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ff10:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800ff14:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800ff18:	4642      	mov	r2, r8
 800ff1a:	464b      	mov	r3, r9
 800ff1c:	1891      	adds	r1, r2, r2
 800ff1e:	64b9      	str	r1, [r7, #72]	@ 0x48
 800ff20:	415b      	adcs	r3, r3
 800ff22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ff24:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800ff28:	4641      	mov	r1, r8
 800ff2a:	eb12 0a01 	adds.w	sl, r2, r1
 800ff2e:	4649      	mov	r1, r9
 800ff30:	eb43 0b01 	adc.w	fp, r3, r1
 800ff34:	f04f 0200 	mov.w	r2, #0
 800ff38:	f04f 0300 	mov.w	r3, #0
 800ff3c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800ff40:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800ff44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ff48:	4692      	mov	sl, r2
 800ff4a:	469b      	mov	fp, r3
 800ff4c:	4643      	mov	r3, r8
 800ff4e:	eb1a 0303 	adds.w	r3, sl, r3
 800ff52:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ff56:	464b      	mov	r3, r9
 800ff58:	eb4b 0303 	adc.w	r3, fp, r3
 800ff5c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800ff60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ff64:	685b      	ldr	r3, [r3, #4]
 800ff66:	2200      	movs	r2, #0
 800ff68:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ff6c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800ff70:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800ff74:	460b      	mov	r3, r1
 800ff76:	18db      	adds	r3, r3, r3
 800ff78:	643b      	str	r3, [r7, #64]	@ 0x40
 800ff7a:	4613      	mov	r3, r2
 800ff7c:	eb42 0303 	adc.w	r3, r2, r3
 800ff80:	647b      	str	r3, [r7, #68]	@ 0x44
 800ff82:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800ff86:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800ff8a:	f7f8 fe65 	bl	8008c58 <__aeabi_uldivmod>
 800ff8e:	4602      	mov	r2, r0
 800ff90:	460b      	mov	r3, r1
 800ff92:	4611      	mov	r1, r2
 800ff94:	4b3b      	ldr	r3, [pc, #236]	@ (8010084 <UART_SetConfig+0x2d4>)
 800ff96:	fba3 2301 	umull	r2, r3, r3, r1
 800ff9a:	095b      	lsrs	r3, r3, #5
 800ff9c:	2264      	movs	r2, #100	@ 0x64
 800ff9e:	fb02 f303 	mul.w	r3, r2, r3
 800ffa2:	1acb      	subs	r3, r1, r3
 800ffa4:	00db      	lsls	r3, r3, #3
 800ffa6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800ffaa:	4b36      	ldr	r3, [pc, #216]	@ (8010084 <UART_SetConfig+0x2d4>)
 800ffac:	fba3 2302 	umull	r2, r3, r3, r2
 800ffb0:	095b      	lsrs	r3, r3, #5
 800ffb2:	005b      	lsls	r3, r3, #1
 800ffb4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800ffb8:	441c      	add	r4, r3
 800ffba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ffbe:	2200      	movs	r2, #0
 800ffc0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ffc4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800ffc8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800ffcc:	4642      	mov	r2, r8
 800ffce:	464b      	mov	r3, r9
 800ffd0:	1891      	adds	r1, r2, r2
 800ffd2:	63b9      	str	r1, [r7, #56]	@ 0x38
 800ffd4:	415b      	adcs	r3, r3
 800ffd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ffd8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800ffdc:	4641      	mov	r1, r8
 800ffde:	1851      	adds	r1, r2, r1
 800ffe0:	6339      	str	r1, [r7, #48]	@ 0x30
 800ffe2:	4649      	mov	r1, r9
 800ffe4:	414b      	adcs	r3, r1
 800ffe6:	637b      	str	r3, [r7, #52]	@ 0x34
 800ffe8:	f04f 0200 	mov.w	r2, #0
 800ffec:	f04f 0300 	mov.w	r3, #0
 800fff0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800fff4:	4659      	mov	r1, fp
 800fff6:	00cb      	lsls	r3, r1, #3
 800fff8:	4651      	mov	r1, sl
 800fffa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800fffe:	4651      	mov	r1, sl
 8010000:	00ca      	lsls	r2, r1, #3
 8010002:	4610      	mov	r0, r2
 8010004:	4619      	mov	r1, r3
 8010006:	4603      	mov	r3, r0
 8010008:	4642      	mov	r2, r8
 801000a:	189b      	adds	r3, r3, r2
 801000c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8010010:	464b      	mov	r3, r9
 8010012:	460a      	mov	r2, r1
 8010014:	eb42 0303 	adc.w	r3, r2, r3
 8010018:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801001c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010020:	685b      	ldr	r3, [r3, #4]
 8010022:	2200      	movs	r2, #0
 8010024:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8010028:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 801002c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8010030:	460b      	mov	r3, r1
 8010032:	18db      	adds	r3, r3, r3
 8010034:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010036:	4613      	mov	r3, r2
 8010038:	eb42 0303 	adc.w	r3, r2, r3
 801003c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801003e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8010042:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8010046:	f7f8 fe07 	bl	8008c58 <__aeabi_uldivmod>
 801004a:	4602      	mov	r2, r0
 801004c:	460b      	mov	r3, r1
 801004e:	4b0d      	ldr	r3, [pc, #52]	@ (8010084 <UART_SetConfig+0x2d4>)
 8010050:	fba3 1302 	umull	r1, r3, r3, r2
 8010054:	095b      	lsrs	r3, r3, #5
 8010056:	2164      	movs	r1, #100	@ 0x64
 8010058:	fb01 f303 	mul.w	r3, r1, r3
 801005c:	1ad3      	subs	r3, r2, r3
 801005e:	00db      	lsls	r3, r3, #3
 8010060:	3332      	adds	r3, #50	@ 0x32
 8010062:	4a08      	ldr	r2, [pc, #32]	@ (8010084 <UART_SetConfig+0x2d4>)
 8010064:	fba2 2303 	umull	r2, r3, r2, r3
 8010068:	095b      	lsrs	r3, r3, #5
 801006a:	f003 0207 	and.w	r2, r3, #7
 801006e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	4422      	add	r2, r4
 8010076:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8010078:	e106      	b.n	8010288 <UART_SetConfig+0x4d8>
 801007a:	bf00      	nop
 801007c:	40011000 	.word	0x40011000
 8010080:	40011400 	.word	0x40011400
 8010084:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8010088:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801008c:	2200      	movs	r2, #0
 801008e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8010092:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8010096:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 801009a:	4642      	mov	r2, r8
 801009c:	464b      	mov	r3, r9
 801009e:	1891      	adds	r1, r2, r2
 80100a0:	6239      	str	r1, [r7, #32]
 80100a2:	415b      	adcs	r3, r3
 80100a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80100a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80100aa:	4641      	mov	r1, r8
 80100ac:	1854      	adds	r4, r2, r1
 80100ae:	4649      	mov	r1, r9
 80100b0:	eb43 0501 	adc.w	r5, r3, r1
 80100b4:	f04f 0200 	mov.w	r2, #0
 80100b8:	f04f 0300 	mov.w	r3, #0
 80100bc:	00eb      	lsls	r3, r5, #3
 80100be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80100c2:	00e2      	lsls	r2, r4, #3
 80100c4:	4614      	mov	r4, r2
 80100c6:	461d      	mov	r5, r3
 80100c8:	4643      	mov	r3, r8
 80100ca:	18e3      	adds	r3, r4, r3
 80100cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80100d0:	464b      	mov	r3, r9
 80100d2:	eb45 0303 	adc.w	r3, r5, r3
 80100d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80100da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80100de:	685b      	ldr	r3, [r3, #4]
 80100e0:	2200      	movs	r2, #0
 80100e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80100e6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80100ea:	f04f 0200 	mov.w	r2, #0
 80100ee:	f04f 0300 	mov.w	r3, #0
 80100f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80100f6:	4629      	mov	r1, r5
 80100f8:	008b      	lsls	r3, r1, #2
 80100fa:	4621      	mov	r1, r4
 80100fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8010100:	4621      	mov	r1, r4
 8010102:	008a      	lsls	r2, r1, #2
 8010104:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8010108:	f7f8 fda6 	bl	8008c58 <__aeabi_uldivmod>
 801010c:	4602      	mov	r2, r0
 801010e:	460b      	mov	r3, r1
 8010110:	4b60      	ldr	r3, [pc, #384]	@ (8010294 <UART_SetConfig+0x4e4>)
 8010112:	fba3 2302 	umull	r2, r3, r3, r2
 8010116:	095b      	lsrs	r3, r3, #5
 8010118:	011c      	lsls	r4, r3, #4
 801011a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801011e:	2200      	movs	r2, #0
 8010120:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8010124:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8010128:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 801012c:	4642      	mov	r2, r8
 801012e:	464b      	mov	r3, r9
 8010130:	1891      	adds	r1, r2, r2
 8010132:	61b9      	str	r1, [r7, #24]
 8010134:	415b      	adcs	r3, r3
 8010136:	61fb      	str	r3, [r7, #28]
 8010138:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801013c:	4641      	mov	r1, r8
 801013e:	1851      	adds	r1, r2, r1
 8010140:	6139      	str	r1, [r7, #16]
 8010142:	4649      	mov	r1, r9
 8010144:	414b      	adcs	r3, r1
 8010146:	617b      	str	r3, [r7, #20]
 8010148:	f04f 0200 	mov.w	r2, #0
 801014c:	f04f 0300 	mov.w	r3, #0
 8010150:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8010154:	4659      	mov	r1, fp
 8010156:	00cb      	lsls	r3, r1, #3
 8010158:	4651      	mov	r1, sl
 801015a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801015e:	4651      	mov	r1, sl
 8010160:	00ca      	lsls	r2, r1, #3
 8010162:	4610      	mov	r0, r2
 8010164:	4619      	mov	r1, r3
 8010166:	4603      	mov	r3, r0
 8010168:	4642      	mov	r2, r8
 801016a:	189b      	adds	r3, r3, r2
 801016c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8010170:	464b      	mov	r3, r9
 8010172:	460a      	mov	r2, r1
 8010174:	eb42 0303 	adc.w	r3, r2, r3
 8010178:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801017c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010180:	685b      	ldr	r3, [r3, #4]
 8010182:	2200      	movs	r2, #0
 8010184:	67bb      	str	r3, [r7, #120]	@ 0x78
 8010186:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8010188:	f04f 0200 	mov.w	r2, #0
 801018c:	f04f 0300 	mov.w	r3, #0
 8010190:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8010194:	4649      	mov	r1, r9
 8010196:	008b      	lsls	r3, r1, #2
 8010198:	4641      	mov	r1, r8
 801019a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801019e:	4641      	mov	r1, r8
 80101a0:	008a      	lsls	r2, r1, #2
 80101a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80101a6:	f7f8 fd57 	bl	8008c58 <__aeabi_uldivmod>
 80101aa:	4602      	mov	r2, r0
 80101ac:	460b      	mov	r3, r1
 80101ae:	4611      	mov	r1, r2
 80101b0:	4b38      	ldr	r3, [pc, #224]	@ (8010294 <UART_SetConfig+0x4e4>)
 80101b2:	fba3 2301 	umull	r2, r3, r3, r1
 80101b6:	095b      	lsrs	r3, r3, #5
 80101b8:	2264      	movs	r2, #100	@ 0x64
 80101ba:	fb02 f303 	mul.w	r3, r2, r3
 80101be:	1acb      	subs	r3, r1, r3
 80101c0:	011b      	lsls	r3, r3, #4
 80101c2:	3332      	adds	r3, #50	@ 0x32
 80101c4:	4a33      	ldr	r2, [pc, #204]	@ (8010294 <UART_SetConfig+0x4e4>)
 80101c6:	fba2 2303 	umull	r2, r3, r2, r3
 80101ca:	095b      	lsrs	r3, r3, #5
 80101cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80101d0:	441c      	add	r4, r3
 80101d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80101d6:	2200      	movs	r2, #0
 80101d8:	673b      	str	r3, [r7, #112]	@ 0x70
 80101da:	677a      	str	r2, [r7, #116]	@ 0x74
 80101dc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80101e0:	4642      	mov	r2, r8
 80101e2:	464b      	mov	r3, r9
 80101e4:	1891      	adds	r1, r2, r2
 80101e6:	60b9      	str	r1, [r7, #8]
 80101e8:	415b      	adcs	r3, r3
 80101ea:	60fb      	str	r3, [r7, #12]
 80101ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80101f0:	4641      	mov	r1, r8
 80101f2:	1851      	adds	r1, r2, r1
 80101f4:	6039      	str	r1, [r7, #0]
 80101f6:	4649      	mov	r1, r9
 80101f8:	414b      	adcs	r3, r1
 80101fa:	607b      	str	r3, [r7, #4]
 80101fc:	f04f 0200 	mov.w	r2, #0
 8010200:	f04f 0300 	mov.w	r3, #0
 8010204:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8010208:	4659      	mov	r1, fp
 801020a:	00cb      	lsls	r3, r1, #3
 801020c:	4651      	mov	r1, sl
 801020e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8010212:	4651      	mov	r1, sl
 8010214:	00ca      	lsls	r2, r1, #3
 8010216:	4610      	mov	r0, r2
 8010218:	4619      	mov	r1, r3
 801021a:	4603      	mov	r3, r0
 801021c:	4642      	mov	r2, r8
 801021e:	189b      	adds	r3, r3, r2
 8010220:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010222:	464b      	mov	r3, r9
 8010224:	460a      	mov	r2, r1
 8010226:	eb42 0303 	adc.w	r3, r2, r3
 801022a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801022c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010230:	685b      	ldr	r3, [r3, #4]
 8010232:	2200      	movs	r2, #0
 8010234:	663b      	str	r3, [r7, #96]	@ 0x60
 8010236:	667a      	str	r2, [r7, #100]	@ 0x64
 8010238:	f04f 0200 	mov.w	r2, #0
 801023c:	f04f 0300 	mov.w	r3, #0
 8010240:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8010244:	4649      	mov	r1, r9
 8010246:	008b      	lsls	r3, r1, #2
 8010248:	4641      	mov	r1, r8
 801024a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801024e:	4641      	mov	r1, r8
 8010250:	008a      	lsls	r2, r1, #2
 8010252:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8010256:	f7f8 fcff 	bl	8008c58 <__aeabi_uldivmod>
 801025a:	4602      	mov	r2, r0
 801025c:	460b      	mov	r3, r1
 801025e:	4b0d      	ldr	r3, [pc, #52]	@ (8010294 <UART_SetConfig+0x4e4>)
 8010260:	fba3 1302 	umull	r1, r3, r3, r2
 8010264:	095b      	lsrs	r3, r3, #5
 8010266:	2164      	movs	r1, #100	@ 0x64
 8010268:	fb01 f303 	mul.w	r3, r1, r3
 801026c:	1ad3      	subs	r3, r2, r3
 801026e:	011b      	lsls	r3, r3, #4
 8010270:	3332      	adds	r3, #50	@ 0x32
 8010272:	4a08      	ldr	r2, [pc, #32]	@ (8010294 <UART_SetConfig+0x4e4>)
 8010274:	fba2 2303 	umull	r2, r3, r2, r3
 8010278:	095b      	lsrs	r3, r3, #5
 801027a:	f003 020f 	and.w	r2, r3, #15
 801027e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	4422      	add	r2, r4
 8010286:	609a      	str	r2, [r3, #8]
}
 8010288:	bf00      	nop
 801028a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 801028e:	46bd      	mov	sp, r7
 8010290:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010294:	51eb851f 	.word	0x51eb851f

08010298 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010298:	b084      	sub	sp, #16
 801029a:	b580      	push	{r7, lr}
 801029c:	b084      	sub	sp, #16
 801029e:	af00      	add	r7, sp, #0
 80102a0:	6078      	str	r0, [r7, #4]
 80102a2:	f107 001c 	add.w	r0, r7, #28
 80102a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80102aa:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80102ae:	2b01      	cmp	r3, #1
 80102b0:	d123      	bne.n	80102fa <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80102b6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	68db      	ldr	r3, [r3, #12]
 80102c2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80102c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80102ca:	687a      	ldr	r2, [r7, #4]
 80102cc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	68db      	ldr	r3, [r3, #12]
 80102d2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80102da:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80102de:	2b01      	cmp	r3, #1
 80102e0:	d105      	bne.n	80102ee <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	68db      	ldr	r3, [r3, #12]
 80102e6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80102ee:	6878      	ldr	r0, [r7, #4]
 80102f0:	f001 fae8 	bl	80118c4 <USB_CoreReset>
 80102f4:	4603      	mov	r3, r0
 80102f6:	73fb      	strb	r3, [r7, #15]
 80102f8:	e01b      	b.n	8010332 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	68db      	ldr	r3, [r3, #12]
 80102fe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8010306:	6878      	ldr	r0, [r7, #4]
 8010308:	f001 fadc 	bl	80118c4 <USB_CoreReset>
 801030c:	4603      	mov	r3, r0
 801030e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8010310:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8010314:	2b00      	cmp	r3, #0
 8010316:	d106      	bne.n	8010326 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801031c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	639a      	str	r2, [r3, #56]	@ 0x38
 8010324:	e005      	b.n	8010332 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801032a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8010332:	7fbb      	ldrb	r3, [r7, #30]
 8010334:	2b01      	cmp	r3, #1
 8010336:	d10b      	bne.n	8010350 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	689b      	ldr	r3, [r3, #8]
 801033c:	f043 0206 	orr.w	r2, r3, #6
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	689b      	ldr	r3, [r3, #8]
 8010348:	f043 0220 	orr.w	r2, r3, #32
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8010350:	7bfb      	ldrb	r3, [r7, #15]
}
 8010352:	4618      	mov	r0, r3
 8010354:	3710      	adds	r7, #16
 8010356:	46bd      	mov	sp, r7
 8010358:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801035c:	b004      	add	sp, #16
 801035e:	4770      	bx	lr

08010360 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8010360:	b480      	push	{r7}
 8010362:	b087      	sub	sp, #28
 8010364:	af00      	add	r7, sp, #0
 8010366:	60f8      	str	r0, [r7, #12]
 8010368:	60b9      	str	r1, [r7, #8]
 801036a:	4613      	mov	r3, r2
 801036c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 801036e:	79fb      	ldrb	r3, [r7, #7]
 8010370:	2b02      	cmp	r3, #2
 8010372:	d165      	bne.n	8010440 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8010374:	68bb      	ldr	r3, [r7, #8]
 8010376:	4a41      	ldr	r2, [pc, #260]	@ (801047c <USB_SetTurnaroundTime+0x11c>)
 8010378:	4293      	cmp	r3, r2
 801037a:	d906      	bls.n	801038a <USB_SetTurnaroundTime+0x2a>
 801037c:	68bb      	ldr	r3, [r7, #8]
 801037e:	4a40      	ldr	r2, [pc, #256]	@ (8010480 <USB_SetTurnaroundTime+0x120>)
 8010380:	4293      	cmp	r3, r2
 8010382:	d202      	bcs.n	801038a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8010384:	230f      	movs	r3, #15
 8010386:	617b      	str	r3, [r7, #20]
 8010388:	e062      	b.n	8010450 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 801038a:	68bb      	ldr	r3, [r7, #8]
 801038c:	4a3c      	ldr	r2, [pc, #240]	@ (8010480 <USB_SetTurnaroundTime+0x120>)
 801038e:	4293      	cmp	r3, r2
 8010390:	d306      	bcc.n	80103a0 <USB_SetTurnaroundTime+0x40>
 8010392:	68bb      	ldr	r3, [r7, #8]
 8010394:	4a3b      	ldr	r2, [pc, #236]	@ (8010484 <USB_SetTurnaroundTime+0x124>)
 8010396:	4293      	cmp	r3, r2
 8010398:	d202      	bcs.n	80103a0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 801039a:	230e      	movs	r3, #14
 801039c:	617b      	str	r3, [r7, #20]
 801039e:	e057      	b.n	8010450 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80103a0:	68bb      	ldr	r3, [r7, #8]
 80103a2:	4a38      	ldr	r2, [pc, #224]	@ (8010484 <USB_SetTurnaroundTime+0x124>)
 80103a4:	4293      	cmp	r3, r2
 80103a6:	d306      	bcc.n	80103b6 <USB_SetTurnaroundTime+0x56>
 80103a8:	68bb      	ldr	r3, [r7, #8]
 80103aa:	4a37      	ldr	r2, [pc, #220]	@ (8010488 <USB_SetTurnaroundTime+0x128>)
 80103ac:	4293      	cmp	r3, r2
 80103ae:	d202      	bcs.n	80103b6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80103b0:	230d      	movs	r3, #13
 80103b2:	617b      	str	r3, [r7, #20]
 80103b4:	e04c      	b.n	8010450 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80103b6:	68bb      	ldr	r3, [r7, #8]
 80103b8:	4a33      	ldr	r2, [pc, #204]	@ (8010488 <USB_SetTurnaroundTime+0x128>)
 80103ba:	4293      	cmp	r3, r2
 80103bc:	d306      	bcc.n	80103cc <USB_SetTurnaroundTime+0x6c>
 80103be:	68bb      	ldr	r3, [r7, #8]
 80103c0:	4a32      	ldr	r2, [pc, #200]	@ (801048c <USB_SetTurnaroundTime+0x12c>)
 80103c2:	4293      	cmp	r3, r2
 80103c4:	d802      	bhi.n	80103cc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80103c6:	230c      	movs	r3, #12
 80103c8:	617b      	str	r3, [r7, #20]
 80103ca:	e041      	b.n	8010450 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80103cc:	68bb      	ldr	r3, [r7, #8]
 80103ce:	4a2f      	ldr	r2, [pc, #188]	@ (801048c <USB_SetTurnaroundTime+0x12c>)
 80103d0:	4293      	cmp	r3, r2
 80103d2:	d906      	bls.n	80103e2 <USB_SetTurnaroundTime+0x82>
 80103d4:	68bb      	ldr	r3, [r7, #8]
 80103d6:	4a2e      	ldr	r2, [pc, #184]	@ (8010490 <USB_SetTurnaroundTime+0x130>)
 80103d8:	4293      	cmp	r3, r2
 80103da:	d802      	bhi.n	80103e2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80103dc:	230b      	movs	r3, #11
 80103de:	617b      	str	r3, [r7, #20]
 80103e0:	e036      	b.n	8010450 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80103e2:	68bb      	ldr	r3, [r7, #8]
 80103e4:	4a2a      	ldr	r2, [pc, #168]	@ (8010490 <USB_SetTurnaroundTime+0x130>)
 80103e6:	4293      	cmp	r3, r2
 80103e8:	d906      	bls.n	80103f8 <USB_SetTurnaroundTime+0x98>
 80103ea:	68bb      	ldr	r3, [r7, #8]
 80103ec:	4a29      	ldr	r2, [pc, #164]	@ (8010494 <USB_SetTurnaroundTime+0x134>)
 80103ee:	4293      	cmp	r3, r2
 80103f0:	d802      	bhi.n	80103f8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80103f2:	230a      	movs	r3, #10
 80103f4:	617b      	str	r3, [r7, #20]
 80103f6:	e02b      	b.n	8010450 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80103f8:	68bb      	ldr	r3, [r7, #8]
 80103fa:	4a26      	ldr	r2, [pc, #152]	@ (8010494 <USB_SetTurnaroundTime+0x134>)
 80103fc:	4293      	cmp	r3, r2
 80103fe:	d906      	bls.n	801040e <USB_SetTurnaroundTime+0xae>
 8010400:	68bb      	ldr	r3, [r7, #8]
 8010402:	4a25      	ldr	r2, [pc, #148]	@ (8010498 <USB_SetTurnaroundTime+0x138>)
 8010404:	4293      	cmp	r3, r2
 8010406:	d202      	bcs.n	801040e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8010408:	2309      	movs	r3, #9
 801040a:	617b      	str	r3, [r7, #20]
 801040c:	e020      	b.n	8010450 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 801040e:	68bb      	ldr	r3, [r7, #8]
 8010410:	4a21      	ldr	r2, [pc, #132]	@ (8010498 <USB_SetTurnaroundTime+0x138>)
 8010412:	4293      	cmp	r3, r2
 8010414:	d306      	bcc.n	8010424 <USB_SetTurnaroundTime+0xc4>
 8010416:	68bb      	ldr	r3, [r7, #8]
 8010418:	4a20      	ldr	r2, [pc, #128]	@ (801049c <USB_SetTurnaroundTime+0x13c>)
 801041a:	4293      	cmp	r3, r2
 801041c:	d802      	bhi.n	8010424 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 801041e:	2308      	movs	r3, #8
 8010420:	617b      	str	r3, [r7, #20]
 8010422:	e015      	b.n	8010450 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8010424:	68bb      	ldr	r3, [r7, #8]
 8010426:	4a1d      	ldr	r2, [pc, #116]	@ (801049c <USB_SetTurnaroundTime+0x13c>)
 8010428:	4293      	cmp	r3, r2
 801042a:	d906      	bls.n	801043a <USB_SetTurnaroundTime+0xda>
 801042c:	68bb      	ldr	r3, [r7, #8]
 801042e:	4a1c      	ldr	r2, [pc, #112]	@ (80104a0 <USB_SetTurnaroundTime+0x140>)
 8010430:	4293      	cmp	r3, r2
 8010432:	d202      	bcs.n	801043a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8010434:	2307      	movs	r3, #7
 8010436:	617b      	str	r3, [r7, #20]
 8010438:	e00a      	b.n	8010450 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 801043a:	2306      	movs	r3, #6
 801043c:	617b      	str	r3, [r7, #20]
 801043e:	e007      	b.n	8010450 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8010440:	79fb      	ldrb	r3, [r7, #7]
 8010442:	2b00      	cmp	r3, #0
 8010444:	d102      	bne.n	801044c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8010446:	2309      	movs	r3, #9
 8010448:	617b      	str	r3, [r7, #20]
 801044a:	e001      	b.n	8010450 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 801044c:	2309      	movs	r3, #9
 801044e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	68db      	ldr	r3, [r3, #12]
 8010454:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	68da      	ldr	r2, [r3, #12]
 8010460:	697b      	ldr	r3, [r7, #20]
 8010462:	029b      	lsls	r3, r3, #10
 8010464:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8010468:	431a      	orrs	r2, r3
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801046e:	2300      	movs	r3, #0
}
 8010470:	4618      	mov	r0, r3
 8010472:	371c      	adds	r7, #28
 8010474:	46bd      	mov	sp, r7
 8010476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801047a:	4770      	bx	lr
 801047c:	00d8acbf 	.word	0x00d8acbf
 8010480:	00e4e1c0 	.word	0x00e4e1c0
 8010484:	00f42400 	.word	0x00f42400
 8010488:	01067380 	.word	0x01067380
 801048c:	011a499f 	.word	0x011a499f
 8010490:	01312cff 	.word	0x01312cff
 8010494:	014ca43f 	.word	0x014ca43f
 8010498:	016e3600 	.word	0x016e3600
 801049c:	01a6ab1f 	.word	0x01a6ab1f
 80104a0:	01e84800 	.word	0x01e84800

080104a4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80104a4:	b480      	push	{r7}
 80104a6:	b083      	sub	sp, #12
 80104a8:	af00      	add	r7, sp, #0
 80104aa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	689b      	ldr	r3, [r3, #8]
 80104b0:	f043 0201 	orr.w	r2, r3, #1
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80104b8:	2300      	movs	r3, #0
}
 80104ba:	4618      	mov	r0, r3
 80104bc:	370c      	adds	r7, #12
 80104be:	46bd      	mov	sp, r7
 80104c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104c4:	4770      	bx	lr

080104c6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80104c6:	b480      	push	{r7}
 80104c8:	b083      	sub	sp, #12
 80104ca:	af00      	add	r7, sp, #0
 80104cc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	689b      	ldr	r3, [r3, #8]
 80104d2:	f023 0201 	bic.w	r2, r3, #1
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80104da:	2300      	movs	r3, #0
}
 80104dc:	4618      	mov	r0, r3
 80104de:	370c      	adds	r7, #12
 80104e0:	46bd      	mov	sp, r7
 80104e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104e6:	4770      	bx	lr

080104e8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80104e8:	b580      	push	{r7, lr}
 80104ea:	b084      	sub	sp, #16
 80104ec:	af00      	add	r7, sp, #0
 80104ee:	6078      	str	r0, [r7, #4]
 80104f0:	460b      	mov	r3, r1
 80104f2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80104f4:	2300      	movs	r3, #0
 80104f6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	68db      	ldr	r3, [r3, #12]
 80104fc:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8010504:	78fb      	ldrb	r3, [r7, #3]
 8010506:	2b01      	cmp	r3, #1
 8010508:	d115      	bne.n	8010536 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	68db      	ldr	r3, [r3, #12]
 801050e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8010516:	200a      	movs	r0, #10
 8010518:	f7fa fde0 	bl	800b0dc <HAL_Delay>
      ms += 10U;
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	330a      	adds	r3, #10
 8010520:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8010522:	6878      	ldr	r0, [r7, #4]
 8010524:	f001 f93f 	bl	80117a6 <USB_GetMode>
 8010528:	4603      	mov	r3, r0
 801052a:	2b01      	cmp	r3, #1
 801052c:	d01e      	beq.n	801056c <USB_SetCurrentMode+0x84>
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	2bc7      	cmp	r3, #199	@ 0xc7
 8010532:	d9f0      	bls.n	8010516 <USB_SetCurrentMode+0x2e>
 8010534:	e01a      	b.n	801056c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8010536:	78fb      	ldrb	r3, [r7, #3]
 8010538:	2b00      	cmp	r3, #0
 801053a:	d115      	bne.n	8010568 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	68db      	ldr	r3, [r3, #12]
 8010540:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8010548:	200a      	movs	r0, #10
 801054a:	f7fa fdc7 	bl	800b0dc <HAL_Delay>
      ms += 10U;
 801054e:	68fb      	ldr	r3, [r7, #12]
 8010550:	330a      	adds	r3, #10
 8010552:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8010554:	6878      	ldr	r0, [r7, #4]
 8010556:	f001 f926 	bl	80117a6 <USB_GetMode>
 801055a:	4603      	mov	r3, r0
 801055c:	2b00      	cmp	r3, #0
 801055e:	d005      	beq.n	801056c <USB_SetCurrentMode+0x84>
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	2bc7      	cmp	r3, #199	@ 0xc7
 8010564:	d9f0      	bls.n	8010548 <USB_SetCurrentMode+0x60>
 8010566:	e001      	b.n	801056c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8010568:	2301      	movs	r3, #1
 801056a:	e005      	b.n	8010578 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	2bc8      	cmp	r3, #200	@ 0xc8
 8010570:	d101      	bne.n	8010576 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8010572:	2301      	movs	r3, #1
 8010574:	e000      	b.n	8010578 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8010576:	2300      	movs	r3, #0
}
 8010578:	4618      	mov	r0, r3
 801057a:	3710      	adds	r7, #16
 801057c:	46bd      	mov	sp, r7
 801057e:	bd80      	pop	{r7, pc}

08010580 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010580:	b084      	sub	sp, #16
 8010582:	b580      	push	{r7, lr}
 8010584:	b086      	sub	sp, #24
 8010586:	af00      	add	r7, sp, #0
 8010588:	6078      	str	r0, [r7, #4]
 801058a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 801058e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8010592:	2300      	movs	r3, #0
 8010594:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 801059a:	2300      	movs	r3, #0
 801059c:	613b      	str	r3, [r7, #16]
 801059e:	e009      	b.n	80105b4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80105a0:	687a      	ldr	r2, [r7, #4]
 80105a2:	693b      	ldr	r3, [r7, #16]
 80105a4:	3340      	adds	r3, #64	@ 0x40
 80105a6:	009b      	lsls	r3, r3, #2
 80105a8:	4413      	add	r3, r2
 80105aa:	2200      	movs	r2, #0
 80105ac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80105ae:	693b      	ldr	r3, [r7, #16]
 80105b0:	3301      	adds	r3, #1
 80105b2:	613b      	str	r3, [r7, #16]
 80105b4:	693b      	ldr	r3, [r7, #16]
 80105b6:	2b0e      	cmp	r3, #14
 80105b8:	d9f2      	bls.n	80105a0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80105ba:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d11c      	bne.n	80105fc <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80105c8:	685b      	ldr	r3, [r3, #4]
 80105ca:	68fa      	ldr	r2, [r7, #12]
 80105cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80105d0:	f043 0302 	orr.w	r3, r3, #2
 80105d4:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80105da:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80105e6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80105f2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	639a      	str	r2, [r3, #56]	@ 0x38
 80105fa:	e00b      	b.n	8010614 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010600:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801060c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801061a:	461a      	mov	r2, r3
 801061c:	2300      	movs	r3, #0
 801061e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8010620:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8010624:	2b01      	cmp	r3, #1
 8010626:	d10d      	bne.n	8010644 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8010628:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801062c:	2b00      	cmp	r3, #0
 801062e:	d104      	bne.n	801063a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8010630:	2100      	movs	r1, #0
 8010632:	6878      	ldr	r0, [r7, #4]
 8010634:	f000 f968 	bl	8010908 <USB_SetDevSpeed>
 8010638:	e008      	b.n	801064c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 801063a:	2101      	movs	r1, #1
 801063c:	6878      	ldr	r0, [r7, #4]
 801063e:	f000 f963 	bl	8010908 <USB_SetDevSpeed>
 8010642:	e003      	b.n	801064c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8010644:	2103      	movs	r1, #3
 8010646:	6878      	ldr	r0, [r7, #4]
 8010648:	f000 f95e 	bl	8010908 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801064c:	2110      	movs	r1, #16
 801064e:	6878      	ldr	r0, [r7, #4]
 8010650:	f000 f8fa 	bl	8010848 <USB_FlushTxFifo>
 8010654:	4603      	mov	r3, r0
 8010656:	2b00      	cmp	r3, #0
 8010658:	d001      	beq.n	801065e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 801065a:	2301      	movs	r3, #1
 801065c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801065e:	6878      	ldr	r0, [r7, #4]
 8010660:	f000 f924 	bl	80108ac <USB_FlushRxFifo>
 8010664:	4603      	mov	r3, r0
 8010666:	2b00      	cmp	r3, #0
 8010668:	d001      	beq.n	801066e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 801066a:	2301      	movs	r3, #1
 801066c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 801066e:	68fb      	ldr	r3, [r7, #12]
 8010670:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010674:	461a      	mov	r2, r3
 8010676:	2300      	movs	r3, #0
 8010678:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010680:	461a      	mov	r2, r3
 8010682:	2300      	movs	r3, #0
 8010684:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8010686:	68fb      	ldr	r3, [r7, #12]
 8010688:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801068c:	461a      	mov	r2, r3
 801068e:	2300      	movs	r3, #0
 8010690:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010692:	2300      	movs	r3, #0
 8010694:	613b      	str	r3, [r7, #16]
 8010696:	e043      	b.n	8010720 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010698:	693b      	ldr	r3, [r7, #16]
 801069a:	015a      	lsls	r2, r3, #5
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	4413      	add	r3, r2
 80106a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80106aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80106ae:	d118      	bne.n	80106e2 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80106b0:	693b      	ldr	r3, [r7, #16]
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d10a      	bne.n	80106cc <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80106b6:	693b      	ldr	r3, [r7, #16]
 80106b8:	015a      	lsls	r2, r3, #5
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	4413      	add	r3, r2
 80106be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80106c2:	461a      	mov	r2, r3
 80106c4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80106c8:	6013      	str	r3, [r2, #0]
 80106ca:	e013      	b.n	80106f4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80106cc:	693b      	ldr	r3, [r7, #16]
 80106ce:	015a      	lsls	r2, r3, #5
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	4413      	add	r3, r2
 80106d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80106d8:	461a      	mov	r2, r3
 80106da:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80106de:	6013      	str	r3, [r2, #0]
 80106e0:	e008      	b.n	80106f4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80106e2:	693b      	ldr	r3, [r7, #16]
 80106e4:	015a      	lsls	r2, r3, #5
 80106e6:	68fb      	ldr	r3, [r7, #12]
 80106e8:	4413      	add	r3, r2
 80106ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80106ee:	461a      	mov	r2, r3
 80106f0:	2300      	movs	r3, #0
 80106f2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80106f4:	693b      	ldr	r3, [r7, #16]
 80106f6:	015a      	lsls	r2, r3, #5
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	4413      	add	r3, r2
 80106fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010700:	461a      	mov	r2, r3
 8010702:	2300      	movs	r3, #0
 8010704:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8010706:	693b      	ldr	r3, [r7, #16]
 8010708:	015a      	lsls	r2, r3, #5
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	4413      	add	r3, r2
 801070e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010712:	461a      	mov	r2, r3
 8010714:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8010718:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801071a:	693b      	ldr	r3, [r7, #16]
 801071c:	3301      	adds	r3, #1
 801071e:	613b      	str	r3, [r7, #16]
 8010720:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8010724:	461a      	mov	r2, r3
 8010726:	693b      	ldr	r3, [r7, #16]
 8010728:	4293      	cmp	r3, r2
 801072a:	d3b5      	bcc.n	8010698 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801072c:	2300      	movs	r3, #0
 801072e:	613b      	str	r3, [r7, #16]
 8010730:	e043      	b.n	80107ba <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010732:	693b      	ldr	r3, [r7, #16]
 8010734:	015a      	lsls	r2, r3, #5
 8010736:	68fb      	ldr	r3, [r7, #12]
 8010738:	4413      	add	r3, r2
 801073a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010744:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010748:	d118      	bne.n	801077c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 801074a:	693b      	ldr	r3, [r7, #16]
 801074c:	2b00      	cmp	r3, #0
 801074e:	d10a      	bne.n	8010766 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8010750:	693b      	ldr	r3, [r7, #16]
 8010752:	015a      	lsls	r2, r3, #5
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	4413      	add	r3, r2
 8010758:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801075c:	461a      	mov	r2, r3
 801075e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8010762:	6013      	str	r3, [r2, #0]
 8010764:	e013      	b.n	801078e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8010766:	693b      	ldr	r3, [r7, #16]
 8010768:	015a      	lsls	r2, r3, #5
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	4413      	add	r3, r2
 801076e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010772:	461a      	mov	r2, r3
 8010774:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8010778:	6013      	str	r3, [r2, #0]
 801077a:	e008      	b.n	801078e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801077c:	693b      	ldr	r3, [r7, #16]
 801077e:	015a      	lsls	r2, r3, #5
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	4413      	add	r3, r2
 8010784:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010788:	461a      	mov	r2, r3
 801078a:	2300      	movs	r3, #0
 801078c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 801078e:	693b      	ldr	r3, [r7, #16]
 8010790:	015a      	lsls	r2, r3, #5
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	4413      	add	r3, r2
 8010796:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801079a:	461a      	mov	r2, r3
 801079c:	2300      	movs	r3, #0
 801079e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80107a0:	693b      	ldr	r3, [r7, #16]
 80107a2:	015a      	lsls	r2, r3, #5
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	4413      	add	r3, r2
 80107a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80107ac:	461a      	mov	r2, r3
 80107ae:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80107b2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80107b4:	693b      	ldr	r3, [r7, #16]
 80107b6:	3301      	adds	r3, #1
 80107b8:	613b      	str	r3, [r7, #16]
 80107ba:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80107be:	461a      	mov	r2, r3
 80107c0:	693b      	ldr	r3, [r7, #16]
 80107c2:	4293      	cmp	r3, r2
 80107c4:	d3b5      	bcc.n	8010732 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80107cc:	691b      	ldr	r3, [r3, #16]
 80107ce:	68fa      	ldr	r2, [r7, #12]
 80107d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80107d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80107d8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	2200      	movs	r2, #0
 80107de:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80107e6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80107e8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d105      	bne.n	80107fc <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	699b      	ldr	r3, [r3, #24]
 80107f4:	f043 0210 	orr.w	r2, r3, #16
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	699a      	ldr	r2, [r3, #24]
 8010800:	4b10      	ldr	r3, [pc, #64]	@ (8010844 <USB_DevInit+0x2c4>)
 8010802:	4313      	orrs	r3, r2
 8010804:	687a      	ldr	r2, [r7, #4]
 8010806:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8010808:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 801080c:	2b00      	cmp	r3, #0
 801080e:	d005      	beq.n	801081c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	699b      	ldr	r3, [r3, #24]
 8010814:	f043 0208 	orr.w	r2, r3, #8
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 801081c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8010820:	2b01      	cmp	r3, #1
 8010822:	d107      	bne.n	8010834 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	699b      	ldr	r3, [r3, #24]
 8010828:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801082c:	f043 0304 	orr.w	r3, r3, #4
 8010830:	687a      	ldr	r2, [r7, #4]
 8010832:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8010834:	7dfb      	ldrb	r3, [r7, #23]
}
 8010836:	4618      	mov	r0, r3
 8010838:	3718      	adds	r7, #24
 801083a:	46bd      	mov	sp, r7
 801083c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010840:	b004      	add	sp, #16
 8010842:	4770      	bx	lr
 8010844:	803c3800 	.word	0x803c3800

08010848 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8010848:	b480      	push	{r7}
 801084a:	b085      	sub	sp, #20
 801084c:	af00      	add	r7, sp, #0
 801084e:	6078      	str	r0, [r7, #4]
 8010850:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8010852:	2300      	movs	r3, #0
 8010854:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	3301      	adds	r3, #1
 801085a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801085c:	68fb      	ldr	r3, [r7, #12]
 801085e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010862:	d901      	bls.n	8010868 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8010864:	2303      	movs	r3, #3
 8010866:	e01b      	b.n	80108a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	691b      	ldr	r3, [r3, #16]
 801086c:	2b00      	cmp	r3, #0
 801086e:	daf2      	bge.n	8010856 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8010870:	2300      	movs	r3, #0
 8010872:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8010874:	683b      	ldr	r3, [r7, #0]
 8010876:	019b      	lsls	r3, r3, #6
 8010878:	f043 0220 	orr.w	r2, r3, #32
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010880:	68fb      	ldr	r3, [r7, #12]
 8010882:	3301      	adds	r3, #1
 8010884:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801088c:	d901      	bls.n	8010892 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 801088e:	2303      	movs	r3, #3
 8010890:	e006      	b.n	80108a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	691b      	ldr	r3, [r3, #16]
 8010896:	f003 0320 	and.w	r3, r3, #32
 801089a:	2b20      	cmp	r3, #32
 801089c:	d0f0      	beq.n	8010880 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 801089e:	2300      	movs	r3, #0
}
 80108a0:	4618      	mov	r0, r3
 80108a2:	3714      	adds	r7, #20
 80108a4:	46bd      	mov	sp, r7
 80108a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108aa:	4770      	bx	lr

080108ac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80108ac:	b480      	push	{r7}
 80108ae:	b085      	sub	sp, #20
 80108b0:	af00      	add	r7, sp, #0
 80108b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80108b4:	2300      	movs	r3, #0
 80108b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	3301      	adds	r3, #1
 80108bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80108be:	68fb      	ldr	r3, [r7, #12]
 80108c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80108c4:	d901      	bls.n	80108ca <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80108c6:	2303      	movs	r3, #3
 80108c8:	e018      	b.n	80108fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	691b      	ldr	r3, [r3, #16]
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	daf2      	bge.n	80108b8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80108d2:	2300      	movs	r3, #0
 80108d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	2210      	movs	r2, #16
 80108da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80108dc:	68fb      	ldr	r3, [r7, #12]
 80108de:	3301      	adds	r3, #1
 80108e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80108e8:	d901      	bls.n	80108ee <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80108ea:	2303      	movs	r3, #3
 80108ec:	e006      	b.n	80108fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	691b      	ldr	r3, [r3, #16]
 80108f2:	f003 0310 	and.w	r3, r3, #16
 80108f6:	2b10      	cmp	r3, #16
 80108f8:	d0f0      	beq.n	80108dc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80108fa:	2300      	movs	r3, #0
}
 80108fc:	4618      	mov	r0, r3
 80108fe:	3714      	adds	r7, #20
 8010900:	46bd      	mov	sp, r7
 8010902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010906:	4770      	bx	lr

08010908 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8010908:	b480      	push	{r7}
 801090a:	b085      	sub	sp, #20
 801090c:	af00      	add	r7, sp, #0
 801090e:	6078      	str	r0, [r7, #4]
 8010910:	460b      	mov	r3, r1
 8010912:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801091e:	681a      	ldr	r2, [r3, #0]
 8010920:	78fb      	ldrb	r3, [r7, #3]
 8010922:	68f9      	ldr	r1, [r7, #12]
 8010924:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010928:	4313      	orrs	r3, r2
 801092a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 801092c:	2300      	movs	r3, #0
}
 801092e:	4618      	mov	r0, r3
 8010930:	3714      	adds	r7, #20
 8010932:	46bd      	mov	sp, r7
 8010934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010938:	4770      	bx	lr

0801093a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 801093a:	b480      	push	{r7}
 801093c:	b087      	sub	sp, #28
 801093e:	af00      	add	r7, sp, #0
 8010940:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8010946:	693b      	ldr	r3, [r7, #16]
 8010948:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801094c:	689b      	ldr	r3, [r3, #8]
 801094e:	f003 0306 	and.w	r3, r3, #6
 8010952:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8010954:	68fb      	ldr	r3, [r7, #12]
 8010956:	2b00      	cmp	r3, #0
 8010958:	d102      	bne.n	8010960 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 801095a:	2300      	movs	r3, #0
 801095c:	75fb      	strb	r3, [r7, #23]
 801095e:	e00a      	b.n	8010976 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	2b02      	cmp	r3, #2
 8010964:	d002      	beq.n	801096c <USB_GetDevSpeed+0x32>
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	2b06      	cmp	r3, #6
 801096a:	d102      	bne.n	8010972 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 801096c:	2302      	movs	r3, #2
 801096e:	75fb      	strb	r3, [r7, #23]
 8010970:	e001      	b.n	8010976 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8010972:	230f      	movs	r3, #15
 8010974:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8010976:	7dfb      	ldrb	r3, [r7, #23]
}
 8010978:	4618      	mov	r0, r3
 801097a:	371c      	adds	r7, #28
 801097c:	46bd      	mov	sp, r7
 801097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010982:	4770      	bx	lr

08010984 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8010984:	b480      	push	{r7}
 8010986:	b085      	sub	sp, #20
 8010988:	af00      	add	r7, sp, #0
 801098a:	6078      	str	r0, [r7, #4]
 801098c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010992:	683b      	ldr	r3, [r7, #0]
 8010994:	781b      	ldrb	r3, [r3, #0]
 8010996:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010998:	683b      	ldr	r3, [r7, #0]
 801099a:	785b      	ldrb	r3, [r3, #1]
 801099c:	2b01      	cmp	r3, #1
 801099e:	d13a      	bne.n	8010a16 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80109a6:	69da      	ldr	r2, [r3, #28]
 80109a8:	683b      	ldr	r3, [r7, #0]
 80109aa:	781b      	ldrb	r3, [r3, #0]
 80109ac:	f003 030f 	and.w	r3, r3, #15
 80109b0:	2101      	movs	r1, #1
 80109b2:	fa01 f303 	lsl.w	r3, r1, r3
 80109b6:	b29b      	uxth	r3, r3
 80109b8:	68f9      	ldr	r1, [r7, #12]
 80109ba:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80109be:	4313      	orrs	r3, r2
 80109c0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80109c2:	68bb      	ldr	r3, [r7, #8]
 80109c4:	015a      	lsls	r2, r3, #5
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	4413      	add	r3, r2
 80109ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d155      	bne.n	8010a84 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80109d8:	68bb      	ldr	r3, [r7, #8]
 80109da:	015a      	lsls	r2, r3, #5
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	4413      	add	r3, r2
 80109e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80109e4:	681a      	ldr	r2, [r3, #0]
 80109e6:	683b      	ldr	r3, [r7, #0]
 80109e8:	689b      	ldr	r3, [r3, #8]
 80109ea:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80109ee:	683b      	ldr	r3, [r7, #0]
 80109f0:	791b      	ldrb	r3, [r3, #4]
 80109f2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80109f4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80109f6:	68bb      	ldr	r3, [r7, #8]
 80109f8:	059b      	lsls	r3, r3, #22
 80109fa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80109fc:	4313      	orrs	r3, r2
 80109fe:	68ba      	ldr	r2, [r7, #8]
 8010a00:	0151      	lsls	r1, r2, #5
 8010a02:	68fa      	ldr	r2, [r7, #12]
 8010a04:	440a      	add	r2, r1
 8010a06:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010a0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010a0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010a12:	6013      	str	r3, [r2, #0]
 8010a14:	e036      	b.n	8010a84 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8010a16:	68fb      	ldr	r3, [r7, #12]
 8010a18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010a1c:	69da      	ldr	r2, [r3, #28]
 8010a1e:	683b      	ldr	r3, [r7, #0]
 8010a20:	781b      	ldrb	r3, [r3, #0]
 8010a22:	f003 030f 	and.w	r3, r3, #15
 8010a26:	2101      	movs	r1, #1
 8010a28:	fa01 f303 	lsl.w	r3, r1, r3
 8010a2c:	041b      	lsls	r3, r3, #16
 8010a2e:	68f9      	ldr	r1, [r7, #12]
 8010a30:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010a34:	4313      	orrs	r3, r2
 8010a36:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8010a38:	68bb      	ldr	r3, [r7, #8]
 8010a3a:	015a      	lsls	r2, r3, #5
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	4413      	add	r3, r2
 8010a40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010a44:	681b      	ldr	r3, [r3, #0]
 8010a46:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d11a      	bne.n	8010a84 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8010a4e:	68bb      	ldr	r3, [r7, #8]
 8010a50:	015a      	lsls	r2, r3, #5
 8010a52:	68fb      	ldr	r3, [r7, #12]
 8010a54:	4413      	add	r3, r2
 8010a56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010a5a:	681a      	ldr	r2, [r3, #0]
 8010a5c:	683b      	ldr	r3, [r7, #0]
 8010a5e:	689b      	ldr	r3, [r3, #8]
 8010a60:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8010a64:	683b      	ldr	r3, [r7, #0]
 8010a66:	791b      	ldrb	r3, [r3, #4]
 8010a68:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8010a6a:	430b      	orrs	r3, r1
 8010a6c:	4313      	orrs	r3, r2
 8010a6e:	68ba      	ldr	r2, [r7, #8]
 8010a70:	0151      	lsls	r1, r2, #5
 8010a72:	68fa      	ldr	r2, [r7, #12]
 8010a74:	440a      	add	r2, r1
 8010a76:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010a7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010a7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010a82:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8010a84:	2300      	movs	r3, #0
}
 8010a86:	4618      	mov	r0, r3
 8010a88:	3714      	adds	r7, #20
 8010a8a:	46bd      	mov	sp, r7
 8010a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a90:	4770      	bx	lr
	...

08010a94 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8010a94:	b480      	push	{r7}
 8010a96:	b085      	sub	sp, #20
 8010a98:	af00      	add	r7, sp, #0
 8010a9a:	6078      	str	r0, [r7, #4]
 8010a9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010aa2:	683b      	ldr	r3, [r7, #0]
 8010aa4:	781b      	ldrb	r3, [r3, #0]
 8010aa6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8010aa8:	683b      	ldr	r3, [r7, #0]
 8010aaa:	785b      	ldrb	r3, [r3, #1]
 8010aac:	2b01      	cmp	r3, #1
 8010aae:	d161      	bne.n	8010b74 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010ab0:	68bb      	ldr	r3, [r7, #8]
 8010ab2:	015a      	lsls	r2, r3, #5
 8010ab4:	68fb      	ldr	r3, [r7, #12]
 8010ab6:	4413      	add	r3, r2
 8010ab8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010ac2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010ac6:	d11f      	bne.n	8010b08 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8010ac8:	68bb      	ldr	r3, [r7, #8]
 8010aca:	015a      	lsls	r2, r3, #5
 8010acc:	68fb      	ldr	r3, [r7, #12]
 8010ace:	4413      	add	r3, r2
 8010ad0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	68ba      	ldr	r2, [r7, #8]
 8010ad8:	0151      	lsls	r1, r2, #5
 8010ada:	68fa      	ldr	r2, [r7, #12]
 8010adc:	440a      	add	r2, r1
 8010ade:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010ae2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8010ae6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8010ae8:	68bb      	ldr	r3, [r7, #8]
 8010aea:	015a      	lsls	r2, r3, #5
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	4413      	add	r3, r2
 8010af0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	68ba      	ldr	r2, [r7, #8]
 8010af8:	0151      	lsls	r1, r2, #5
 8010afa:	68fa      	ldr	r2, [r7, #12]
 8010afc:	440a      	add	r2, r1
 8010afe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010b02:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8010b06:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010b0e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010b10:	683b      	ldr	r3, [r7, #0]
 8010b12:	781b      	ldrb	r3, [r3, #0]
 8010b14:	f003 030f 	and.w	r3, r3, #15
 8010b18:	2101      	movs	r1, #1
 8010b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8010b1e:	b29b      	uxth	r3, r3
 8010b20:	43db      	mvns	r3, r3
 8010b22:	68f9      	ldr	r1, [r7, #12]
 8010b24:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010b28:	4013      	ands	r3, r2
 8010b2a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010b32:	69da      	ldr	r2, [r3, #28]
 8010b34:	683b      	ldr	r3, [r7, #0]
 8010b36:	781b      	ldrb	r3, [r3, #0]
 8010b38:	f003 030f 	and.w	r3, r3, #15
 8010b3c:	2101      	movs	r1, #1
 8010b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8010b42:	b29b      	uxth	r3, r3
 8010b44:	43db      	mvns	r3, r3
 8010b46:	68f9      	ldr	r1, [r7, #12]
 8010b48:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010b4c:	4013      	ands	r3, r2
 8010b4e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8010b50:	68bb      	ldr	r3, [r7, #8]
 8010b52:	015a      	lsls	r2, r3, #5
 8010b54:	68fb      	ldr	r3, [r7, #12]
 8010b56:	4413      	add	r3, r2
 8010b58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010b5c:	681a      	ldr	r2, [r3, #0]
 8010b5e:	68bb      	ldr	r3, [r7, #8]
 8010b60:	0159      	lsls	r1, r3, #5
 8010b62:	68fb      	ldr	r3, [r7, #12]
 8010b64:	440b      	add	r3, r1
 8010b66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010b6a:	4619      	mov	r1, r3
 8010b6c:	4b35      	ldr	r3, [pc, #212]	@ (8010c44 <USB_DeactivateEndpoint+0x1b0>)
 8010b6e:	4013      	ands	r3, r2
 8010b70:	600b      	str	r3, [r1, #0]
 8010b72:	e060      	b.n	8010c36 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010b74:	68bb      	ldr	r3, [r7, #8]
 8010b76:	015a      	lsls	r2, r3, #5
 8010b78:	68fb      	ldr	r3, [r7, #12]
 8010b7a:	4413      	add	r3, r2
 8010b7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010b80:	681b      	ldr	r3, [r3, #0]
 8010b82:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010b86:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010b8a:	d11f      	bne.n	8010bcc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8010b8c:	68bb      	ldr	r3, [r7, #8]
 8010b8e:	015a      	lsls	r2, r3, #5
 8010b90:	68fb      	ldr	r3, [r7, #12]
 8010b92:	4413      	add	r3, r2
 8010b94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	68ba      	ldr	r2, [r7, #8]
 8010b9c:	0151      	lsls	r1, r2, #5
 8010b9e:	68fa      	ldr	r2, [r7, #12]
 8010ba0:	440a      	add	r2, r1
 8010ba2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010ba6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8010baa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8010bac:	68bb      	ldr	r3, [r7, #8]
 8010bae:	015a      	lsls	r2, r3, #5
 8010bb0:	68fb      	ldr	r3, [r7, #12]
 8010bb2:	4413      	add	r3, r2
 8010bb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	68ba      	ldr	r2, [r7, #8]
 8010bbc:	0151      	lsls	r1, r2, #5
 8010bbe:	68fa      	ldr	r2, [r7, #12]
 8010bc0:	440a      	add	r2, r1
 8010bc2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010bc6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8010bca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010bd2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010bd4:	683b      	ldr	r3, [r7, #0]
 8010bd6:	781b      	ldrb	r3, [r3, #0]
 8010bd8:	f003 030f 	and.w	r3, r3, #15
 8010bdc:	2101      	movs	r1, #1
 8010bde:	fa01 f303 	lsl.w	r3, r1, r3
 8010be2:	041b      	lsls	r3, r3, #16
 8010be4:	43db      	mvns	r3, r3
 8010be6:	68f9      	ldr	r1, [r7, #12]
 8010be8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010bec:	4013      	ands	r3, r2
 8010bee:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8010bf0:	68fb      	ldr	r3, [r7, #12]
 8010bf2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010bf6:	69da      	ldr	r2, [r3, #28]
 8010bf8:	683b      	ldr	r3, [r7, #0]
 8010bfa:	781b      	ldrb	r3, [r3, #0]
 8010bfc:	f003 030f 	and.w	r3, r3, #15
 8010c00:	2101      	movs	r1, #1
 8010c02:	fa01 f303 	lsl.w	r3, r1, r3
 8010c06:	041b      	lsls	r3, r3, #16
 8010c08:	43db      	mvns	r3, r3
 8010c0a:	68f9      	ldr	r1, [r7, #12]
 8010c0c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010c10:	4013      	ands	r3, r2
 8010c12:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8010c14:	68bb      	ldr	r3, [r7, #8]
 8010c16:	015a      	lsls	r2, r3, #5
 8010c18:	68fb      	ldr	r3, [r7, #12]
 8010c1a:	4413      	add	r3, r2
 8010c1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010c20:	681a      	ldr	r2, [r3, #0]
 8010c22:	68bb      	ldr	r3, [r7, #8]
 8010c24:	0159      	lsls	r1, r3, #5
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	440b      	add	r3, r1
 8010c2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010c2e:	4619      	mov	r1, r3
 8010c30:	4b05      	ldr	r3, [pc, #20]	@ (8010c48 <USB_DeactivateEndpoint+0x1b4>)
 8010c32:	4013      	ands	r3, r2
 8010c34:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8010c36:	2300      	movs	r3, #0
}
 8010c38:	4618      	mov	r0, r3
 8010c3a:	3714      	adds	r7, #20
 8010c3c:	46bd      	mov	sp, r7
 8010c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c42:	4770      	bx	lr
 8010c44:	ec337800 	.word	0xec337800
 8010c48:	eff37800 	.word	0xeff37800

08010c4c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8010c4c:	b580      	push	{r7, lr}
 8010c4e:	b08a      	sub	sp, #40	@ 0x28
 8010c50:	af02      	add	r7, sp, #8
 8010c52:	60f8      	str	r0, [r7, #12]
 8010c54:	60b9      	str	r1, [r7, #8]
 8010c56:	4613      	mov	r3, r2
 8010c58:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010c5a:	68fb      	ldr	r3, [r7, #12]
 8010c5c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8010c5e:	68bb      	ldr	r3, [r7, #8]
 8010c60:	781b      	ldrb	r3, [r3, #0]
 8010c62:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010c64:	68bb      	ldr	r3, [r7, #8]
 8010c66:	785b      	ldrb	r3, [r3, #1]
 8010c68:	2b01      	cmp	r3, #1
 8010c6a:	f040 817f 	bne.w	8010f6c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8010c6e:	68bb      	ldr	r3, [r7, #8]
 8010c70:	691b      	ldr	r3, [r3, #16]
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d132      	bne.n	8010cdc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010c76:	69bb      	ldr	r3, [r7, #24]
 8010c78:	015a      	lsls	r2, r3, #5
 8010c7a:	69fb      	ldr	r3, [r7, #28]
 8010c7c:	4413      	add	r3, r2
 8010c7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010c82:	691b      	ldr	r3, [r3, #16]
 8010c84:	69ba      	ldr	r2, [r7, #24]
 8010c86:	0151      	lsls	r1, r2, #5
 8010c88:	69fa      	ldr	r2, [r7, #28]
 8010c8a:	440a      	add	r2, r1
 8010c8c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010c90:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8010c94:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8010c98:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010c9a:	69bb      	ldr	r3, [r7, #24]
 8010c9c:	015a      	lsls	r2, r3, #5
 8010c9e:	69fb      	ldr	r3, [r7, #28]
 8010ca0:	4413      	add	r3, r2
 8010ca2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010ca6:	691b      	ldr	r3, [r3, #16]
 8010ca8:	69ba      	ldr	r2, [r7, #24]
 8010caa:	0151      	lsls	r1, r2, #5
 8010cac:	69fa      	ldr	r2, [r7, #28]
 8010cae:	440a      	add	r2, r1
 8010cb0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010cb4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8010cb8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010cba:	69bb      	ldr	r3, [r7, #24]
 8010cbc:	015a      	lsls	r2, r3, #5
 8010cbe:	69fb      	ldr	r3, [r7, #28]
 8010cc0:	4413      	add	r3, r2
 8010cc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010cc6:	691b      	ldr	r3, [r3, #16]
 8010cc8:	69ba      	ldr	r2, [r7, #24]
 8010cca:	0151      	lsls	r1, r2, #5
 8010ccc:	69fa      	ldr	r2, [r7, #28]
 8010cce:	440a      	add	r2, r1
 8010cd0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010cd4:	0cdb      	lsrs	r3, r3, #19
 8010cd6:	04db      	lsls	r3, r3, #19
 8010cd8:	6113      	str	r3, [r2, #16]
 8010cda:	e097      	b.n	8010e0c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010cdc:	69bb      	ldr	r3, [r7, #24]
 8010cde:	015a      	lsls	r2, r3, #5
 8010ce0:	69fb      	ldr	r3, [r7, #28]
 8010ce2:	4413      	add	r3, r2
 8010ce4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010ce8:	691b      	ldr	r3, [r3, #16]
 8010cea:	69ba      	ldr	r2, [r7, #24]
 8010cec:	0151      	lsls	r1, r2, #5
 8010cee:	69fa      	ldr	r2, [r7, #28]
 8010cf0:	440a      	add	r2, r1
 8010cf2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010cf6:	0cdb      	lsrs	r3, r3, #19
 8010cf8:	04db      	lsls	r3, r3, #19
 8010cfa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010cfc:	69bb      	ldr	r3, [r7, #24]
 8010cfe:	015a      	lsls	r2, r3, #5
 8010d00:	69fb      	ldr	r3, [r7, #28]
 8010d02:	4413      	add	r3, r2
 8010d04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010d08:	691b      	ldr	r3, [r3, #16]
 8010d0a:	69ba      	ldr	r2, [r7, #24]
 8010d0c:	0151      	lsls	r1, r2, #5
 8010d0e:	69fa      	ldr	r2, [r7, #28]
 8010d10:	440a      	add	r2, r1
 8010d12:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010d16:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8010d1a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8010d1e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8010d20:	69bb      	ldr	r3, [r7, #24]
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d11a      	bne.n	8010d5c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8010d26:	68bb      	ldr	r3, [r7, #8]
 8010d28:	691a      	ldr	r2, [r3, #16]
 8010d2a:	68bb      	ldr	r3, [r7, #8]
 8010d2c:	689b      	ldr	r3, [r3, #8]
 8010d2e:	429a      	cmp	r2, r3
 8010d30:	d903      	bls.n	8010d3a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8010d32:	68bb      	ldr	r3, [r7, #8]
 8010d34:	689a      	ldr	r2, [r3, #8]
 8010d36:	68bb      	ldr	r3, [r7, #8]
 8010d38:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010d3a:	69bb      	ldr	r3, [r7, #24]
 8010d3c:	015a      	lsls	r2, r3, #5
 8010d3e:	69fb      	ldr	r3, [r7, #28]
 8010d40:	4413      	add	r3, r2
 8010d42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010d46:	691b      	ldr	r3, [r3, #16]
 8010d48:	69ba      	ldr	r2, [r7, #24]
 8010d4a:	0151      	lsls	r1, r2, #5
 8010d4c:	69fa      	ldr	r2, [r7, #28]
 8010d4e:	440a      	add	r2, r1
 8010d50:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010d54:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8010d58:	6113      	str	r3, [r2, #16]
 8010d5a:	e044      	b.n	8010de6 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8010d5c:	68bb      	ldr	r3, [r7, #8]
 8010d5e:	691a      	ldr	r2, [r3, #16]
 8010d60:	68bb      	ldr	r3, [r7, #8]
 8010d62:	689b      	ldr	r3, [r3, #8]
 8010d64:	4413      	add	r3, r2
 8010d66:	1e5a      	subs	r2, r3, #1
 8010d68:	68bb      	ldr	r3, [r7, #8]
 8010d6a:	689b      	ldr	r3, [r3, #8]
 8010d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8010d70:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8010d72:	69bb      	ldr	r3, [r7, #24]
 8010d74:	015a      	lsls	r2, r3, #5
 8010d76:	69fb      	ldr	r3, [r7, #28]
 8010d78:	4413      	add	r3, r2
 8010d7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010d7e:	691a      	ldr	r2, [r3, #16]
 8010d80:	8afb      	ldrh	r3, [r7, #22]
 8010d82:	04d9      	lsls	r1, r3, #19
 8010d84:	4ba4      	ldr	r3, [pc, #656]	@ (8011018 <USB_EPStartXfer+0x3cc>)
 8010d86:	400b      	ands	r3, r1
 8010d88:	69b9      	ldr	r1, [r7, #24]
 8010d8a:	0148      	lsls	r0, r1, #5
 8010d8c:	69f9      	ldr	r1, [r7, #28]
 8010d8e:	4401      	add	r1, r0
 8010d90:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8010d94:	4313      	orrs	r3, r2
 8010d96:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8010d98:	68bb      	ldr	r3, [r7, #8]
 8010d9a:	791b      	ldrb	r3, [r3, #4]
 8010d9c:	2b01      	cmp	r3, #1
 8010d9e:	d122      	bne.n	8010de6 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8010da0:	69bb      	ldr	r3, [r7, #24]
 8010da2:	015a      	lsls	r2, r3, #5
 8010da4:	69fb      	ldr	r3, [r7, #28]
 8010da6:	4413      	add	r3, r2
 8010da8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010dac:	691b      	ldr	r3, [r3, #16]
 8010dae:	69ba      	ldr	r2, [r7, #24]
 8010db0:	0151      	lsls	r1, r2, #5
 8010db2:	69fa      	ldr	r2, [r7, #28]
 8010db4:	440a      	add	r2, r1
 8010db6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010dba:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8010dbe:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8010dc0:	69bb      	ldr	r3, [r7, #24]
 8010dc2:	015a      	lsls	r2, r3, #5
 8010dc4:	69fb      	ldr	r3, [r7, #28]
 8010dc6:	4413      	add	r3, r2
 8010dc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010dcc:	691a      	ldr	r2, [r3, #16]
 8010dce:	8afb      	ldrh	r3, [r7, #22]
 8010dd0:	075b      	lsls	r3, r3, #29
 8010dd2:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8010dd6:	69b9      	ldr	r1, [r7, #24]
 8010dd8:	0148      	lsls	r0, r1, #5
 8010dda:	69f9      	ldr	r1, [r7, #28]
 8010ddc:	4401      	add	r1, r0
 8010dde:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8010de2:	4313      	orrs	r3, r2
 8010de4:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8010de6:	69bb      	ldr	r3, [r7, #24]
 8010de8:	015a      	lsls	r2, r3, #5
 8010dea:	69fb      	ldr	r3, [r7, #28]
 8010dec:	4413      	add	r3, r2
 8010dee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010df2:	691a      	ldr	r2, [r3, #16]
 8010df4:	68bb      	ldr	r3, [r7, #8]
 8010df6:	691b      	ldr	r3, [r3, #16]
 8010df8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010dfc:	69b9      	ldr	r1, [r7, #24]
 8010dfe:	0148      	lsls	r0, r1, #5
 8010e00:	69f9      	ldr	r1, [r7, #28]
 8010e02:	4401      	add	r1, r0
 8010e04:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8010e08:	4313      	orrs	r3, r2
 8010e0a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8010e0c:	79fb      	ldrb	r3, [r7, #7]
 8010e0e:	2b01      	cmp	r3, #1
 8010e10:	d14b      	bne.n	8010eaa <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8010e12:	68bb      	ldr	r3, [r7, #8]
 8010e14:	69db      	ldr	r3, [r3, #28]
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d009      	beq.n	8010e2e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8010e1a:	69bb      	ldr	r3, [r7, #24]
 8010e1c:	015a      	lsls	r2, r3, #5
 8010e1e:	69fb      	ldr	r3, [r7, #28]
 8010e20:	4413      	add	r3, r2
 8010e22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010e26:	461a      	mov	r2, r3
 8010e28:	68bb      	ldr	r3, [r7, #8]
 8010e2a:	69db      	ldr	r3, [r3, #28]
 8010e2c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8010e2e:	68bb      	ldr	r3, [r7, #8]
 8010e30:	791b      	ldrb	r3, [r3, #4]
 8010e32:	2b01      	cmp	r3, #1
 8010e34:	d128      	bne.n	8010e88 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010e36:	69fb      	ldr	r3, [r7, #28]
 8010e38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010e3c:	689b      	ldr	r3, [r3, #8]
 8010e3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d110      	bne.n	8010e68 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8010e46:	69bb      	ldr	r3, [r7, #24]
 8010e48:	015a      	lsls	r2, r3, #5
 8010e4a:	69fb      	ldr	r3, [r7, #28]
 8010e4c:	4413      	add	r3, r2
 8010e4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010e52:	681b      	ldr	r3, [r3, #0]
 8010e54:	69ba      	ldr	r2, [r7, #24]
 8010e56:	0151      	lsls	r1, r2, #5
 8010e58:	69fa      	ldr	r2, [r7, #28]
 8010e5a:	440a      	add	r2, r1
 8010e5c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010e60:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8010e64:	6013      	str	r3, [r2, #0]
 8010e66:	e00f      	b.n	8010e88 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8010e68:	69bb      	ldr	r3, [r7, #24]
 8010e6a:	015a      	lsls	r2, r3, #5
 8010e6c:	69fb      	ldr	r3, [r7, #28]
 8010e6e:	4413      	add	r3, r2
 8010e70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	69ba      	ldr	r2, [r7, #24]
 8010e78:	0151      	lsls	r1, r2, #5
 8010e7a:	69fa      	ldr	r2, [r7, #28]
 8010e7c:	440a      	add	r2, r1
 8010e7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010e82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010e86:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010e88:	69bb      	ldr	r3, [r7, #24]
 8010e8a:	015a      	lsls	r2, r3, #5
 8010e8c:	69fb      	ldr	r3, [r7, #28]
 8010e8e:	4413      	add	r3, r2
 8010e90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	69ba      	ldr	r2, [r7, #24]
 8010e98:	0151      	lsls	r1, r2, #5
 8010e9a:	69fa      	ldr	r2, [r7, #28]
 8010e9c:	440a      	add	r2, r1
 8010e9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010ea2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8010ea6:	6013      	str	r3, [r2, #0]
 8010ea8:	e166      	b.n	8011178 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010eaa:	69bb      	ldr	r3, [r7, #24]
 8010eac:	015a      	lsls	r2, r3, #5
 8010eae:	69fb      	ldr	r3, [r7, #28]
 8010eb0:	4413      	add	r3, r2
 8010eb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010eb6:	681b      	ldr	r3, [r3, #0]
 8010eb8:	69ba      	ldr	r2, [r7, #24]
 8010eba:	0151      	lsls	r1, r2, #5
 8010ebc:	69fa      	ldr	r2, [r7, #28]
 8010ebe:	440a      	add	r2, r1
 8010ec0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010ec4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8010ec8:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8010eca:	68bb      	ldr	r3, [r7, #8]
 8010ecc:	791b      	ldrb	r3, [r3, #4]
 8010ece:	2b01      	cmp	r3, #1
 8010ed0:	d015      	beq.n	8010efe <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8010ed2:	68bb      	ldr	r3, [r7, #8]
 8010ed4:	691b      	ldr	r3, [r3, #16]
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	f000 814e 	beq.w	8011178 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8010edc:	69fb      	ldr	r3, [r7, #28]
 8010ede:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010ee2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010ee4:	68bb      	ldr	r3, [r7, #8]
 8010ee6:	781b      	ldrb	r3, [r3, #0]
 8010ee8:	f003 030f 	and.w	r3, r3, #15
 8010eec:	2101      	movs	r1, #1
 8010eee:	fa01 f303 	lsl.w	r3, r1, r3
 8010ef2:	69f9      	ldr	r1, [r7, #28]
 8010ef4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010ef8:	4313      	orrs	r3, r2
 8010efa:	634b      	str	r3, [r1, #52]	@ 0x34
 8010efc:	e13c      	b.n	8011178 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010efe:	69fb      	ldr	r3, [r7, #28]
 8010f00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010f04:	689b      	ldr	r3, [r3, #8]
 8010f06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d110      	bne.n	8010f30 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8010f0e:	69bb      	ldr	r3, [r7, #24]
 8010f10:	015a      	lsls	r2, r3, #5
 8010f12:	69fb      	ldr	r3, [r7, #28]
 8010f14:	4413      	add	r3, r2
 8010f16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010f1a:	681b      	ldr	r3, [r3, #0]
 8010f1c:	69ba      	ldr	r2, [r7, #24]
 8010f1e:	0151      	lsls	r1, r2, #5
 8010f20:	69fa      	ldr	r2, [r7, #28]
 8010f22:	440a      	add	r2, r1
 8010f24:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010f28:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8010f2c:	6013      	str	r3, [r2, #0]
 8010f2e:	e00f      	b.n	8010f50 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8010f30:	69bb      	ldr	r3, [r7, #24]
 8010f32:	015a      	lsls	r2, r3, #5
 8010f34:	69fb      	ldr	r3, [r7, #28]
 8010f36:	4413      	add	r3, r2
 8010f38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	69ba      	ldr	r2, [r7, #24]
 8010f40:	0151      	lsls	r1, r2, #5
 8010f42:	69fa      	ldr	r2, [r7, #28]
 8010f44:	440a      	add	r2, r1
 8010f46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010f4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010f4e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8010f50:	68bb      	ldr	r3, [r7, #8]
 8010f52:	68d9      	ldr	r1, [r3, #12]
 8010f54:	68bb      	ldr	r3, [r7, #8]
 8010f56:	781a      	ldrb	r2, [r3, #0]
 8010f58:	68bb      	ldr	r3, [r7, #8]
 8010f5a:	691b      	ldr	r3, [r3, #16]
 8010f5c:	b298      	uxth	r0, r3
 8010f5e:	79fb      	ldrb	r3, [r7, #7]
 8010f60:	9300      	str	r3, [sp, #0]
 8010f62:	4603      	mov	r3, r0
 8010f64:	68f8      	ldr	r0, [r7, #12]
 8010f66:	f000 f9b9 	bl	80112dc <USB_WritePacket>
 8010f6a:	e105      	b.n	8011178 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8010f6c:	69bb      	ldr	r3, [r7, #24]
 8010f6e:	015a      	lsls	r2, r3, #5
 8010f70:	69fb      	ldr	r3, [r7, #28]
 8010f72:	4413      	add	r3, r2
 8010f74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010f78:	691b      	ldr	r3, [r3, #16]
 8010f7a:	69ba      	ldr	r2, [r7, #24]
 8010f7c:	0151      	lsls	r1, r2, #5
 8010f7e:	69fa      	ldr	r2, [r7, #28]
 8010f80:	440a      	add	r2, r1
 8010f82:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010f86:	0cdb      	lsrs	r3, r3, #19
 8010f88:	04db      	lsls	r3, r3, #19
 8010f8a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8010f8c:	69bb      	ldr	r3, [r7, #24]
 8010f8e:	015a      	lsls	r2, r3, #5
 8010f90:	69fb      	ldr	r3, [r7, #28]
 8010f92:	4413      	add	r3, r2
 8010f94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010f98:	691b      	ldr	r3, [r3, #16]
 8010f9a:	69ba      	ldr	r2, [r7, #24]
 8010f9c:	0151      	lsls	r1, r2, #5
 8010f9e:	69fa      	ldr	r2, [r7, #28]
 8010fa0:	440a      	add	r2, r1
 8010fa2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010fa6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8010faa:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8010fae:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8010fb0:	69bb      	ldr	r3, [r7, #24]
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d132      	bne.n	801101c <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8010fb6:	68bb      	ldr	r3, [r7, #8]
 8010fb8:	691b      	ldr	r3, [r3, #16]
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d003      	beq.n	8010fc6 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8010fbe:	68bb      	ldr	r3, [r7, #8]
 8010fc0:	689a      	ldr	r2, [r3, #8]
 8010fc2:	68bb      	ldr	r3, [r7, #8]
 8010fc4:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8010fc6:	68bb      	ldr	r3, [r7, #8]
 8010fc8:	689a      	ldr	r2, [r3, #8]
 8010fca:	68bb      	ldr	r3, [r7, #8]
 8010fcc:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8010fce:	69bb      	ldr	r3, [r7, #24]
 8010fd0:	015a      	lsls	r2, r3, #5
 8010fd2:	69fb      	ldr	r3, [r7, #28]
 8010fd4:	4413      	add	r3, r2
 8010fd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010fda:	691a      	ldr	r2, [r3, #16]
 8010fdc:	68bb      	ldr	r3, [r7, #8]
 8010fde:	6a1b      	ldr	r3, [r3, #32]
 8010fe0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010fe4:	69b9      	ldr	r1, [r7, #24]
 8010fe6:	0148      	lsls	r0, r1, #5
 8010fe8:	69f9      	ldr	r1, [r7, #28]
 8010fea:	4401      	add	r1, r0
 8010fec:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8010ff0:	4313      	orrs	r3, r2
 8010ff2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010ff4:	69bb      	ldr	r3, [r7, #24]
 8010ff6:	015a      	lsls	r2, r3, #5
 8010ff8:	69fb      	ldr	r3, [r7, #28]
 8010ffa:	4413      	add	r3, r2
 8010ffc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011000:	691b      	ldr	r3, [r3, #16]
 8011002:	69ba      	ldr	r2, [r7, #24]
 8011004:	0151      	lsls	r1, r2, #5
 8011006:	69fa      	ldr	r2, [r7, #28]
 8011008:	440a      	add	r2, r1
 801100a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801100e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8011012:	6113      	str	r3, [r2, #16]
 8011014:	e062      	b.n	80110dc <USB_EPStartXfer+0x490>
 8011016:	bf00      	nop
 8011018:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 801101c:	68bb      	ldr	r3, [r7, #8]
 801101e:	691b      	ldr	r3, [r3, #16]
 8011020:	2b00      	cmp	r3, #0
 8011022:	d123      	bne.n	801106c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8011024:	69bb      	ldr	r3, [r7, #24]
 8011026:	015a      	lsls	r2, r3, #5
 8011028:	69fb      	ldr	r3, [r7, #28]
 801102a:	4413      	add	r3, r2
 801102c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011030:	691a      	ldr	r2, [r3, #16]
 8011032:	68bb      	ldr	r3, [r7, #8]
 8011034:	689b      	ldr	r3, [r3, #8]
 8011036:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801103a:	69b9      	ldr	r1, [r7, #24]
 801103c:	0148      	lsls	r0, r1, #5
 801103e:	69f9      	ldr	r1, [r7, #28]
 8011040:	4401      	add	r1, r0
 8011042:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8011046:	4313      	orrs	r3, r2
 8011048:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801104a:	69bb      	ldr	r3, [r7, #24]
 801104c:	015a      	lsls	r2, r3, #5
 801104e:	69fb      	ldr	r3, [r7, #28]
 8011050:	4413      	add	r3, r2
 8011052:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011056:	691b      	ldr	r3, [r3, #16]
 8011058:	69ba      	ldr	r2, [r7, #24]
 801105a:	0151      	lsls	r1, r2, #5
 801105c:	69fa      	ldr	r2, [r7, #28]
 801105e:	440a      	add	r2, r1
 8011060:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011064:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8011068:	6113      	str	r3, [r2, #16]
 801106a:	e037      	b.n	80110dc <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801106c:	68bb      	ldr	r3, [r7, #8]
 801106e:	691a      	ldr	r2, [r3, #16]
 8011070:	68bb      	ldr	r3, [r7, #8]
 8011072:	689b      	ldr	r3, [r3, #8]
 8011074:	4413      	add	r3, r2
 8011076:	1e5a      	subs	r2, r3, #1
 8011078:	68bb      	ldr	r3, [r7, #8]
 801107a:	689b      	ldr	r3, [r3, #8]
 801107c:	fbb2 f3f3 	udiv	r3, r2, r3
 8011080:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8011082:	68bb      	ldr	r3, [r7, #8]
 8011084:	689b      	ldr	r3, [r3, #8]
 8011086:	8afa      	ldrh	r2, [r7, #22]
 8011088:	fb03 f202 	mul.w	r2, r3, r2
 801108c:	68bb      	ldr	r3, [r7, #8]
 801108e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8011090:	69bb      	ldr	r3, [r7, #24]
 8011092:	015a      	lsls	r2, r3, #5
 8011094:	69fb      	ldr	r3, [r7, #28]
 8011096:	4413      	add	r3, r2
 8011098:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801109c:	691a      	ldr	r2, [r3, #16]
 801109e:	8afb      	ldrh	r3, [r7, #22]
 80110a0:	04d9      	lsls	r1, r3, #19
 80110a2:	4b38      	ldr	r3, [pc, #224]	@ (8011184 <USB_EPStartXfer+0x538>)
 80110a4:	400b      	ands	r3, r1
 80110a6:	69b9      	ldr	r1, [r7, #24]
 80110a8:	0148      	lsls	r0, r1, #5
 80110aa:	69f9      	ldr	r1, [r7, #28]
 80110ac:	4401      	add	r1, r0
 80110ae:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80110b2:	4313      	orrs	r3, r2
 80110b4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80110b6:	69bb      	ldr	r3, [r7, #24]
 80110b8:	015a      	lsls	r2, r3, #5
 80110ba:	69fb      	ldr	r3, [r7, #28]
 80110bc:	4413      	add	r3, r2
 80110be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80110c2:	691a      	ldr	r2, [r3, #16]
 80110c4:	68bb      	ldr	r3, [r7, #8]
 80110c6:	6a1b      	ldr	r3, [r3, #32]
 80110c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80110cc:	69b9      	ldr	r1, [r7, #24]
 80110ce:	0148      	lsls	r0, r1, #5
 80110d0:	69f9      	ldr	r1, [r7, #28]
 80110d2:	4401      	add	r1, r0
 80110d4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80110d8:	4313      	orrs	r3, r2
 80110da:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80110dc:	79fb      	ldrb	r3, [r7, #7]
 80110de:	2b01      	cmp	r3, #1
 80110e0:	d10d      	bne.n	80110fe <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80110e2:	68bb      	ldr	r3, [r7, #8]
 80110e4:	68db      	ldr	r3, [r3, #12]
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d009      	beq.n	80110fe <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80110ea:	68bb      	ldr	r3, [r7, #8]
 80110ec:	68d9      	ldr	r1, [r3, #12]
 80110ee:	69bb      	ldr	r3, [r7, #24]
 80110f0:	015a      	lsls	r2, r3, #5
 80110f2:	69fb      	ldr	r3, [r7, #28]
 80110f4:	4413      	add	r3, r2
 80110f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80110fa:	460a      	mov	r2, r1
 80110fc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80110fe:	68bb      	ldr	r3, [r7, #8]
 8011100:	791b      	ldrb	r3, [r3, #4]
 8011102:	2b01      	cmp	r3, #1
 8011104:	d128      	bne.n	8011158 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011106:	69fb      	ldr	r3, [r7, #28]
 8011108:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801110c:	689b      	ldr	r3, [r3, #8]
 801110e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011112:	2b00      	cmp	r3, #0
 8011114:	d110      	bne.n	8011138 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8011116:	69bb      	ldr	r3, [r7, #24]
 8011118:	015a      	lsls	r2, r3, #5
 801111a:	69fb      	ldr	r3, [r7, #28]
 801111c:	4413      	add	r3, r2
 801111e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	69ba      	ldr	r2, [r7, #24]
 8011126:	0151      	lsls	r1, r2, #5
 8011128:	69fa      	ldr	r2, [r7, #28]
 801112a:	440a      	add	r2, r1
 801112c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011130:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8011134:	6013      	str	r3, [r2, #0]
 8011136:	e00f      	b.n	8011158 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8011138:	69bb      	ldr	r3, [r7, #24]
 801113a:	015a      	lsls	r2, r3, #5
 801113c:	69fb      	ldr	r3, [r7, #28]
 801113e:	4413      	add	r3, r2
 8011140:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011144:	681b      	ldr	r3, [r3, #0]
 8011146:	69ba      	ldr	r2, [r7, #24]
 8011148:	0151      	lsls	r1, r2, #5
 801114a:	69fa      	ldr	r2, [r7, #28]
 801114c:	440a      	add	r2, r1
 801114e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011152:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8011156:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8011158:	69bb      	ldr	r3, [r7, #24]
 801115a:	015a      	lsls	r2, r3, #5
 801115c:	69fb      	ldr	r3, [r7, #28]
 801115e:	4413      	add	r3, r2
 8011160:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	69ba      	ldr	r2, [r7, #24]
 8011168:	0151      	lsls	r1, r2, #5
 801116a:	69fa      	ldr	r2, [r7, #28]
 801116c:	440a      	add	r2, r1
 801116e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011172:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8011176:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011178:	2300      	movs	r3, #0
}
 801117a:	4618      	mov	r0, r3
 801117c:	3720      	adds	r7, #32
 801117e:	46bd      	mov	sp, r7
 8011180:	bd80      	pop	{r7, pc}
 8011182:	bf00      	nop
 8011184:	1ff80000 	.word	0x1ff80000

08011188 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011188:	b480      	push	{r7}
 801118a:	b087      	sub	sp, #28
 801118c:	af00      	add	r7, sp, #0
 801118e:	6078      	str	r0, [r7, #4]
 8011190:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8011192:	2300      	movs	r3, #0
 8011194:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8011196:	2300      	movs	r3, #0
 8011198:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801119e:	683b      	ldr	r3, [r7, #0]
 80111a0:	785b      	ldrb	r3, [r3, #1]
 80111a2:	2b01      	cmp	r3, #1
 80111a4:	d14a      	bne.n	801123c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80111a6:	683b      	ldr	r3, [r7, #0]
 80111a8:	781b      	ldrb	r3, [r3, #0]
 80111aa:	015a      	lsls	r2, r3, #5
 80111ac:	693b      	ldr	r3, [r7, #16]
 80111ae:	4413      	add	r3, r2
 80111b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80111b4:	681b      	ldr	r3, [r3, #0]
 80111b6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80111ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80111be:	f040 8086 	bne.w	80112ce <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80111c2:	683b      	ldr	r3, [r7, #0]
 80111c4:	781b      	ldrb	r3, [r3, #0]
 80111c6:	015a      	lsls	r2, r3, #5
 80111c8:	693b      	ldr	r3, [r7, #16]
 80111ca:	4413      	add	r3, r2
 80111cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	683a      	ldr	r2, [r7, #0]
 80111d4:	7812      	ldrb	r2, [r2, #0]
 80111d6:	0151      	lsls	r1, r2, #5
 80111d8:	693a      	ldr	r2, [r7, #16]
 80111da:	440a      	add	r2, r1
 80111dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80111e0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80111e4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80111e6:	683b      	ldr	r3, [r7, #0]
 80111e8:	781b      	ldrb	r3, [r3, #0]
 80111ea:	015a      	lsls	r2, r3, #5
 80111ec:	693b      	ldr	r3, [r7, #16]
 80111ee:	4413      	add	r3, r2
 80111f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80111f4:	681b      	ldr	r3, [r3, #0]
 80111f6:	683a      	ldr	r2, [r7, #0]
 80111f8:	7812      	ldrb	r2, [r2, #0]
 80111fa:	0151      	lsls	r1, r2, #5
 80111fc:	693a      	ldr	r2, [r7, #16]
 80111fe:	440a      	add	r2, r1
 8011200:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011204:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011208:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801120a:	68fb      	ldr	r3, [r7, #12]
 801120c:	3301      	adds	r3, #1
 801120e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	f242 7210 	movw	r2, #10000	@ 0x2710
 8011216:	4293      	cmp	r3, r2
 8011218:	d902      	bls.n	8011220 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 801121a:	2301      	movs	r3, #1
 801121c:	75fb      	strb	r3, [r7, #23]
          break;
 801121e:	e056      	b.n	80112ce <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8011220:	683b      	ldr	r3, [r7, #0]
 8011222:	781b      	ldrb	r3, [r3, #0]
 8011224:	015a      	lsls	r2, r3, #5
 8011226:	693b      	ldr	r3, [r7, #16]
 8011228:	4413      	add	r3, r2
 801122a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801122e:	681b      	ldr	r3, [r3, #0]
 8011230:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011234:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011238:	d0e7      	beq.n	801120a <USB_EPStopXfer+0x82>
 801123a:	e048      	b.n	80112ce <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801123c:	683b      	ldr	r3, [r7, #0]
 801123e:	781b      	ldrb	r3, [r3, #0]
 8011240:	015a      	lsls	r2, r3, #5
 8011242:	693b      	ldr	r3, [r7, #16]
 8011244:	4413      	add	r3, r2
 8011246:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801124a:	681b      	ldr	r3, [r3, #0]
 801124c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011250:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011254:	d13b      	bne.n	80112ce <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8011256:	683b      	ldr	r3, [r7, #0]
 8011258:	781b      	ldrb	r3, [r3, #0]
 801125a:	015a      	lsls	r2, r3, #5
 801125c:	693b      	ldr	r3, [r7, #16]
 801125e:	4413      	add	r3, r2
 8011260:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	683a      	ldr	r2, [r7, #0]
 8011268:	7812      	ldrb	r2, [r2, #0]
 801126a:	0151      	lsls	r1, r2, #5
 801126c:	693a      	ldr	r2, [r7, #16]
 801126e:	440a      	add	r2, r1
 8011270:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011274:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8011278:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 801127a:	683b      	ldr	r3, [r7, #0]
 801127c:	781b      	ldrb	r3, [r3, #0]
 801127e:	015a      	lsls	r2, r3, #5
 8011280:	693b      	ldr	r3, [r7, #16]
 8011282:	4413      	add	r3, r2
 8011284:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	683a      	ldr	r2, [r7, #0]
 801128c:	7812      	ldrb	r2, [r2, #0]
 801128e:	0151      	lsls	r1, r2, #5
 8011290:	693a      	ldr	r2, [r7, #16]
 8011292:	440a      	add	r2, r1
 8011294:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011298:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801129c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801129e:	68fb      	ldr	r3, [r7, #12]
 80112a0:	3301      	adds	r3, #1
 80112a2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80112a4:	68fb      	ldr	r3, [r7, #12]
 80112a6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80112aa:	4293      	cmp	r3, r2
 80112ac:	d902      	bls.n	80112b4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80112ae:	2301      	movs	r3, #1
 80112b0:	75fb      	strb	r3, [r7, #23]
          break;
 80112b2:	e00c      	b.n	80112ce <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80112b4:	683b      	ldr	r3, [r7, #0]
 80112b6:	781b      	ldrb	r3, [r3, #0]
 80112b8:	015a      	lsls	r2, r3, #5
 80112ba:	693b      	ldr	r3, [r7, #16]
 80112bc:	4413      	add	r3, r2
 80112be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80112c2:	681b      	ldr	r3, [r3, #0]
 80112c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80112c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80112cc:	d0e7      	beq.n	801129e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80112ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80112d0:	4618      	mov	r0, r3
 80112d2:	371c      	adds	r7, #28
 80112d4:	46bd      	mov	sp, r7
 80112d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112da:	4770      	bx	lr

080112dc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80112dc:	b480      	push	{r7}
 80112de:	b089      	sub	sp, #36	@ 0x24
 80112e0:	af00      	add	r7, sp, #0
 80112e2:	60f8      	str	r0, [r7, #12]
 80112e4:	60b9      	str	r1, [r7, #8]
 80112e6:	4611      	mov	r1, r2
 80112e8:	461a      	mov	r2, r3
 80112ea:	460b      	mov	r3, r1
 80112ec:	71fb      	strb	r3, [r7, #7]
 80112ee:	4613      	mov	r3, r2
 80112f0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80112f2:	68fb      	ldr	r3, [r7, #12]
 80112f4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80112f6:	68bb      	ldr	r3, [r7, #8]
 80112f8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80112fa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d123      	bne.n	801134a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8011302:	88bb      	ldrh	r3, [r7, #4]
 8011304:	3303      	adds	r3, #3
 8011306:	089b      	lsrs	r3, r3, #2
 8011308:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 801130a:	2300      	movs	r3, #0
 801130c:	61bb      	str	r3, [r7, #24]
 801130e:	e018      	b.n	8011342 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8011310:	79fb      	ldrb	r3, [r7, #7]
 8011312:	031a      	lsls	r2, r3, #12
 8011314:	697b      	ldr	r3, [r7, #20]
 8011316:	4413      	add	r3, r2
 8011318:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801131c:	461a      	mov	r2, r3
 801131e:	69fb      	ldr	r3, [r7, #28]
 8011320:	681b      	ldr	r3, [r3, #0]
 8011322:	6013      	str	r3, [r2, #0]
      pSrc++;
 8011324:	69fb      	ldr	r3, [r7, #28]
 8011326:	3301      	adds	r3, #1
 8011328:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801132a:	69fb      	ldr	r3, [r7, #28]
 801132c:	3301      	adds	r3, #1
 801132e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8011330:	69fb      	ldr	r3, [r7, #28]
 8011332:	3301      	adds	r3, #1
 8011334:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8011336:	69fb      	ldr	r3, [r7, #28]
 8011338:	3301      	adds	r3, #1
 801133a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 801133c:	69bb      	ldr	r3, [r7, #24]
 801133e:	3301      	adds	r3, #1
 8011340:	61bb      	str	r3, [r7, #24]
 8011342:	69ba      	ldr	r2, [r7, #24]
 8011344:	693b      	ldr	r3, [r7, #16]
 8011346:	429a      	cmp	r2, r3
 8011348:	d3e2      	bcc.n	8011310 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801134a:	2300      	movs	r3, #0
}
 801134c:	4618      	mov	r0, r3
 801134e:	3724      	adds	r7, #36	@ 0x24
 8011350:	46bd      	mov	sp, r7
 8011352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011356:	4770      	bx	lr

08011358 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8011358:	b480      	push	{r7}
 801135a:	b08b      	sub	sp, #44	@ 0x2c
 801135c:	af00      	add	r7, sp, #0
 801135e:	60f8      	str	r0, [r7, #12]
 8011360:	60b9      	str	r1, [r7, #8]
 8011362:	4613      	mov	r3, r2
 8011364:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011366:	68fb      	ldr	r3, [r7, #12]
 8011368:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 801136a:	68bb      	ldr	r3, [r7, #8]
 801136c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 801136e:	88fb      	ldrh	r3, [r7, #6]
 8011370:	089b      	lsrs	r3, r3, #2
 8011372:	b29b      	uxth	r3, r3
 8011374:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8011376:	88fb      	ldrh	r3, [r7, #6]
 8011378:	f003 0303 	and.w	r3, r3, #3
 801137c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 801137e:	2300      	movs	r3, #0
 8011380:	623b      	str	r3, [r7, #32]
 8011382:	e014      	b.n	80113ae <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8011384:	69bb      	ldr	r3, [r7, #24]
 8011386:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801138a:	681a      	ldr	r2, [r3, #0]
 801138c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801138e:	601a      	str	r2, [r3, #0]
    pDest++;
 8011390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011392:	3301      	adds	r3, #1
 8011394:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8011396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011398:	3301      	adds	r3, #1
 801139a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 801139c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801139e:	3301      	adds	r3, #1
 80113a0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80113a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80113a4:	3301      	adds	r3, #1
 80113a6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80113a8:	6a3b      	ldr	r3, [r7, #32]
 80113aa:	3301      	adds	r3, #1
 80113ac:	623b      	str	r3, [r7, #32]
 80113ae:	6a3a      	ldr	r2, [r7, #32]
 80113b0:	697b      	ldr	r3, [r7, #20]
 80113b2:	429a      	cmp	r2, r3
 80113b4:	d3e6      	bcc.n	8011384 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80113b6:	8bfb      	ldrh	r3, [r7, #30]
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d01e      	beq.n	80113fa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80113bc:	2300      	movs	r3, #0
 80113be:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80113c0:	69bb      	ldr	r3, [r7, #24]
 80113c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80113c6:	461a      	mov	r2, r3
 80113c8:	f107 0310 	add.w	r3, r7, #16
 80113cc:	6812      	ldr	r2, [r2, #0]
 80113ce:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80113d0:	693a      	ldr	r2, [r7, #16]
 80113d2:	6a3b      	ldr	r3, [r7, #32]
 80113d4:	b2db      	uxtb	r3, r3
 80113d6:	00db      	lsls	r3, r3, #3
 80113d8:	fa22 f303 	lsr.w	r3, r2, r3
 80113dc:	b2da      	uxtb	r2, r3
 80113de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80113e0:	701a      	strb	r2, [r3, #0]
      i++;
 80113e2:	6a3b      	ldr	r3, [r7, #32]
 80113e4:	3301      	adds	r3, #1
 80113e6:	623b      	str	r3, [r7, #32]
      pDest++;
 80113e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80113ea:	3301      	adds	r3, #1
 80113ec:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80113ee:	8bfb      	ldrh	r3, [r7, #30]
 80113f0:	3b01      	subs	r3, #1
 80113f2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80113f4:	8bfb      	ldrh	r3, [r7, #30]
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d1ea      	bne.n	80113d0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80113fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80113fc:	4618      	mov	r0, r3
 80113fe:	372c      	adds	r7, #44	@ 0x2c
 8011400:	46bd      	mov	sp, r7
 8011402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011406:	4770      	bx	lr

08011408 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8011408:	b480      	push	{r7}
 801140a:	b085      	sub	sp, #20
 801140c:	af00      	add	r7, sp, #0
 801140e:	6078      	str	r0, [r7, #4]
 8011410:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011416:	683b      	ldr	r3, [r7, #0]
 8011418:	781b      	ldrb	r3, [r3, #0]
 801141a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801141c:	683b      	ldr	r3, [r7, #0]
 801141e:	785b      	ldrb	r3, [r3, #1]
 8011420:	2b01      	cmp	r3, #1
 8011422:	d12c      	bne.n	801147e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8011424:	68bb      	ldr	r3, [r7, #8]
 8011426:	015a      	lsls	r2, r3, #5
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	4413      	add	r3, r2
 801142c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	2b00      	cmp	r3, #0
 8011434:	db12      	blt.n	801145c <USB_EPSetStall+0x54>
 8011436:	68bb      	ldr	r3, [r7, #8]
 8011438:	2b00      	cmp	r3, #0
 801143a:	d00f      	beq.n	801145c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 801143c:	68bb      	ldr	r3, [r7, #8]
 801143e:	015a      	lsls	r2, r3, #5
 8011440:	68fb      	ldr	r3, [r7, #12]
 8011442:	4413      	add	r3, r2
 8011444:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	68ba      	ldr	r2, [r7, #8]
 801144c:	0151      	lsls	r1, r2, #5
 801144e:	68fa      	ldr	r2, [r7, #12]
 8011450:	440a      	add	r2, r1
 8011452:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011456:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 801145a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 801145c:	68bb      	ldr	r3, [r7, #8]
 801145e:	015a      	lsls	r2, r3, #5
 8011460:	68fb      	ldr	r3, [r7, #12]
 8011462:	4413      	add	r3, r2
 8011464:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	68ba      	ldr	r2, [r7, #8]
 801146c:	0151      	lsls	r1, r2, #5
 801146e:	68fa      	ldr	r2, [r7, #12]
 8011470:	440a      	add	r2, r1
 8011472:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011476:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 801147a:	6013      	str	r3, [r2, #0]
 801147c:	e02b      	b.n	80114d6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801147e:	68bb      	ldr	r3, [r7, #8]
 8011480:	015a      	lsls	r2, r3, #5
 8011482:	68fb      	ldr	r3, [r7, #12]
 8011484:	4413      	add	r3, r2
 8011486:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	2b00      	cmp	r3, #0
 801148e:	db12      	blt.n	80114b6 <USB_EPSetStall+0xae>
 8011490:	68bb      	ldr	r3, [r7, #8]
 8011492:	2b00      	cmp	r3, #0
 8011494:	d00f      	beq.n	80114b6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8011496:	68bb      	ldr	r3, [r7, #8]
 8011498:	015a      	lsls	r2, r3, #5
 801149a:	68fb      	ldr	r3, [r7, #12]
 801149c:	4413      	add	r3, r2
 801149e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	68ba      	ldr	r2, [r7, #8]
 80114a6:	0151      	lsls	r1, r2, #5
 80114a8:	68fa      	ldr	r2, [r7, #12]
 80114aa:	440a      	add	r2, r1
 80114ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80114b0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80114b4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80114b6:	68bb      	ldr	r3, [r7, #8]
 80114b8:	015a      	lsls	r2, r3, #5
 80114ba:	68fb      	ldr	r3, [r7, #12]
 80114bc:	4413      	add	r3, r2
 80114be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	68ba      	ldr	r2, [r7, #8]
 80114c6:	0151      	lsls	r1, r2, #5
 80114c8:	68fa      	ldr	r2, [r7, #12]
 80114ca:	440a      	add	r2, r1
 80114cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80114d0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80114d4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80114d6:	2300      	movs	r3, #0
}
 80114d8:	4618      	mov	r0, r3
 80114da:	3714      	adds	r7, #20
 80114dc:	46bd      	mov	sp, r7
 80114de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114e2:	4770      	bx	lr

080114e4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80114e4:	b480      	push	{r7}
 80114e6:	b085      	sub	sp, #20
 80114e8:	af00      	add	r7, sp, #0
 80114ea:	6078      	str	r0, [r7, #4]
 80114ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80114f2:	683b      	ldr	r3, [r7, #0]
 80114f4:	781b      	ldrb	r3, [r3, #0]
 80114f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80114f8:	683b      	ldr	r3, [r7, #0]
 80114fa:	785b      	ldrb	r3, [r3, #1]
 80114fc:	2b01      	cmp	r3, #1
 80114fe:	d128      	bne.n	8011552 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8011500:	68bb      	ldr	r3, [r7, #8]
 8011502:	015a      	lsls	r2, r3, #5
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	4413      	add	r3, r2
 8011508:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801150c:	681b      	ldr	r3, [r3, #0]
 801150e:	68ba      	ldr	r2, [r7, #8]
 8011510:	0151      	lsls	r1, r2, #5
 8011512:	68fa      	ldr	r2, [r7, #12]
 8011514:	440a      	add	r2, r1
 8011516:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801151a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 801151e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8011520:	683b      	ldr	r3, [r7, #0]
 8011522:	791b      	ldrb	r3, [r3, #4]
 8011524:	2b03      	cmp	r3, #3
 8011526:	d003      	beq.n	8011530 <USB_EPClearStall+0x4c>
 8011528:	683b      	ldr	r3, [r7, #0]
 801152a:	791b      	ldrb	r3, [r3, #4]
 801152c:	2b02      	cmp	r3, #2
 801152e:	d138      	bne.n	80115a2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8011530:	68bb      	ldr	r3, [r7, #8]
 8011532:	015a      	lsls	r2, r3, #5
 8011534:	68fb      	ldr	r3, [r7, #12]
 8011536:	4413      	add	r3, r2
 8011538:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801153c:	681b      	ldr	r3, [r3, #0]
 801153e:	68ba      	ldr	r2, [r7, #8]
 8011540:	0151      	lsls	r1, r2, #5
 8011542:	68fa      	ldr	r2, [r7, #12]
 8011544:	440a      	add	r2, r1
 8011546:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801154a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801154e:	6013      	str	r3, [r2, #0]
 8011550:	e027      	b.n	80115a2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8011552:	68bb      	ldr	r3, [r7, #8]
 8011554:	015a      	lsls	r2, r3, #5
 8011556:	68fb      	ldr	r3, [r7, #12]
 8011558:	4413      	add	r3, r2
 801155a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801155e:	681b      	ldr	r3, [r3, #0]
 8011560:	68ba      	ldr	r2, [r7, #8]
 8011562:	0151      	lsls	r1, r2, #5
 8011564:	68fa      	ldr	r2, [r7, #12]
 8011566:	440a      	add	r2, r1
 8011568:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801156c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8011570:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8011572:	683b      	ldr	r3, [r7, #0]
 8011574:	791b      	ldrb	r3, [r3, #4]
 8011576:	2b03      	cmp	r3, #3
 8011578:	d003      	beq.n	8011582 <USB_EPClearStall+0x9e>
 801157a:	683b      	ldr	r3, [r7, #0]
 801157c:	791b      	ldrb	r3, [r3, #4]
 801157e:	2b02      	cmp	r3, #2
 8011580:	d10f      	bne.n	80115a2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8011582:	68bb      	ldr	r3, [r7, #8]
 8011584:	015a      	lsls	r2, r3, #5
 8011586:	68fb      	ldr	r3, [r7, #12]
 8011588:	4413      	add	r3, r2
 801158a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801158e:	681b      	ldr	r3, [r3, #0]
 8011590:	68ba      	ldr	r2, [r7, #8]
 8011592:	0151      	lsls	r1, r2, #5
 8011594:	68fa      	ldr	r2, [r7, #12]
 8011596:	440a      	add	r2, r1
 8011598:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801159c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80115a0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80115a2:	2300      	movs	r3, #0
}
 80115a4:	4618      	mov	r0, r3
 80115a6:	3714      	adds	r7, #20
 80115a8:	46bd      	mov	sp, r7
 80115aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ae:	4770      	bx	lr

080115b0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80115b0:	b480      	push	{r7}
 80115b2:	b085      	sub	sp, #20
 80115b4:	af00      	add	r7, sp, #0
 80115b6:	6078      	str	r0, [r7, #4]
 80115b8:	460b      	mov	r3, r1
 80115ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80115c0:	68fb      	ldr	r3, [r7, #12]
 80115c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80115c6:	681b      	ldr	r3, [r3, #0]
 80115c8:	68fa      	ldr	r2, [r7, #12]
 80115ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80115ce:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80115d2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80115da:	681a      	ldr	r2, [r3, #0]
 80115dc:	78fb      	ldrb	r3, [r7, #3]
 80115de:	011b      	lsls	r3, r3, #4
 80115e0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80115e4:	68f9      	ldr	r1, [r7, #12]
 80115e6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80115ea:	4313      	orrs	r3, r2
 80115ec:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80115ee:	2300      	movs	r3, #0
}
 80115f0:	4618      	mov	r0, r3
 80115f2:	3714      	adds	r7, #20
 80115f4:	46bd      	mov	sp, r7
 80115f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115fa:	4770      	bx	lr

080115fc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80115fc:	b480      	push	{r7}
 80115fe:	b085      	sub	sp, #20
 8011600:	af00      	add	r7, sp, #0
 8011602:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8011608:	68fb      	ldr	r3, [r7, #12]
 801160a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801160e:	681b      	ldr	r3, [r3, #0]
 8011610:	68fa      	ldr	r2, [r7, #12]
 8011612:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8011616:	f023 0303 	bic.w	r3, r3, #3
 801161a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 801161c:	68fb      	ldr	r3, [r7, #12]
 801161e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011622:	685b      	ldr	r3, [r3, #4]
 8011624:	68fa      	ldr	r2, [r7, #12]
 8011626:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801162a:	f023 0302 	bic.w	r3, r3, #2
 801162e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011630:	2300      	movs	r3, #0
}
 8011632:	4618      	mov	r0, r3
 8011634:	3714      	adds	r7, #20
 8011636:	46bd      	mov	sp, r7
 8011638:	f85d 7b04 	ldr.w	r7, [sp], #4
 801163c:	4770      	bx	lr

0801163e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 801163e:	b480      	push	{r7}
 8011640:	b085      	sub	sp, #20
 8011642:	af00      	add	r7, sp, #0
 8011644:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801164a:	68fb      	ldr	r3, [r7, #12]
 801164c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8011650:	681b      	ldr	r3, [r3, #0]
 8011652:	68fa      	ldr	r2, [r7, #12]
 8011654:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8011658:	f023 0303 	bic.w	r3, r3, #3
 801165c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011664:	685b      	ldr	r3, [r3, #4]
 8011666:	68fa      	ldr	r2, [r7, #12]
 8011668:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801166c:	f043 0302 	orr.w	r3, r3, #2
 8011670:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011672:	2300      	movs	r3, #0
}
 8011674:	4618      	mov	r0, r3
 8011676:	3714      	adds	r7, #20
 8011678:	46bd      	mov	sp, r7
 801167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801167e:	4770      	bx	lr

08011680 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8011680:	b480      	push	{r7}
 8011682:	b085      	sub	sp, #20
 8011684:	af00      	add	r7, sp, #0
 8011686:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	695b      	ldr	r3, [r3, #20]
 801168c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	699b      	ldr	r3, [r3, #24]
 8011692:	68fa      	ldr	r2, [r7, #12]
 8011694:	4013      	ands	r3, r2
 8011696:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8011698:	68fb      	ldr	r3, [r7, #12]
}
 801169a:	4618      	mov	r0, r3
 801169c:	3714      	adds	r7, #20
 801169e:	46bd      	mov	sp, r7
 80116a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116a4:	4770      	bx	lr

080116a6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80116a6:	b480      	push	{r7}
 80116a8:	b085      	sub	sp, #20
 80116aa:	af00      	add	r7, sp, #0
 80116ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80116b2:	68fb      	ldr	r3, [r7, #12]
 80116b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80116b8:	699b      	ldr	r3, [r3, #24]
 80116ba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80116bc:	68fb      	ldr	r3, [r7, #12]
 80116be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80116c2:	69db      	ldr	r3, [r3, #28]
 80116c4:	68ba      	ldr	r2, [r7, #8]
 80116c6:	4013      	ands	r3, r2
 80116c8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80116ca:	68bb      	ldr	r3, [r7, #8]
 80116cc:	0c1b      	lsrs	r3, r3, #16
}
 80116ce:	4618      	mov	r0, r3
 80116d0:	3714      	adds	r7, #20
 80116d2:	46bd      	mov	sp, r7
 80116d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116d8:	4770      	bx	lr

080116da <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80116da:	b480      	push	{r7}
 80116dc:	b085      	sub	sp, #20
 80116de:	af00      	add	r7, sp, #0
 80116e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80116e6:	68fb      	ldr	r3, [r7, #12]
 80116e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80116ec:	699b      	ldr	r3, [r3, #24]
 80116ee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80116f0:	68fb      	ldr	r3, [r7, #12]
 80116f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80116f6:	69db      	ldr	r3, [r3, #28]
 80116f8:	68ba      	ldr	r2, [r7, #8]
 80116fa:	4013      	ands	r3, r2
 80116fc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80116fe:	68bb      	ldr	r3, [r7, #8]
 8011700:	b29b      	uxth	r3, r3
}
 8011702:	4618      	mov	r0, r3
 8011704:	3714      	adds	r7, #20
 8011706:	46bd      	mov	sp, r7
 8011708:	f85d 7b04 	ldr.w	r7, [sp], #4
 801170c:	4770      	bx	lr

0801170e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801170e:	b480      	push	{r7}
 8011710:	b085      	sub	sp, #20
 8011712:	af00      	add	r7, sp, #0
 8011714:	6078      	str	r0, [r7, #4]
 8011716:	460b      	mov	r3, r1
 8011718:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801171e:	78fb      	ldrb	r3, [r7, #3]
 8011720:	015a      	lsls	r2, r3, #5
 8011722:	68fb      	ldr	r3, [r7, #12]
 8011724:	4413      	add	r3, r2
 8011726:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801172a:	689b      	ldr	r3, [r3, #8]
 801172c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801172e:	68fb      	ldr	r3, [r7, #12]
 8011730:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011734:	695b      	ldr	r3, [r3, #20]
 8011736:	68ba      	ldr	r2, [r7, #8]
 8011738:	4013      	ands	r3, r2
 801173a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801173c:	68bb      	ldr	r3, [r7, #8]
}
 801173e:	4618      	mov	r0, r3
 8011740:	3714      	adds	r7, #20
 8011742:	46bd      	mov	sp, r7
 8011744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011748:	4770      	bx	lr

0801174a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801174a:	b480      	push	{r7}
 801174c:	b087      	sub	sp, #28
 801174e:	af00      	add	r7, sp, #0
 8011750:	6078      	str	r0, [r7, #4]
 8011752:	460b      	mov	r3, r1
 8011754:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 801175a:	697b      	ldr	r3, [r7, #20]
 801175c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011760:	691b      	ldr	r3, [r3, #16]
 8011762:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8011764:	697b      	ldr	r3, [r7, #20]
 8011766:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801176a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801176c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801176e:	78fb      	ldrb	r3, [r7, #3]
 8011770:	f003 030f 	and.w	r3, r3, #15
 8011774:	68fa      	ldr	r2, [r7, #12]
 8011776:	fa22 f303 	lsr.w	r3, r2, r3
 801177a:	01db      	lsls	r3, r3, #7
 801177c:	b2db      	uxtb	r3, r3
 801177e:	693a      	ldr	r2, [r7, #16]
 8011780:	4313      	orrs	r3, r2
 8011782:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8011784:	78fb      	ldrb	r3, [r7, #3]
 8011786:	015a      	lsls	r2, r3, #5
 8011788:	697b      	ldr	r3, [r7, #20]
 801178a:	4413      	add	r3, r2
 801178c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011790:	689b      	ldr	r3, [r3, #8]
 8011792:	693a      	ldr	r2, [r7, #16]
 8011794:	4013      	ands	r3, r2
 8011796:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8011798:	68bb      	ldr	r3, [r7, #8]
}
 801179a:	4618      	mov	r0, r3
 801179c:	371c      	adds	r7, #28
 801179e:	46bd      	mov	sp, r7
 80117a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117a4:	4770      	bx	lr

080117a6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80117a6:	b480      	push	{r7}
 80117a8:	b083      	sub	sp, #12
 80117aa:	af00      	add	r7, sp, #0
 80117ac:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	695b      	ldr	r3, [r3, #20]
 80117b2:	f003 0301 	and.w	r3, r3, #1
}
 80117b6:	4618      	mov	r0, r3
 80117b8:	370c      	adds	r7, #12
 80117ba:	46bd      	mov	sp, r7
 80117bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117c0:	4770      	bx	lr

080117c2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80117c2:	b480      	push	{r7}
 80117c4:	b085      	sub	sp, #20
 80117c6:	af00      	add	r7, sp, #0
 80117c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80117ce:	68fb      	ldr	r3, [r7, #12]
 80117d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80117d4:	681b      	ldr	r3, [r3, #0]
 80117d6:	68fa      	ldr	r2, [r7, #12]
 80117d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80117dc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80117e0:	f023 0307 	bic.w	r3, r3, #7
 80117e4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80117e6:	68fb      	ldr	r3, [r7, #12]
 80117e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80117ec:	685b      	ldr	r3, [r3, #4]
 80117ee:	68fa      	ldr	r2, [r7, #12]
 80117f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80117f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80117f8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80117fa:	2300      	movs	r3, #0
}
 80117fc:	4618      	mov	r0, r3
 80117fe:	3714      	adds	r7, #20
 8011800:	46bd      	mov	sp, r7
 8011802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011806:	4770      	bx	lr

08011808 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8011808:	b480      	push	{r7}
 801180a:	b087      	sub	sp, #28
 801180c:	af00      	add	r7, sp, #0
 801180e:	60f8      	str	r0, [r7, #12]
 8011810:	460b      	mov	r3, r1
 8011812:	607a      	str	r2, [r7, #4]
 8011814:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011816:	68fb      	ldr	r3, [r7, #12]
 8011818:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 801181a:	68fb      	ldr	r3, [r7, #12]
 801181c:	333c      	adds	r3, #60	@ 0x3c
 801181e:	3304      	adds	r3, #4
 8011820:	681b      	ldr	r3, [r3, #0]
 8011822:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8011824:	693b      	ldr	r3, [r7, #16]
 8011826:	4a26      	ldr	r2, [pc, #152]	@ (80118c0 <USB_EP0_OutStart+0xb8>)
 8011828:	4293      	cmp	r3, r2
 801182a:	d90a      	bls.n	8011842 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801182c:	697b      	ldr	r3, [r7, #20]
 801182e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011832:	681b      	ldr	r3, [r3, #0]
 8011834:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011838:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801183c:	d101      	bne.n	8011842 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801183e:	2300      	movs	r3, #0
 8011840:	e037      	b.n	80118b2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8011842:	697b      	ldr	r3, [r7, #20]
 8011844:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011848:	461a      	mov	r2, r3
 801184a:	2300      	movs	r3, #0
 801184c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801184e:	697b      	ldr	r3, [r7, #20]
 8011850:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011854:	691b      	ldr	r3, [r3, #16]
 8011856:	697a      	ldr	r2, [r7, #20]
 8011858:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801185c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8011860:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8011862:	697b      	ldr	r3, [r7, #20]
 8011864:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011868:	691b      	ldr	r3, [r3, #16]
 801186a:	697a      	ldr	r2, [r7, #20]
 801186c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011870:	f043 0318 	orr.w	r3, r3, #24
 8011874:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8011876:	697b      	ldr	r3, [r7, #20]
 8011878:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801187c:	691b      	ldr	r3, [r3, #16]
 801187e:	697a      	ldr	r2, [r7, #20]
 8011880:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011884:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8011888:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801188a:	7afb      	ldrb	r3, [r7, #11]
 801188c:	2b01      	cmp	r3, #1
 801188e:	d10f      	bne.n	80118b0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8011890:	697b      	ldr	r3, [r7, #20]
 8011892:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011896:	461a      	mov	r2, r3
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 801189c:	697b      	ldr	r3, [r7, #20]
 801189e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80118a2:	681b      	ldr	r3, [r3, #0]
 80118a4:	697a      	ldr	r2, [r7, #20]
 80118a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80118aa:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80118ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80118b0:	2300      	movs	r3, #0
}
 80118b2:	4618      	mov	r0, r3
 80118b4:	371c      	adds	r7, #28
 80118b6:	46bd      	mov	sp, r7
 80118b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118bc:	4770      	bx	lr
 80118be:	bf00      	nop
 80118c0:	4f54300a 	.word	0x4f54300a

080118c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80118c4:	b480      	push	{r7}
 80118c6:	b085      	sub	sp, #20
 80118c8:	af00      	add	r7, sp, #0
 80118ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80118cc:	2300      	movs	r3, #0
 80118ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80118d0:	68fb      	ldr	r3, [r7, #12]
 80118d2:	3301      	adds	r3, #1
 80118d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80118d6:	68fb      	ldr	r3, [r7, #12]
 80118d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80118dc:	d901      	bls.n	80118e2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80118de:	2303      	movs	r3, #3
 80118e0:	e022      	b.n	8011928 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	691b      	ldr	r3, [r3, #16]
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	daf2      	bge.n	80118d0 <USB_CoreReset+0xc>

  count = 10U;
 80118ea:	230a      	movs	r3, #10
 80118ec:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80118ee:	e002      	b.n	80118f6 <USB_CoreReset+0x32>
  {
    count--;
 80118f0:	68fb      	ldr	r3, [r7, #12]
 80118f2:	3b01      	subs	r3, #1
 80118f4:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80118f6:	68fb      	ldr	r3, [r7, #12]
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	d1f9      	bne.n	80118f0 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	691b      	ldr	r3, [r3, #16]
 8011900:	f043 0201 	orr.w	r2, r3, #1
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	3301      	adds	r3, #1
 801190c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801190e:	68fb      	ldr	r3, [r7, #12]
 8011910:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011914:	d901      	bls.n	801191a <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8011916:	2303      	movs	r3, #3
 8011918:	e006      	b.n	8011928 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	691b      	ldr	r3, [r3, #16]
 801191e:	f003 0301 	and.w	r3, r3, #1
 8011922:	2b01      	cmp	r3, #1
 8011924:	d0f0      	beq.n	8011908 <USB_CoreReset+0x44>

  return HAL_OK;
 8011926:	2300      	movs	r3, #0
}
 8011928:	4618      	mov	r0, r3
 801192a:	3714      	adds	r7, #20
 801192c:	46bd      	mov	sp, r7
 801192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011932:	4770      	bx	lr

08011934 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011934:	b580      	push	{r7, lr}
 8011936:	b084      	sub	sp, #16
 8011938:	af00      	add	r7, sp, #0
 801193a:	6078      	str	r0, [r7, #4]
 801193c:	460b      	mov	r3, r1
 801193e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8011940:	2010      	movs	r0, #16
 8011942:	f002 f909 	bl	8013b58 <USBD_static_malloc>
 8011946:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8011948:	68fb      	ldr	r3, [r7, #12]
 801194a:	2b00      	cmp	r3, #0
 801194c:	d109      	bne.n	8011962 <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	32b0      	adds	r2, #176	@ 0xb0
 8011958:	2100      	movs	r1, #0
 801195a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 801195e:	2302      	movs	r3, #2
 8011960:	e048      	b.n	80119f4 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	32b0      	adds	r2, #176	@ 0xb0
 801196c:	68f9      	ldr	r1, [r7, #12]
 801196e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	32b0      	adds	r2, #176	@ 0xb0
 801197c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	7c1b      	ldrb	r3, [r3, #16]
 801198a:	2b00      	cmp	r3, #0
 801198c:	d10d      	bne.n	80119aa <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 801198e:	4b1b      	ldr	r3, [pc, #108]	@ (80119fc <USBD_HID_Init+0xc8>)
 8011990:	781b      	ldrb	r3, [r3, #0]
 8011992:	f003 020f 	and.w	r2, r3, #15
 8011996:	6879      	ldr	r1, [r7, #4]
 8011998:	4613      	mov	r3, r2
 801199a:	009b      	lsls	r3, r3, #2
 801199c:	4413      	add	r3, r2
 801199e:	009b      	lsls	r3, r3, #2
 80119a0:	440b      	add	r3, r1
 80119a2:	331c      	adds	r3, #28
 80119a4:	2207      	movs	r2, #7
 80119a6:	601a      	str	r2, [r3, #0]
 80119a8:	e00c      	b.n	80119c4 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 80119aa:	4b14      	ldr	r3, [pc, #80]	@ (80119fc <USBD_HID_Init+0xc8>)
 80119ac:	781b      	ldrb	r3, [r3, #0]
 80119ae:	f003 020f 	and.w	r2, r3, #15
 80119b2:	6879      	ldr	r1, [r7, #4]
 80119b4:	4613      	mov	r3, r2
 80119b6:	009b      	lsls	r3, r3, #2
 80119b8:	4413      	add	r3, r2
 80119ba:	009b      	lsls	r3, r3, #2
 80119bc:	440b      	add	r3, r1
 80119be:	331c      	adds	r3, #28
 80119c0:	220a      	movs	r2, #10
 80119c2:	601a      	str	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80119c4:	4b0d      	ldr	r3, [pc, #52]	@ (80119fc <USBD_HID_Init+0xc8>)
 80119c6:	7819      	ldrb	r1, [r3, #0]
 80119c8:	2304      	movs	r3, #4
 80119ca:	2203      	movs	r2, #3
 80119cc:	6878      	ldr	r0, [r7, #4]
 80119ce:	f001 ffb2 	bl	8013936 <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 80119d2:	4b0a      	ldr	r3, [pc, #40]	@ (80119fc <USBD_HID_Init+0xc8>)
 80119d4:	781b      	ldrb	r3, [r3, #0]
 80119d6:	f003 020f 	and.w	r2, r3, #15
 80119da:	6879      	ldr	r1, [r7, #4]
 80119dc:	4613      	mov	r3, r2
 80119de:	009b      	lsls	r3, r3, #2
 80119e0:	4413      	add	r3, r2
 80119e2:	009b      	lsls	r3, r3, #2
 80119e4:	440b      	add	r3, r1
 80119e6:	3323      	adds	r3, #35	@ 0x23
 80119e8:	2201      	movs	r2, #1
 80119ea:	701a      	strb	r2, [r3, #0]

  hhid->state = USBD_HID_IDLE;
 80119ec:	68fb      	ldr	r3, [r7, #12]
 80119ee:	2200      	movs	r2, #0
 80119f0:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80119f2:	2300      	movs	r3, #0
}
 80119f4:	4618      	mov	r0, r3
 80119f6:	3710      	adds	r7, #16
 80119f8:	46bd      	mov	sp, r7
 80119fa:	bd80      	pop	{r7, pc}
 80119fc:	200000d6 	.word	0x200000d6

08011a00 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011a00:	b580      	push	{r7, lr}
 8011a02:	b082      	sub	sp, #8
 8011a04:	af00      	add	r7, sp, #0
 8011a06:	6078      	str	r0, [r7, #4]
 8011a08:	460b      	mov	r3, r1
 8011a0a:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8011a0c:	4b1f      	ldr	r3, [pc, #124]	@ (8011a8c <USBD_HID_DeInit+0x8c>)
 8011a0e:	781b      	ldrb	r3, [r3, #0]
 8011a10:	4619      	mov	r1, r3
 8011a12:	6878      	ldr	r0, [r7, #4]
 8011a14:	f001 ffb5 	bl	8013982 <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8011a18:	4b1c      	ldr	r3, [pc, #112]	@ (8011a8c <USBD_HID_DeInit+0x8c>)
 8011a1a:	781b      	ldrb	r3, [r3, #0]
 8011a1c:	f003 020f 	and.w	r2, r3, #15
 8011a20:	6879      	ldr	r1, [r7, #4]
 8011a22:	4613      	mov	r3, r2
 8011a24:	009b      	lsls	r3, r3, #2
 8011a26:	4413      	add	r3, r2
 8011a28:	009b      	lsls	r3, r3, #2
 8011a2a:	440b      	add	r3, r1
 8011a2c:	3323      	adds	r3, #35	@ 0x23
 8011a2e:	2200      	movs	r2, #0
 8011a30:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8011a32:	4b16      	ldr	r3, [pc, #88]	@ (8011a8c <USBD_HID_DeInit+0x8c>)
 8011a34:	781b      	ldrb	r3, [r3, #0]
 8011a36:	f003 020f 	and.w	r2, r3, #15
 8011a3a:	6879      	ldr	r1, [r7, #4]
 8011a3c:	4613      	mov	r3, r2
 8011a3e:	009b      	lsls	r3, r3, #2
 8011a40:	4413      	add	r3, r2
 8011a42:	009b      	lsls	r3, r3, #2
 8011a44:	440b      	add	r3, r1
 8011a46:	331c      	adds	r3, #28
 8011a48:	2200      	movs	r2, #0
 8011a4a:	601a      	str	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	32b0      	adds	r2, #176	@ 0xb0
 8011a56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d011      	beq.n	8011a82 <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	32b0      	adds	r2, #176	@ 0xb0
 8011a68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a6c:	4618      	mov	r0, r3
 8011a6e:	f002 f881 	bl	8013b74 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	32b0      	adds	r2, #176	@ 0xb0
 8011a7c:	2100      	movs	r1, #0
 8011a7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 8011a82:	2300      	movs	r3, #0
}
 8011a84:	4618      	mov	r0, r3
 8011a86:	3708      	adds	r7, #8
 8011a88:	46bd      	mov	sp, r7
 8011a8a:	bd80      	pop	{r7, pc}
 8011a8c:	200000d6 	.word	0x200000d6

08011a90 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011a90:	b580      	push	{r7, lr}
 8011a92:	b086      	sub	sp, #24
 8011a94:	af00      	add	r7, sp, #0
 8011a96:	6078      	str	r0, [r7, #4]
 8011a98:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	32b0      	adds	r2, #176	@ 0xb0
 8011aa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011aa8:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8011aaa:	2300      	movs	r3, #0
 8011aac:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8011aae:	2300      	movs	r3, #0
 8011ab0:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8011ab2:	68fb      	ldr	r3, [r7, #12]
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d101      	bne.n	8011abc <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8011ab8:	2303      	movs	r3, #3
 8011aba:	e0e8      	b.n	8011c8e <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011abc:	683b      	ldr	r3, [r7, #0]
 8011abe:	781b      	ldrb	r3, [r3, #0]
 8011ac0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d046      	beq.n	8011b56 <USBD_HID_Setup+0xc6>
 8011ac8:	2b20      	cmp	r3, #32
 8011aca:	f040 80d8 	bne.w	8011c7e <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8011ace:	683b      	ldr	r3, [r7, #0]
 8011ad0:	785b      	ldrb	r3, [r3, #1]
 8011ad2:	3b02      	subs	r3, #2
 8011ad4:	2b09      	cmp	r3, #9
 8011ad6:	d836      	bhi.n	8011b46 <USBD_HID_Setup+0xb6>
 8011ad8:	a201      	add	r2, pc, #4	@ (adr r2, 8011ae0 <USBD_HID_Setup+0x50>)
 8011ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ade:	bf00      	nop
 8011ae0:	08011b37 	.word	0x08011b37
 8011ae4:	08011b17 	.word	0x08011b17
 8011ae8:	08011b47 	.word	0x08011b47
 8011aec:	08011b47 	.word	0x08011b47
 8011af0:	08011b47 	.word	0x08011b47
 8011af4:	08011b47 	.word	0x08011b47
 8011af8:	08011b47 	.word	0x08011b47
 8011afc:	08011b47 	.word	0x08011b47
 8011b00:	08011b25 	.word	0x08011b25
 8011b04:	08011b09 	.word	0x08011b09
      {
        case USBD_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8011b08:	683b      	ldr	r3, [r7, #0]
 8011b0a:	885b      	ldrh	r3, [r3, #2]
 8011b0c:	b2db      	uxtb	r3, r3
 8011b0e:	461a      	mov	r2, r3
 8011b10:	68fb      	ldr	r3, [r7, #12]
 8011b12:	601a      	str	r2, [r3, #0]
          break;
 8011b14:	e01e      	b.n	8011b54 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8011b16:	68fb      	ldr	r3, [r7, #12]
 8011b18:	2201      	movs	r2, #1
 8011b1a:	4619      	mov	r1, r3
 8011b1c:	6878      	ldr	r0, [r7, #4]
 8011b1e:	f001 fbcb 	bl	80132b8 <USBD_CtlSendData>
          break;
 8011b22:	e017      	b.n	8011b54 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8011b24:	683b      	ldr	r3, [r7, #0]
 8011b26:	885b      	ldrh	r3, [r3, #2]
 8011b28:	0a1b      	lsrs	r3, r3, #8
 8011b2a:	b29b      	uxth	r3, r3
 8011b2c:	b2db      	uxtb	r3, r3
 8011b2e:	461a      	mov	r2, r3
 8011b30:	68fb      	ldr	r3, [r7, #12]
 8011b32:	605a      	str	r2, [r3, #4]
          break;
 8011b34:	e00e      	b.n	8011b54 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8011b36:	68fb      	ldr	r3, [r7, #12]
 8011b38:	3304      	adds	r3, #4
 8011b3a:	2201      	movs	r2, #1
 8011b3c:	4619      	mov	r1, r3
 8011b3e:	6878      	ldr	r0, [r7, #4]
 8011b40:	f001 fbba 	bl	80132b8 <USBD_CtlSendData>
          break;
 8011b44:	e006      	b.n	8011b54 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8011b46:	6839      	ldr	r1, [r7, #0]
 8011b48:	6878      	ldr	r0, [r7, #4]
 8011b4a:	f001 fb38 	bl	80131be <USBD_CtlError>
          ret = USBD_FAIL;
 8011b4e:	2303      	movs	r3, #3
 8011b50:	75fb      	strb	r3, [r7, #23]
          break;
 8011b52:	bf00      	nop
      }
      break;
 8011b54:	e09a      	b.n	8011c8c <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011b56:	683b      	ldr	r3, [r7, #0]
 8011b58:	785b      	ldrb	r3, [r3, #1]
 8011b5a:	2b0b      	cmp	r3, #11
 8011b5c:	f200 8086 	bhi.w	8011c6c <USBD_HID_Setup+0x1dc>
 8011b60:	a201      	add	r2, pc, #4	@ (adr r2, 8011b68 <USBD_HID_Setup+0xd8>)
 8011b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b66:	bf00      	nop
 8011b68:	08011b99 	.word	0x08011b99
 8011b6c:	08011c7b 	.word	0x08011c7b
 8011b70:	08011c6d 	.word	0x08011c6d
 8011b74:	08011c6d 	.word	0x08011c6d
 8011b78:	08011c6d 	.word	0x08011c6d
 8011b7c:	08011c6d 	.word	0x08011c6d
 8011b80:	08011bc3 	.word	0x08011bc3
 8011b84:	08011c6d 	.word	0x08011c6d
 8011b88:	08011c6d 	.word	0x08011c6d
 8011b8c:	08011c6d 	.word	0x08011c6d
 8011b90:	08011c1b 	.word	0x08011c1b
 8011b94:	08011c45 	.word	0x08011c45
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011b9e:	b2db      	uxtb	r3, r3
 8011ba0:	2b03      	cmp	r3, #3
 8011ba2:	d107      	bne.n	8011bb4 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8011ba4:	f107 030a 	add.w	r3, r7, #10
 8011ba8:	2202      	movs	r2, #2
 8011baa:	4619      	mov	r1, r3
 8011bac:	6878      	ldr	r0, [r7, #4]
 8011bae:	f001 fb83 	bl	80132b8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011bb2:	e063      	b.n	8011c7c <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8011bb4:	6839      	ldr	r1, [r7, #0]
 8011bb6:	6878      	ldr	r0, [r7, #4]
 8011bb8:	f001 fb01 	bl	80131be <USBD_CtlError>
            ret = USBD_FAIL;
 8011bbc:	2303      	movs	r3, #3
 8011bbe:	75fb      	strb	r3, [r7, #23]
          break;
 8011bc0:	e05c      	b.n	8011c7c <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8011bc2:	683b      	ldr	r3, [r7, #0]
 8011bc4:	885b      	ldrh	r3, [r3, #2]
 8011bc6:	0a1b      	lsrs	r3, r3, #8
 8011bc8:	b29b      	uxth	r3, r3
 8011bca:	2b22      	cmp	r3, #34	@ 0x22
 8011bcc:	d108      	bne.n	8011be0 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8011bce:	683b      	ldr	r3, [r7, #0]
 8011bd0:	88db      	ldrh	r3, [r3, #6]
 8011bd2:	2b4a      	cmp	r3, #74	@ 0x4a
 8011bd4:	bf28      	it	cs
 8011bd6:	234a      	movcs	r3, #74	@ 0x4a
 8011bd8:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8011bda:	4b2f      	ldr	r3, [pc, #188]	@ (8011c98 <USBD_HID_Setup+0x208>)
 8011bdc:	613b      	str	r3, [r7, #16]
 8011bde:	e015      	b.n	8011c0c <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8011be0:	683b      	ldr	r3, [r7, #0]
 8011be2:	885b      	ldrh	r3, [r3, #2]
 8011be4:	0a1b      	lsrs	r3, r3, #8
 8011be6:	b29b      	uxth	r3, r3
 8011be8:	2b21      	cmp	r3, #33	@ 0x21
 8011bea:	d108      	bne.n	8011bfe <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8011bec:	4b2b      	ldr	r3, [pc, #172]	@ (8011c9c <USBD_HID_Setup+0x20c>)
 8011bee:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8011bf0:	683b      	ldr	r3, [r7, #0]
 8011bf2:	88db      	ldrh	r3, [r3, #6]
 8011bf4:	2b09      	cmp	r3, #9
 8011bf6:	bf28      	it	cs
 8011bf8:	2309      	movcs	r3, #9
 8011bfa:	82bb      	strh	r3, [r7, #20]
 8011bfc:	e006      	b.n	8011c0c <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8011bfe:	6839      	ldr	r1, [r7, #0]
 8011c00:	6878      	ldr	r0, [r7, #4]
 8011c02:	f001 fadc 	bl	80131be <USBD_CtlError>
            ret = USBD_FAIL;
 8011c06:	2303      	movs	r3, #3
 8011c08:	75fb      	strb	r3, [r7, #23]
            break;
 8011c0a:	e037      	b.n	8011c7c <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8011c0c:	8abb      	ldrh	r3, [r7, #20]
 8011c0e:	461a      	mov	r2, r3
 8011c10:	6939      	ldr	r1, [r7, #16]
 8011c12:	6878      	ldr	r0, [r7, #4]
 8011c14:	f001 fb50 	bl	80132b8 <USBD_CtlSendData>
          break;
 8011c18:	e030      	b.n	8011c7c <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011c20:	b2db      	uxtb	r3, r3
 8011c22:	2b03      	cmp	r3, #3
 8011c24:	d107      	bne.n	8011c36 <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8011c26:	68fb      	ldr	r3, [r7, #12]
 8011c28:	3308      	adds	r3, #8
 8011c2a:	2201      	movs	r2, #1
 8011c2c:	4619      	mov	r1, r3
 8011c2e:	6878      	ldr	r0, [r7, #4]
 8011c30:	f001 fb42 	bl	80132b8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011c34:	e022      	b.n	8011c7c <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8011c36:	6839      	ldr	r1, [r7, #0]
 8011c38:	6878      	ldr	r0, [r7, #4]
 8011c3a:	f001 fac0 	bl	80131be <USBD_CtlError>
            ret = USBD_FAIL;
 8011c3e:	2303      	movs	r3, #3
 8011c40:	75fb      	strb	r3, [r7, #23]
          break;
 8011c42:	e01b      	b.n	8011c7c <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011c4a:	b2db      	uxtb	r3, r3
 8011c4c:	2b03      	cmp	r3, #3
 8011c4e:	d106      	bne.n	8011c5e <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8011c50:	683b      	ldr	r3, [r7, #0]
 8011c52:	885b      	ldrh	r3, [r3, #2]
 8011c54:	b2db      	uxtb	r3, r3
 8011c56:	461a      	mov	r2, r3
 8011c58:	68fb      	ldr	r3, [r7, #12]
 8011c5a:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011c5c:	e00e      	b.n	8011c7c <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8011c5e:	6839      	ldr	r1, [r7, #0]
 8011c60:	6878      	ldr	r0, [r7, #4]
 8011c62:	f001 faac 	bl	80131be <USBD_CtlError>
            ret = USBD_FAIL;
 8011c66:	2303      	movs	r3, #3
 8011c68:	75fb      	strb	r3, [r7, #23]
          break;
 8011c6a:	e007      	b.n	8011c7c <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8011c6c:	6839      	ldr	r1, [r7, #0]
 8011c6e:	6878      	ldr	r0, [r7, #4]
 8011c70:	f001 faa5 	bl	80131be <USBD_CtlError>
          ret = USBD_FAIL;
 8011c74:	2303      	movs	r3, #3
 8011c76:	75fb      	strb	r3, [r7, #23]
          break;
 8011c78:	e000      	b.n	8011c7c <USBD_HID_Setup+0x1ec>
          break;
 8011c7a:	bf00      	nop
      }
      break;
 8011c7c:	e006      	b.n	8011c8c <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8011c7e:	6839      	ldr	r1, [r7, #0]
 8011c80:	6878      	ldr	r0, [r7, #4]
 8011c82:	f001 fa9c 	bl	80131be <USBD_CtlError>
      ret = USBD_FAIL;
 8011c86:	2303      	movs	r3, #3
 8011c88:	75fb      	strb	r3, [r7, #23]
      break;
 8011c8a:	bf00      	nop
  }

  return (uint8_t)ret;
 8011c8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8011c8e:	4618      	mov	r0, r3
 8011c90:	3718      	adds	r7, #24
 8011c92:	46bd      	mov	sp, r7
 8011c94:	bd80      	pop	{r7, pc}
 8011c96:	bf00      	nop
 8011c98:	2000008c 	.word	0x2000008c
 8011c9c:	20000074 	.word	0x20000074

08011ca0 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8011ca0:	b580      	push	{r7, lr}
 8011ca2:	b084      	sub	sp, #16
 8011ca4:	af00      	add	r7, sp, #0
 8011ca6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8011ca8:	2181      	movs	r1, #129	@ 0x81
 8011caa:	4809      	ldr	r0, [pc, #36]	@ (8011cd0 <USBD_HID_GetFSCfgDesc+0x30>)
 8011cac:	f000 fc4e 	bl	801254c <USBD_GetEpDesc>
 8011cb0:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8011cb2:	68fb      	ldr	r3, [r7, #12]
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d002      	beq.n	8011cbe <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8011cb8:	68fb      	ldr	r3, [r7, #12]
 8011cba:	220a      	movs	r2, #10
 8011cbc:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	2222      	movs	r2, #34	@ 0x22
 8011cc2:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8011cc4:	4b02      	ldr	r3, [pc, #8]	@ (8011cd0 <USBD_HID_GetFSCfgDesc+0x30>)
}
 8011cc6:	4618      	mov	r0, r3
 8011cc8:	3710      	adds	r7, #16
 8011cca:	46bd      	mov	sp, r7
 8011ccc:	bd80      	pop	{r7, pc}
 8011cce:	bf00      	nop
 8011cd0:	20000050 	.word	0x20000050

08011cd4 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8011cd4:	b580      	push	{r7, lr}
 8011cd6:	b084      	sub	sp, #16
 8011cd8:	af00      	add	r7, sp, #0
 8011cda:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8011cdc:	2181      	movs	r1, #129	@ 0x81
 8011cde:	4809      	ldr	r0, [pc, #36]	@ (8011d04 <USBD_HID_GetHSCfgDesc+0x30>)
 8011ce0:	f000 fc34 	bl	801254c <USBD_GetEpDesc>
 8011ce4:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8011ce6:	68fb      	ldr	r3, [r7, #12]
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d002      	beq.n	8011cf2 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8011cec:	68fb      	ldr	r3, [r7, #12]
 8011cee:	2207      	movs	r2, #7
 8011cf0:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	2222      	movs	r2, #34	@ 0x22
 8011cf6:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8011cf8:	4b02      	ldr	r3, [pc, #8]	@ (8011d04 <USBD_HID_GetHSCfgDesc+0x30>)
}
 8011cfa:	4618      	mov	r0, r3
 8011cfc:	3710      	adds	r7, #16
 8011cfe:	46bd      	mov	sp, r7
 8011d00:	bd80      	pop	{r7, pc}
 8011d02:	bf00      	nop
 8011d04:	20000050 	.word	0x20000050

08011d08 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8011d08:	b580      	push	{r7, lr}
 8011d0a:	b084      	sub	sp, #16
 8011d0c:	af00      	add	r7, sp, #0
 8011d0e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8011d10:	2181      	movs	r1, #129	@ 0x81
 8011d12:	4809      	ldr	r0, [pc, #36]	@ (8011d38 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8011d14:	f000 fc1a 	bl	801254c <USBD_GetEpDesc>
 8011d18:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8011d1a:	68fb      	ldr	r3, [r7, #12]
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d002      	beq.n	8011d26 <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8011d20:	68fb      	ldr	r3, [r7, #12]
 8011d22:	220a      	movs	r2, #10
 8011d24:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	2222      	movs	r2, #34	@ 0x22
 8011d2a:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8011d2c:	4b02      	ldr	r3, [pc, #8]	@ (8011d38 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 8011d2e:	4618      	mov	r0, r3
 8011d30:	3710      	adds	r7, #16
 8011d32:	46bd      	mov	sp, r7
 8011d34:	bd80      	pop	{r7, pc}
 8011d36:	bf00      	nop
 8011d38:	20000050 	.word	0x20000050

08011d3c <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011d3c:	b480      	push	{r7}
 8011d3e:	b083      	sub	sp, #12
 8011d40:	af00      	add	r7, sp, #0
 8011d42:	6078      	str	r0, [r7, #4]
 8011d44:	460b      	mov	r3, r1
 8011d46:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	32b0      	adds	r2, #176	@ 0xb0
 8011d52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d56:	2200      	movs	r2, #0
 8011d58:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8011d5a:	2300      	movs	r3, #0
}
 8011d5c:	4618      	mov	r0, r3
 8011d5e:	370c      	adds	r7, #12
 8011d60:	46bd      	mov	sp, r7
 8011d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d66:	4770      	bx	lr

08011d68 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8011d68:	b480      	push	{r7}
 8011d6a:	b083      	sub	sp, #12
 8011d6c:	af00      	add	r7, sp, #0
 8011d6e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	220a      	movs	r2, #10
 8011d74:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8011d76:	4b03      	ldr	r3, [pc, #12]	@ (8011d84 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8011d78:	4618      	mov	r0, r3
 8011d7a:	370c      	adds	r7, #12
 8011d7c:	46bd      	mov	sp, r7
 8011d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d82:	4770      	bx	lr
 8011d84:	20000080 	.word	0x20000080

08011d88 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8011d88:	b580      	push	{r7, lr}
 8011d8a:	b086      	sub	sp, #24
 8011d8c:	af00      	add	r7, sp, #0
 8011d8e:	60f8      	str	r0, [r7, #12]
 8011d90:	60b9      	str	r1, [r7, #8]
 8011d92:	4613      	mov	r3, r2
 8011d94:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8011d96:	68fb      	ldr	r3, [r7, #12]
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d101      	bne.n	8011da0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8011d9c:	2303      	movs	r3, #3
 8011d9e:	e01f      	b.n	8011de0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8011da0:	68fb      	ldr	r3, [r7, #12]
 8011da2:	2200      	movs	r2, #0
 8011da4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8011da8:	68fb      	ldr	r3, [r7, #12]
 8011daa:	2200      	movs	r2, #0
 8011dac:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8011db0:	68fb      	ldr	r3, [r7, #12]
 8011db2:	2200      	movs	r2, #0
 8011db4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8011db8:	68bb      	ldr	r3, [r7, #8]
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	d003      	beq.n	8011dc6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8011dbe:	68fb      	ldr	r3, [r7, #12]
 8011dc0:	68ba      	ldr	r2, [r7, #8]
 8011dc2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011dc6:	68fb      	ldr	r3, [r7, #12]
 8011dc8:	2201      	movs	r2, #1
 8011dca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8011dce:	68fb      	ldr	r3, [r7, #12]
 8011dd0:	79fa      	ldrb	r2, [r7, #7]
 8011dd2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8011dd4:	68f8      	ldr	r0, [r7, #12]
 8011dd6:	f001 fd47 	bl	8013868 <USBD_LL_Init>
 8011dda:	4603      	mov	r3, r0
 8011ddc:	75fb      	strb	r3, [r7, #23]

  return ret;
 8011dde:	7dfb      	ldrb	r3, [r7, #23]
}
 8011de0:	4618      	mov	r0, r3
 8011de2:	3718      	adds	r7, #24
 8011de4:	46bd      	mov	sp, r7
 8011de6:	bd80      	pop	{r7, pc}

08011de8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8011de8:	b580      	push	{r7, lr}
 8011dea:	b084      	sub	sp, #16
 8011dec:	af00      	add	r7, sp, #0
 8011dee:	6078      	str	r0, [r7, #4]
 8011df0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011df2:	2300      	movs	r3, #0
 8011df4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8011df6:	683b      	ldr	r3, [r7, #0]
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d101      	bne.n	8011e00 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8011dfc:	2303      	movs	r3, #3
 8011dfe:	e025      	b.n	8011e4c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	683a      	ldr	r2, [r7, #0]
 8011e04:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	32ae      	adds	r2, #174	@ 0xae
 8011e12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d00f      	beq.n	8011e3c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	32ae      	adds	r2, #174	@ 0xae
 8011e26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e2c:	f107 020e 	add.w	r2, r7, #14
 8011e30:	4610      	mov	r0, r2
 8011e32:	4798      	blx	r3
 8011e34:	4602      	mov	r2, r0
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8011e42:	1c5a      	adds	r2, r3, #1
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8011e4a:	2300      	movs	r3, #0
}
 8011e4c:	4618      	mov	r0, r3
 8011e4e:	3710      	adds	r7, #16
 8011e50:	46bd      	mov	sp, r7
 8011e52:	bd80      	pop	{r7, pc}

08011e54 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8011e54:	b580      	push	{r7, lr}
 8011e56:	b082      	sub	sp, #8
 8011e58:	af00      	add	r7, sp, #0
 8011e5a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8011e5c:	6878      	ldr	r0, [r7, #4]
 8011e5e:	f001 fd4f 	bl	8013900 <USBD_LL_Start>
 8011e62:	4603      	mov	r3, r0
}
 8011e64:	4618      	mov	r0, r3
 8011e66:	3708      	adds	r7, #8
 8011e68:	46bd      	mov	sp, r7
 8011e6a:	bd80      	pop	{r7, pc}

08011e6c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8011e6c:	b480      	push	{r7}
 8011e6e:	b083      	sub	sp, #12
 8011e70:	af00      	add	r7, sp, #0
 8011e72:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011e74:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8011e76:	4618      	mov	r0, r3
 8011e78:	370c      	adds	r7, #12
 8011e7a:	46bd      	mov	sp, r7
 8011e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e80:	4770      	bx	lr

08011e82 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011e82:	b580      	push	{r7, lr}
 8011e84:	b084      	sub	sp, #16
 8011e86:	af00      	add	r7, sp, #0
 8011e88:	6078      	str	r0, [r7, #4]
 8011e8a:	460b      	mov	r3, r1
 8011e8c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8011e8e:	2300      	movs	r3, #0
 8011e90:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d009      	beq.n	8011eb0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011ea2:	681b      	ldr	r3, [r3, #0]
 8011ea4:	78fa      	ldrb	r2, [r7, #3]
 8011ea6:	4611      	mov	r1, r2
 8011ea8:	6878      	ldr	r0, [r7, #4]
 8011eaa:	4798      	blx	r3
 8011eac:	4603      	mov	r3, r0
 8011eae:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8011eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8011eb2:	4618      	mov	r0, r3
 8011eb4:	3710      	adds	r7, #16
 8011eb6:	46bd      	mov	sp, r7
 8011eb8:	bd80      	pop	{r7, pc}

08011eba <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011eba:	b580      	push	{r7, lr}
 8011ebc:	b084      	sub	sp, #16
 8011ebe:	af00      	add	r7, sp, #0
 8011ec0:	6078      	str	r0, [r7, #4]
 8011ec2:	460b      	mov	r3, r1
 8011ec4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8011ec6:	2300      	movs	r3, #0
 8011ec8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011ed0:	685b      	ldr	r3, [r3, #4]
 8011ed2:	78fa      	ldrb	r2, [r7, #3]
 8011ed4:	4611      	mov	r1, r2
 8011ed6:	6878      	ldr	r0, [r7, #4]
 8011ed8:	4798      	blx	r3
 8011eda:	4603      	mov	r3, r0
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d001      	beq.n	8011ee4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8011ee0:	2303      	movs	r3, #3
 8011ee2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8011ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ee6:	4618      	mov	r0, r3
 8011ee8:	3710      	adds	r7, #16
 8011eea:	46bd      	mov	sp, r7
 8011eec:	bd80      	pop	{r7, pc}

08011eee <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8011eee:	b580      	push	{r7, lr}
 8011ef0:	b084      	sub	sp, #16
 8011ef2:	af00      	add	r7, sp, #0
 8011ef4:	6078      	str	r0, [r7, #4]
 8011ef6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8011efe:	6839      	ldr	r1, [r7, #0]
 8011f00:	4618      	mov	r0, r3
 8011f02:	f001 f922 	bl	801314a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	2201      	movs	r2, #1
 8011f0a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8011f14:	461a      	mov	r2, r3
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8011f22:	f003 031f 	and.w	r3, r3, #31
 8011f26:	2b02      	cmp	r3, #2
 8011f28:	d01a      	beq.n	8011f60 <USBD_LL_SetupStage+0x72>
 8011f2a:	2b02      	cmp	r3, #2
 8011f2c:	d822      	bhi.n	8011f74 <USBD_LL_SetupStage+0x86>
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d002      	beq.n	8011f38 <USBD_LL_SetupStage+0x4a>
 8011f32:	2b01      	cmp	r3, #1
 8011f34:	d00a      	beq.n	8011f4c <USBD_LL_SetupStage+0x5e>
 8011f36:	e01d      	b.n	8011f74 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8011f3e:	4619      	mov	r1, r3
 8011f40:	6878      	ldr	r0, [r7, #4]
 8011f42:	f000 fb77 	bl	8012634 <USBD_StdDevReq>
 8011f46:	4603      	mov	r3, r0
 8011f48:	73fb      	strb	r3, [r7, #15]
      break;
 8011f4a:	e020      	b.n	8011f8e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8011f52:	4619      	mov	r1, r3
 8011f54:	6878      	ldr	r0, [r7, #4]
 8011f56:	f000 fbdf 	bl	8012718 <USBD_StdItfReq>
 8011f5a:	4603      	mov	r3, r0
 8011f5c:	73fb      	strb	r3, [r7, #15]
      break;
 8011f5e:	e016      	b.n	8011f8e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8011f66:	4619      	mov	r1, r3
 8011f68:	6878      	ldr	r0, [r7, #4]
 8011f6a:	f000 fc41 	bl	80127f0 <USBD_StdEPReq>
 8011f6e:	4603      	mov	r3, r0
 8011f70:	73fb      	strb	r3, [r7, #15]
      break;
 8011f72:	e00c      	b.n	8011f8e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8011f7a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8011f7e:	b2db      	uxtb	r3, r3
 8011f80:	4619      	mov	r1, r3
 8011f82:	6878      	ldr	r0, [r7, #4]
 8011f84:	f001 fd1c 	bl	80139c0 <USBD_LL_StallEP>
 8011f88:	4603      	mov	r3, r0
 8011f8a:	73fb      	strb	r3, [r7, #15]
      break;
 8011f8c:	bf00      	nop
  }

  return ret;
 8011f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f90:	4618      	mov	r0, r3
 8011f92:	3710      	adds	r7, #16
 8011f94:	46bd      	mov	sp, r7
 8011f96:	bd80      	pop	{r7, pc}

08011f98 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8011f98:	b580      	push	{r7, lr}
 8011f9a:	b086      	sub	sp, #24
 8011f9c:	af00      	add	r7, sp, #0
 8011f9e:	60f8      	str	r0, [r7, #12]
 8011fa0:	460b      	mov	r3, r1
 8011fa2:	607a      	str	r2, [r7, #4]
 8011fa4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8011fa6:	2300      	movs	r3, #0
 8011fa8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8011faa:	7afb      	ldrb	r3, [r7, #11]
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d177      	bne.n	80120a0 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8011fb0:	68fb      	ldr	r3, [r7, #12]
 8011fb2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8011fb6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8011fb8:	68fb      	ldr	r3, [r7, #12]
 8011fba:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8011fbe:	2b03      	cmp	r3, #3
 8011fc0:	f040 80a1 	bne.w	8012106 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8011fc4:	693b      	ldr	r3, [r7, #16]
 8011fc6:	685b      	ldr	r3, [r3, #4]
 8011fc8:	693a      	ldr	r2, [r7, #16]
 8011fca:	8992      	ldrh	r2, [r2, #12]
 8011fcc:	4293      	cmp	r3, r2
 8011fce:	d91c      	bls.n	801200a <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8011fd0:	693b      	ldr	r3, [r7, #16]
 8011fd2:	685b      	ldr	r3, [r3, #4]
 8011fd4:	693a      	ldr	r2, [r7, #16]
 8011fd6:	8992      	ldrh	r2, [r2, #12]
 8011fd8:	1a9a      	subs	r2, r3, r2
 8011fda:	693b      	ldr	r3, [r7, #16]
 8011fdc:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8011fde:	693b      	ldr	r3, [r7, #16]
 8011fe0:	691b      	ldr	r3, [r3, #16]
 8011fe2:	693a      	ldr	r2, [r7, #16]
 8011fe4:	8992      	ldrh	r2, [r2, #12]
 8011fe6:	441a      	add	r2, r3
 8011fe8:	693b      	ldr	r3, [r7, #16]
 8011fea:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8011fec:	693b      	ldr	r3, [r7, #16]
 8011fee:	6919      	ldr	r1, [r3, #16]
 8011ff0:	693b      	ldr	r3, [r7, #16]
 8011ff2:	899b      	ldrh	r3, [r3, #12]
 8011ff4:	461a      	mov	r2, r3
 8011ff6:	693b      	ldr	r3, [r7, #16]
 8011ff8:	685b      	ldr	r3, [r3, #4]
 8011ffa:	4293      	cmp	r3, r2
 8011ffc:	bf38      	it	cc
 8011ffe:	4613      	movcc	r3, r2
 8012000:	461a      	mov	r2, r3
 8012002:	68f8      	ldr	r0, [r7, #12]
 8012004:	f001 f987 	bl	8013316 <USBD_CtlContinueRx>
 8012008:	e07d      	b.n	8012106 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 801200a:	68fb      	ldr	r3, [r7, #12]
 801200c:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8012010:	f003 031f 	and.w	r3, r3, #31
 8012014:	2b02      	cmp	r3, #2
 8012016:	d014      	beq.n	8012042 <USBD_LL_DataOutStage+0xaa>
 8012018:	2b02      	cmp	r3, #2
 801201a:	d81d      	bhi.n	8012058 <USBD_LL_DataOutStage+0xc0>
 801201c:	2b00      	cmp	r3, #0
 801201e:	d002      	beq.n	8012026 <USBD_LL_DataOutStage+0x8e>
 8012020:	2b01      	cmp	r3, #1
 8012022:	d003      	beq.n	801202c <USBD_LL_DataOutStage+0x94>
 8012024:	e018      	b.n	8012058 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8012026:	2300      	movs	r3, #0
 8012028:	75bb      	strb	r3, [r7, #22]
            break;
 801202a:	e018      	b.n	801205e <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 801202c:	68fb      	ldr	r3, [r7, #12]
 801202e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8012032:	b2db      	uxtb	r3, r3
 8012034:	4619      	mov	r1, r3
 8012036:	68f8      	ldr	r0, [r7, #12]
 8012038:	f000 fa6e 	bl	8012518 <USBD_CoreFindIF>
 801203c:	4603      	mov	r3, r0
 801203e:	75bb      	strb	r3, [r7, #22]
            break;
 8012040:	e00d      	b.n	801205e <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8012042:	68fb      	ldr	r3, [r7, #12]
 8012044:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8012048:	b2db      	uxtb	r3, r3
 801204a:	4619      	mov	r1, r3
 801204c:	68f8      	ldr	r0, [r7, #12]
 801204e:	f000 fa70 	bl	8012532 <USBD_CoreFindEP>
 8012052:	4603      	mov	r3, r0
 8012054:	75bb      	strb	r3, [r7, #22]
            break;
 8012056:	e002      	b.n	801205e <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8012058:	2300      	movs	r3, #0
 801205a:	75bb      	strb	r3, [r7, #22]
            break;
 801205c:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 801205e:	7dbb      	ldrb	r3, [r7, #22]
 8012060:	2b00      	cmp	r3, #0
 8012062:	d119      	bne.n	8012098 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012064:	68fb      	ldr	r3, [r7, #12]
 8012066:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801206a:	b2db      	uxtb	r3, r3
 801206c:	2b03      	cmp	r3, #3
 801206e:	d113      	bne.n	8012098 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8012070:	7dba      	ldrb	r2, [r7, #22]
 8012072:	68fb      	ldr	r3, [r7, #12]
 8012074:	32ae      	adds	r2, #174	@ 0xae
 8012076:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801207a:	691b      	ldr	r3, [r3, #16]
 801207c:	2b00      	cmp	r3, #0
 801207e:	d00b      	beq.n	8012098 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8012080:	7dba      	ldrb	r2, [r7, #22]
 8012082:	68fb      	ldr	r3, [r7, #12]
 8012084:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8012088:	7dba      	ldrb	r2, [r7, #22]
 801208a:	68fb      	ldr	r3, [r7, #12]
 801208c:	32ae      	adds	r2, #174	@ 0xae
 801208e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012092:	691b      	ldr	r3, [r3, #16]
 8012094:	68f8      	ldr	r0, [r7, #12]
 8012096:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8012098:	68f8      	ldr	r0, [r7, #12]
 801209a:	f001 f94d 	bl	8013338 <USBD_CtlSendStatus>
 801209e:	e032      	b.n	8012106 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80120a0:	7afb      	ldrb	r3, [r7, #11]
 80120a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80120a6:	b2db      	uxtb	r3, r3
 80120a8:	4619      	mov	r1, r3
 80120aa:	68f8      	ldr	r0, [r7, #12]
 80120ac:	f000 fa41 	bl	8012532 <USBD_CoreFindEP>
 80120b0:	4603      	mov	r3, r0
 80120b2:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80120b4:	7dbb      	ldrb	r3, [r7, #22]
 80120b6:	2bff      	cmp	r3, #255	@ 0xff
 80120b8:	d025      	beq.n	8012106 <USBD_LL_DataOutStage+0x16e>
 80120ba:	7dbb      	ldrb	r3, [r7, #22]
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d122      	bne.n	8012106 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80120c0:	68fb      	ldr	r3, [r7, #12]
 80120c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80120c6:	b2db      	uxtb	r3, r3
 80120c8:	2b03      	cmp	r3, #3
 80120ca:	d117      	bne.n	80120fc <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80120cc:	7dba      	ldrb	r2, [r7, #22]
 80120ce:	68fb      	ldr	r3, [r7, #12]
 80120d0:	32ae      	adds	r2, #174	@ 0xae
 80120d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80120d6:	699b      	ldr	r3, [r3, #24]
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d00f      	beq.n	80120fc <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 80120dc:	7dba      	ldrb	r2, [r7, #22]
 80120de:	68fb      	ldr	r3, [r7, #12]
 80120e0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80120e4:	7dba      	ldrb	r2, [r7, #22]
 80120e6:	68fb      	ldr	r3, [r7, #12]
 80120e8:	32ae      	adds	r2, #174	@ 0xae
 80120ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80120ee:	699b      	ldr	r3, [r3, #24]
 80120f0:	7afa      	ldrb	r2, [r7, #11]
 80120f2:	4611      	mov	r1, r2
 80120f4:	68f8      	ldr	r0, [r7, #12]
 80120f6:	4798      	blx	r3
 80120f8:	4603      	mov	r3, r0
 80120fa:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80120fc:	7dfb      	ldrb	r3, [r7, #23]
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d001      	beq.n	8012106 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 8012102:	7dfb      	ldrb	r3, [r7, #23]
 8012104:	e000      	b.n	8012108 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 8012106:	2300      	movs	r3, #0
}
 8012108:	4618      	mov	r0, r3
 801210a:	3718      	adds	r7, #24
 801210c:	46bd      	mov	sp, r7
 801210e:	bd80      	pop	{r7, pc}

08012110 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8012110:	b580      	push	{r7, lr}
 8012112:	b086      	sub	sp, #24
 8012114:	af00      	add	r7, sp, #0
 8012116:	60f8      	str	r0, [r7, #12]
 8012118:	460b      	mov	r3, r1
 801211a:	607a      	str	r2, [r7, #4]
 801211c:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 801211e:	7afb      	ldrb	r3, [r7, #11]
 8012120:	2b00      	cmp	r3, #0
 8012122:	d178      	bne.n	8012216 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8012124:	68fb      	ldr	r3, [r7, #12]
 8012126:	3314      	adds	r3, #20
 8012128:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801212a:	68fb      	ldr	r3, [r7, #12]
 801212c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8012130:	2b02      	cmp	r3, #2
 8012132:	d163      	bne.n	80121fc <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8012134:	693b      	ldr	r3, [r7, #16]
 8012136:	685b      	ldr	r3, [r3, #4]
 8012138:	693a      	ldr	r2, [r7, #16]
 801213a:	8992      	ldrh	r2, [r2, #12]
 801213c:	4293      	cmp	r3, r2
 801213e:	d91c      	bls.n	801217a <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8012140:	693b      	ldr	r3, [r7, #16]
 8012142:	685b      	ldr	r3, [r3, #4]
 8012144:	693a      	ldr	r2, [r7, #16]
 8012146:	8992      	ldrh	r2, [r2, #12]
 8012148:	1a9a      	subs	r2, r3, r2
 801214a:	693b      	ldr	r3, [r7, #16]
 801214c:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 801214e:	693b      	ldr	r3, [r7, #16]
 8012150:	691b      	ldr	r3, [r3, #16]
 8012152:	693a      	ldr	r2, [r7, #16]
 8012154:	8992      	ldrh	r2, [r2, #12]
 8012156:	441a      	add	r2, r3
 8012158:	693b      	ldr	r3, [r7, #16]
 801215a:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 801215c:	693b      	ldr	r3, [r7, #16]
 801215e:	6919      	ldr	r1, [r3, #16]
 8012160:	693b      	ldr	r3, [r7, #16]
 8012162:	685b      	ldr	r3, [r3, #4]
 8012164:	461a      	mov	r2, r3
 8012166:	68f8      	ldr	r0, [r7, #12]
 8012168:	f001 f8c4 	bl	80132f4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801216c:	2300      	movs	r3, #0
 801216e:	2200      	movs	r2, #0
 8012170:	2100      	movs	r1, #0
 8012172:	68f8      	ldr	r0, [r7, #12]
 8012174:	f001 fcce 	bl	8013b14 <USBD_LL_PrepareReceive>
 8012178:	e040      	b.n	80121fc <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801217a:	693b      	ldr	r3, [r7, #16]
 801217c:	899b      	ldrh	r3, [r3, #12]
 801217e:	461a      	mov	r2, r3
 8012180:	693b      	ldr	r3, [r7, #16]
 8012182:	685b      	ldr	r3, [r3, #4]
 8012184:	429a      	cmp	r2, r3
 8012186:	d11c      	bne.n	80121c2 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8012188:	693b      	ldr	r3, [r7, #16]
 801218a:	681b      	ldr	r3, [r3, #0]
 801218c:	693a      	ldr	r2, [r7, #16]
 801218e:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8012190:	4293      	cmp	r3, r2
 8012192:	d316      	bcc.n	80121c2 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8012194:	693b      	ldr	r3, [r7, #16]
 8012196:	681a      	ldr	r2, [r3, #0]
 8012198:	68fb      	ldr	r3, [r7, #12]
 801219a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 801219e:	429a      	cmp	r2, r3
 80121a0:	d20f      	bcs.n	80121c2 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80121a2:	2200      	movs	r2, #0
 80121a4:	2100      	movs	r1, #0
 80121a6:	68f8      	ldr	r0, [r7, #12]
 80121a8:	f001 f8a4 	bl	80132f4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80121ac:	68fb      	ldr	r3, [r7, #12]
 80121ae:	2200      	movs	r2, #0
 80121b0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80121b4:	2300      	movs	r3, #0
 80121b6:	2200      	movs	r2, #0
 80121b8:	2100      	movs	r1, #0
 80121ba:	68f8      	ldr	r0, [r7, #12]
 80121bc:	f001 fcaa 	bl	8013b14 <USBD_LL_PrepareReceive>
 80121c0:	e01c      	b.n	80121fc <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80121c8:	b2db      	uxtb	r3, r3
 80121ca:	2b03      	cmp	r3, #3
 80121cc:	d10f      	bne.n	80121ee <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80121ce:	68fb      	ldr	r3, [r7, #12]
 80121d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80121d4:	68db      	ldr	r3, [r3, #12]
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	d009      	beq.n	80121ee <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 80121da:	68fb      	ldr	r3, [r7, #12]
 80121dc:	2200      	movs	r2, #0
 80121de:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80121e2:	68fb      	ldr	r3, [r7, #12]
 80121e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80121e8:	68db      	ldr	r3, [r3, #12]
 80121ea:	68f8      	ldr	r0, [r7, #12]
 80121ec:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80121ee:	2180      	movs	r1, #128	@ 0x80
 80121f0:	68f8      	ldr	r0, [r7, #12]
 80121f2:	f001 fbe5 	bl	80139c0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80121f6:	68f8      	ldr	r0, [r7, #12]
 80121f8:	f001 f8b1 	bl	801335e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80121fc:	68fb      	ldr	r3, [r7, #12]
 80121fe:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8012202:	2b00      	cmp	r3, #0
 8012204:	d03a      	beq.n	801227c <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 8012206:	68f8      	ldr	r0, [r7, #12]
 8012208:	f7ff fe30 	bl	8011e6c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801220c:	68fb      	ldr	r3, [r7, #12]
 801220e:	2200      	movs	r2, #0
 8012210:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8012214:	e032      	b.n	801227c <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8012216:	7afb      	ldrb	r3, [r7, #11]
 8012218:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801221c:	b2db      	uxtb	r3, r3
 801221e:	4619      	mov	r1, r3
 8012220:	68f8      	ldr	r0, [r7, #12]
 8012222:	f000 f986 	bl	8012532 <USBD_CoreFindEP>
 8012226:	4603      	mov	r3, r0
 8012228:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801222a:	7dfb      	ldrb	r3, [r7, #23]
 801222c:	2bff      	cmp	r3, #255	@ 0xff
 801222e:	d025      	beq.n	801227c <USBD_LL_DataInStage+0x16c>
 8012230:	7dfb      	ldrb	r3, [r7, #23]
 8012232:	2b00      	cmp	r3, #0
 8012234:	d122      	bne.n	801227c <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012236:	68fb      	ldr	r3, [r7, #12]
 8012238:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801223c:	b2db      	uxtb	r3, r3
 801223e:	2b03      	cmp	r3, #3
 8012240:	d11c      	bne.n	801227c <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8012242:	7dfa      	ldrb	r2, [r7, #23]
 8012244:	68fb      	ldr	r3, [r7, #12]
 8012246:	32ae      	adds	r2, #174	@ 0xae
 8012248:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801224c:	695b      	ldr	r3, [r3, #20]
 801224e:	2b00      	cmp	r3, #0
 8012250:	d014      	beq.n	801227c <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 8012252:	7dfa      	ldrb	r2, [r7, #23]
 8012254:	68fb      	ldr	r3, [r7, #12]
 8012256:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 801225a:	7dfa      	ldrb	r2, [r7, #23]
 801225c:	68fb      	ldr	r3, [r7, #12]
 801225e:	32ae      	adds	r2, #174	@ 0xae
 8012260:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012264:	695b      	ldr	r3, [r3, #20]
 8012266:	7afa      	ldrb	r2, [r7, #11]
 8012268:	4611      	mov	r1, r2
 801226a:	68f8      	ldr	r0, [r7, #12]
 801226c:	4798      	blx	r3
 801226e:	4603      	mov	r3, r0
 8012270:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8012272:	7dbb      	ldrb	r3, [r7, #22]
 8012274:	2b00      	cmp	r3, #0
 8012276:	d001      	beq.n	801227c <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8012278:	7dbb      	ldrb	r3, [r7, #22]
 801227a:	e000      	b.n	801227e <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 801227c:	2300      	movs	r3, #0
}
 801227e:	4618      	mov	r0, r3
 8012280:	3718      	adds	r7, #24
 8012282:	46bd      	mov	sp, r7
 8012284:	bd80      	pop	{r7, pc}

08012286 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8012286:	b580      	push	{r7, lr}
 8012288:	b084      	sub	sp, #16
 801228a:	af00      	add	r7, sp, #0
 801228c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 801228e:	2300      	movs	r3, #0
 8012290:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	2201      	movs	r2, #1
 8012296:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	2200      	movs	r2, #0
 801229e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	2200      	movs	r2, #0
 80122a6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	2200      	movs	r2, #0
 80122ac:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	2200      	movs	r2, #0
 80122b4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80122be:	2b00      	cmp	r3, #0
 80122c0:	d014      	beq.n	80122ec <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80122c8:	685b      	ldr	r3, [r3, #4]
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d00e      	beq.n	80122ec <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80122d4:	685b      	ldr	r3, [r3, #4]
 80122d6:	687a      	ldr	r2, [r7, #4]
 80122d8:	6852      	ldr	r2, [r2, #4]
 80122da:	b2d2      	uxtb	r2, r2
 80122dc:	4611      	mov	r1, r2
 80122de:	6878      	ldr	r0, [r7, #4]
 80122e0:	4798      	blx	r3
 80122e2:	4603      	mov	r3, r0
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d001      	beq.n	80122ec <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80122e8:	2303      	movs	r3, #3
 80122ea:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80122ec:	2340      	movs	r3, #64	@ 0x40
 80122ee:	2200      	movs	r2, #0
 80122f0:	2100      	movs	r1, #0
 80122f2:	6878      	ldr	r0, [r7, #4]
 80122f4:	f001 fb1f 	bl	8013936 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	2201      	movs	r2, #1
 80122fc:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	2240      	movs	r2, #64	@ 0x40
 8012304:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012308:	2340      	movs	r3, #64	@ 0x40
 801230a:	2200      	movs	r2, #0
 801230c:	2180      	movs	r1, #128	@ 0x80
 801230e:	6878      	ldr	r0, [r7, #4]
 8012310:	f001 fb11 	bl	8013936 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	2201      	movs	r2, #1
 8012318:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	2240      	movs	r2, #64	@ 0x40
 8012320:	841a      	strh	r2, [r3, #32]

  return ret;
 8012322:	7bfb      	ldrb	r3, [r7, #15]
}
 8012324:	4618      	mov	r0, r3
 8012326:	3710      	adds	r7, #16
 8012328:	46bd      	mov	sp, r7
 801232a:	bd80      	pop	{r7, pc}

0801232c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801232c:	b480      	push	{r7}
 801232e:	b083      	sub	sp, #12
 8012330:	af00      	add	r7, sp, #0
 8012332:	6078      	str	r0, [r7, #4]
 8012334:	460b      	mov	r3, r1
 8012336:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	78fa      	ldrb	r2, [r7, #3]
 801233c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801233e:	2300      	movs	r3, #0
}
 8012340:	4618      	mov	r0, r3
 8012342:	370c      	adds	r7, #12
 8012344:	46bd      	mov	sp, r7
 8012346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801234a:	4770      	bx	lr

0801234c <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801234c:	b480      	push	{r7}
 801234e:	b083      	sub	sp, #12
 8012350:	af00      	add	r7, sp, #0
 8012352:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801235a:	b2db      	uxtb	r3, r3
 801235c:	2b04      	cmp	r3, #4
 801235e:	d006      	beq.n	801236e <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012366:	b2da      	uxtb	r2, r3
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	2204      	movs	r2, #4
 8012372:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8012376:	2300      	movs	r3, #0
}
 8012378:	4618      	mov	r0, r3
 801237a:	370c      	adds	r7, #12
 801237c:	46bd      	mov	sp, r7
 801237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012382:	4770      	bx	lr

08012384 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8012384:	b480      	push	{r7}
 8012386:	b083      	sub	sp, #12
 8012388:	af00      	add	r7, sp, #0
 801238a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012392:	b2db      	uxtb	r3, r3
 8012394:	2b04      	cmp	r3, #4
 8012396:	d106      	bne.n	80123a6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 801239e:	b2da      	uxtb	r2, r3
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80123a6:	2300      	movs	r3, #0
}
 80123a8:	4618      	mov	r0, r3
 80123aa:	370c      	adds	r7, #12
 80123ac:	46bd      	mov	sp, r7
 80123ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123b2:	4770      	bx	lr

080123b4 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80123b4:	b580      	push	{r7, lr}
 80123b6:	b082      	sub	sp, #8
 80123b8:	af00      	add	r7, sp, #0
 80123ba:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80123c2:	b2db      	uxtb	r3, r3
 80123c4:	2b03      	cmp	r3, #3
 80123c6:	d110      	bne.n	80123ea <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	d00b      	beq.n	80123ea <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80123d8:	69db      	ldr	r3, [r3, #28]
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d005      	beq.n	80123ea <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80123e4:	69db      	ldr	r3, [r3, #28]
 80123e6:	6878      	ldr	r0, [r7, #4]
 80123e8:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80123ea:	2300      	movs	r3, #0
}
 80123ec:	4618      	mov	r0, r3
 80123ee:	3708      	adds	r7, #8
 80123f0:	46bd      	mov	sp, r7
 80123f2:	bd80      	pop	{r7, pc}

080123f4 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80123f4:	b580      	push	{r7, lr}
 80123f6:	b082      	sub	sp, #8
 80123f8:	af00      	add	r7, sp, #0
 80123fa:	6078      	str	r0, [r7, #4]
 80123fc:	460b      	mov	r3, r1
 80123fe:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	32ae      	adds	r2, #174	@ 0xae
 801240a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801240e:	2b00      	cmp	r3, #0
 8012410:	d101      	bne.n	8012416 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8012412:	2303      	movs	r3, #3
 8012414:	e01c      	b.n	8012450 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801241c:	b2db      	uxtb	r3, r3
 801241e:	2b03      	cmp	r3, #3
 8012420:	d115      	bne.n	801244e <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	32ae      	adds	r2, #174	@ 0xae
 801242c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012430:	6a1b      	ldr	r3, [r3, #32]
 8012432:	2b00      	cmp	r3, #0
 8012434:	d00b      	beq.n	801244e <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	32ae      	adds	r2, #174	@ 0xae
 8012440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012444:	6a1b      	ldr	r3, [r3, #32]
 8012446:	78fa      	ldrb	r2, [r7, #3]
 8012448:	4611      	mov	r1, r2
 801244a:	6878      	ldr	r0, [r7, #4]
 801244c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801244e:	2300      	movs	r3, #0
}
 8012450:	4618      	mov	r0, r3
 8012452:	3708      	adds	r7, #8
 8012454:	46bd      	mov	sp, r7
 8012456:	bd80      	pop	{r7, pc}

08012458 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8012458:	b580      	push	{r7, lr}
 801245a:	b082      	sub	sp, #8
 801245c:	af00      	add	r7, sp, #0
 801245e:	6078      	str	r0, [r7, #4]
 8012460:	460b      	mov	r3, r1
 8012462:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	32ae      	adds	r2, #174	@ 0xae
 801246e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012472:	2b00      	cmp	r3, #0
 8012474:	d101      	bne.n	801247a <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8012476:	2303      	movs	r3, #3
 8012478:	e01c      	b.n	80124b4 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012480:	b2db      	uxtb	r3, r3
 8012482:	2b03      	cmp	r3, #3
 8012484:	d115      	bne.n	80124b2 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	32ae      	adds	r2, #174	@ 0xae
 8012490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012496:	2b00      	cmp	r3, #0
 8012498:	d00b      	beq.n	80124b2 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	32ae      	adds	r2, #174	@ 0xae
 80124a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80124a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80124aa:	78fa      	ldrb	r2, [r7, #3]
 80124ac:	4611      	mov	r1, r2
 80124ae:	6878      	ldr	r0, [r7, #4]
 80124b0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80124b2:	2300      	movs	r3, #0
}
 80124b4:	4618      	mov	r0, r3
 80124b6:	3708      	adds	r7, #8
 80124b8:	46bd      	mov	sp, r7
 80124ba:	bd80      	pop	{r7, pc}

080124bc <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80124bc:	b480      	push	{r7}
 80124be:	b083      	sub	sp, #12
 80124c0:	af00      	add	r7, sp, #0
 80124c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80124c4:	2300      	movs	r3, #0
}
 80124c6:	4618      	mov	r0, r3
 80124c8:	370c      	adds	r7, #12
 80124ca:	46bd      	mov	sp, r7
 80124cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124d0:	4770      	bx	lr

080124d2 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80124d2:	b580      	push	{r7, lr}
 80124d4:	b084      	sub	sp, #16
 80124d6:	af00      	add	r7, sp, #0
 80124d8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80124da:	2300      	movs	r3, #0
 80124dc:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	2201      	movs	r2, #1
 80124e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d00e      	beq.n	801250e <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80124f6:	685b      	ldr	r3, [r3, #4]
 80124f8:	687a      	ldr	r2, [r7, #4]
 80124fa:	6852      	ldr	r2, [r2, #4]
 80124fc:	b2d2      	uxtb	r2, r2
 80124fe:	4611      	mov	r1, r2
 8012500:	6878      	ldr	r0, [r7, #4]
 8012502:	4798      	blx	r3
 8012504:	4603      	mov	r3, r0
 8012506:	2b00      	cmp	r3, #0
 8012508:	d001      	beq.n	801250e <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 801250a:	2303      	movs	r3, #3
 801250c:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801250e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012510:	4618      	mov	r0, r3
 8012512:	3710      	adds	r7, #16
 8012514:	46bd      	mov	sp, r7
 8012516:	bd80      	pop	{r7, pc}

08012518 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8012518:	b480      	push	{r7}
 801251a:	b083      	sub	sp, #12
 801251c:	af00      	add	r7, sp, #0
 801251e:	6078      	str	r0, [r7, #4]
 8012520:	460b      	mov	r3, r1
 8012522:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8012524:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8012526:	4618      	mov	r0, r3
 8012528:	370c      	adds	r7, #12
 801252a:	46bd      	mov	sp, r7
 801252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012530:	4770      	bx	lr

08012532 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8012532:	b480      	push	{r7}
 8012534:	b083      	sub	sp, #12
 8012536:	af00      	add	r7, sp, #0
 8012538:	6078      	str	r0, [r7, #4]
 801253a:	460b      	mov	r3, r1
 801253c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801253e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8012540:	4618      	mov	r0, r3
 8012542:	370c      	adds	r7, #12
 8012544:	46bd      	mov	sp, r7
 8012546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801254a:	4770      	bx	lr

0801254c <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 801254c:	b580      	push	{r7, lr}
 801254e:	b086      	sub	sp, #24
 8012550:	af00      	add	r7, sp, #0
 8012552:	6078      	str	r0, [r7, #4]
 8012554:	460b      	mov	r3, r1
 8012556:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8012560:	2300      	movs	r3, #0
 8012562:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8012564:	68fb      	ldr	r3, [r7, #12]
 8012566:	885b      	ldrh	r3, [r3, #2]
 8012568:	b29b      	uxth	r3, r3
 801256a:	68fa      	ldr	r2, [r7, #12]
 801256c:	7812      	ldrb	r2, [r2, #0]
 801256e:	4293      	cmp	r3, r2
 8012570:	d91f      	bls.n	80125b2 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8012572:	68fb      	ldr	r3, [r7, #12]
 8012574:	781b      	ldrb	r3, [r3, #0]
 8012576:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8012578:	e013      	b.n	80125a2 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 801257a:	f107 030a 	add.w	r3, r7, #10
 801257e:	4619      	mov	r1, r3
 8012580:	6978      	ldr	r0, [r7, #20]
 8012582:	f000 f81b 	bl	80125bc <USBD_GetNextDesc>
 8012586:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8012588:	697b      	ldr	r3, [r7, #20]
 801258a:	785b      	ldrb	r3, [r3, #1]
 801258c:	2b05      	cmp	r3, #5
 801258e:	d108      	bne.n	80125a2 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8012590:	697b      	ldr	r3, [r7, #20]
 8012592:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8012594:	693b      	ldr	r3, [r7, #16]
 8012596:	789b      	ldrb	r3, [r3, #2]
 8012598:	78fa      	ldrb	r2, [r7, #3]
 801259a:	429a      	cmp	r2, r3
 801259c:	d008      	beq.n	80125b0 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 801259e:	2300      	movs	r3, #0
 80125a0:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80125a2:	68fb      	ldr	r3, [r7, #12]
 80125a4:	885b      	ldrh	r3, [r3, #2]
 80125a6:	b29a      	uxth	r2, r3
 80125a8:	897b      	ldrh	r3, [r7, #10]
 80125aa:	429a      	cmp	r2, r3
 80125ac:	d8e5      	bhi.n	801257a <USBD_GetEpDesc+0x2e>
 80125ae:	e000      	b.n	80125b2 <USBD_GetEpDesc+0x66>
          break;
 80125b0:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80125b2:	693b      	ldr	r3, [r7, #16]
}
 80125b4:	4618      	mov	r0, r3
 80125b6:	3718      	adds	r7, #24
 80125b8:	46bd      	mov	sp, r7
 80125ba:	bd80      	pop	{r7, pc}

080125bc <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80125bc:	b480      	push	{r7}
 80125be:	b085      	sub	sp, #20
 80125c0:	af00      	add	r7, sp, #0
 80125c2:	6078      	str	r0, [r7, #4]
 80125c4:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80125ca:	683b      	ldr	r3, [r7, #0]
 80125cc:	881b      	ldrh	r3, [r3, #0]
 80125ce:	68fa      	ldr	r2, [r7, #12]
 80125d0:	7812      	ldrb	r2, [r2, #0]
 80125d2:	4413      	add	r3, r2
 80125d4:	b29a      	uxth	r2, r3
 80125d6:	683b      	ldr	r3, [r7, #0]
 80125d8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80125da:	68fb      	ldr	r3, [r7, #12]
 80125dc:	781b      	ldrb	r3, [r3, #0]
 80125de:	461a      	mov	r2, r3
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	4413      	add	r3, r2
 80125e4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80125e6:	68fb      	ldr	r3, [r7, #12]
}
 80125e8:	4618      	mov	r0, r3
 80125ea:	3714      	adds	r7, #20
 80125ec:	46bd      	mov	sp, r7
 80125ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125f2:	4770      	bx	lr

080125f4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80125f4:	b480      	push	{r7}
 80125f6:	b087      	sub	sp, #28
 80125f8:	af00      	add	r7, sp, #0
 80125fa:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8012600:	697b      	ldr	r3, [r7, #20]
 8012602:	781b      	ldrb	r3, [r3, #0]
 8012604:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8012606:	697b      	ldr	r3, [r7, #20]
 8012608:	3301      	adds	r3, #1
 801260a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801260c:	697b      	ldr	r3, [r7, #20]
 801260e:	781b      	ldrb	r3, [r3, #0]
 8012610:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8012612:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8012616:	021b      	lsls	r3, r3, #8
 8012618:	b21a      	sxth	r2, r3
 801261a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801261e:	4313      	orrs	r3, r2
 8012620:	b21b      	sxth	r3, r3
 8012622:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8012624:	89fb      	ldrh	r3, [r7, #14]
}
 8012626:	4618      	mov	r0, r3
 8012628:	371c      	adds	r7, #28
 801262a:	46bd      	mov	sp, r7
 801262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012630:	4770      	bx	lr
	...

08012634 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012634:	b580      	push	{r7, lr}
 8012636:	b084      	sub	sp, #16
 8012638:	af00      	add	r7, sp, #0
 801263a:	6078      	str	r0, [r7, #4]
 801263c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801263e:	2300      	movs	r3, #0
 8012640:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012642:	683b      	ldr	r3, [r7, #0]
 8012644:	781b      	ldrb	r3, [r3, #0]
 8012646:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801264a:	2b40      	cmp	r3, #64	@ 0x40
 801264c:	d005      	beq.n	801265a <USBD_StdDevReq+0x26>
 801264e:	2b40      	cmp	r3, #64	@ 0x40
 8012650:	d857      	bhi.n	8012702 <USBD_StdDevReq+0xce>
 8012652:	2b00      	cmp	r3, #0
 8012654:	d00f      	beq.n	8012676 <USBD_StdDevReq+0x42>
 8012656:	2b20      	cmp	r3, #32
 8012658:	d153      	bne.n	8012702 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	32ae      	adds	r2, #174	@ 0xae
 8012664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012668:	689b      	ldr	r3, [r3, #8]
 801266a:	6839      	ldr	r1, [r7, #0]
 801266c:	6878      	ldr	r0, [r7, #4]
 801266e:	4798      	blx	r3
 8012670:	4603      	mov	r3, r0
 8012672:	73fb      	strb	r3, [r7, #15]
      break;
 8012674:	e04a      	b.n	801270c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012676:	683b      	ldr	r3, [r7, #0]
 8012678:	785b      	ldrb	r3, [r3, #1]
 801267a:	2b09      	cmp	r3, #9
 801267c:	d83b      	bhi.n	80126f6 <USBD_StdDevReq+0xc2>
 801267e:	a201      	add	r2, pc, #4	@ (adr r2, 8012684 <USBD_StdDevReq+0x50>)
 8012680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012684:	080126d9 	.word	0x080126d9
 8012688:	080126ed 	.word	0x080126ed
 801268c:	080126f7 	.word	0x080126f7
 8012690:	080126e3 	.word	0x080126e3
 8012694:	080126f7 	.word	0x080126f7
 8012698:	080126b7 	.word	0x080126b7
 801269c:	080126ad 	.word	0x080126ad
 80126a0:	080126f7 	.word	0x080126f7
 80126a4:	080126cf 	.word	0x080126cf
 80126a8:	080126c1 	.word	0x080126c1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80126ac:	6839      	ldr	r1, [r7, #0]
 80126ae:	6878      	ldr	r0, [r7, #4]
 80126b0:	f000 fa3e 	bl	8012b30 <USBD_GetDescriptor>
          break;
 80126b4:	e024      	b.n	8012700 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80126b6:	6839      	ldr	r1, [r7, #0]
 80126b8:	6878      	ldr	r0, [r7, #4]
 80126ba:	f000 fba3 	bl	8012e04 <USBD_SetAddress>
          break;
 80126be:	e01f      	b.n	8012700 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80126c0:	6839      	ldr	r1, [r7, #0]
 80126c2:	6878      	ldr	r0, [r7, #4]
 80126c4:	f000 fbe2 	bl	8012e8c <USBD_SetConfig>
 80126c8:	4603      	mov	r3, r0
 80126ca:	73fb      	strb	r3, [r7, #15]
          break;
 80126cc:	e018      	b.n	8012700 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80126ce:	6839      	ldr	r1, [r7, #0]
 80126d0:	6878      	ldr	r0, [r7, #4]
 80126d2:	f000 fc85 	bl	8012fe0 <USBD_GetConfig>
          break;
 80126d6:	e013      	b.n	8012700 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80126d8:	6839      	ldr	r1, [r7, #0]
 80126da:	6878      	ldr	r0, [r7, #4]
 80126dc:	f000 fcb6 	bl	801304c <USBD_GetStatus>
          break;
 80126e0:	e00e      	b.n	8012700 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80126e2:	6839      	ldr	r1, [r7, #0]
 80126e4:	6878      	ldr	r0, [r7, #4]
 80126e6:	f000 fce5 	bl	80130b4 <USBD_SetFeature>
          break;
 80126ea:	e009      	b.n	8012700 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80126ec:	6839      	ldr	r1, [r7, #0]
 80126ee:	6878      	ldr	r0, [r7, #4]
 80126f0:	f000 fd09 	bl	8013106 <USBD_ClrFeature>
          break;
 80126f4:	e004      	b.n	8012700 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80126f6:	6839      	ldr	r1, [r7, #0]
 80126f8:	6878      	ldr	r0, [r7, #4]
 80126fa:	f000 fd60 	bl	80131be <USBD_CtlError>
          break;
 80126fe:	bf00      	nop
      }
      break;
 8012700:	e004      	b.n	801270c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8012702:	6839      	ldr	r1, [r7, #0]
 8012704:	6878      	ldr	r0, [r7, #4]
 8012706:	f000 fd5a 	bl	80131be <USBD_CtlError>
      break;
 801270a:	bf00      	nop
  }

  return ret;
 801270c:	7bfb      	ldrb	r3, [r7, #15]
}
 801270e:	4618      	mov	r0, r3
 8012710:	3710      	adds	r7, #16
 8012712:	46bd      	mov	sp, r7
 8012714:	bd80      	pop	{r7, pc}
 8012716:	bf00      	nop

08012718 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012718:	b580      	push	{r7, lr}
 801271a:	b084      	sub	sp, #16
 801271c:	af00      	add	r7, sp, #0
 801271e:	6078      	str	r0, [r7, #4]
 8012720:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012722:	2300      	movs	r3, #0
 8012724:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012726:	683b      	ldr	r3, [r7, #0]
 8012728:	781b      	ldrb	r3, [r3, #0]
 801272a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801272e:	2b40      	cmp	r3, #64	@ 0x40
 8012730:	d005      	beq.n	801273e <USBD_StdItfReq+0x26>
 8012732:	2b40      	cmp	r3, #64	@ 0x40
 8012734:	d852      	bhi.n	80127dc <USBD_StdItfReq+0xc4>
 8012736:	2b00      	cmp	r3, #0
 8012738:	d001      	beq.n	801273e <USBD_StdItfReq+0x26>
 801273a:	2b20      	cmp	r3, #32
 801273c:	d14e      	bne.n	80127dc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012744:	b2db      	uxtb	r3, r3
 8012746:	3b01      	subs	r3, #1
 8012748:	2b02      	cmp	r3, #2
 801274a:	d840      	bhi.n	80127ce <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801274c:	683b      	ldr	r3, [r7, #0]
 801274e:	889b      	ldrh	r3, [r3, #4]
 8012750:	b2db      	uxtb	r3, r3
 8012752:	2b01      	cmp	r3, #1
 8012754:	d836      	bhi.n	80127c4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8012756:	683b      	ldr	r3, [r7, #0]
 8012758:	889b      	ldrh	r3, [r3, #4]
 801275a:	b2db      	uxtb	r3, r3
 801275c:	4619      	mov	r1, r3
 801275e:	6878      	ldr	r0, [r7, #4]
 8012760:	f7ff feda 	bl	8012518 <USBD_CoreFindIF>
 8012764:	4603      	mov	r3, r0
 8012766:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012768:	7bbb      	ldrb	r3, [r7, #14]
 801276a:	2bff      	cmp	r3, #255	@ 0xff
 801276c:	d01d      	beq.n	80127aa <USBD_StdItfReq+0x92>
 801276e:	7bbb      	ldrb	r3, [r7, #14]
 8012770:	2b00      	cmp	r3, #0
 8012772:	d11a      	bne.n	80127aa <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8012774:	7bba      	ldrb	r2, [r7, #14]
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	32ae      	adds	r2, #174	@ 0xae
 801277a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801277e:	689b      	ldr	r3, [r3, #8]
 8012780:	2b00      	cmp	r3, #0
 8012782:	d00f      	beq.n	80127a4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8012784:	7bba      	ldrb	r2, [r7, #14]
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801278c:	7bba      	ldrb	r2, [r7, #14]
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	32ae      	adds	r2, #174	@ 0xae
 8012792:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012796:	689b      	ldr	r3, [r3, #8]
 8012798:	6839      	ldr	r1, [r7, #0]
 801279a:	6878      	ldr	r0, [r7, #4]
 801279c:	4798      	blx	r3
 801279e:	4603      	mov	r3, r0
 80127a0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80127a2:	e004      	b.n	80127ae <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80127a4:	2303      	movs	r3, #3
 80127a6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80127a8:	e001      	b.n	80127ae <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80127aa:	2303      	movs	r3, #3
 80127ac:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80127ae:	683b      	ldr	r3, [r7, #0]
 80127b0:	88db      	ldrh	r3, [r3, #6]
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	d110      	bne.n	80127d8 <USBD_StdItfReq+0xc0>
 80127b6:	7bfb      	ldrb	r3, [r7, #15]
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	d10d      	bne.n	80127d8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80127bc:	6878      	ldr	r0, [r7, #4]
 80127be:	f000 fdbb 	bl	8013338 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80127c2:	e009      	b.n	80127d8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80127c4:	6839      	ldr	r1, [r7, #0]
 80127c6:	6878      	ldr	r0, [r7, #4]
 80127c8:	f000 fcf9 	bl	80131be <USBD_CtlError>
          break;
 80127cc:	e004      	b.n	80127d8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80127ce:	6839      	ldr	r1, [r7, #0]
 80127d0:	6878      	ldr	r0, [r7, #4]
 80127d2:	f000 fcf4 	bl	80131be <USBD_CtlError>
          break;
 80127d6:	e000      	b.n	80127da <USBD_StdItfReq+0xc2>
          break;
 80127d8:	bf00      	nop
      }
      break;
 80127da:	e004      	b.n	80127e6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80127dc:	6839      	ldr	r1, [r7, #0]
 80127de:	6878      	ldr	r0, [r7, #4]
 80127e0:	f000 fced 	bl	80131be <USBD_CtlError>
      break;
 80127e4:	bf00      	nop
  }

  return ret;
 80127e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80127e8:	4618      	mov	r0, r3
 80127ea:	3710      	adds	r7, #16
 80127ec:	46bd      	mov	sp, r7
 80127ee:	bd80      	pop	{r7, pc}

080127f0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80127f0:	b580      	push	{r7, lr}
 80127f2:	b084      	sub	sp, #16
 80127f4:	af00      	add	r7, sp, #0
 80127f6:	6078      	str	r0, [r7, #4]
 80127f8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80127fa:	2300      	movs	r3, #0
 80127fc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80127fe:	683b      	ldr	r3, [r7, #0]
 8012800:	889b      	ldrh	r3, [r3, #4]
 8012802:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012804:	683b      	ldr	r3, [r7, #0]
 8012806:	781b      	ldrb	r3, [r3, #0]
 8012808:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801280c:	2b40      	cmp	r3, #64	@ 0x40
 801280e:	d007      	beq.n	8012820 <USBD_StdEPReq+0x30>
 8012810:	2b40      	cmp	r3, #64	@ 0x40
 8012812:	f200 8181 	bhi.w	8012b18 <USBD_StdEPReq+0x328>
 8012816:	2b00      	cmp	r3, #0
 8012818:	d02a      	beq.n	8012870 <USBD_StdEPReq+0x80>
 801281a:	2b20      	cmp	r3, #32
 801281c:	f040 817c 	bne.w	8012b18 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8012820:	7bbb      	ldrb	r3, [r7, #14]
 8012822:	4619      	mov	r1, r3
 8012824:	6878      	ldr	r0, [r7, #4]
 8012826:	f7ff fe84 	bl	8012532 <USBD_CoreFindEP>
 801282a:	4603      	mov	r3, r0
 801282c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801282e:	7b7b      	ldrb	r3, [r7, #13]
 8012830:	2bff      	cmp	r3, #255	@ 0xff
 8012832:	f000 8176 	beq.w	8012b22 <USBD_StdEPReq+0x332>
 8012836:	7b7b      	ldrb	r3, [r7, #13]
 8012838:	2b00      	cmp	r3, #0
 801283a:	f040 8172 	bne.w	8012b22 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 801283e:	7b7a      	ldrb	r2, [r7, #13]
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8012846:	7b7a      	ldrb	r2, [r7, #13]
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	32ae      	adds	r2, #174	@ 0xae
 801284c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012850:	689b      	ldr	r3, [r3, #8]
 8012852:	2b00      	cmp	r3, #0
 8012854:	f000 8165 	beq.w	8012b22 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8012858:	7b7a      	ldrb	r2, [r7, #13]
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	32ae      	adds	r2, #174	@ 0xae
 801285e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012862:	689b      	ldr	r3, [r3, #8]
 8012864:	6839      	ldr	r1, [r7, #0]
 8012866:	6878      	ldr	r0, [r7, #4]
 8012868:	4798      	blx	r3
 801286a:	4603      	mov	r3, r0
 801286c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801286e:	e158      	b.n	8012b22 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012870:	683b      	ldr	r3, [r7, #0]
 8012872:	785b      	ldrb	r3, [r3, #1]
 8012874:	2b03      	cmp	r3, #3
 8012876:	d008      	beq.n	801288a <USBD_StdEPReq+0x9a>
 8012878:	2b03      	cmp	r3, #3
 801287a:	f300 8147 	bgt.w	8012b0c <USBD_StdEPReq+0x31c>
 801287e:	2b00      	cmp	r3, #0
 8012880:	f000 809b 	beq.w	80129ba <USBD_StdEPReq+0x1ca>
 8012884:	2b01      	cmp	r3, #1
 8012886:	d03c      	beq.n	8012902 <USBD_StdEPReq+0x112>
 8012888:	e140      	b.n	8012b0c <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012890:	b2db      	uxtb	r3, r3
 8012892:	2b02      	cmp	r3, #2
 8012894:	d002      	beq.n	801289c <USBD_StdEPReq+0xac>
 8012896:	2b03      	cmp	r3, #3
 8012898:	d016      	beq.n	80128c8 <USBD_StdEPReq+0xd8>
 801289a:	e02c      	b.n	80128f6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801289c:	7bbb      	ldrb	r3, [r7, #14]
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d00d      	beq.n	80128be <USBD_StdEPReq+0xce>
 80128a2:	7bbb      	ldrb	r3, [r7, #14]
 80128a4:	2b80      	cmp	r3, #128	@ 0x80
 80128a6:	d00a      	beq.n	80128be <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80128a8:	7bbb      	ldrb	r3, [r7, #14]
 80128aa:	4619      	mov	r1, r3
 80128ac:	6878      	ldr	r0, [r7, #4]
 80128ae:	f001 f887 	bl	80139c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80128b2:	2180      	movs	r1, #128	@ 0x80
 80128b4:	6878      	ldr	r0, [r7, #4]
 80128b6:	f001 f883 	bl	80139c0 <USBD_LL_StallEP>
 80128ba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80128bc:	e020      	b.n	8012900 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80128be:	6839      	ldr	r1, [r7, #0]
 80128c0:	6878      	ldr	r0, [r7, #4]
 80128c2:	f000 fc7c 	bl	80131be <USBD_CtlError>
              break;
 80128c6:	e01b      	b.n	8012900 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80128c8:	683b      	ldr	r3, [r7, #0]
 80128ca:	885b      	ldrh	r3, [r3, #2]
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	d10e      	bne.n	80128ee <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80128d0:	7bbb      	ldrb	r3, [r7, #14]
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d00b      	beq.n	80128ee <USBD_StdEPReq+0xfe>
 80128d6:	7bbb      	ldrb	r3, [r7, #14]
 80128d8:	2b80      	cmp	r3, #128	@ 0x80
 80128da:	d008      	beq.n	80128ee <USBD_StdEPReq+0xfe>
 80128dc:	683b      	ldr	r3, [r7, #0]
 80128de:	88db      	ldrh	r3, [r3, #6]
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d104      	bne.n	80128ee <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80128e4:	7bbb      	ldrb	r3, [r7, #14]
 80128e6:	4619      	mov	r1, r3
 80128e8:	6878      	ldr	r0, [r7, #4]
 80128ea:	f001 f869 	bl	80139c0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80128ee:	6878      	ldr	r0, [r7, #4]
 80128f0:	f000 fd22 	bl	8013338 <USBD_CtlSendStatus>

              break;
 80128f4:	e004      	b.n	8012900 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80128f6:	6839      	ldr	r1, [r7, #0]
 80128f8:	6878      	ldr	r0, [r7, #4]
 80128fa:	f000 fc60 	bl	80131be <USBD_CtlError>
              break;
 80128fe:	bf00      	nop
          }
          break;
 8012900:	e109      	b.n	8012b16 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012908:	b2db      	uxtb	r3, r3
 801290a:	2b02      	cmp	r3, #2
 801290c:	d002      	beq.n	8012914 <USBD_StdEPReq+0x124>
 801290e:	2b03      	cmp	r3, #3
 8012910:	d016      	beq.n	8012940 <USBD_StdEPReq+0x150>
 8012912:	e04b      	b.n	80129ac <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012914:	7bbb      	ldrb	r3, [r7, #14]
 8012916:	2b00      	cmp	r3, #0
 8012918:	d00d      	beq.n	8012936 <USBD_StdEPReq+0x146>
 801291a:	7bbb      	ldrb	r3, [r7, #14]
 801291c:	2b80      	cmp	r3, #128	@ 0x80
 801291e:	d00a      	beq.n	8012936 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8012920:	7bbb      	ldrb	r3, [r7, #14]
 8012922:	4619      	mov	r1, r3
 8012924:	6878      	ldr	r0, [r7, #4]
 8012926:	f001 f84b 	bl	80139c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801292a:	2180      	movs	r1, #128	@ 0x80
 801292c:	6878      	ldr	r0, [r7, #4]
 801292e:	f001 f847 	bl	80139c0 <USBD_LL_StallEP>
 8012932:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8012934:	e040      	b.n	80129b8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8012936:	6839      	ldr	r1, [r7, #0]
 8012938:	6878      	ldr	r0, [r7, #4]
 801293a:	f000 fc40 	bl	80131be <USBD_CtlError>
              break;
 801293e:	e03b      	b.n	80129b8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012940:	683b      	ldr	r3, [r7, #0]
 8012942:	885b      	ldrh	r3, [r3, #2]
 8012944:	2b00      	cmp	r3, #0
 8012946:	d136      	bne.n	80129b6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8012948:	7bbb      	ldrb	r3, [r7, #14]
 801294a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801294e:	2b00      	cmp	r3, #0
 8012950:	d004      	beq.n	801295c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8012952:	7bbb      	ldrb	r3, [r7, #14]
 8012954:	4619      	mov	r1, r3
 8012956:	6878      	ldr	r0, [r7, #4]
 8012958:	f001 f851 	bl	80139fe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 801295c:	6878      	ldr	r0, [r7, #4]
 801295e:	f000 fceb 	bl	8013338 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8012962:	7bbb      	ldrb	r3, [r7, #14]
 8012964:	4619      	mov	r1, r3
 8012966:	6878      	ldr	r0, [r7, #4]
 8012968:	f7ff fde3 	bl	8012532 <USBD_CoreFindEP>
 801296c:	4603      	mov	r3, r0
 801296e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012970:	7b7b      	ldrb	r3, [r7, #13]
 8012972:	2bff      	cmp	r3, #255	@ 0xff
 8012974:	d01f      	beq.n	80129b6 <USBD_StdEPReq+0x1c6>
 8012976:	7b7b      	ldrb	r3, [r7, #13]
 8012978:	2b00      	cmp	r3, #0
 801297a:	d11c      	bne.n	80129b6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 801297c:	7b7a      	ldrb	r2, [r7, #13]
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8012984:	7b7a      	ldrb	r2, [r7, #13]
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	32ae      	adds	r2, #174	@ 0xae
 801298a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801298e:	689b      	ldr	r3, [r3, #8]
 8012990:	2b00      	cmp	r3, #0
 8012992:	d010      	beq.n	80129b6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8012994:	7b7a      	ldrb	r2, [r7, #13]
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	32ae      	adds	r2, #174	@ 0xae
 801299a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801299e:	689b      	ldr	r3, [r3, #8]
 80129a0:	6839      	ldr	r1, [r7, #0]
 80129a2:	6878      	ldr	r0, [r7, #4]
 80129a4:	4798      	blx	r3
 80129a6:	4603      	mov	r3, r0
 80129a8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80129aa:	e004      	b.n	80129b6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80129ac:	6839      	ldr	r1, [r7, #0]
 80129ae:	6878      	ldr	r0, [r7, #4]
 80129b0:	f000 fc05 	bl	80131be <USBD_CtlError>
              break;
 80129b4:	e000      	b.n	80129b8 <USBD_StdEPReq+0x1c8>
              break;
 80129b6:	bf00      	nop
          }
          break;
 80129b8:	e0ad      	b.n	8012b16 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80129c0:	b2db      	uxtb	r3, r3
 80129c2:	2b02      	cmp	r3, #2
 80129c4:	d002      	beq.n	80129cc <USBD_StdEPReq+0x1dc>
 80129c6:	2b03      	cmp	r3, #3
 80129c8:	d033      	beq.n	8012a32 <USBD_StdEPReq+0x242>
 80129ca:	e099      	b.n	8012b00 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80129cc:	7bbb      	ldrb	r3, [r7, #14]
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	d007      	beq.n	80129e2 <USBD_StdEPReq+0x1f2>
 80129d2:	7bbb      	ldrb	r3, [r7, #14]
 80129d4:	2b80      	cmp	r3, #128	@ 0x80
 80129d6:	d004      	beq.n	80129e2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80129d8:	6839      	ldr	r1, [r7, #0]
 80129da:	6878      	ldr	r0, [r7, #4]
 80129dc:	f000 fbef 	bl	80131be <USBD_CtlError>
                break;
 80129e0:	e093      	b.n	8012b0a <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80129e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	da0b      	bge.n	8012a02 <USBD_StdEPReq+0x212>
 80129ea:	7bbb      	ldrb	r3, [r7, #14]
 80129ec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80129f0:	4613      	mov	r3, r2
 80129f2:	009b      	lsls	r3, r3, #2
 80129f4:	4413      	add	r3, r2
 80129f6:	009b      	lsls	r3, r3, #2
 80129f8:	3310      	adds	r3, #16
 80129fa:	687a      	ldr	r2, [r7, #4]
 80129fc:	4413      	add	r3, r2
 80129fe:	3304      	adds	r3, #4
 8012a00:	e00b      	b.n	8012a1a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8012a02:	7bbb      	ldrb	r3, [r7, #14]
 8012a04:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012a08:	4613      	mov	r3, r2
 8012a0a:	009b      	lsls	r3, r3, #2
 8012a0c:	4413      	add	r3, r2
 8012a0e:	009b      	lsls	r3, r3, #2
 8012a10:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8012a14:	687a      	ldr	r2, [r7, #4]
 8012a16:	4413      	add	r3, r2
 8012a18:	3304      	adds	r3, #4
 8012a1a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8012a1c:	68bb      	ldr	r3, [r7, #8]
 8012a1e:	2200      	movs	r2, #0
 8012a20:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8012a22:	68bb      	ldr	r3, [r7, #8]
 8012a24:	330e      	adds	r3, #14
 8012a26:	2202      	movs	r2, #2
 8012a28:	4619      	mov	r1, r3
 8012a2a:	6878      	ldr	r0, [r7, #4]
 8012a2c:	f000 fc44 	bl	80132b8 <USBD_CtlSendData>
              break;
 8012a30:	e06b      	b.n	8012b0a <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8012a32:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	da11      	bge.n	8012a5e <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8012a3a:	7bbb      	ldrb	r3, [r7, #14]
 8012a3c:	f003 020f 	and.w	r2, r3, #15
 8012a40:	6879      	ldr	r1, [r7, #4]
 8012a42:	4613      	mov	r3, r2
 8012a44:	009b      	lsls	r3, r3, #2
 8012a46:	4413      	add	r3, r2
 8012a48:	009b      	lsls	r3, r3, #2
 8012a4a:	440b      	add	r3, r1
 8012a4c:	3323      	adds	r3, #35	@ 0x23
 8012a4e:	781b      	ldrb	r3, [r3, #0]
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	d117      	bne.n	8012a84 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8012a54:	6839      	ldr	r1, [r7, #0]
 8012a56:	6878      	ldr	r0, [r7, #4]
 8012a58:	f000 fbb1 	bl	80131be <USBD_CtlError>
                  break;
 8012a5c:	e055      	b.n	8012b0a <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8012a5e:	7bbb      	ldrb	r3, [r7, #14]
 8012a60:	f003 020f 	and.w	r2, r3, #15
 8012a64:	6879      	ldr	r1, [r7, #4]
 8012a66:	4613      	mov	r3, r2
 8012a68:	009b      	lsls	r3, r3, #2
 8012a6a:	4413      	add	r3, r2
 8012a6c:	009b      	lsls	r3, r3, #2
 8012a6e:	440b      	add	r3, r1
 8012a70:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8012a74:	781b      	ldrb	r3, [r3, #0]
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	d104      	bne.n	8012a84 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8012a7a:	6839      	ldr	r1, [r7, #0]
 8012a7c:	6878      	ldr	r0, [r7, #4]
 8012a7e:	f000 fb9e 	bl	80131be <USBD_CtlError>
                  break;
 8012a82:	e042      	b.n	8012b0a <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012a84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	da0b      	bge.n	8012aa4 <USBD_StdEPReq+0x2b4>
 8012a8c:	7bbb      	ldrb	r3, [r7, #14]
 8012a8e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8012a92:	4613      	mov	r3, r2
 8012a94:	009b      	lsls	r3, r3, #2
 8012a96:	4413      	add	r3, r2
 8012a98:	009b      	lsls	r3, r3, #2
 8012a9a:	3310      	adds	r3, #16
 8012a9c:	687a      	ldr	r2, [r7, #4]
 8012a9e:	4413      	add	r3, r2
 8012aa0:	3304      	adds	r3, #4
 8012aa2:	e00b      	b.n	8012abc <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8012aa4:	7bbb      	ldrb	r3, [r7, #14]
 8012aa6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012aaa:	4613      	mov	r3, r2
 8012aac:	009b      	lsls	r3, r3, #2
 8012aae:	4413      	add	r3, r2
 8012ab0:	009b      	lsls	r3, r3, #2
 8012ab2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8012ab6:	687a      	ldr	r2, [r7, #4]
 8012ab8:	4413      	add	r3, r2
 8012aba:	3304      	adds	r3, #4
 8012abc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8012abe:	7bbb      	ldrb	r3, [r7, #14]
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	d002      	beq.n	8012aca <USBD_StdEPReq+0x2da>
 8012ac4:	7bbb      	ldrb	r3, [r7, #14]
 8012ac6:	2b80      	cmp	r3, #128	@ 0x80
 8012ac8:	d103      	bne.n	8012ad2 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 8012aca:	68bb      	ldr	r3, [r7, #8]
 8012acc:	2200      	movs	r2, #0
 8012ace:	739a      	strb	r2, [r3, #14]
 8012ad0:	e00e      	b.n	8012af0 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8012ad2:	7bbb      	ldrb	r3, [r7, #14]
 8012ad4:	4619      	mov	r1, r3
 8012ad6:	6878      	ldr	r0, [r7, #4]
 8012ad8:	f000 ffb0 	bl	8013a3c <USBD_LL_IsStallEP>
 8012adc:	4603      	mov	r3, r0
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d003      	beq.n	8012aea <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8012ae2:	68bb      	ldr	r3, [r7, #8]
 8012ae4:	2201      	movs	r2, #1
 8012ae6:	739a      	strb	r2, [r3, #14]
 8012ae8:	e002      	b.n	8012af0 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 8012aea:	68bb      	ldr	r3, [r7, #8]
 8012aec:	2200      	movs	r2, #0
 8012aee:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8012af0:	68bb      	ldr	r3, [r7, #8]
 8012af2:	330e      	adds	r3, #14
 8012af4:	2202      	movs	r2, #2
 8012af6:	4619      	mov	r1, r3
 8012af8:	6878      	ldr	r0, [r7, #4]
 8012afa:	f000 fbdd 	bl	80132b8 <USBD_CtlSendData>
              break;
 8012afe:	e004      	b.n	8012b0a <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8012b00:	6839      	ldr	r1, [r7, #0]
 8012b02:	6878      	ldr	r0, [r7, #4]
 8012b04:	f000 fb5b 	bl	80131be <USBD_CtlError>
              break;
 8012b08:	bf00      	nop
          }
          break;
 8012b0a:	e004      	b.n	8012b16 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8012b0c:	6839      	ldr	r1, [r7, #0]
 8012b0e:	6878      	ldr	r0, [r7, #4]
 8012b10:	f000 fb55 	bl	80131be <USBD_CtlError>
          break;
 8012b14:	bf00      	nop
      }
      break;
 8012b16:	e005      	b.n	8012b24 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 8012b18:	6839      	ldr	r1, [r7, #0]
 8012b1a:	6878      	ldr	r0, [r7, #4]
 8012b1c:	f000 fb4f 	bl	80131be <USBD_CtlError>
      break;
 8012b20:	e000      	b.n	8012b24 <USBD_StdEPReq+0x334>
      break;
 8012b22:	bf00      	nop
  }

  return ret;
 8012b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b26:	4618      	mov	r0, r3
 8012b28:	3710      	adds	r7, #16
 8012b2a:	46bd      	mov	sp, r7
 8012b2c:	bd80      	pop	{r7, pc}
	...

08012b30 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012b30:	b580      	push	{r7, lr}
 8012b32:	b084      	sub	sp, #16
 8012b34:	af00      	add	r7, sp, #0
 8012b36:	6078      	str	r0, [r7, #4]
 8012b38:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8012b3a:	2300      	movs	r3, #0
 8012b3c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8012b3e:	2300      	movs	r3, #0
 8012b40:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8012b42:	2300      	movs	r3, #0
 8012b44:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8012b46:	683b      	ldr	r3, [r7, #0]
 8012b48:	885b      	ldrh	r3, [r3, #2]
 8012b4a:	0a1b      	lsrs	r3, r3, #8
 8012b4c:	b29b      	uxth	r3, r3
 8012b4e:	3b01      	subs	r3, #1
 8012b50:	2b06      	cmp	r3, #6
 8012b52:	f200 8128 	bhi.w	8012da6 <USBD_GetDescriptor+0x276>
 8012b56:	a201      	add	r2, pc, #4	@ (adr r2, 8012b5c <USBD_GetDescriptor+0x2c>)
 8012b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b5c:	08012b79 	.word	0x08012b79
 8012b60:	08012b91 	.word	0x08012b91
 8012b64:	08012bd1 	.word	0x08012bd1
 8012b68:	08012da7 	.word	0x08012da7
 8012b6c:	08012da7 	.word	0x08012da7
 8012b70:	08012d47 	.word	0x08012d47
 8012b74:	08012d73 	.word	0x08012d73
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012b7e:	681b      	ldr	r3, [r3, #0]
 8012b80:	687a      	ldr	r2, [r7, #4]
 8012b82:	7c12      	ldrb	r2, [r2, #16]
 8012b84:	f107 0108 	add.w	r1, r7, #8
 8012b88:	4610      	mov	r0, r2
 8012b8a:	4798      	blx	r3
 8012b8c:	60f8      	str	r0, [r7, #12]
      break;
 8012b8e:	e112      	b.n	8012db6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	7c1b      	ldrb	r3, [r3, #16]
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d10d      	bne.n	8012bb4 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012ba0:	f107 0208 	add.w	r2, r7, #8
 8012ba4:	4610      	mov	r0, r2
 8012ba6:	4798      	blx	r3
 8012ba8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8012baa:	68fb      	ldr	r3, [r7, #12]
 8012bac:	3301      	adds	r3, #1
 8012bae:	2202      	movs	r2, #2
 8012bb0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8012bb2:	e100      	b.n	8012db6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012bbc:	f107 0208 	add.w	r2, r7, #8
 8012bc0:	4610      	mov	r0, r2
 8012bc2:	4798      	blx	r3
 8012bc4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8012bc6:	68fb      	ldr	r3, [r7, #12]
 8012bc8:	3301      	adds	r3, #1
 8012bca:	2202      	movs	r2, #2
 8012bcc:	701a      	strb	r2, [r3, #0]
      break;
 8012bce:	e0f2      	b.n	8012db6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8012bd0:	683b      	ldr	r3, [r7, #0]
 8012bd2:	885b      	ldrh	r3, [r3, #2]
 8012bd4:	b2db      	uxtb	r3, r3
 8012bd6:	2b05      	cmp	r3, #5
 8012bd8:	f200 80ac 	bhi.w	8012d34 <USBD_GetDescriptor+0x204>
 8012bdc:	a201      	add	r2, pc, #4	@ (adr r2, 8012be4 <USBD_GetDescriptor+0xb4>)
 8012bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012be2:	bf00      	nop
 8012be4:	08012bfd 	.word	0x08012bfd
 8012be8:	08012c31 	.word	0x08012c31
 8012bec:	08012c65 	.word	0x08012c65
 8012bf0:	08012c99 	.word	0x08012c99
 8012bf4:	08012ccd 	.word	0x08012ccd
 8012bf8:	08012d01 	.word	0x08012d01
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012c02:	685b      	ldr	r3, [r3, #4]
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d00b      	beq.n	8012c20 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012c0e:	685b      	ldr	r3, [r3, #4]
 8012c10:	687a      	ldr	r2, [r7, #4]
 8012c12:	7c12      	ldrb	r2, [r2, #16]
 8012c14:	f107 0108 	add.w	r1, r7, #8
 8012c18:	4610      	mov	r0, r2
 8012c1a:	4798      	blx	r3
 8012c1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012c1e:	e091      	b.n	8012d44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012c20:	6839      	ldr	r1, [r7, #0]
 8012c22:	6878      	ldr	r0, [r7, #4]
 8012c24:	f000 facb 	bl	80131be <USBD_CtlError>
            err++;
 8012c28:	7afb      	ldrb	r3, [r7, #11]
 8012c2a:	3301      	adds	r3, #1
 8012c2c:	72fb      	strb	r3, [r7, #11]
          break;
 8012c2e:	e089      	b.n	8012d44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012c36:	689b      	ldr	r3, [r3, #8]
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	d00b      	beq.n	8012c54 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012c42:	689b      	ldr	r3, [r3, #8]
 8012c44:	687a      	ldr	r2, [r7, #4]
 8012c46:	7c12      	ldrb	r2, [r2, #16]
 8012c48:	f107 0108 	add.w	r1, r7, #8
 8012c4c:	4610      	mov	r0, r2
 8012c4e:	4798      	blx	r3
 8012c50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012c52:	e077      	b.n	8012d44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012c54:	6839      	ldr	r1, [r7, #0]
 8012c56:	6878      	ldr	r0, [r7, #4]
 8012c58:	f000 fab1 	bl	80131be <USBD_CtlError>
            err++;
 8012c5c:	7afb      	ldrb	r3, [r7, #11]
 8012c5e:	3301      	adds	r3, #1
 8012c60:	72fb      	strb	r3, [r7, #11]
          break;
 8012c62:	e06f      	b.n	8012d44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012c6a:	68db      	ldr	r3, [r3, #12]
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	d00b      	beq.n	8012c88 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012c76:	68db      	ldr	r3, [r3, #12]
 8012c78:	687a      	ldr	r2, [r7, #4]
 8012c7a:	7c12      	ldrb	r2, [r2, #16]
 8012c7c:	f107 0108 	add.w	r1, r7, #8
 8012c80:	4610      	mov	r0, r2
 8012c82:	4798      	blx	r3
 8012c84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012c86:	e05d      	b.n	8012d44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012c88:	6839      	ldr	r1, [r7, #0]
 8012c8a:	6878      	ldr	r0, [r7, #4]
 8012c8c:	f000 fa97 	bl	80131be <USBD_CtlError>
            err++;
 8012c90:	7afb      	ldrb	r3, [r7, #11]
 8012c92:	3301      	adds	r3, #1
 8012c94:	72fb      	strb	r3, [r7, #11]
          break;
 8012c96:	e055      	b.n	8012d44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012c9e:	691b      	ldr	r3, [r3, #16]
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d00b      	beq.n	8012cbc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012caa:	691b      	ldr	r3, [r3, #16]
 8012cac:	687a      	ldr	r2, [r7, #4]
 8012cae:	7c12      	ldrb	r2, [r2, #16]
 8012cb0:	f107 0108 	add.w	r1, r7, #8
 8012cb4:	4610      	mov	r0, r2
 8012cb6:	4798      	blx	r3
 8012cb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012cba:	e043      	b.n	8012d44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012cbc:	6839      	ldr	r1, [r7, #0]
 8012cbe:	6878      	ldr	r0, [r7, #4]
 8012cc0:	f000 fa7d 	bl	80131be <USBD_CtlError>
            err++;
 8012cc4:	7afb      	ldrb	r3, [r7, #11]
 8012cc6:	3301      	adds	r3, #1
 8012cc8:	72fb      	strb	r3, [r7, #11]
          break;
 8012cca:	e03b      	b.n	8012d44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012cd2:	695b      	ldr	r3, [r3, #20]
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	d00b      	beq.n	8012cf0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012cde:	695b      	ldr	r3, [r3, #20]
 8012ce0:	687a      	ldr	r2, [r7, #4]
 8012ce2:	7c12      	ldrb	r2, [r2, #16]
 8012ce4:	f107 0108 	add.w	r1, r7, #8
 8012ce8:	4610      	mov	r0, r2
 8012cea:	4798      	blx	r3
 8012cec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012cee:	e029      	b.n	8012d44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012cf0:	6839      	ldr	r1, [r7, #0]
 8012cf2:	6878      	ldr	r0, [r7, #4]
 8012cf4:	f000 fa63 	bl	80131be <USBD_CtlError>
            err++;
 8012cf8:	7afb      	ldrb	r3, [r7, #11]
 8012cfa:	3301      	adds	r3, #1
 8012cfc:	72fb      	strb	r3, [r7, #11]
          break;
 8012cfe:	e021      	b.n	8012d44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012d06:	699b      	ldr	r3, [r3, #24]
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d00b      	beq.n	8012d24 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012d12:	699b      	ldr	r3, [r3, #24]
 8012d14:	687a      	ldr	r2, [r7, #4]
 8012d16:	7c12      	ldrb	r2, [r2, #16]
 8012d18:	f107 0108 	add.w	r1, r7, #8
 8012d1c:	4610      	mov	r0, r2
 8012d1e:	4798      	blx	r3
 8012d20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012d22:	e00f      	b.n	8012d44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012d24:	6839      	ldr	r1, [r7, #0]
 8012d26:	6878      	ldr	r0, [r7, #4]
 8012d28:	f000 fa49 	bl	80131be <USBD_CtlError>
            err++;
 8012d2c:	7afb      	ldrb	r3, [r7, #11]
 8012d2e:	3301      	adds	r3, #1
 8012d30:	72fb      	strb	r3, [r7, #11]
          break;
 8012d32:	e007      	b.n	8012d44 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8012d34:	6839      	ldr	r1, [r7, #0]
 8012d36:	6878      	ldr	r0, [r7, #4]
 8012d38:	f000 fa41 	bl	80131be <USBD_CtlError>
          err++;
 8012d3c:	7afb      	ldrb	r3, [r7, #11]
 8012d3e:	3301      	adds	r3, #1
 8012d40:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8012d42:	bf00      	nop
      }
      break;
 8012d44:	e037      	b.n	8012db6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	7c1b      	ldrb	r3, [r3, #16]
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d109      	bne.n	8012d62 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012d54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012d56:	f107 0208 	add.w	r2, r7, #8
 8012d5a:	4610      	mov	r0, r2
 8012d5c:	4798      	blx	r3
 8012d5e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012d60:	e029      	b.n	8012db6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8012d62:	6839      	ldr	r1, [r7, #0]
 8012d64:	6878      	ldr	r0, [r7, #4]
 8012d66:	f000 fa2a 	bl	80131be <USBD_CtlError>
        err++;
 8012d6a:	7afb      	ldrb	r3, [r7, #11]
 8012d6c:	3301      	adds	r3, #1
 8012d6e:	72fb      	strb	r3, [r7, #11]
      break;
 8012d70:	e021      	b.n	8012db6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	7c1b      	ldrb	r3, [r3, #16]
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	d10d      	bne.n	8012d96 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012d82:	f107 0208 	add.w	r2, r7, #8
 8012d86:	4610      	mov	r0, r2
 8012d88:	4798      	blx	r3
 8012d8a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8012d8c:	68fb      	ldr	r3, [r7, #12]
 8012d8e:	3301      	adds	r3, #1
 8012d90:	2207      	movs	r2, #7
 8012d92:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012d94:	e00f      	b.n	8012db6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8012d96:	6839      	ldr	r1, [r7, #0]
 8012d98:	6878      	ldr	r0, [r7, #4]
 8012d9a:	f000 fa10 	bl	80131be <USBD_CtlError>
        err++;
 8012d9e:	7afb      	ldrb	r3, [r7, #11]
 8012da0:	3301      	adds	r3, #1
 8012da2:	72fb      	strb	r3, [r7, #11]
      break;
 8012da4:	e007      	b.n	8012db6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8012da6:	6839      	ldr	r1, [r7, #0]
 8012da8:	6878      	ldr	r0, [r7, #4]
 8012daa:	f000 fa08 	bl	80131be <USBD_CtlError>
      err++;
 8012dae:	7afb      	ldrb	r3, [r7, #11]
 8012db0:	3301      	adds	r3, #1
 8012db2:	72fb      	strb	r3, [r7, #11]
      break;
 8012db4:	bf00      	nop
  }

  if (err != 0U)
 8012db6:	7afb      	ldrb	r3, [r7, #11]
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	d11e      	bne.n	8012dfa <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8012dbc:	683b      	ldr	r3, [r7, #0]
 8012dbe:	88db      	ldrh	r3, [r3, #6]
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d016      	beq.n	8012df2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8012dc4:	893b      	ldrh	r3, [r7, #8]
 8012dc6:	2b00      	cmp	r3, #0
 8012dc8:	d00e      	beq.n	8012de8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8012dca:	683b      	ldr	r3, [r7, #0]
 8012dcc:	88da      	ldrh	r2, [r3, #6]
 8012dce:	893b      	ldrh	r3, [r7, #8]
 8012dd0:	4293      	cmp	r3, r2
 8012dd2:	bf28      	it	cs
 8012dd4:	4613      	movcs	r3, r2
 8012dd6:	b29b      	uxth	r3, r3
 8012dd8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8012dda:	893b      	ldrh	r3, [r7, #8]
 8012ddc:	461a      	mov	r2, r3
 8012dde:	68f9      	ldr	r1, [r7, #12]
 8012de0:	6878      	ldr	r0, [r7, #4]
 8012de2:	f000 fa69 	bl	80132b8 <USBD_CtlSendData>
 8012de6:	e009      	b.n	8012dfc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8012de8:	6839      	ldr	r1, [r7, #0]
 8012dea:	6878      	ldr	r0, [r7, #4]
 8012dec:	f000 f9e7 	bl	80131be <USBD_CtlError>
 8012df0:	e004      	b.n	8012dfc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8012df2:	6878      	ldr	r0, [r7, #4]
 8012df4:	f000 faa0 	bl	8013338 <USBD_CtlSendStatus>
 8012df8:	e000      	b.n	8012dfc <USBD_GetDescriptor+0x2cc>
    return;
 8012dfa:	bf00      	nop
  }
}
 8012dfc:	3710      	adds	r7, #16
 8012dfe:	46bd      	mov	sp, r7
 8012e00:	bd80      	pop	{r7, pc}
 8012e02:	bf00      	nop

08012e04 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012e04:	b580      	push	{r7, lr}
 8012e06:	b084      	sub	sp, #16
 8012e08:	af00      	add	r7, sp, #0
 8012e0a:	6078      	str	r0, [r7, #4]
 8012e0c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8012e0e:	683b      	ldr	r3, [r7, #0]
 8012e10:	889b      	ldrh	r3, [r3, #4]
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d131      	bne.n	8012e7a <USBD_SetAddress+0x76>
 8012e16:	683b      	ldr	r3, [r7, #0]
 8012e18:	88db      	ldrh	r3, [r3, #6]
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d12d      	bne.n	8012e7a <USBD_SetAddress+0x76>
 8012e1e:	683b      	ldr	r3, [r7, #0]
 8012e20:	885b      	ldrh	r3, [r3, #2]
 8012e22:	2b7f      	cmp	r3, #127	@ 0x7f
 8012e24:	d829      	bhi.n	8012e7a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8012e26:	683b      	ldr	r3, [r7, #0]
 8012e28:	885b      	ldrh	r3, [r3, #2]
 8012e2a:	b2db      	uxtb	r3, r3
 8012e2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012e30:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012e38:	b2db      	uxtb	r3, r3
 8012e3a:	2b03      	cmp	r3, #3
 8012e3c:	d104      	bne.n	8012e48 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8012e3e:	6839      	ldr	r1, [r7, #0]
 8012e40:	6878      	ldr	r0, [r7, #4]
 8012e42:	f000 f9bc 	bl	80131be <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012e46:	e01d      	b.n	8012e84 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	7bfa      	ldrb	r2, [r7, #15]
 8012e4c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8012e50:	7bfb      	ldrb	r3, [r7, #15]
 8012e52:	4619      	mov	r1, r3
 8012e54:	6878      	ldr	r0, [r7, #4]
 8012e56:	f000 fe1d 	bl	8013a94 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8012e5a:	6878      	ldr	r0, [r7, #4]
 8012e5c:	f000 fa6c 	bl	8013338 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8012e60:	7bfb      	ldrb	r3, [r7, #15]
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	d004      	beq.n	8012e70 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	2202      	movs	r2, #2
 8012e6a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012e6e:	e009      	b.n	8012e84 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	2201      	movs	r2, #1
 8012e74:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012e78:	e004      	b.n	8012e84 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8012e7a:	6839      	ldr	r1, [r7, #0]
 8012e7c:	6878      	ldr	r0, [r7, #4]
 8012e7e:	f000 f99e 	bl	80131be <USBD_CtlError>
  }
}
 8012e82:	bf00      	nop
 8012e84:	bf00      	nop
 8012e86:	3710      	adds	r7, #16
 8012e88:	46bd      	mov	sp, r7
 8012e8a:	bd80      	pop	{r7, pc}

08012e8c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012e8c:	b580      	push	{r7, lr}
 8012e8e:	b084      	sub	sp, #16
 8012e90:	af00      	add	r7, sp, #0
 8012e92:	6078      	str	r0, [r7, #4]
 8012e94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012e96:	2300      	movs	r3, #0
 8012e98:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8012e9a:	683b      	ldr	r3, [r7, #0]
 8012e9c:	885b      	ldrh	r3, [r3, #2]
 8012e9e:	b2da      	uxtb	r2, r3
 8012ea0:	4b4e      	ldr	r3, [pc, #312]	@ (8012fdc <USBD_SetConfig+0x150>)
 8012ea2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8012ea4:	4b4d      	ldr	r3, [pc, #308]	@ (8012fdc <USBD_SetConfig+0x150>)
 8012ea6:	781b      	ldrb	r3, [r3, #0]
 8012ea8:	2b01      	cmp	r3, #1
 8012eaa:	d905      	bls.n	8012eb8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8012eac:	6839      	ldr	r1, [r7, #0]
 8012eae:	6878      	ldr	r0, [r7, #4]
 8012eb0:	f000 f985 	bl	80131be <USBD_CtlError>
    return USBD_FAIL;
 8012eb4:	2303      	movs	r3, #3
 8012eb6:	e08c      	b.n	8012fd2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012ebe:	b2db      	uxtb	r3, r3
 8012ec0:	2b02      	cmp	r3, #2
 8012ec2:	d002      	beq.n	8012eca <USBD_SetConfig+0x3e>
 8012ec4:	2b03      	cmp	r3, #3
 8012ec6:	d029      	beq.n	8012f1c <USBD_SetConfig+0x90>
 8012ec8:	e075      	b.n	8012fb6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8012eca:	4b44      	ldr	r3, [pc, #272]	@ (8012fdc <USBD_SetConfig+0x150>)
 8012ecc:	781b      	ldrb	r3, [r3, #0]
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	d020      	beq.n	8012f14 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8012ed2:	4b42      	ldr	r3, [pc, #264]	@ (8012fdc <USBD_SetConfig+0x150>)
 8012ed4:	781b      	ldrb	r3, [r3, #0]
 8012ed6:	461a      	mov	r2, r3
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012edc:	4b3f      	ldr	r3, [pc, #252]	@ (8012fdc <USBD_SetConfig+0x150>)
 8012ede:	781b      	ldrb	r3, [r3, #0]
 8012ee0:	4619      	mov	r1, r3
 8012ee2:	6878      	ldr	r0, [r7, #4]
 8012ee4:	f7fe ffcd 	bl	8011e82 <USBD_SetClassConfig>
 8012ee8:	4603      	mov	r3, r0
 8012eea:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8012eec:	7bfb      	ldrb	r3, [r7, #15]
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	d008      	beq.n	8012f04 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8012ef2:	6839      	ldr	r1, [r7, #0]
 8012ef4:	6878      	ldr	r0, [r7, #4]
 8012ef6:	f000 f962 	bl	80131be <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	2202      	movs	r2, #2
 8012efe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012f02:	e065      	b.n	8012fd0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8012f04:	6878      	ldr	r0, [r7, #4]
 8012f06:	f000 fa17 	bl	8013338 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	2203      	movs	r2, #3
 8012f0e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8012f12:	e05d      	b.n	8012fd0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8012f14:	6878      	ldr	r0, [r7, #4]
 8012f16:	f000 fa0f 	bl	8013338 <USBD_CtlSendStatus>
      break;
 8012f1a:	e059      	b.n	8012fd0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8012f1c:	4b2f      	ldr	r3, [pc, #188]	@ (8012fdc <USBD_SetConfig+0x150>)
 8012f1e:	781b      	ldrb	r3, [r3, #0]
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	d112      	bne.n	8012f4a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	2202      	movs	r2, #2
 8012f28:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8012f2c:	4b2b      	ldr	r3, [pc, #172]	@ (8012fdc <USBD_SetConfig+0x150>)
 8012f2e:	781b      	ldrb	r3, [r3, #0]
 8012f30:	461a      	mov	r2, r3
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012f36:	4b29      	ldr	r3, [pc, #164]	@ (8012fdc <USBD_SetConfig+0x150>)
 8012f38:	781b      	ldrb	r3, [r3, #0]
 8012f3a:	4619      	mov	r1, r3
 8012f3c:	6878      	ldr	r0, [r7, #4]
 8012f3e:	f7fe ffbc 	bl	8011eba <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8012f42:	6878      	ldr	r0, [r7, #4]
 8012f44:	f000 f9f8 	bl	8013338 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012f48:	e042      	b.n	8012fd0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8012f4a:	4b24      	ldr	r3, [pc, #144]	@ (8012fdc <USBD_SetConfig+0x150>)
 8012f4c:	781b      	ldrb	r3, [r3, #0]
 8012f4e:	461a      	mov	r2, r3
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	685b      	ldr	r3, [r3, #4]
 8012f54:	429a      	cmp	r2, r3
 8012f56:	d02a      	beq.n	8012fae <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	685b      	ldr	r3, [r3, #4]
 8012f5c:	b2db      	uxtb	r3, r3
 8012f5e:	4619      	mov	r1, r3
 8012f60:	6878      	ldr	r0, [r7, #4]
 8012f62:	f7fe ffaa 	bl	8011eba <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8012f66:	4b1d      	ldr	r3, [pc, #116]	@ (8012fdc <USBD_SetConfig+0x150>)
 8012f68:	781b      	ldrb	r3, [r3, #0]
 8012f6a:	461a      	mov	r2, r3
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012f70:	4b1a      	ldr	r3, [pc, #104]	@ (8012fdc <USBD_SetConfig+0x150>)
 8012f72:	781b      	ldrb	r3, [r3, #0]
 8012f74:	4619      	mov	r1, r3
 8012f76:	6878      	ldr	r0, [r7, #4]
 8012f78:	f7fe ff83 	bl	8011e82 <USBD_SetClassConfig>
 8012f7c:	4603      	mov	r3, r0
 8012f7e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8012f80:	7bfb      	ldrb	r3, [r7, #15]
 8012f82:	2b00      	cmp	r3, #0
 8012f84:	d00f      	beq.n	8012fa6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8012f86:	6839      	ldr	r1, [r7, #0]
 8012f88:	6878      	ldr	r0, [r7, #4]
 8012f8a:	f000 f918 	bl	80131be <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	685b      	ldr	r3, [r3, #4]
 8012f92:	b2db      	uxtb	r3, r3
 8012f94:	4619      	mov	r1, r3
 8012f96:	6878      	ldr	r0, [r7, #4]
 8012f98:	f7fe ff8f 	bl	8011eba <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	2202      	movs	r2, #2
 8012fa0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8012fa4:	e014      	b.n	8012fd0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8012fa6:	6878      	ldr	r0, [r7, #4]
 8012fa8:	f000 f9c6 	bl	8013338 <USBD_CtlSendStatus>
      break;
 8012fac:	e010      	b.n	8012fd0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8012fae:	6878      	ldr	r0, [r7, #4]
 8012fb0:	f000 f9c2 	bl	8013338 <USBD_CtlSendStatus>
      break;
 8012fb4:	e00c      	b.n	8012fd0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8012fb6:	6839      	ldr	r1, [r7, #0]
 8012fb8:	6878      	ldr	r0, [r7, #4]
 8012fba:	f000 f900 	bl	80131be <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012fbe:	4b07      	ldr	r3, [pc, #28]	@ (8012fdc <USBD_SetConfig+0x150>)
 8012fc0:	781b      	ldrb	r3, [r3, #0]
 8012fc2:	4619      	mov	r1, r3
 8012fc4:	6878      	ldr	r0, [r7, #4]
 8012fc6:	f7fe ff78 	bl	8011eba <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8012fca:	2303      	movs	r3, #3
 8012fcc:	73fb      	strb	r3, [r7, #15]
      break;
 8012fce:	bf00      	nop
  }

  return ret;
 8012fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8012fd2:	4618      	mov	r0, r3
 8012fd4:	3710      	adds	r7, #16
 8012fd6:	46bd      	mov	sp, r7
 8012fd8:	bd80      	pop	{r7, pc}
 8012fda:	bf00      	nop
 8012fdc:	20000934 	.word	0x20000934

08012fe0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012fe0:	b580      	push	{r7, lr}
 8012fe2:	b082      	sub	sp, #8
 8012fe4:	af00      	add	r7, sp, #0
 8012fe6:	6078      	str	r0, [r7, #4]
 8012fe8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8012fea:	683b      	ldr	r3, [r7, #0]
 8012fec:	88db      	ldrh	r3, [r3, #6]
 8012fee:	2b01      	cmp	r3, #1
 8012ff0:	d004      	beq.n	8012ffc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8012ff2:	6839      	ldr	r1, [r7, #0]
 8012ff4:	6878      	ldr	r0, [r7, #4]
 8012ff6:	f000 f8e2 	bl	80131be <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8012ffa:	e023      	b.n	8013044 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013002:	b2db      	uxtb	r3, r3
 8013004:	2b02      	cmp	r3, #2
 8013006:	dc02      	bgt.n	801300e <USBD_GetConfig+0x2e>
 8013008:	2b00      	cmp	r3, #0
 801300a:	dc03      	bgt.n	8013014 <USBD_GetConfig+0x34>
 801300c:	e015      	b.n	801303a <USBD_GetConfig+0x5a>
 801300e:	2b03      	cmp	r3, #3
 8013010:	d00b      	beq.n	801302a <USBD_GetConfig+0x4a>
 8013012:	e012      	b.n	801303a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	2200      	movs	r2, #0
 8013018:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	3308      	adds	r3, #8
 801301e:	2201      	movs	r2, #1
 8013020:	4619      	mov	r1, r3
 8013022:	6878      	ldr	r0, [r7, #4]
 8013024:	f000 f948 	bl	80132b8 <USBD_CtlSendData>
        break;
 8013028:	e00c      	b.n	8013044 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	3304      	adds	r3, #4
 801302e:	2201      	movs	r2, #1
 8013030:	4619      	mov	r1, r3
 8013032:	6878      	ldr	r0, [r7, #4]
 8013034:	f000 f940 	bl	80132b8 <USBD_CtlSendData>
        break;
 8013038:	e004      	b.n	8013044 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801303a:	6839      	ldr	r1, [r7, #0]
 801303c:	6878      	ldr	r0, [r7, #4]
 801303e:	f000 f8be 	bl	80131be <USBD_CtlError>
        break;
 8013042:	bf00      	nop
}
 8013044:	bf00      	nop
 8013046:	3708      	adds	r7, #8
 8013048:	46bd      	mov	sp, r7
 801304a:	bd80      	pop	{r7, pc}

0801304c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801304c:	b580      	push	{r7, lr}
 801304e:	b082      	sub	sp, #8
 8013050:	af00      	add	r7, sp, #0
 8013052:	6078      	str	r0, [r7, #4]
 8013054:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801305c:	b2db      	uxtb	r3, r3
 801305e:	3b01      	subs	r3, #1
 8013060:	2b02      	cmp	r3, #2
 8013062:	d81e      	bhi.n	80130a2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8013064:	683b      	ldr	r3, [r7, #0]
 8013066:	88db      	ldrh	r3, [r3, #6]
 8013068:	2b02      	cmp	r3, #2
 801306a:	d004      	beq.n	8013076 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 801306c:	6839      	ldr	r1, [r7, #0]
 801306e:	6878      	ldr	r0, [r7, #4]
 8013070:	f000 f8a5 	bl	80131be <USBD_CtlError>
        break;
 8013074:	e01a      	b.n	80130ac <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	2201      	movs	r2, #1
 801307a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8013082:	2b00      	cmp	r3, #0
 8013084:	d005      	beq.n	8013092 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	68db      	ldr	r3, [r3, #12]
 801308a:	f043 0202 	orr.w	r2, r3, #2
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	330c      	adds	r3, #12
 8013096:	2202      	movs	r2, #2
 8013098:	4619      	mov	r1, r3
 801309a:	6878      	ldr	r0, [r7, #4]
 801309c:	f000 f90c 	bl	80132b8 <USBD_CtlSendData>
      break;
 80130a0:	e004      	b.n	80130ac <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80130a2:	6839      	ldr	r1, [r7, #0]
 80130a4:	6878      	ldr	r0, [r7, #4]
 80130a6:	f000 f88a 	bl	80131be <USBD_CtlError>
      break;
 80130aa:	bf00      	nop
  }
}
 80130ac:	bf00      	nop
 80130ae:	3708      	adds	r7, #8
 80130b0:	46bd      	mov	sp, r7
 80130b2:	bd80      	pop	{r7, pc}

080130b4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80130b4:	b580      	push	{r7, lr}
 80130b6:	b082      	sub	sp, #8
 80130b8:	af00      	add	r7, sp, #0
 80130ba:	6078      	str	r0, [r7, #4]
 80130bc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80130be:	683b      	ldr	r3, [r7, #0]
 80130c0:	885b      	ldrh	r3, [r3, #2]
 80130c2:	2b01      	cmp	r3, #1
 80130c4:	d107      	bne.n	80130d6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	2201      	movs	r2, #1
 80130ca:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80130ce:	6878      	ldr	r0, [r7, #4]
 80130d0:	f000 f932 	bl	8013338 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80130d4:	e013      	b.n	80130fe <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80130d6:	683b      	ldr	r3, [r7, #0]
 80130d8:	885b      	ldrh	r3, [r3, #2]
 80130da:	2b02      	cmp	r3, #2
 80130dc:	d10b      	bne.n	80130f6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80130de:	683b      	ldr	r3, [r7, #0]
 80130e0:	889b      	ldrh	r3, [r3, #4]
 80130e2:	0a1b      	lsrs	r3, r3, #8
 80130e4:	b29b      	uxth	r3, r3
 80130e6:	b2da      	uxtb	r2, r3
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80130ee:	6878      	ldr	r0, [r7, #4]
 80130f0:	f000 f922 	bl	8013338 <USBD_CtlSendStatus>
}
 80130f4:	e003      	b.n	80130fe <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80130f6:	6839      	ldr	r1, [r7, #0]
 80130f8:	6878      	ldr	r0, [r7, #4]
 80130fa:	f000 f860 	bl	80131be <USBD_CtlError>
}
 80130fe:	bf00      	nop
 8013100:	3708      	adds	r7, #8
 8013102:	46bd      	mov	sp, r7
 8013104:	bd80      	pop	{r7, pc}

08013106 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013106:	b580      	push	{r7, lr}
 8013108:	b082      	sub	sp, #8
 801310a:	af00      	add	r7, sp, #0
 801310c:	6078      	str	r0, [r7, #4]
 801310e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013116:	b2db      	uxtb	r3, r3
 8013118:	3b01      	subs	r3, #1
 801311a:	2b02      	cmp	r3, #2
 801311c:	d80b      	bhi.n	8013136 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801311e:	683b      	ldr	r3, [r7, #0]
 8013120:	885b      	ldrh	r3, [r3, #2]
 8013122:	2b01      	cmp	r3, #1
 8013124:	d10c      	bne.n	8013140 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	2200      	movs	r2, #0
 801312a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801312e:	6878      	ldr	r0, [r7, #4]
 8013130:	f000 f902 	bl	8013338 <USBD_CtlSendStatus>
      }
      break;
 8013134:	e004      	b.n	8013140 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8013136:	6839      	ldr	r1, [r7, #0]
 8013138:	6878      	ldr	r0, [r7, #4]
 801313a:	f000 f840 	bl	80131be <USBD_CtlError>
      break;
 801313e:	e000      	b.n	8013142 <USBD_ClrFeature+0x3c>
      break;
 8013140:	bf00      	nop
  }
}
 8013142:	bf00      	nop
 8013144:	3708      	adds	r7, #8
 8013146:	46bd      	mov	sp, r7
 8013148:	bd80      	pop	{r7, pc}

0801314a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801314a:	b580      	push	{r7, lr}
 801314c:	b084      	sub	sp, #16
 801314e:	af00      	add	r7, sp, #0
 8013150:	6078      	str	r0, [r7, #4]
 8013152:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8013154:	683b      	ldr	r3, [r7, #0]
 8013156:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8013158:	68fb      	ldr	r3, [r7, #12]
 801315a:	781a      	ldrb	r2, [r3, #0]
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8013160:	68fb      	ldr	r3, [r7, #12]
 8013162:	3301      	adds	r3, #1
 8013164:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8013166:	68fb      	ldr	r3, [r7, #12]
 8013168:	781a      	ldrb	r2, [r3, #0]
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801316e:	68fb      	ldr	r3, [r7, #12]
 8013170:	3301      	adds	r3, #1
 8013172:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8013174:	68f8      	ldr	r0, [r7, #12]
 8013176:	f7ff fa3d 	bl	80125f4 <SWAPBYTE>
 801317a:	4603      	mov	r3, r0
 801317c:	461a      	mov	r2, r3
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8013182:	68fb      	ldr	r3, [r7, #12]
 8013184:	3301      	adds	r3, #1
 8013186:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8013188:	68fb      	ldr	r3, [r7, #12]
 801318a:	3301      	adds	r3, #1
 801318c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801318e:	68f8      	ldr	r0, [r7, #12]
 8013190:	f7ff fa30 	bl	80125f4 <SWAPBYTE>
 8013194:	4603      	mov	r3, r0
 8013196:	461a      	mov	r2, r3
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801319c:	68fb      	ldr	r3, [r7, #12]
 801319e:	3301      	adds	r3, #1
 80131a0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80131a2:	68fb      	ldr	r3, [r7, #12]
 80131a4:	3301      	adds	r3, #1
 80131a6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80131a8:	68f8      	ldr	r0, [r7, #12]
 80131aa:	f7ff fa23 	bl	80125f4 <SWAPBYTE>
 80131ae:	4603      	mov	r3, r0
 80131b0:	461a      	mov	r2, r3
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	80da      	strh	r2, [r3, #6]
}
 80131b6:	bf00      	nop
 80131b8:	3710      	adds	r7, #16
 80131ba:	46bd      	mov	sp, r7
 80131bc:	bd80      	pop	{r7, pc}

080131be <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80131be:	b580      	push	{r7, lr}
 80131c0:	b082      	sub	sp, #8
 80131c2:	af00      	add	r7, sp, #0
 80131c4:	6078      	str	r0, [r7, #4]
 80131c6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80131c8:	2180      	movs	r1, #128	@ 0x80
 80131ca:	6878      	ldr	r0, [r7, #4]
 80131cc:	f000 fbf8 	bl	80139c0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80131d0:	2100      	movs	r1, #0
 80131d2:	6878      	ldr	r0, [r7, #4]
 80131d4:	f000 fbf4 	bl	80139c0 <USBD_LL_StallEP>
}
 80131d8:	bf00      	nop
 80131da:	3708      	adds	r7, #8
 80131dc:	46bd      	mov	sp, r7
 80131de:	bd80      	pop	{r7, pc}

080131e0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80131e0:	b580      	push	{r7, lr}
 80131e2:	b086      	sub	sp, #24
 80131e4:	af00      	add	r7, sp, #0
 80131e6:	60f8      	str	r0, [r7, #12]
 80131e8:	60b9      	str	r1, [r7, #8]
 80131ea:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80131ec:	2300      	movs	r3, #0
 80131ee:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80131f0:	68fb      	ldr	r3, [r7, #12]
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d042      	beq.n	801327c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80131f6:	68fb      	ldr	r3, [r7, #12]
 80131f8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80131fa:	6938      	ldr	r0, [r7, #16]
 80131fc:	f000 f842 	bl	8013284 <USBD_GetLen>
 8013200:	4603      	mov	r3, r0
 8013202:	3301      	adds	r3, #1
 8013204:	005b      	lsls	r3, r3, #1
 8013206:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801320a:	d808      	bhi.n	801321e <USBD_GetString+0x3e>
 801320c:	6938      	ldr	r0, [r7, #16]
 801320e:	f000 f839 	bl	8013284 <USBD_GetLen>
 8013212:	4603      	mov	r3, r0
 8013214:	3301      	adds	r3, #1
 8013216:	b29b      	uxth	r3, r3
 8013218:	005b      	lsls	r3, r3, #1
 801321a:	b29a      	uxth	r2, r3
 801321c:	e001      	b.n	8013222 <USBD_GetString+0x42>
 801321e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8013226:	7dfb      	ldrb	r3, [r7, #23]
 8013228:	68ba      	ldr	r2, [r7, #8]
 801322a:	4413      	add	r3, r2
 801322c:	687a      	ldr	r2, [r7, #4]
 801322e:	7812      	ldrb	r2, [r2, #0]
 8013230:	701a      	strb	r2, [r3, #0]
  idx++;
 8013232:	7dfb      	ldrb	r3, [r7, #23]
 8013234:	3301      	adds	r3, #1
 8013236:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8013238:	7dfb      	ldrb	r3, [r7, #23]
 801323a:	68ba      	ldr	r2, [r7, #8]
 801323c:	4413      	add	r3, r2
 801323e:	2203      	movs	r2, #3
 8013240:	701a      	strb	r2, [r3, #0]
  idx++;
 8013242:	7dfb      	ldrb	r3, [r7, #23]
 8013244:	3301      	adds	r3, #1
 8013246:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8013248:	e013      	b.n	8013272 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 801324a:	7dfb      	ldrb	r3, [r7, #23]
 801324c:	68ba      	ldr	r2, [r7, #8]
 801324e:	4413      	add	r3, r2
 8013250:	693a      	ldr	r2, [r7, #16]
 8013252:	7812      	ldrb	r2, [r2, #0]
 8013254:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8013256:	693b      	ldr	r3, [r7, #16]
 8013258:	3301      	adds	r3, #1
 801325a:	613b      	str	r3, [r7, #16]
    idx++;
 801325c:	7dfb      	ldrb	r3, [r7, #23]
 801325e:	3301      	adds	r3, #1
 8013260:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8013262:	7dfb      	ldrb	r3, [r7, #23]
 8013264:	68ba      	ldr	r2, [r7, #8]
 8013266:	4413      	add	r3, r2
 8013268:	2200      	movs	r2, #0
 801326a:	701a      	strb	r2, [r3, #0]
    idx++;
 801326c:	7dfb      	ldrb	r3, [r7, #23]
 801326e:	3301      	adds	r3, #1
 8013270:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8013272:	693b      	ldr	r3, [r7, #16]
 8013274:	781b      	ldrb	r3, [r3, #0]
 8013276:	2b00      	cmp	r3, #0
 8013278:	d1e7      	bne.n	801324a <USBD_GetString+0x6a>
 801327a:	e000      	b.n	801327e <USBD_GetString+0x9e>
    return;
 801327c:	bf00      	nop
  }
}
 801327e:	3718      	adds	r7, #24
 8013280:	46bd      	mov	sp, r7
 8013282:	bd80      	pop	{r7, pc}

08013284 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8013284:	b480      	push	{r7}
 8013286:	b085      	sub	sp, #20
 8013288:	af00      	add	r7, sp, #0
 801328a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801328c:	2300      	movs	r3, #0
 801328e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8013294:	e005      	b.n	80132a2 <USBD_GetLen+0x1e>
  {
    len++;
 8013296:	7bfb      	ldrb	r3, [r7, #15]
 8013298:	3301      	adds	r3, #1
 801329a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801329c:	68bb      	ldr	r3, [r7, #8]
 801329e:	3301      	adds	r3, #1
 80132a0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80132a2:	68bb      	ldr	r3, [r7, #8]
 80132a4:	781b      	ldrb	r3, [r3, #0]
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d1f5      	bne.n	8013296 <USBD_GetLen+0x12>
  }

  return len;
 80132aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80132ac:	4618      	mov	r0, r3
 80132ae:	3714      	adds	r7, #20
 80132b0:	46bd      	mov	sp, r7
 80132b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132b6:	4770      	bx	lr

080132b8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80132b8:	b580      	push	{r7, lr}
 80132ba:	b084      	sub	sp, #16
 80132bc:	af00      	add	r7, sp, #0
 80132be:	60f8      	str	r0, [r7, #12]
 80132c0:	60b9      	str	r1, [r7, #8]
 80132c2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80132c4:	68fb      	ldr	r3, [r7, #12]
 80132c6:	2202      	movs	r2, #2
 80132c8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80132cc:	68fb      	ldr	r3, [r7, #12]
 80132ce:	687a      	ldr	r2, [r7, #4]
 80132d0:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 80132d2:	68fb      	ldr	r3, [r7, #12]
 80132d4:	68ba      	ldr	r2, [r7, #8]
 80132d6:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80132d8:	68fb      	ldr	r3, [r7, #12]
 80132da:	687a      	ldr	r2, [r7, #4]
 80132dc:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	68ba      	ldr	r2, [r7, #8]
 80132e2:	2100      	movs	r1, #0
 80132e4:	68f8      	ldr	r0, [r7, #12]
 80132e6:	f000 fbf4 	bl	8013ad2 <USBD_LL_Transmit>

  return USBD_OK;
 80132ea:	2300      	movs	r3, #0
}
 80132ec:	4618      	mov	r0, r3
 80132ee:	3710      	adds	r7, #16
 80132f0:	46bd      	mov	sp, r7
 80132f2:	bd80      	pop	{r7, pc}

080132f4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80132f4:	b580      	push	{r7, lr}
 80132f6:	b084      	sub	sp, #16
 80132f8:	af00      	add	r7, sp, #0
 80132fa:	60f8      	str	r0, [r7, #12]
 80132fc:	60b9      	str	r1, [r7, #8]
 80132fe:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	68ba      	ldr	r2, [r7, #8]
 8013304:	2100      	movs	r1, #0
 8013306:	68f8      	ldr	r0, [r7, #12]
 8013308:	f000 fbe3 	bl	8013ad2 <USBD_LL_Transmit>

  return USBD_OK;
 801330c:	2300      	movs	r3, #0
}
 801330e:	4618      	mov	r0, r3
 8013310:	3710      	adds	r7, #16
 8013312:	46bd      	mov	sp, r7
 8013314:	bd80      	pop	{r7, pc}

08013316 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8013316:	b580      	push	{r7, lr}
 8013318:	b084      	sub	sp, #16
 801331a:	af00      	add	r7, sp, #0
 801331c:	60f8      	str	r0, [r7, #12]
 801331e:	60b9      	str	r1, [r7, #8]
 8013320:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	68ba      	ldr	r2, [r7, #8]
 8013326:	2100      	movs	r1, #0
 8013328:	68f8      	ldr	r0, [r7, #12]
 801332a:	f000 fbf3 	bl	8013b14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801332e:	2300      	movs	r3, #0
}
 8013330:	4618      	mov	r0, r3
 8013332:	3710      	adds	r7, #16
 8013334:	46bd      	mov	sp, r7
 8013336:	bd80      	pop	{r7, pc}

08013338 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8013338:	b580      	push	{r7, lr}
 801333a:	b082      	sub	sp, #8
 801333c:	af00      	add	r7, sp, #0
 801333e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	2204      	movs	r2, #4
 8013344:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8013348:	2300      	movs	r3, #0
 801334a:	2200      	movs	r2, #0
 801334c:	2100      	movs	r1, #0
 801334e:	6878      	ldr	r0, [r7, #4]
 8013350:	f000 fbbf 	bl	8013ad2 <USBD_LL_Transmit>

  return USBD_OK;
 8013354:	2300      	movs	r3, #0
}
 8013356:	4618      	mov	r0, r3
 8013358:	3708      	adds	r7, #8
 801335a:	46bd      	mov	sp, r7
 801335c:	bd80      	pop	{r7, pc}

0801335e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801335e:	b580      	push	{r7, lr}
 8013360:	b082      	sub	sp, #8
 8013362:	af00      	add	r7, sp, #0
 8013364:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	2205      	movs	r2, #5
 801336a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801336e:	2300      	movs	r3, #0
 8013370:	2200      	movs	r2, #0
 8013372:	2100      	movs	r1, #0
 8013374:	6878      	ldr	r0, [r7, #4]
 8013376:	f000 fbcd 	bl	8013b14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801337a:	2300      	movs	r3, #0
}
 801337c:	4618      	mov	r0, r3
 801337e:	3708      	adds	r7, #8
 8013380:	46bd      	mov	sp, r7
 8013382:	bd80      	pop	{r7, pc}

08013384 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8013384:	b580      	push	{r7, lr}
 8013386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8013388:	2200      	movs	r2, #0
 801338a:	490e      	ldr	r1, [pc, #56]	@ (80133c4 <MX_USB_DEVICE_Init+0x40>)
 801338c:	480e      	ldr	r0, [pc, #56]	@ (80133c8 <MX_USB_DEVICE_Init+0x44>)
 801338e:	f7fe fcfb 	bl	8011d88 <USBD_Init>
 8013392:	4603      	mov	r3, r0
 8013394:	2b00      	cmp	r3, #0
 8013396:	d001      	beq.n	801339c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8013398:	f7f7 f858 	bl	800a44c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 801339c:	490b      	ldr	r1, [pc, #44]	@ (80133cc <MX_USB_DEVICE_Init+0x48>)
 801339e:	480a      	ldr	r0, [pc, #40]	@ (80133c8 <MX_USB_DEVICE_Init+0x44>)
 80133a0:	f7fe fd22 	bl	8011de8 <USBD_RegisterClass>
 80133a4:	4603      	mov	r3, r0
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d001      	beq.n	80133ae <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80133aa:	f7f7 f84f 	bl	800a44c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80133ae:	4806      	ldr	r0, [pc, #24]	@ (80133c8 <MX_USB_DEVICE_Init+0x44>)
 80133b0:	f7fe fd50 	bl	8011e54 <USBD_Start>
 80133b4:	4603      	mov	r3, r0
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	d001      	beq.n	80133be <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 80133ba:	f7f7 f847 	bl	800a44c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80133be:	bf00      	nop
 80133c0:	bd80      	pop	{r7, pc}
 80133c2:	bf00      	nop
 80133c4:	200000d8 	.word	0x200000d8
 80133c8:	20000938 	.word	0x20000938
 80133cc:	20000018 	.word	0x20000018

080133d0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80133d0:	b480      	push	{r7}
 80133d2:	b083      	sub	sp, #12
 80133d4:	af00      	add	r7, sp, #0
 80133d6:	4603      	mov	r3, r0
 80133d8:	6039      	str	r1, [r7, #0]
 80133da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80133dc:	683b      	ldr	r3, [r7, #0]
 80133de:	2212      	movs	r2, #18
 80133e0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80133e2:	4b03      	ldr	r3, [pc, #12]	@ (80133f0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80133e4:	4618      	mov	r0, r3
 80133e6:	370c      	adds	r7, #12
 80133e8:	46bd      	mov	sp, r7
 80133ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133ee:	4770      	bx	lr
 80133f0:	200000f4 	.word	0x200000f4

080133f4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80133f4:	b480      	push	{r7}
 80133f6:	b083      	sub	sp, #12
 80133f8:	af00      	add	r7, sp, #0
 80133fa:	4603      	mov	r3, r0
 80133fc:	6039      	str	r1, [r7, #0]
 80133fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8013400:	683b      	ldr	r3, [r7, #0]
 8013402:	2204      	movs	r2, #4
 8013404:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8013406:	4b03      	ldr	r3, [pc, #12]	@ (8013414 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8013408:	4618      	mov	r0, r3
 801340a:	370c      	adds	r7, #12
 801340c:	46bd      	mov	sp, r7
 801340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013412:	4770      	bx	lr
 8013414:	20000108 	.word	0x20000108

08013418 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013418:	b580      	push	{r7, lr}
 801341a:	b082      	sub	sp, #8
 801341c:	af00      	add	r7, sp, #0
 801341e:	4603      	mov	r3, r0
 8013420:	6039      	str	r1, [r7, #0]
 8013422:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8013424:	79fb      	ldrb	r3, [r7, #7]
 8013426:	2b00      	cmp	r3, #0
 8013428:	d105      	bne.n	8013436 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801342a:	683a      	ldr	r2, [r7, #0]
 801342c:	4907      	ldr	r1, [pc, #28]	@ (801344c <USBD_FS_ProductStrDescriptor+0x34>)
 801342e:	4808      	ldr	r0, [pc, #32]	@ (8013450 <USBD_FS_ProductStrDescriptor+0x38>)
 8013430:	f7ff fed6 	bl	80131e0 <USBD_GetString>
 8013434:	e004      	b.n	8013440 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8013436:	683a      	ldr	r2, [r7, #0]
 8013438:	4904      	ldr	r1, [pc, #16]	@ (801344c <USBD_FS_ProductStrDescriptor+0x34>)
 801343a:	4805      	ldr	r0, [pc, #20]	@ (8013450 <USBD_FS_ProductStrDescriptor+0x38>)
 801343c:	f7ff fed0 	bl	80131e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8013440:	4b02      	ldr	r3, [pc, #8]	@ (801344c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8013442:	4618      	mov	r0, r3
 8013444:	3708      	adds	r7, #8
 8013446:	46bd      	mov	sp, r7
 8013448:	bd80      	pop	{r7, pc}
 801344a:	bf00      	nop
 801344c:	20000c14 	.word	0x20000c14
 8013450:	080171e0 	.word	0x080171e0

08013454 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013454:	b580      	push	{r7, lr}
 8013456:	b082      	sub	sp, #8
 8013458:	af00      	add	r7, sp, #0
 801345a:	4603      	mov	r3, r0
 801345c:	6039      	str	r1, [r7, #0]
 801345e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8013460:	683a      	ldr	r2, [r7, #0]
 8013462:	4904      	ldr	r1, [pc, #16]	@ (8013474 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8013464:	4804      	ldr	r0, [pc, #16]	@ (8013478 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8013466:	f7ff febb 	bl	80131e0 <USBD_GetString>
  return USBD_StrDesc;
 801346a:	4b02      	ldr	r3, [pc, #8]	@ (8013474 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801346c:	4618      	mov	r0, r3
 801346e:	3708      	adds	r7, #8
 8013470:	46bd      	mov	sp, r7
 8013472:	bd80      	pop	{r7, pc}
 8013474:	20000c14 	.word	0x20000c14
 8013478:	080171e0 	.word	0x080171e0

0801347c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801347c:	b580      	push	{r7, lr}
 801347e:	b082      	sub	sp, #8
 8013480:	af00      	add	r7, sp, #0
 8013482:	4603      	mov	r3, r0
 8013484:	6039      	str	r1, [r7, #0]
 8013486:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8013488:	683b      	ldr	r3, [r7, #0]
 801348a:	221a      	movs	r2, #26
 801348c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801348e:	f000 f843 	bl	8013518 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8013492:	4b02      	ldr	r3, [pc, #8]	@ (801349c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8013494:	4618      	mov	r0, r3
 8013496:	3708      	adds	r7, #8
 8013498:	46bd      	mov	sp, r7
 801349a:	bd80      	pop	{r7, pc}
 801349c:	2000010c 	.word	0x2000010c

080134a0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80134a0:	b580      	push	{r7, lr}
 80134a2:	b082      	sub	sp, #8
 80134a4:	af00      	add	r7, sp, #0
 80134a6:	4603      	mov	r3, r0
 80134a8:	6039      	str	r1, [r7, #0]
 80134aa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80134ac:	79fb      	ldrb	r3, [r7, #7]
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	d105      	bne.n	80134be <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80134b2:	683a      	ldr	r2, [r7, #0]
 80134b4:	4907      	ldr	r1, [pc, #28]	@ (80134d4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80134b6:	4808      	ldr	r0, [pc, #32]	@ (80134d8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80134b8:	f7ff fe92 	bl	80131e0 <USBD_GetString>
 80134bc:	e004      	b.n	80134c8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80134be:	683a      	ldr	r2, [r7, #0]
 80134c0:	4904      	ldr	r1, [pc, #16]	@ (80134d4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80134c2:	4805      	ldr	r0, [pc, #20]	@ (80134d8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80134c4:	f7ff fe8c 	bl	80131e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80134c8:	4b02      	ldr	r3, [pc, #8]	@ (80134d4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80134ca:	4618      	mov	r0, r3
 80134cc:	3708      	adds	r7, #8
 80134ce:	46bd      	mov	sp, r7
 80134d0:	bd80      	pop	{r7, pc}
 80134d2:	bf00      	nop
 80134d4:	20000c14 	.word	0x20000c14
 80134d8:	080171f0 	.word	0x080171f0

080134dc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80134dc:	b580      	push	{r7, lr}
 80134de:	b082      	sub	sp, #8
 80134e0:	af00      	add	r7, sp, #0
 80134e2:	4603      	mov	r3, r0
 80134e4:	6039      	str	r1, [r7, #0]
 80134e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80134e8:	79fb      	ldrb	r3, [r7, #7]
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	d105      	bne.n	80134fa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80134ee:	683a      	ldr	r2, [r7, #0]
 80134f0:	4907      	ldr	r1, [pc, #28]	@ (8013510 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80134f2:	4808      	ldr	r0, [pc, #32]	@ (8013514 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80134f4:	f7ff fe74 	bl	80131e0 <USBD_GetString>
 80134f8:	e004      	b.n	8013504 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80134fa:	683a      	ldr	r2, [r7, #0]
 80134fc:	4904      	ldr	r1, [pc, #16]	@ (8013510 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80134fe:	4805      	ldr	r0, [pc, #20]	@ (8013514 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8013500:	f7ff fe6e 	bl	80131e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8013504:	4b02      	ldr	r3, [pc, #8]	@ (8013510 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8013506:	4618      	mov	r0, r3
 8013508:	3708      	adds	r7, #8
 801350a:	46bd      	mov	sp, r7
 801350c:	bd80      	pop	{r7, pc}
 801350e:	bf00      	nop
 8013510:	20000c14 	.word	0x20000c14
 8013514:	080171fc 	.word	0x080171fc

08013518 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8013518:	b580      	push	{r7, lr}
 801351a:	b084      	sub	sp, #16
 801351c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801351e:	4b0f      	ldr	r3, [pc, #60]	@ (801355c <Get_SerialNum+0x44>)
 8013520:	681b      	ldr	r3, [r3, #0]
 8013522:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8013524:	4b0e      	ldr	r3, [pc, #56]	@ (8013560 <Get_SerialNum+0x48>)
 8013526:	681b      	ldr	r3, [r3, #0]
 8013528:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801352a:	4b0e      	ldr	r3, [pc, #56]	@ (8013564 <Get_SerialNum+0x4c>)
 801352c:	681b      	ldr	r3, [r3, #0]
 801352e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8013530:	68fa      	ldr	r2, [r7, #12]
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	4413      	add	r3, r2
 8013536:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8013538:	68fb      	ldr	r3, [r7, #12]
 801353a:	2b00      	cmp	r3, #0
 801353c:	d009      	beq.n	8013552 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801353e:	2208      	movs	r2, #8
 8013540:	4909      	ldr	r1, [pc, #36]	@ (8013568 <Get_SerialNum+0x50>)
 8013542:	68f8      	ldr	r0, [r7, #12]
 8013544:	f000 f814 	bl	8013570 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8013548:	2204      	movs	r2, #4
 801354a:	4908      	ldr	r1, [pc, #32]	@ (801356c <Get_SerialNum+0x54>)
 801354c:	68b8      	ldr	r0, [r7, #8]
 801354e:	f000 f80f 	bl	8013570 <IntToUnicode>
  }
}
 8013552:	bf00      	nop
 8013554:	3710      	adds	r7, #16
 8013556:	46bd      	mov	sp, r7
 8013558:	bd80      	pop	{r7, pc}
 801355a:	bf00      	nop
 801355c:	1fff7a10 	.word	0x1fff7a10
 8013560:	1fff7a14 	.word	0x1fff7a14
 8013564:	1fff7a18 	.word	0x1fff7a18
 8013568:	2000010e 	.word	0x2000010e
 801356c:	2000011e 	.word	0x2000011e

08013570 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8013570:	b480      	push	{r7}
 8013572:	b087      	sub	sp, #28
 8013574:	af00      	add	r7, sp, #0
 8013576:	60f8      	str	r0, [r7, #12]
 8013578:	60b9      	str	r1, [r7, #8]
 801357a:	4613      	mov	r3, r2
 801357c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801357e:	2300      	movs	r3, #0
 8013580:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8013582:	2300      	movs	r3, #0
 8013584:	75fb      	strb	r3, [r7, #23]
 8013586:	e027      	b.n	80135d8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8013588:	68fb      	ldr	r3, [r7, #12]
 801358a:	0f1b      	lsrs	r3, r3, #28
 801358c:	2b09      	cmp	r3, #9
 801358e:	d80b      	bhi.n	80135a8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8013590:	68fb      	ldr	r3, [r7, #12]
 8013592:	0f1b      	lsrs	r3, r3, #28
 8013594:	b2da      	uxtb	r2, r3
 8013596:	7dfb      	ldrb	r3, [r7, #23]
 8013598:	005b      	lsls	r3, r3, #1
 801359a:	4619      	mov	r1, r3
 801359c:	68bb      	ldr	r3, [r7, #8]
 801359e:	440b      	add	r3, r1
 80135a0:	3230      	adds	r2, #48	@ 0x30
 80135a2:	b2d2      	uxtb	r2, r2
 80135a4:	701a      	strb	r2, [r3, #0]
 80135a6:	e00a      	b.n	80135be <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80135a8:	68fb      	ldr	r3, [r7, #12]
 80135aa:	0f1b      	lsrs	r3, r3, #28
 80135ac:	b2da      	uxtb	r2, r3
 80135ae:	7dfb      	ldrb	r3, [r7, #23]
 80135b0:	005b      	lsls	r3, r3, #1
 80135b2:	4619      	mov	r1, r3
 80135b4:	68bb      	ldr	r3, [r7, #8]
 80135b6:	440b      	add	r3, r1
 80135b8:	3237      	adds	r2, #55	@ 0x37
 80135ba:	b2d2      	uxtb	r2, r2
 80135bc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80135be:	68fb      	ldr	r3, [r7, #12]
 80135c0:	011b      	lsls	r3, r3, #4
 80135c2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80135c4:	7dfb      	ldrb	r3, [r7, #23]
 80135c6:	005b      	lsls	r3, r3, #1
 80135c8:	3301      	adds	r3, #1
 80135ca:	68ba      	ldr	r2, [r7, #8]
 80135cc:	4413      	add	r3, r2
 80135ce:	2200      	movs	r2, #0
 80135d0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80135d2:	7dfb      	ldrb	r3, [r7, #23]
 80135d4:	3301      	adds	r3, #1
 80135d6:	75fb      	strb	r3, [r7, #23]
 80135d8:	7dfa      	ldrb	r2, [r7, #23]
 80135da:	79fb      	ldrb	r3, [r7, #7]
 80135dc:	429a      	cmp	r2, r3
 80135de:	d3d3      	bcc.n	8013588 <IntToUnicode+0x18>
  }
}
 80135e0:	bf00      	nop
 80135e2:	bf00      	nop
 80135e4:	371c      	adds	r7, #28
 80135e6:	46bd      	mov	sp, r7
 80135e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135ec:	4770      	bx	lr
	...

080135f0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80135f0:	b580      	push	{r7, lr}
 80135f2:	b08a      	sub	sp, #40	@ 0x28
 80135f4:	af00      	add	r7, sp, #0
 80135f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80135f8:	f107 0314 	add.w	r3, r7, #20
 80135fc:	2200      	movs	r2, #0
 80135fe:	601a      	str	r2, [r3, #0]
 8013600:	605a      	str	r2, [r3, #4]
 8013602:	609a      	str	r2, [r3, #8]
 8013604:	60da      	str	r2, [r3, #12]
 8013606:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	681b      	ldr	r3, [r3, #0]
 801360c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8013610:	d13a      	bne.n	8013688 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013612:	2300      	movs	r3, #0
 8013614:	613b      	str	r3, [r7, #16]
 8013616:	4b1e      	ldr	r3, [pc, #120]	@ (8013690 <HAL_PCD_MspInit+0xa0>)
 8013618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801361a:	4a1d      	ldr	r2, [pc, #116]	@ (8013690 <HAL_PCD_MspInit+0xa0>)
 801361c:	f043 0301 	orr.w	r3, r3, #1
 8013620:	6313      	str	r3, [r2, #48]	@ 0x30
 8013622:	4b1b      	ldr	r3, [pc, #108]	@ (8013690 <HAL_PCD_MspInit+0xa0>)
 8013624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013626:	f003 0301 	and.w	r3, r3, #1
 801362a:	613b      	str	r3, [r7, #16]
 801362c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 801362e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8013632:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013634:	2302      	movs	r3, #2
 8013636:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013638:	2300      	movs	r3, #0
 801363a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801363c:	2303      	movs	r3, #3
 801363e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8013640:	230a      	movs	r3, #10
 8013642:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013644:	f107 0314 	add.w	r3, r7, #20
 8013648:	4619      	mov	r1, r3
 801364a:	4812      	ldr	r0, [pc, #72]	@ (8013694 <HAL_PCD_MspInit+0xa4>)
 801364c:	f7f8 fd58 	bl	800c100 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8013650:	4b0f      	ldr	r3, [pc, #60]	@ (8013690 <HAL_PCD_MspInit+0xa0>)
 8013652:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013654:	4a0e      	ldr	r2, [pc, #56]	@ (8013690 <HAL_PCD_MspInit+0xa0>)
 8013656:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801365a:	6353      	str	r3, [r2, #52]	@ 0x34
 801365c:	2300      	movs	r3, #0
 801365e:	60fb      	str	r3, [r7, #12]
 8013660:	4b0b      	ldr	r3, [pc, #44]	@ (8013690 <HAL_PCD_MspInit+0xa0>)
 8013662:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013664:	4a0a      	ldr	r2, [pc, #40]	@ (8013690 <HAL_PCD_MspInit+0xa0>)
 8013666:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 801366a:	6453      	str	r3, [r2, #68]	@ 0x44
 801366c:	4b08      	ldr	r3, [pc, #32]	@ (8013690 <HAL_PCD_MspInit+0xa0>)
 801366e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013670:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8013674:	60fb      	str	r3, [r7, #12]
 8013676:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8013678:	2200      	movs	r2, #0
 801367a:	2100      	movs	r1, #0
 801367c:	2043      	movs	r0, #67	@ 0x43
 801367e:	f7f8 fa1e 	bl	800babe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8013682:	2043      	movs	r0, #67	@ 0x43
 8013684:	f7f8 fa37 	bl	800baf6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8013688:	bf00      	nop
 801368a:	3728      	adds	r7, #40	@ 0x28
 801368c:	46bd      	mov	sp, r7
 801368e:	bd80      	pop	{r7, pc}
 8013690:	40023800 	.word	0x40023800
 8013694:	40020000 	.word	0x40020000

08013698 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013698:	b580      	push	{r7, lr}
 801369a:	b082      	sub	sp, #8
 801369c:	af00      	add	r7, sp, #0
 801369e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80136ac:	4619      	mov	r1, r3
 80136ae:	4610      	mov	r0, r2
 80136b0:	f7fe fc1d 	bl	8011eee <USBD_LL_SetupStage>
}
 80136b4:	bf00      	nop
 80136b6:	3708      	adds	r7, #8
 80136b8:	46bd      	mov	sp, r7
 80136ba:	bd80      	pop	{r7, pc}

080136bc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80136bc:	b580      	push	{r7, lr}
 80136be:	b082      	sub	sp, #8
 80136c0:	af00      	add	r7, sp, #0
 80136c2:	6078      	str	r0, [r7, #4]
 80136c4:	460b      	mov	r3, r1
 80136c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80136ce:	78fa      	ldrb	r2, [r7, #3]
 80136d0:	6879      	ldr	r1, [r7, #4]
 80136d2:	4613      	mov	r3, r2
 80136d4:	00db      	lsls	r3, r3, #3
 80136d6:	4413      	add	r3, r2
 80136d8:	009b      	lsls	r3, r3, #2
 80136da:	440b      	add	r3, r1
 80136dc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80136e0:	681a      	ldr	r2, [r3, #0]
 80136e2:	78fb      	ldrb	r3, [r7, #3]
 80136e4:	4619      	mov	r1, r3
 80136e6:	f7fe fc57 	bl	8011f98 <USBD_LL_DataOutStage>
}
 80136ea:	bf00      	nop
 80136ec:	3708      	adds	r7, #8
 80136ee:	46bd      	mov	sp, r7
 80136f0:	bd80      	pop	{r7, pc}

080136f2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80136f2:	b580      	push	{r7, lr}
 80136f4:	b082      	sub	sp, #8
 80136f6:	af00      	add	r7, sp, #0
 80136f8:	6078      	str	r0, [r7, #4]
 80136fa:	460b      	mov	r3, r1
 80136fc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8013704:	78fa      	ldrb	r2, [r7, #3]
 8013706:	6879      	ldr	r1, [r7, #4]
 8013708:	4613      	mov	r3, r2
 801370a:	00db      	lsls	r3, r3, #3
 801370c:	4413      	add	r3, r2
 801370e:	009b      	lsls	r3, r3, #2
 8013710:	440b      	add	r3, r1
 8013712:	3320      	adds	r3, #32
 8013714:	681a      	ldr	r2, [r3, #0]
 8013716:	78fb      	ldrb	r3, [r7, #3]
 8013718:	4619      	mov	r1, r3
 801371a:	f7fe fcf9 	bl	8012110 <USBD_LL_DataInStage>
}
 801371e:	bf00      	nop
 8013720:	3708      	adds	r7, #8
 8013722:	46bd      	mov	sp, r7
 8013724:	bd80      	pop	{r7, pc}

08013726 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013726:	b580      	push	{r7, lr}
 8013728:	b082      	sub	sp, #8
 801372a:	af00      	add	r7, sp, #0
 801372c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8013734:	4618      	mov	r0, r3
 8013736:	f7fe fe3d 	bl	80123b4 <USBD_LL_SOF>
}
 801373a:	bf00      	nop
 801373c:	3708      	adds	r7, #8
 801373e:	46bd      	mov	sp, r7
 8013740:	bd80      	pop	{r7, pc}

08013742 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013742:	b580      	push	{r7, lr}
 8013744:	b084      	sub	sp, #16
 8013746:	af00      	add	r7, sp, #0
 8013748:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801374a:	2301      	movs	r3, #1
 801374c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	79db      	ldrb	r3, [r3, #7]
 8013752:	2b02      	cmp	r3, #2
 8013754:	d001      	beq.n	801375a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8013756:	f7f6 fe79 	bl	800a44c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8013760:	7bfa      	ldrb	r2, [r7, #15]
 8013762:	4611      	mov	r1, r2
 8013764:	4618      	mov	r0, r3
 8013766:	f7fe fde1 	bl	801232c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8013770:	4618      	mov	r0, r3
 8013772:	f7fe fd88 	bl	8012286 <USBD_LL_Reset>
}
 8013776:	bf00      	nop
 8013778:	3710      	adds	r7, #16
 801377a:	46bd      	mov	sp, r7
 801377c:	bd80      	pop	{r7, pc}
	...

08013780 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013780:	b580      	push	{r7, lr}
 8013782:	b082      	sub	sp, #8
 8013784:	af00      	add	r7, sp, #0
 8013786:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801378e:	4618      	mov	r0, r3
 8013790:	f7fe fddc 	bl	801234c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	681b      	ldr	r3, [r3, #0]
 8013798:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801379c:	681b      	ldr	r3, [r3, #0]
 801379e:	687a      	ldr	r2, [r7, #4]
 80137a0:	6812      	ldr	r2, [r2, #0]
 80137a2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80137a6:	f043 0301 	orr.w	r3, r3, #1
 80137aa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	7adb      	ldrb	r3, [r3, #11]
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	d005      	beq.n	80137c0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80137b4:	4b04      	ldr	r3, [pc, #16]	@ (80137c8 <HAL_PCD_SuspendCallback+0x48>)
 80137b6:	691b      	ldr	r3, [r3, #16]
 80137b8:	4a03      	ldr	r2, [pc, #12]	@ (80137c8 <HAL_PCD_SuspendCallback+0x48>)
 80137ba:	f043 0306 	orr.w	r3, r3, #6
 80137be:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80137c0:	bf00      	nop
 80137c2:	3708      	adds	r7, #8
 80137c4:	46bd      	mov	sp, r7
 80137c6:	bd80      	pop	{r7, pc}
 80137c8:	e000ed00 	.word	0xe000ed00

080137cc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80137cc:	b580      	push	{r7, lr}
 80137ce:	b082      	sub	sp, #8
 80137d0:	af00      	add	r7, sp, #0
 80137d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80137da:	4618      	mov	r0, r3
 80137dc:	f7fe fdd2 	bl	8012384 <USBD_LL_Resume>
}
 80137e0:	bf00      	nop
 80137e2:	3708      	adds	r7, #8
 80137e4:	46bd      	mov	sp, r7
 80137e6:	bd80      	pop	{r7, pc}

080137e8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80137e8:	b580      	push	{r7, lr}
 80137ea:	b082      	sub	sp, #8
 80137ec:	af00      	add	r7, sp, #0
 80137ee:	6078      	str	r0, [r7, #4]
 80137f0:	460b      	mov	r3, r1
 80137f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80137fa:	78fa      	ldrb	r2, [r7, #3]
 80137fc:	4611      	mov	r1, r2
 80137fe:	4618      	mov	r0, r3
 8013800:	f7fe fe2a 	bl	8012458 <USBD_LL_IsoOUTIncomplete>
}
 8013804:	bf00      	nop
 8013806:	3708      	adds	r7, #8
 8013808:	46bd      	mov	sp, r7
 801380a:	bd80      	pop	{r7, pc}

0801380c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801380c:	b580      	push	{r7, lr}
 801380e:	b082      	sub	sp, #8
 8013810:	af00      	add	r7, sp, #0
 8013812:	6078      	str	r0, [r7, #4]
 8013814:	460b      	mov	r3, r1
 8013816:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801381e:	78fa      	ldrb	r2, [r7, #3]
 8013820:	4611      	mov	r1, r2
 8013822:	4618      	mov	r0, r3
 8013824:	f7fe fde6 	bl	80123f4 <USBD_LL_IsoINIncomplete>
}
 8013828:	bf00      	nop
 801382a:	3708      	adds	r7, #8
 801382c:	46bd      	mov	sp, r7
 801382e:	bd80      	pop	{r7, pc}

08013830 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013830:	b580      	push	{r7, lr}
 8013832:	b082      	sub	sp, #8
 8013834:	af00      	add	r7, sp, #0
 8013836:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801383e:	4618      	mov	r0, r3
 8013840:	f7fe fe3c 	bl	80124bc <USBD_LL_DevConnected>
}
 8013844:	bf00      	nop
 8013846:	3708      	adds	r7, #8
 8013848:	46bd      	mov	sp, r7
 801384a:	bd80      	pop	{r7, pc}

0801384c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801384c:	b580      	push	{r7, lr}
 801384e:	b082      	sub	sp, #8
 8013850:	af00      	add	r7, sp, #0
 8013852:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801385a:	4618      	mov	r0, r3
 801385c:	f7fe fe39 	bl	80124d2 <USBD_LL_DevDisconnected>
}
 8013860:	bf00      	nop
 8013862:	3708      	adds	r7, #8
 8013864:	46bd      	mov	sp, r7
 8013866:	bd80      	pop	{r7, pc}

08013868 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8013868:	b580      	push	{r7, lr}
 801386a:	b082      	sub	sp, #8
 801386c:	af00      	add	r7, sp, #0
 801386e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	781b      	ldrb	r3, [r3, #0]
 8013874:	2b00      	cmp	r3, #0
 8013876:	d13c      	bne.n	80138f2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8013878:	4a20      	ldr	r2, [pc, #128]	@ (80138fc <USBD_LL_Init+0x94>)
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	4a1e      	ldr	r2, [pc, #120]	@ (80138fc <USBD_LL_Init+0x94>)
 8013884:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8013888:	4b1c      	ldr	r3, [pc, #112]	@ (80138fc <USBD_LL_Init+0x94>)
 801388a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 801388e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8013890:	4b1a      	ldr	r3, [pc, #104]	@ (80138fc <USBD_LL_Init+0x94>)
 8013892:	2204      	movs	r2, #4
 8013894:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8013896:	4b19      	ldr	r3, [pc, #100]	@ (80138fc <USBD_LL_Init+0x94>)
 8013898:	2202      	movs	r2, #2
 801389a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801389c:	4b17      	ldr	r3, [pc, #92]	@ (80138fc <USBD_LL_Init+0x94>)
 801389e:	2200      	movs	r2, #0
 80138a0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80138a2:	4b16      	ldr	r3, [pc, #88]	@ (80138fc <USBD_LL_Init+0x94>)
 80138a4:	2202      	movs	r2, #2
 80138a6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80138a8:	4b14      	ldr	r3, [pc, #80]	@ (80138fc <USBD_LL_Init+0x94>)
 80138aa:	2200      	movs	r2, #0
 80138ac:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80138ae:	4b13      	ldr	r3, [pc, #76]	@ (80138fc <USBD_LL_Init+0x94>)
 80138b0:	2200      	movs	r2, #0
 80138b2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80138b4:	4b11      	ldr	r3, [pc, #68]	@ (80138fc <USBD_LL_Init+0x94>)
 80138b6:	2200      	movs	r2, #0
 80138b8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80138ba:	4b10      	ldr	r3, [pc, #64]	@ (80138fc <USBD_LL_Init+0x94>)
 80138bc:	2200      	movs	r2, #0
 80138be:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80138c0:	4b0e      	ldr	r3, [pc, #56]	@ (80138fc <USBD_LL_Init+0x94>)
 80138c2:	2200      	movs	r2, #0
 80138c4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80138c6:	480d      	ldr	r0, [pc, #52]	@ (80138fc <USBD_LL_Init+0x94>)
 80138c8:	f7f9 fa65 	bl	800cd96 <HAL_PCD_Init>
 80138cc:	4603      	mov	r3, r0
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d001      	beq.n	80138d6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80138d2:	f7f6 fdbb 	bl	800a44c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80138d6:	2180      	movs	r1, #128	@ 0x80
 80138d8:	4808      	ldr	r0, [pc, #32]	@ (80138fc <USBD_LL_Init+0x94>)
 80138da:	f7fa fc7a 	bl	800e1d2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80138de:	2240      	movs	r2, #64	@ 0x40
 80138e0:	2100      	movs	r1, #0
 80138e2:	4806      	ldr	r0, [pc, #24]	@ (80138fc <USBD_LL_Init+0x94>)
 80138e4:	f7fa fc2e 	bl	800e144 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80138e8:	2280      	movs	r2, #128	@ 0x80
 80138ea:	2101      	movs	r1, #1
 80138ec:	4803      	ldr	r0, [pc, #12]	@ (80138fc <USBD_LL_Init+0x94>)
 80138ee:	f7fa fc29 	bl	800e144 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80138f2:	2300      	movs	r3, #0
}
 80138f4:	4618      	mov	r0, r3
 80138f6:	3708      	adds	r7, #8
 80138f8:	46bd      	mov	sp, r7
 80138fa:	bd80      	pop	{r7, pc}
 80138fc:	20000e14 	.word	0x20000e14

08013900 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8013900:	b580      	push	{r7, lr}
 8013902:	b084      	sub	sp, #16
 8013904:	af00      	add	r7, sp, #0
 8013906:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013908:	2300      	movs	r3, #0
 801390a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801390c:	2300      	movs	r3, #0
 801390e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013916:	4618      	mov	r0, r3
 8013918:	f7f9 fb4c 	bl	800cfb4 <HAL_PCD_Start>
 801391c:	4603      	mov	r3, r0
 801391e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013920:	7bfb      	ldrb	r3, [r7, #15]
 8013922:	4618      	mov	r0, r3
 8013924:	f000 f930 	bl	8013b88 <USBD_Get_USB_Status>
 8013928:	4603      	mov	r3, r0
 801392a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801392c:	7bbb      	ldrb	r3, [r7, #14]
}
 801392e:	4618      	mov	r0, r3
 8013930:	3710      	adds	r7, #16
 8013932:	46bd      	mov	sp, r7
 8013934:	bd80      	pop	{r7, pc}

08013936 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8013936:	b580      	push	{r7, lr}
 8013938:	b084      	sub	sp, #16
 801393a:	af00      	add	r7, sp, #0
 801393c:	6078      	str	r0, [r7, #4]
 801393e:	4608      	mov	r0, r1
 8013940:	4611      	mov	r1, r2
 8013942:	461a      	mov	r2, r3
 8013944:	4603      	mov	r3, r0
 8013946:	70fb      	strb	r3, [r7, #3]
 8013948:	460b      	mov	r3, r1
 801394a:	70bb      	strb	r3, [r7, #2]
 801394c:	4613      	mov	r3, r2
 801394e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013950:	2300      	movs	r3, #0
 8013952:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013954:	2300      	movs	r3, #0
 8013956:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801395e:	78bb      	ldrb	r3, [r7, #2]
 8013960:	883a      	ldrh	r2, [r7, #0]
 8013962:	78f9      	ldrb	r1, [r7, #3]
 8013964:	f7fa f820 	bl	800d9a8 <HAL_PCD_EP_Open>
 8013968:	4603      	mov	r3, r0
 801396a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801396c:	7bfb      	ldrb	r3, [r7, #15]
 801396e:	4618      	mov	r0, r3
 8013970:	f000 f90a 	bl	8013b88 <USBD_Get_USB_Status>
 8013974:	4603      	mov	r3, r0
 8013976:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013978:	7bbb      	ldrb	r3, [r7, #14]
}
 801397a:	4618      	mov	r0, r3
 801397c:	3710      	adds	r7, #16
 801397e:	46bd      	mov	sp, r7
 8013980:	bd80      	pop	{r7, pc}

08013982 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013982:	b580      	push	{r7, lr}
 8013984:	b084      	sub	sp, #16
 8013986:	af00      	add	r7, sp, #0
 8013988:	6078      	str	r0, [r7, #4]
 801398a:	460b      	mov	r3, r1
 801398c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801398e:	2300      	movs	r3, #0
 8013990:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013992:	2300      	movs	r3, #0
 8013994:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801399c:	78fa      	ldrb	r2, [r7, #3]
 801399e:	4611      	mov	r1, r2
 80139a0:	4618      	mov	r0, r3
 80139a2:	f7fa f86b 	bl	800da7c <HAL_PCD_EP_Close>
 80139a6:	4603      	mov	r3, r0
 80139a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80139aa:	7bfb      	ldrb	r3, [r7, #15]
 80139ac:	4618      	mov	r0, r3
 80139ae:	f000 f8eb 	bl	8013b88 <USBD_Get_USB_Status>
 80139b2:	4603      	mov	r3, r0
 80139b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80139b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80139b8:	4618      	mov	r0, r3
 80139ba:	3710      	adds	r7, #16
 80139bc:	46bd      	mov	sp, r7
 80139be:	bd80      	pop	{r7, pc}

080139c0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80139c0:	b580      	push	{r7, lr}
 80139c2:	b084      	sub	sp, #16
 80139c4:	af00      	add	r7, sp, #0
 80139c6:	6078      	str	r0, [r7, #4]
 80139c8:	460b      	mov	r3, r1
 80139ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80139cc:	2300      	movs	r3, #0
 80139ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80139d0:	2300      	movs	r3, #0
 80139d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80139da:	78fa      	ldrb	r2, [r7, #3]
 80139dc:	4611      	mov	r1, r2
 80139de:	4618      	mov	r0, r3
 80139e0:	f7fa f90b 	bl	800dbfa <HAL_PCD_EP_SetStall>
 80139e4:	4603      	mov	r3, r0
 80139e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80139e8:	7bfb      	ldrb	r3, [r7, #15]
 80139ea:	4618      	mov	r0, r3
 80139ec:	f000 f8cc 	bl	8013b88 <USBD_Get_USB_Status>
 80139f0:	4603      	mov	r3, r0
 80139f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80139f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80139f6:	4618      	mov	r0, r3
 80139f8:	3710      	adds	r7, #16
 80139fa:	46bd      	mov	sp, r7
 80139fc:	bd80      	pop	{r7, pc}

080139fe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80139fe:	b580      	push	{r7, lr}
 8013a00:	b084      	sub	sp, #16
 8013a02:	af00      	add	r7, sp, #0
 8013a04:	6078      	str	r0, [r7, #4]
 8013a06:	460b      	mov	r3, r1
 8013a08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013a0a:	2300      	movs	r3, #0
 8013a0c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013a0e:	2300      	movs	r3, #0
 8013a10:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013a18:	78fa      	ldrb	r2, [r7, #3]
 8013a1a:	4611      	mov	r1, r2
 8013a1c:	4618      	mov	r0, r3
 8013a1e:	f7fa f94f 	bl	800dcc0 <HAL_PCD_EP_ClrStall>
 8013a22:	4603      	mov	r3, r0
 8013a24:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013a26:	7bfb      	ldrb	r3, [r7, #15]
 8013a28:	4618      	mov	r0, r3
 8013a2a:	f000 f8ad 	bl	8013b88 <USBD_Get_USB_Status>
 8013a2e:	4603      	mov	r3, r0
 8013a30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013a32:	7bbb      	ldrb	r3, [r7, #14]
}
 8013a34:	4618      	mov	r0, r3
 8013a36:	3710      	adds	r7, #16
 8013a38:	46bd      	mov	sp, r7
 8013a3a:	bd80      	pop	{r7, pc}

08013a3c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013a3c:	b480      	push	{r7}
 8013a3e:	b085      	sub	sp, #20
 8013a40:	af00      	add	r7, sp, #0
 8013a42:	6078      	str	r0, [r7, #4]
 8013a44:	460b      	mov	r3, r1
 8013a46:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013a4e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8013a50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013a54:	2b00      	cmp	r3, #0
 8013a56:	da0b      	bge.n	8013a70 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8013a58:	78fb      	ldrb	r3, [r7, #3]
 8013a5a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8013a5e:	68f9      	ldr	r1, [r7, #12]
 8013a60:	4613      	mov	r3, r2
 8013a62:	00db      	lsls	r3, r3, #3
 8013a64:	4413      	add	r3, r2
 8013a66:	009b      	lsls	r3, r3, #2
 8013a68:	440b      	add	r3, r1
 8013a6a:	3316      	adds	r3, #22
 8013a6c:	781b      	ldrb	r3, [r3, #0]
 8013a6e:	e00b      	b.n	8013a88 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8013a70:	78fb      	ldrb	r3, [r7, #3]
 8013a72:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8013a76:	68f9      	ldr	r1, [r7, #12]
 8013a78:	4613      	mov	r3, r2
 8013a7a:	00db      	lsls	r3, r3, #3
 8013a7c:	4413      	add	r3, r2
 8013a7e:	009b      	lsls	r3, r3, #2
 8013a80:	440b      	add	r3, r1
 8013a82:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8013a86:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013a88:	4618      	mov	r0, r3
 8013a8a:	3714      	adds	r7, #20
 8013a8c:	46bd      	mov	sp, r7
 8013a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a92:	4770      	bx	lr

08013a94 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8013a94:	b580      	push	{r7, lr}
 8013a96:	b084      	sub	sp, #16
 8013a98:	af00      	add	r7, sp, #0
 8013a9a:	6078      	str	r0, [r7, #4]
 8013a9c:	460b      	mov	r3, r1
 8013a9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013aa0:	2300      	movs	r3, #0
 8013aa2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013aa4:	2300      	movs	r3, #0
 8013aa6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013aae:	78fa      	ldrb	r2, [r7, #3]
 8013ab0:	4611      	mov	r1, r2
 8013ab2:	4618      	mov	r0, r3
 8013ab4:	f7f9 ff54 	bl	800d960 <HAL_PCD_SetAddress>
 8013ab8:	4603      	mov	r3, r0
 8013aba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013abc:	7bfb      	ldrb	r3, [r7, #15]
 8013abe:	4618      	mov	r0, r3
 8013ac0:	f000 f862 	bl	8013b88 <USBD_Get_USB_Status>
 8013ac4:	4603      	mov	r3, r0
 8013ac6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013ac8:	7bbb      	ldrb	r3, [r7, #14]
}
 8013aca:	4618      	mov	r0, r3
 8013acc:	3710      	adds	r7, #16
 8013ace:	46bd      	mov	sp, r7
 8013ad0:	bd80      	pop	{r7, pc}

08013ad2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013ad2:	b580      	push	{r7, lr}
 8013ad4:	b086      	sub	sp, #24
 8013ad6:	af00      	add	r7, sp, #0
 8013ad8:	60f8      	str	r0, [r7, #12]
 8013ada:	607a      	str	r2, [r7, #4]
 8013adc:	603b      	str	r3, [r7, #0]
 8013ade:	460b      	mov	r3, r1
 8013ae0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013ae2:	2300      	movs	r3, #0
 8013ae4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013ae6:	2300      	movs	r3, #0
 8013ae8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8013aea:	68fb      	ldr	r3, [r7, #12]
 8013aec:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8013af0:	7af9      	ldrb	r1, [r7, #11]
 8013af2:	683b      	ldr	r3, [r7, #0]
 8013af4:	687a      	ldr	r2, [r7, #4]
 8013af6:	f7fa f846 	bl	800db86 <HAL_PCD_EP_Transmit>
 8013afa:	4603      	mov	r3, r0
 8013afc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013afe:	7dfb      	ldrb	r3, [r7, #23]
 8013b00:	4618      	mov	r0, r3
 8013b02:	f000 f841 	bl	8013b88 <USBD_Get_USB_Status>
 8013b06:	4603      	mov	r3, r0
 8013b08:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013b0a:	7dbb      	ldrb	r3, [r7, #22]
}
 8013b0c:	4618      	mov	r0, r3
 8013b0e:	3718      	adds	r7, #24
 8013b10:	46bd      	mov	sp, r7
 8013b12:	bd80      	pop	{r7, pc}

08013b14 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013b14:	b580      	push	{r7, lr}
 8013b16:	b086      	sub	sp, #24
 8013b18:	af00      	add	r7, sp, #0
 8013b1a:	60f8      	str	r0, [r7, #12]
 8013b1c:	607a      	str	r2, [r7, #4]
 8013b1e:	603b      	str	r3, [r7, #0]
 8013b20:	460b      	mov	r3, r1
 8013b22:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013b24:	2300      	movs	r3, #0
 8013b26:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013b28:	2300      	movs	r3, #0
 8013b2a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8013b2c:	68fb      	ldr	r3, [r7, #12]
 8013b2e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8013b32:	7af9      	ldrb	r1, [r7, #11]
 8013b34:	683b      	ldr	r3, [r7, #0]
 8013b36:	687a      	ldr	r2, [r7, #4]
 8013b38:	f7f9 ffea 	bl	800db10 <HAL_PCD_EP_Receive>
 8013b3c:	4603      	mov	r3, r0
 8013b3e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013b40:	7dfb      	ldrb	r3, [r7, #23]
 8013b42:	4618      	mov	r0, r3
 8013b44:	f000 f820 	bl	8013b88 <USBD_Get_USB_Status>
 8013b48:	4603      	mov	r3, r0
 8013b4a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013b4c:	7dbb      	ldrb	r3, [r7, #22]
}
 8013b4e:	4618      	mov	r0, r3
 8013b50:	3718      	adds	r7, #24
 8013b52:	46bd      	mov	sp, r7
 8013b54:	bd80      	pop	{r7, pc}
	...

08013b58 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8013b58:	b480      	push	{r7}
 8013b5a:	b083      	sub	sp, #12
 8013b5c:	af00      	add	r7, sp, #0
 8013b5e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8013b60:	4b03      	ldr	r3, [pc, #12]	@ (8013b70 <USBD_static_malloc+0x18>)
}
 8013b62:	4618      	mov	r0, r3
 8013b64:	370c      	adds	r7, #12
 8013b66:	46bd      	mov	sp, r7
 8013b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b6c:	4770      	bx	lr
 8013b6e:	bf00      	nop
 8013b70:	200012f8 	.word	0x200012f8

08013b74 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8013b74:	b480      	push	{r7}
 8013b76:	b083      	sub	sp, #12
 8013b78:	af00      	add	r7, sp, #0
 8013b7a:	6078      	str	r0, [r7, #4]

}
 8013b7c:	bf00      	nop
 8013b7e:	370c      	adds	r7, #12
 8013b80:	46bd      	mov	sp, r7
 8013b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b86:	4770      	bx	lr

08013b88 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8013b88:	b480      	push	{r7}
 8013b8a:	b085      	sub	sp, #20
 8013b8c:	af00      	add	r7, sp, #0
 8013b8e:	4603      	mov	r3, r0
 8013b90:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013b92:	2300      	movs	r3, #0
 8013b94:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8013b96:	79fb      	ldrb	r3, [r7, #7]
 8013b98:	2b03      	cmp	r3, #3
 8013b9a:	d817      	bhi.n	8013bcc <USBD_Get_USB_Status+0x44>
 8013b9c:	a201      	add	r2, pc, #4	@ (adr r2, 8013ba4 <USBD_Get_USB_Status+0x1c>)
 8013b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013ba2:	bf00      	nop
 8013ba4:	08013bb5 	.word	0x08013bb5
 8013ba8:	08013bbb 	.word	0x08013bbb
 8013bac:	08013bc1 	.word	0x08013bc1
 8013bb0:	08013bc7 	.word	0x08013bc7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8013bb4:	2300      	movs	r3, #0
 8013bb6:	73fb      	strb	r3, [r7, #15]
    break;
 8013bb8:	e00b      	b.n	8013bd2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013bba:	2303      	movs	r3, #3
 8013bbc:	73fb      	strb	r3, [r7, #15]
    break;
 8013bbe:	e008      	b.n	8013bd2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013bc0:	2301      	movs	r3, #1
 8013bc2:	73fb      	strb	r3, [r7, #15]
    break;
 8013bc4:	e005      	b.n	8013bd2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013bc6:	2303      	movs	r3, #3
 8013bc8:	73fb      	strb	r3, [r7, #15]
    break;
 8013bca:	e002      	b.n	8013bd2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8013bcc:	2303      	movs	r3, #3
 8013bce:	73fb      	strb	r3, [r7, #15]
    break;
 8013bd0:	bf00      	nop
  }
  return usb_status;
 8013bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8013bd4:	4618      	mov	r0, r3
 8013bd6:	3714      	adds	r7, #20
 8013bd8:	46bd      	mov	sp, r7
 8013bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bde:	4770      	bx	lr

08013be0 <__cvt>:
 8013be0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013be4:	ec57 6b10 	vmov	r6, r7, d0
 8013be8:	2f00      	cmp	r7, #0
 8013bea:	460c      	mov	r4, r1
 8013bec:	4619      	mov	r1, r3
 8013bee:	463b      	mov	r3, r7
 8013bf0:	bfbb      	ittet	lt
 8013bf2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8013bf6:	461f      	movlt	r7, r3
 8013bf8:	2300      	movge	r3, #0
 8013bfa:	232d      	movlt	r3, #45	@ 0x2d
 8013bfc:	700b      	strb	r3, [r1, #0]
 8013bfe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013c00:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8013c04:	4691      	mov	r9, r2
 8013c06:	f023 0820 	bic.w	r8, r3, #32
 8013c0a:	bfbc      	itt	lt
 8013c0c:	4632      	movlt	r2, r6
 8013c0e:	4616      	movlt	r6, r2
 8013c10:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8013c14:	d005      	beq.n	8013c22 <__cvt+0x42>
 8013c16:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8013c1a:	d100      	bne.n	8013c1e <__cvt+0x3e>
 8013c1c:	3401      	adds	r4, #1
 8013c1e:	2102      	movs	r1, #2
 8013c20:	e000      	b.n	8013c24 <__cvt+0x44>
 8013c22:	2103      	movs	r1, #3
 8013c24:	ab03      	add	r3, sp, #12
 8013c26:	9301      	str	r3, [sp, #4]
 8013c28:	ab02      	add	r3, sp, #8
 8013c2a:	9300      	str	r3, [sp, #0]
 8013c2c:	ec47 6b10 	vmov	d0, r6, r7
 8013c30:	4653      	mov	r3, sl
 8013c32:	4622      	mov	r2, r4
 8013c34:	f000 ff88 	bl	8014b48 <_dtoa_r>
 8013c38:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8013c3c:	4605      	mov	r5, r0
 8013c3e:	d119      	bne.n	8013c74 <__cvt+0x94>
 8013c40:	f019 0f01 	tst.w	r9, #1
 8013c44:	d00e      	beq.n	8013c64 <__cvt+0x84>
 8013c46:	eb00 0904 	add.w	r9, r0, r4
 8013c4a:	2200      	movs	r2, #0
 8013c4c:	2300      	movs	r3, #0
 8013c4e:	4630      	mov	r0, r6
 8013c50:	4639      	mov	r1, r7
 8013c52:	f7f4 ff41 	bl	8008ad8 <__aeabi_dcmpeq>
 8013c56:	b108      	cbz	r0, 8013c5c <__cvt+0x7c>
 8013c58:	f8cd 900c 	str.w	r9, [sp, #12]
 8013c5c:	2230      	movs	r2, #48	@ 0x30
 8013c5e:	9b03      	ldr	r3, [sp, #12]
 8013c60:	454b      	cmp	r3, r9
 8013c62:	d31e      	bcc.n	8013ca2 <__cvt+0xc2>
 8013c64:	9b03      	ldr	r3, [sp, #12]
 8013c66:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013c68:	1b5b      	subs	r3, r3, r5
 8013c6a:	4628      	mov	r0, r5
 8013c6c:	6013      	str	r3, [r2, #0]
 8013c6e:	b004      	add	sp, #16
 8013c70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013c74:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8013c78:	eb00 0904 	add.w	r9, r0, r4
 8013c7c:	d1e5      	bne.n	8013c4a <__cvt+0x6a>
 8013c7e:	7803      	ldrb	r3, [r0, #0]
 8013c80:	2b30      	cmp	r3, #48	@ 0x30
 8013c82:	d10a      	bne.n	8013c9a <__cvt+0xba>
 8013c84:	2200      	movs	r2, #0
 8013c86:	2300      	movs	r3, #0
 8013c88:	4630      	mov	r0, r6
 8013c8a:	4639      	mov	r1, r7
 8013c8c:	f7f4 ff24 	bl	8008ad8 <__aeabi_dcmpeq>
 8013c90:	b918      	cbnz	r0, 8013c9a <__cvt+0xba>
 8013c92:	f1c4 0401 	rsb	r4, r4, #1
 8013c96:	f8ca 4000 	str.w	r4, [sl]
 8013c9a:	f8da 3000 	ldr.w	r3, [sl]
 8013c9e:	4499      	add	r9, r3
 8013ca0:	e7d3      	b.n	8013c4a <__cvt+0x6a>
 8013ca2:	1c59      	adds	r1, r3, #1
 8013ca4:	9103      	str	r1, [sp, #12]
 8013ca6:	701a      	strb	r2, [r3, #0]
 8013ca8:	e7d9      	b.n	8013c5e <__cvt+0x7e>

08013caa <__exponent>:
 8013caa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013cac:	2900      	cmp	r1, #0
 8013cae:	bfba      	itte	lt
 8013cb0:	4249      	neglt	r1, r1
 8013cb2:	232d      	movlt	r3, #45	@ 0x2d
 8013cb4:	232b      	movge	r3, #43	@ 0x2b
 8013cb6:	2909      	cmp	r1, #9
 8013cb8:	7002      	strb	r2, [r0, #0]
 8013cba:	7043      	strb	r3, [r0, #1]
 8013cbc:	dd29      	ble.n	8013d12 <__exponent+0x68>
 8013cbe:	f10d 0307 	add.w	r3, sp, #7
 8013cc2:	461d      	mov	r5, r3
 8013cc4:	270a      	movs	r7, #10
 8013cc6:	461a      	mov	r2, r3
 8013cc8:	fbb1 f6f7 	udiv	r6, r1, r7
 8013ccc:	fb07 1416 	mls	r4, r7, r6, r1
 8013cd0:	3430      	adds	r4, #48	@ 0x30
 8013cd2:	f802 4c01 	strb.w	r4, [r2, #-1]
 8013cd6:	460c      	mov	r4, r1
 8013cd8:	2c63      	cmp	r4, #99	@ 0x63
 8013cda:	f103 33ff 	add.w	r3, r3, #4294967295
 8013cde:	4631      	mov	r1, r6
 8013ce0:	dcf1      	bgt.n	8013cc6 <__exponent+0x1c>
 8013ce2:	3130      	adds	r1, #48	@ 0x30
 8013ce4:	1e94      	subs	r4, r2, #2
 8013ce6:	f803 1c01 	strb.w	r1, [r3, #-1]
 8013cea:	1c41      	adds	r1, r0, #1
 8013cec:	4623      	mov	r3, r4
 8013cee:	42ab      	cmp	r3, r5
 8013cf0:	d30a      	bcc.n	8013d08 <__exponent+0x5e>
 8013cf2:	f10d 0309 	add.w	r3, sp, #9
 8013cf6:	1a9b      	subs	r3, r3, r2
 8013cf8:	42ac      	cmp	r4, r5
 8013cfa:	bf88      	it	hi
 8013cfc:	2300      	movhi	r3, #0
 8013cfe:	3302      	adds	r3, #2
 8013d00:	4403      	add	r3, r0
 8013d02:	1a18      	subs	r0, r3, r0
 8013d04:	b003      	add	sp, #12
 8013d06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013d08:	f813 6b01 	ldrb.w	r6, [r3], #1
 8013d0c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8013d10:	e7ed      	b.n	8013cee <__exponent+0x44>
 8013d12:	2330      	movs	r3, #48	@ 0x30
 8013d14:	3130      	adds	r1, #48	@ 0x30
 8013d16:	7083      	strb	r3, [r0, #2]
 8013d18:	70c1      	strb	r1, [r0, #3]
 8013d1a:	1d03      	adds	r3, r0, #4
 8013d1c:	e7f1      	b.n	8013d02 <__exponent+0x58>
	...

08013d20 <_printf_float>:
 8013d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d24:	b08d      	sub	sp, #52	@ 0x34
 8013d26:	460c      	mov	r4, r1
 8013d28:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8013d2c:	4616      	mov	r6, r2
 8013d2e:	461f      	mov	r7, r3
 8013d30:	4605      	mov	r5, r0
 8013d32:	f000 fdf9 	bl	8014928 <_localeconv_r>
 8013d36:	6803      	ldr	r3, [r0, #0]
 8013d38:	9304      	str	r3, [sp, #16]
 8013d3a:	4618      	mov	r0, r3
 8013d3c:	f7f4 faa0 	bl	8008280 <strlen>
 8013d40:	2300      	movs	r3, #0
 8013d42:	930a      	str	r3, [sp, #40]	@ 0x28
 8013d44:	f8d8 3000 	ldr.w	r3, [r8]
 8013d48:	9005      	str	r0, [sp, #20]
 8013d4a:	3307      	adds	r3, #7
 8013d4c:	f023 0307 	bic.w	r3, r3, #7
 8013d50:	f103 0208 	add.w	r2, r3, #8
 8013d54:	f894 a018 	ldrb.w	sl, [r4, #24]
 8013d58:	f8d4 b000 	ldr.w	fp, [r4]
 8013d5c:	f8c8 2000 	str.w	r2, [r8]
 8013d60:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013d64:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8013d68:	9307      	str	r3, [sp, #28]
 8013d6a:	f8cd 8018 	str.w	r8, [sp, #24]
 8013d6e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8013d72:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013d76:	4b9c      	ldr	r3, [pc, #624]	@ (8013fe8 <_printf_float+0x2c8>)
 8013d78:	f04f 32ff 	mov.w	r2, #4294967295
 8013d7c:	f7f4 fede 	bl	8008b3c <__aeabi_dcmpun>
 8013d80:	bb70      	cbnz	r0, 8013de0 <_printf_float+0xc0>
 8013d82:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013d86:	4b98      	ldr	r3, [pc, #608]	@ (8013fe8 <_printf_float+0x2c8>)
 8013d88:	f04f 32ff 	mov.w	r2, #4294967295
 8013d8c:	f7f4 feb8 	bl	8008b00 <__aeabi_dcmple>
 8013d90:	bb30      	cbnz	r0, 8013de0 <_printf_float+0xc0>
 8013d92:	2200      	movs	r2, #0
 8013d94:	2300      	movs	r3, #0
 8013d96:	4640      	mov	r0, r8
 8013d98:	4649      	mov	r1, r9
 8013d9a:	f7f4 fea7 	bl	8008aec <__aeabi_dcmplt>
 8013d9e:	b110      	cbz	r0, 8013da6 <_printf_float+0x86>
 8013da0:	232d      	movs	r3, #45	@ 0x2d
 8013da2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013da6:	4a91      	ldr	r2, [pc, #580]	@ (8013fec <_printf_float+0x2cc>)
 8013da8:	4b91      	ldr	r3, [pc, #580]	@ (8013ff0 <_printf_float+0x2d0>)
 8013daa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8013dae:	bf8c      	ite	hi
 8013db0:	4690      	movhi	r8, r2
 8013db2:	4698      	movls	r8, r3
 8013db4:	2303      	movs	r3, #3
 8013db6:	6123      	str	r3, [r4, #16]
 8013db8:	f02b 0304 	bic.w	r3, fp, #4
 8013dbc:	6023      	str	r3, [r4, #0]
 8013dbe:	f04f 0900 	mov.w	r9, #0
 8013dc2:	9700      	str	r7, [sp, #0]
 8013dc4:	4633      	mov	r3, r6
 8013dc6:	aa0b      	add	r2, sp, #44	@ 0x2c
 8013dc8:	4621      	mov	r1, r4
 8013dca:	4628      	mov	r0, r5
 8013dcc:	f000 f9d2 	bl	8014174 <_printf_common>
 8013dd0:	3001      	adds	r0, #1
 8013dd2:	f040 808d 	bne.w	8013ef0 <_printf_float+0x1d0>
 8013dd6:	f04f 30ff 	mov.w	r0, #4294967295
 8013dda:	b00d      	add	sp, #52	@ 0x34
 8013ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013de0:	4642      	mov	r2, r8
 8013de2:	464b      	mov	r3, r9
 8013de4:	4640      	mov	r0, r8
 8013de6:	4649      	mov	r1, r9
 8013de8:	f7f4 fea8 	bl	8008b3c <__aeabi_dcmpun>
 8013dec:	b140      	cbz	r0, 8013e00 <_printf_float+0xe0>
 8013dee:	464b      	mov	r3, r9
 8013df0:	2b00      	cmp	r3, #0
 8013df2:	bfbc      	itt	lt
 8013df4:	232d      	movlt	r3, #45	@ 0x2d
 8013df6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8013dfa:	4a7e      	ldr	r2, [pc, #504]	@ (8013ff4 <_printf_float+0x2d4>)
 8013dfc:	4b7e      	ldr	r3, [pc, #504]	@ (8013ff8 <_printf_float+0x2d8>)
 8013dfe:	e7d4      	b.n	8013daa <_printf_float+0x8a>
 8013e00:	6863      	ldr	r3, [r4, #4]
 8013e02:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8013e06:	9206      	str	r2, [sp, #24]
 8013e08:	1c5a      	adds	r2, r3, #1
 8013e0a:	d13b      	bne.n	8013e84 <_printf_float+0x164>
 8013e0c:	2306      	movs	r3, #6
 8013e0e:	6063      	str	r3, [r4, #4]
 8013e10:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8013e14:	2300      	movs	r3, #0
 8013e16:	6022      	str	r2, [r4, #0]
 8013e18:	9303      	str	r3, [sp, #12]
 8013e1a:	ab0a      	add	r3, sp, #40	@ 0x28
 8013e1c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8013e20:	ab09      	add	r3, sp, #36	@ 0x24
 8013e22:	9300      	str	r3, [sp, #0]
 8013e24:	6861      	ldr	r1, [r4, #4]
 8013e26:	ec49 8b10 	vmov	d0, r8, r9
 8013e2a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8013e2e:	4628      	mov	r0, r5
 8013e30:	f7ff fed6 	bl	8013be0 <__cvt>
 8013e34:	9b06      	ldr	r3, [sp, #24]
 8013e36:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013e38:	2b47      	cmp	r3, #71	@ 0x47
 8013e3a:	4680      	mov	r8, r0
 8013e3c:	d129      	bne.n	8013e92 <_printf_float+0x172>
 8013e3e:	1cc8      	adds	r0, r1, #3
 8013e40:	db02      	blt.n	8013e48 <_printf_float+0x128>
 8013e42:	6863      	ldr	r3, [r4, #4]
 8013e44:	4299      	cmp	r1, r3
 8013e46:	dd41      	ble.n	8013ecc <_printf_float+0x1ac>
 8013e48:	f1aa 0a02 	sub.w	sl, sl, #2
 8013e4c:	fa5f fa8a 	uxtb.w	sl, sl
 8013e50:	3901      	subs	r1, #1
 8013e52:	4652      	mov	r2, sl
 8013e54:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8013e58:	9109      	str	r1, [sp, #36]	@ 0x24
 8013e5a:	f7ff ff26 	bl	8013caa <__exponent>
 8013e5e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013e60:	1813      	adds	r3, r2, r0
 8013e62:	2a01      	cmp	r2, #1
 8013e64:	4681      	mov	r9, r0
 8013e66:	6123      	str	r3, [r4, #16]
 8013e68:	dc02      	bgt.n	8013e70 <_printf_float+0x150>
 8013e6a:	6822      	ldr	r2, [r4, #0]
 8013e6c:	07d2      	lsls	r2, r2, #31
 8013e6e:	d501      	bpl.n	8013e74 <_printf_float+0x154>
 8013e70:	3301      	adds	r3, #1
 8013e72:	6123      	str	r3, [r4, #16]
 8013e74:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8013e78:	2b00      	cmp	r3, #0
 8013e7a:	d0a2      	beq.n	8013dc2 <_printf_float+0xa2>
 8013e7c:	232d      	movs	r3, #45	@ 0x2d
 8013e7e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013e82:	e79e      	b.n	8013dc2 <_printf_float+0xa2>
 8013e84:	9a06      	ldr	r2, [sp, #24]
 8013e86:	2a47      	cmp	r2, #71	@ 0x47
 8013e88:	d1c2      	bne.n	8013e10 <_printf_float+0xf0>
 8013e8a:	2b00      	cmp	r3, #0
 8013e8c:	d1c0      	bne.n	8013e10 <_printf_float+0xf0>
 8013e8e:	2301      	movs	r3, #1
 8013e90:	e7bd      	b.n	8013e0e <_printf_float+0xee>
 8013e92:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8013e96:	d9db      	bls.n	8013e50 <_printf_float+0x130>
 8013e98:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8013e9c:	d118      	bne.n	8013ed0 <_printf_float+0x1b0>
 8013e9e:	2900      	cmp	r1, #0
 8013ea0:	6863      	ldr	r3, [r4, #4]
 8013ea2:	dd0b      	ble.n	8013ebc <_printf_float+0x19c>
 8013ea4:	6121      	str	r1, [r4, #16]
 8013ea6:	b913      	cbnz	r3, 8013eae <_printf_float+0x18e>
 8013ea8:	6822      	ldr	r2, [r4, #0]
 8013eaa:	07d0      	lsls	r0, r2, #31
 8013eac:	d502      	bpl.n	8013eb4 <_printf_float+0x194>
 8013eae:	3301      	adds	r3, #1
 8013eb0:	440b      	add	r3, r1
 8013eb2:	6123      	str	r3, [r4, #16]
 8013eb4:	65a1      	str	r1, [r4, #88]	@ 0x58
 8013eb6:	f04f 0900 	mov.w	r9, #0
 8013eba:	e7db      	b.n	8013e74 <_printf_float+0x154>
 8013ebc:	b913      	cbnz	r3, 8013ec4 <_printf_float+0x1a4>
 8013ebe:	6822      	ldr	r2, [r4, #0]
 8013ec0:	07d2      	lsls	r2, r2, #31
 8013ec2:	d501      	bpl.n	8013ec8 <_printf_float+0x1a8>
 8013ec4:	3302      	adds	r3, #2
 8013ec6:	e7f4      	b.n	8013eb2 <_printf_float+0x192>
 8013ec8:	2301      	movs	r3, #1
 8013eca:	e7f2      	b.n	8013eb2 <_printf_float+0x192>
 8013ecc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8013ed0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013ed2:	4299      	cmp	r1, r3
 8013ed4:	db05      	blt.n	8013ee2 <_printf_float+0x1c2>
 8013ed6:	6823      	ldr	r3, [r4, #0]
 8013ed8:	6121      	str	r1, [r4, #16]
 8013eda:	07d8      	lsls	r0, r3, #31
 8013edc:	d5ea      	bpl.n	8013eb4 <_printf_float+0x194>
 8013ede:	1c4b      	adds	r3, r1, #1
 8013ee0:	e7e7      	b.n	8013eb2 <_printf_float+0x192>
 8013ee2:	2900      	cmp	r1, #0
 8013ee4:	bfd4      	ite	le
 8013ee6:	f1c1 0202 	rsble	r2, r1, #2
 8013eea:	2201      	movgt	r2, #1
 8013eec:	4413      	add	r3, r2
 8013eee:	e7e0      	b.n	8013eb2 <_printf_float+0x192>
 8013ef0:	6823      	ldr	r3, [r4, #0]
 8013ef2:	055a      	lsls	r2, r3, #21
 8013ef4:	d407      	bmi.n	8013f06 <_printf_float+0x1e6>
 8013ef6:	6923      	ldr	r3, [r4, #16]
 8013ef8:	4642      	mov	r2, r8
 8013efa:	4631      	mov	r1, r6
 8013efc:	4628      	mov	r0, r5
 8013efe:	47b8      	blx	r7
 8013f00:	3001      	adds	r0, #1
 8013f02:	d12b      	bne.n	8013f5c <_printf_float+0x23c>
 8013f04:	e767      	b.n	8013dd6 <_printf_float+0xb6>
 8013f06:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8013f0a:	f240 80dd 	bls.w	80140c8 <_printf_float+0x3a8>
 8013f0e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8013f12:	2200      	movs	r2, #0
 8013f14:	2300      	movs	r3, #0
 8013f16:	f7f4 fddf 	bl	8008ad8 <__aeabi_dcmpeq>
 8013f1a:	2800      	cmp	r0, #0
 8013f1c:	d033      	beq.n	8013f86 <_printf_float+0x266>
 8013f1e:	4a37      	ldr	r2, [pc, #220]	@ (8013ffc <_printf_float+0x2dc>)
 8013f20:	2301      	movs	r3, #1
 8013f22:	4631      	mov	r1, r6
 8013f24:	4628      	mov	r0, r5
 8013f26:	47b8      	blx	r7
 8013f28:	3001      	adds	r0, #1
 8013f2a:	f43f af54 	beq.w	8013dd6 <_printf_float+0xb6>
 8013f2e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8013f32:	4543      	cmp	r3, r8
 8013f34:	db02      	blt.n	8013f3c <_printf_float+0x21c>
 8013f36:	6823      	ldr	r3, [r4, #0]
 8013f38:	07d8      	lsls	r0, r3, #31
 8013f3a:	d50f      	bpl.n	8013f5c <_printf_float+0x23c>
 8013f3c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013f40:	4631      	mov	r1, r6
 8013f42:	4628      	mov	r0, r5
 8013f44:	47b8      	blx	r7
 8013f46:	3001      	adds	r0, #1
 8013f48:	f43f af45 	beq.w	8013dd6 <_printf_float+0xb6>
 8013f4c:	f04f 0900 	mov.w	r9, #0
 8013f50:	f108 38ff 	add.w	r8, r8, #4294967295
 8013f54:	f104 0a1a 	add.w	sl, r4, #26
 8013f58:	45c8      	cmp	r8, r9
 8013f5a:	dc09      	bgt.n	8013f70 <_printf_float+0x250>
 8013f5c:	6823      	ldr	r3, [r4, #0]
 8013f5e:	079b      	lsls	r3, r3, #30
 8013f60:	f100 8103 	bmi.w	801416a <_printf_float+0x44a>
 8013f64:	68e0      	ldr	r0, [r4, #12]
 8013f66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013f68:	4298      	cmp	r0, r3
 8013f6a:	bfb8      	it	lt
 8013f6c:	4618      	movlt	r0, r3
 8013f6e:	e734      	b.n	8013dda <_printf_float+0xba>
 8013f70:	2301      	movs	r3, #1
 8013f72:	4652      	mov	r2, sl
 8013f74:	4631      	mov	r1, r6
 8013f76:	4628      	mov	r0, r5
 8013f78:	47b8      	blx	r7
 8013f7a:	3001      	adds	r0, #1
 8013f7c:	f43f af2b 	beq.w	8013dd6 <_printf_float+0xb6>
 8013f80:	f109 0901 	add.w	r9, r9, #1
 8013f84:	e7e8      	b.n	8013f58 <_printf_float+0x238>
 8013f86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013f88:	2b00      	cmp	r3, #0
 8013f8a:	dc39      	bgt.n	8014000 <_printf_float+0x2e0>
 8013f8c:	4a1b      	ldr	r2, [pc, #108]	@ (8013ffc <_printf_float+0x2dc>)
 8013f8e:	2301      	movs	r3, #1
 8013f90:	4631      	mov	r1, r6
 8013f92:	4628      	mov	r0, r5
 8013f94:	47b8      	blx	r7
 8013f96:	3001      	adds	r0, #1
 8013f98:	f43f af1d 	beq.w	8013dd6 <_printf_float+0xb6>
 8013f9c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8013fa0:	ea59 0303 	orrs.w	r3, r9, r3
 8013fa4:	d102      	bne.n	8013fac <_printf_float+0x28c>
 8013fa6:	6823      	ldr	r3, [r4, #0]
 8013fa8:	07d9      	lsls	r1, r3, #31
 8013faa:	d5d7      	bpl.n	8013f5c <_printf_float+0x23c>
 8013fac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013fb0:	4631      	mov	r1, r6
 8013fb2:	4628      	mov	r0, r5
 8013fb4:	47b8      	blx	r7
 8013fb6:	3001      	adds	r0, #1
 8013fb8:	f43f af0d 	beq.w	8013dd6 <_printf_float+0xb6>
 8013fbc:	f04f 0a00 	mov.w	sl, #0
 8013fc0:	f104 0b1a 	add.w	fp, r4, #26
 8013fc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013fc6:	425b      	negs	r3, r3
 8013fc8:	4553      	cmp	r3, sl
 8013fca:	dc01      	bgt.n	8013fd0 <_printf_float+0x2b0>
 8013fcc:	464b      	mov	r3, r9
 8013fce:	e793      	b.n	8013ef8 <_printf_float+0x1d8>
 8013fd0:	2301      	movs	r3, #1
 8013fd2:	465a      	mov	r2, fp
 8013fd4:	4631      	mov	r1, r6
 8013fd6:	4628      	mov	r0, r5
 8013fd8:	47b8      	blx	r7
 8013fda:	3001      	adds	r0, #1
 8013fdc:	f43f aefb 	beq.w	8013dd6 <_printf_float+0xb6>
 8013fe0:	f10a 0a01 	add.w	sl, sl, #1
 8013fe4:	e7ee      	b.n	8013fc4 <_printf_float+0x2a4>
 8013fe6:	bf00      	nop
 8013fe8:	7fefffff 	.word	0x7fefffff
 8013fec:	0801782c 	.word	0x0801782c
 8013ff0:	08017828 	.word	0x08017828
 8013ff4:	08017834 	.word	0x08017834
 8013ff8:	08017830 	.word	0x08017830
 8013ffc:	08017838 	.word	0x08017838
 8014000:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8014002:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8014006:	4553      	cmp	r3, sl
 8014008:	bfa8      	it	ge
 801400a:	4653      	movge	r3, sl
 801400c:	2b00      	cmp	r3, #0
 801400e:	4699      	mov	r9, r3
 8014010:	dc36      	bgt.n	8014080 <_printf_float+0x360>
 8014012:	f04f 0b00 	mov.w	fp, #0
 8014016:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801401a:	f104 021a 	add.w	r2, r4, #26
 801401e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8014020:	9306      	str	r3, [sp, #24]
 8014022:	eba3 0309 	sub.w	r3, r3, r9
 8014026:	455b      	cmp	r3, fp
 8014028:	dc31      	bgt.n	801408e <_printf_float+0x36e>
 801402a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801402c:	459a      	cmp	sl, r3
 801402e:	dc3a      	bgt.n	80140a6 <_printf_float+0x386>
 8014030:	6823      	ldr	r3, [r4, #0]
 8014032:	07da      	lsls	r2, r3, #31
 8014034:	d437      	bmi.n	80140a6 <_printf_float+0x386>
 8014036:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014038:	ebaa 0903 	sub.w	r9, sl, r3
 801403c:	9b06      	ldr	r3, [sp, #24]
 801403e:	ebaa 0303 	sub.w	r3, sl, r3
 8014042:	4599      	cmp	r9, r3
 8014044:	bfa8      	it	ge
 8014046:	4699      	movge	r9, r3
 8014048:	f1b9 0f00 	cmp.w	r9, #0
 801404c:	dc33      	bgt.n	80140b6 <_printf_float+0x396>
 801404e:	f04f 0800 	mov.w	r8, #0
 8014052:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014056:	f104 0b1a 	add.w	fp, r4, #26
 801405a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801405c:	ebaa 0303 	sub.w	r3, sl, r3
 8014060:	eba3 0309 	sub.w	r3, r3, r9
 8014064:	4543      	cmp	r3, r8
 8014066:	f77f af79 	ble.w	8013f5c <_printf_float+0x23c>
 801406a:	2301      	movs	r3, #1
 801406c:	465a      	mov	r2, fp
 801406e:	4631      	mov	r1, r6
 8014070:	4628      	mov	r0, r5
 8014072:	47b8      	blx	r7
 8014074:	3001      	adds	r0, #1
 8014076:	f43f aeae 	beq.w	8013dd6 <_printf_float+0xb6>
 801407a:	f108 0801 	add.w	r8, r8, #1
 801407e:	e7ec      	b.n	801405a <_printf_float+0x33a>
 8014080:	4642      	mov	r2, r8
 8014082:	4631      	mov	r1, r6
 8014084:	4628      	mov	r0, r5
 8014086:	47b8      	blx	r7
 8014088:	3001      	adds	r0, #1
 801408a:	d1c2      	bne.n	8014012 <_printf_float+0x2f2>
 801408c:	e6a3      	b.n	8013dd6 <_printf_float+0xb6>
 801408e:	2301      	movs	r3, #1
 8014090:	4631      	mov	r1, r6
 8014092:	4628      	mov	r0, r5
 8014094:	9206      	str	r2, [sp, #24]
 8014096:	47b8      	blx	r7
 8014098:	3001      	adds	r0, #1
 801409a:	f43f ae9c 	beq.w	8013dd6 <_printf_float+0xb6>
 801409e:	9a06      	ldr	r2, [sp, #24]
 80140a0:	f10b 0b01 	add.w	fp, fp, #1
 80140a4:	e7bb      	b.n	801401e <_printf_float+0x2fe>
 80140a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80140aa:	4631      	mov	r1, r6
 80140ac:	4628      	mov	r0, r5
 80140ae:	47b8      	blx	r7
 80140b0:	3001      	adds	r0, #1
 80140b2:	d1c0      	bne.n	8014036 <_printf_float+0x316>
 80140b4:	e68f      	b.n	8013dd6 <_printf_float+0xb6>
 80140b6:	9a06      	ldr	r2, [sp, #24]
 80140b8:	464b      	mov	r3, r9
 80140ba:	4442      	add	r2, r8
 80140bc:	4631      	mov	r1, r6
 80140be:	4628      	mov	r0, r5
 80140c0:	47b8      	blx	r7
 80140c2:	3001      	adds	r0, #1
 80140c4:	d1c3      	bne.n	801404e <_printf_float+0x32e>
 80140c6:	e686      	b.n	8013dd6 <_printf_float+0xb6>
 80140c8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80140cc:	f1ba 0f01 	cmp.w	sl, #1
 80140d0:	dc01      	bgt.n	80140d6 <_printf_float+0x3b6>
 80140d2:	07db      	lsls	r3, r3, #31
 80140d4:	d536      	bpl.n	8014144 <_printf_float+0x424>
 80140d6:	2301      	movs	r3, #1
 80140d8:	4642      	mov	r2, r8
 80140da:	4631      	mov	r1, r6
 80140dc:	4628      	mov	r0, r5
 80140de:	47b8      	blx	r7
 80140e0:	3001      	adds	r0, #1
 80140e2:	f43f ae78 	beq.w	8013dd6 <_printf_float+0xb6>
 80140e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80140ea:	4631      	mov	r1, r6
 80140ec:	4628      	mov	r0, r5
 80140ee:	47b8      	blx	r7
 80140f0:	3001      	adds	r0, #1
 80140f2:	f43f ae70 	beq.w	8013dd6 <_printf_float+0xb6>
 80140f6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80140fa:	2200      	movs	r2, #0
 80140fc:	2300      	movs	r3, #0
 80140fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014102:	f7f4 fce9 	bl	8008ad8 <__aeabi_dcmpeq>
 8014106:	b9c0      	cbnz	r0, 801413a <_printf_float+0x41a>
 8014108:	4653      	mov	r3, sl
 801410a:	f108 0201 	add.w	r2, r8, #1
 801410e:	4631      	mov	r1, r6
 8014110:	4628      	mov	r0, r5
 8014112:	47b8      	blx	r7
 8014114:	3001      	adds	r0, #1
 8014116:	d10c      	bne.n	8014132 <_printf_float+0x412>
 8014118:	e65d      	b.n	8013dd6 <_printf_float+0xb6>
 801411a:	2301      	movs	r3, #1
 801411c:	465a      	mov	r2, fp
 801411e:	4631      	mov	r1, r6
 8014120:	4628      	mov	r0, r5
 8014122:	47b8      	blx	r7
 8014124:	3001      	adds	r0, #1
 8014126:	f43f ae56 	beq.w	8013dd6 <_printf_float+0xb6>
 801412a:	f108 0801 	add.w	r8, r8, #1
 801412e:	45d0      	cmp	r8, sl
 8014130:	dbf3      	blt.n	801411a <_printf_float+0x3fa>
 8014132:	464b      	mov	r3, r9
 8014134:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8014138:	e6df      	b.n	8013efa <_printf_float+0x1da>
 801413a:	f04f 0800 	mov.w	r8, #0
 801413e:	f104 0b1a 	add.w	fp, r4, #26
 8014142:	e7f4      	b.n	801412e <_printf_float+0x40e>
 8014144:	2301      	movs	r3, #1
 8014146:	4642      	mov	r2, r8
 8014148:	e7e1      	b.n	801410e <_printf_float+0x3ee>
 801414a:	2301      	movs	r3, #1
 801414c:	464a      	mov	r2, r9
 801414e:	4631      	mov	r1, r6
 8014150:	4628      	mov	r0, r5
 8014152:	47b8      	blx	r7
 8014154:	3001      	adds	r0, #1
 8014156:	f43f ae3e 	beq.w	8013dd6 <_printf_float+0xb6>
 801415a:	f108 0801 	add.w	r8, r8, #1
 801415e:	68e3      	ldr	r3, [r4, #12]
 8014160:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8014162:	1a5b      	subs	r3, r3, r1
 8014164:	4543      	cmp	r3, r8
 8014166:	dcf0      	bgt.n	801414a <_printf_float+0x42a>
 8014168:	e6fc      	b.n	8013f64 <_printf_float+0x244>
 801416a:	f04f 0800 	mov.w	r8, #0
 801416e:	f104 0919 	add.w	r9, r4, #25
 8014172:	e7f4      	b.n	801415e <_printf_float+0x43e>

08014174 <_printf_common>:
 8014174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014178:	4616      	mov	r6, r2
 801417a:	4698      	mov	r8, r3
 801417c:	688a      	ldr	r2, [r1, #8]
 801417e:	690b      	ldr	r3, [r1, #16]
 8014180:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8014184:	4293      	cmp	r3, r2
 8014186:	bfb8      	it	lt
 8014188:	4613      	movlt	r3, r2
 801418a:	6033      	str	r3, [r6, #0]
 801418c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8014190:	4607      	mov	r7, r0
 8014192:	460c      	mov	r4, r1
 8014194:	b10a      	cbz	r2, 801419a <_printf_common+0x26>
 8014196:	3301      	adds	r3, #1
 8014198:	6033      	str	r3, [r6, #0]
 801419a:	6823      	ldr	r3, [r4, #0]
 801419c:	0699      	lsls	r1, r3, #26
 801419e:	bf42      	ittt	mi
 80141a0:	6833      	ldrmi	r3, [r6, #0]
 80141a2:	3302      	addmi	r3, #2
 80141a4:	6033      	strmi	r3, [r6, #0]
 80141a6:	6825      	ldr	r5, [r4, #0]
 80141a8:	f015 0506 	ands.w	r5, r5, #6
 80141ac:	d106      	bne.n	80141bc <_printf_common+0x48>
 80141ae:	f104 0a19 	add.w	sl, r4, #25
 80141b2:	68e3      	ldr	r3, [r4, #12]
 80141b4:	6832      	ldr	r2, [r6, #0]
 80141b6:	1a9b      	subs	r3, r3, r2
 80141b8:	42ab      	cmp	r3, r5
 80141ba:	dc26      	bgt.n	801420a <_printf_common+0x96>
 80141bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80141c0:	6822      	ldr	r2, [r4, #0]
 80141c2:	3b00      	subs	r3, #0
 80141c4:	bf18      	it	ne
 80141c6:	2301      	movne	r3, #1
 80141c8:	0692      	lsls	r2, r2, #26
 80141ca:	d42b      	bmi.n	8014224 <_printf_common+0xb0>
 80141cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80141d0:	4641      	mov	r1, r8
 80141d2:	4638      	mov	r0, r7
 80141d4:	47c8      	blx	r9
 80141d6:	3001      	adds	r0, #1
 80141d8:	d01e      	beq.n	8014218 <_printf_common+0xa4>
 80141da:	6823      	ldr	r3, [r4, #0]
 80141dc:	6922      	ldr	r2, [r4, #16]
 80141de:	f003 0306 	and.w	r3, r3, #6
 80141e2:	2b04      	cmp	r3, #4
 80141e4:	bf02      	ittt	eq
 80141e6:	68e5      	ldreq	r5, [r4, #12]
 80141e8:	6833      	ldreq	r3, [r6, #0]
 80141ea:	1aed      	subeq	r5, r5, r3
 80141ec:	68a3      	ldr	r3, [r4, #8]
 80141ee:	bf0c      	ite	eq
 80141f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80141f4:	2500      	movne	r5, #0
 80141f6:	4293      	cmp	r3, r2
 80141f8:	bfc4      	itt	gt
 80141fa:	1a9b      	subgt	r3, r3, r2
 80141fc:	18ed      	addgt	r5, r5, r3
 80141fe:	2600      	movs	r6, #0
 8014200:	341a      	adds	r4, #26
 8014202:	42b5      	cmp	r5, r6
 8014204:	d11a      	bne.n	801423c <_printf_common+0xc8>
 8014206:	2000      	movs	r0, #0
 8014208:	e008      	b.n	801421c <_printf_common+0xa8>
 801420a:	2301      	movs	r3, #1
 801420c:	4652      	mov	r2, sl
 801420e:	4641      	mov	r1, r8
 8014210:	4638      	mov	r0, r7
 8014212:	47c8      	blx	r9
 8014214:	3001      	adds	r0, #1
 8014216:	d103      	bne.n	8014220 <_printf_common+0xac>
 8014218:	f04f 30ff 	mov.w	r0, #4294967295
 801421c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014220:	3501      	adds	r5, #1
 8014222:	e7c6      	b.n	80141b2 <_printf_common+0x3e>
 8014224:	18e1      	adds	r1, r4, r3
 8014226:	1c5a      	adds	r2, r3, #1
 8014228:	2030      	movs	r0, #48	@ 0x30
 801422a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801422e:	4422      	add	r2, r4
 8014230:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8014234:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8014238:	3302      	adds	r3, #2
 801423a:	e7c7      	b.n	80141cc <_printf_common+0x58>
 801423c:	2301      	movs	r3, #1
 801423e:	4622      	mov	r2, r4
 8014240:	4641      	mov	r1, r8
 8014242:	4638      	mov	r0, r7
 8014244:	47c8      	blx	r9
 8014246:	3001      	adds	r0, #1
 8014248:	d0e6      	beq.n	8014218 <_printf_common+0xa4>
 801424a:	3601      	adds	r6, #1
 801424c:	e7d9      	b.n	8014202 <_printf_common+0x8e>
	...

08014250 <_printf_i>:
 8014250:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014254:	7e0f      	ldrb	r7, [r1, #24]
 8014256:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8014258:	2f78      	cmp	r7, #120	@ 0x78
 801425a:	4691      	mov	r9, r2
 801425c:	4680      	mov	r8, r0
 801425e:	460c      	mov	r4, r1
 8014260:	469a      	mov	sl, r3
 8014262:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8014266:	d807      	bhi.n	8014278 <_printf_i+0x28>
 8014268:	2f62      	cmp	r7, #98	@ 0x62
 801426a:	d80a      	bhi.n	8014282 <_printf_i+0x32>
 801426c:	2f00      	cmp	r7, #0
 801426e:	f000 80d1 	beq.w	8014414 <_printf_i+0x1c4>
 8014272:	2f58      	cmp	r7, #88	@ 0x58
 8014274:	f000 80b8 	beq.w	80143e8 <_printf_i+0x198>
 8014278:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801427c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8014280:	e03a      	b.n	80142f8 <_printf_i+0xa8>
 8014282:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8014286:	2b15      	cmp	r3, #21
 8014288:	d8f6      	bhi.n	8014278 <_printf_i+0x28>
 801428a:	a101      	add	r1, pc, #4	@ (adr r1, 8014290 <_printf_i+0x40>)
 801428c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014290:	080142e9 	.word	0x080142e9
 8014294:	080142fd 	.word	0x080142fd
 8014298:	08014279 	.word	0x08014279
 801429c:	08014279 	.word	0x08014279
 80142a0:	08014279 	.word	0x08014279
 80142a4:	08014279 	.word	0x08014279
 80142a8:	080142fd 	.word	0x080142fd
 80142ac:	08014279 	.word	0x08014279
 80142b0:	08014279 	.word	0x08014279
 80142b4:	08014279 	.word	0x08014279
 80142b8:	08014279 	.word	0x08014279
 80142bc:	080143fb 	.word	0x080143fb
 80142c0:	08014327 	.word	0x08014327
 80142c4:	080143b5 	.word	0x080143b5
 80142c8:	08014279 	.word	0x08014279
 80142cc:	08014279 	.word	0x08014279
 80142d0:	0801441d 	.word	0x0801441d
 80142d4:	08014279 	.word	0x08014279
 80142d8:	08014327 	.word	0x08014327
 80142dc:	08014279 	.word	0x08014279
 80142e0:	08014279 	.word	0x08014279
 80142e4:	080143bd 	.word	0x080143bd
 80142e8:	6833      	ldr	r3, [r6, #0]
 80142ea:	1d1a      	adds	r2, r3, #4
 80142ec:	681b      	ldr	r3, [r3, #0]
 80142ee:	6032      	str	r2, [r6, #0]
 80142f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80142f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80142f8:	2301      	movs	r3, #1
 80142fa:	e09c      	b.n	8014436 <_printf_i+0x1e6>
 80142fc:	6833      	ldr	r3, [r6, #0]
 80142fe:	6820      	ldr	r0, [r4, #0]
 8014300:	1d19      	adds	r1, r3, #4
 8014302:	6031      	str	r1, [r6, #0]
 8014304:	0606      	lsls	r6, r0, #24
 8014306:	d501      	bpl.n	801430c <_printf_i+0xbc>
 8014308:	681d      	ldr	r5, [r3, #0]
 801430a:	e003      	b.n	8014314 <_printf_i+0xc4>
 801430c:	0645      	lsls	r5, r0, #25
 801430e:	d5fb      	bpl.n	8014308 <_printf_i+0xb8>
 8014310:	f9b3 5000 	ldrsh.w	r5, [r3]
 8014314:	2d00      	cmp	r5, #0
 8014316:	da03      	bge.n	8014320 <_printf_i+0xd0>
 8014318:	232d      	movs	r3, #45	@ 0x2d
 801431a:	426d      	negs	r5, r5
 801431c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014320:	4858      	ldr	r0, [pc, #352]	@ (8014484 <_printf_i+0x234>)
 8014322:	230a      	movs	r3, #10
 8014324:	e011      	b.n	801434a <_printf_i+0xfa>
 8014326:	6821      	ldr	r1, [r4, #0]
 8014328:	6833      	ldr	r3, [r6, #0]
 801432a:	0608      	lsls	r0, r1, #24
 801432c:	f853 5b04 	ldr.w	r5, [r3], #4
 8014330:	d402      	bmi.n	8014338 <_printf_i+0xe8>
 8014332:	0649      	lsls	r1, r1, #25
 8014334:	bf48      	it	mi
 8014336:	b2ad      	uxthmi	r5, r5
 8014338:	2f6f      	cmp	r7, #111	@ 0x6f
 801433a:	4852      	ldr	r0, [pc, #328]	@ (8014484 <_printf_i+0x234>)
 801433c:	6033      	str	r3, [r6, #0]
 801433e:	bf14      	ite	ne
 8014340:	230a      	movne	r3, #10
 8014342:	2308      	moveq	r3, #8
 8014344:	2100      	movs	r1, #0
 8014346:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801434a:	6866      	ldr	r6, [r4, #4]
 801434c:	60a6      	str	r6, [r4, #8]
 801434e:	2e00      	cmp	r6, #0
 8014350:	db05      	blt.n	801435e <_printf_i+0x10e>
 8014352:	6821      	ldr	r1, [r4, #0]
 8014354:	432e      	orrs	r6, r5
 8014356:	f021 0104 	bic.w	r1, r1, #4
 801435a:	6021      	str	r1, [r4, #0]
 801435c:	d04b      	beq.n	80143f6 <_printf_i+0x1a6>
 801435e:	4616      	mov	r6, r2
 8014360:	fbb5 f1f3 	udiv	r1, r5, r3
 8014364:	fb03 5711 	mls	r7, r3, r1, r5
 8014368:	5dc7      	ldrb	r7, [r0, r7]
 801436a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801436e:	462f      	mov	r7, r5
 8014370:	42bb      	cmp	r3, r7
 8014372:	460d      	mov	r5, r1
 8014374:	d9f4      	bls.n	8014360 <_printf_i+0x110>
 8014376:	2b08      	cmp	r3, #8
 8014378:	d10b      	bne.n	8014392 <_printf_i+0x142>
 801437a:	6823      	ldr	r3, [r4, #0]
 801437c:	07df      	lsls	r7, r3, #31
 801437e:	d508      	bpl.n	8014392 <_printf_i+0x142>
 8014380:	6923      	ldr	r3, [r4, #16]
 8014382:	6861      	ldr	r1, [r4, #4]
 8014384:	4299      	cmp	r1, r3
 8014386:	bfde      	ittt	le
 8014388:	2330      	movle	r3, #48	@ 0x30
 801438a:	f806 3c01 	strble.w	r3, [r6, #-1]
 801438e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8014392:	1b92      	subs	r2, r2, r6
 8014394:	6122      	str	r2, [r4, #16]
 8014396:	f8cd a000 	str.w	sl, [sp]
 801439a:	464b      	mov	r3, r9
 801439c:	aa03      	add	r2, sp, #12
 801439e:	4621      	mov	r1, r4
 80143a0:	4640      	mov	r0, r8
 80143a2:	f7ff fee7 	bl	8014174 <_printf_common>
 80143a6:	3001      	adds	r0, #1
 80143a8:	d14a      	bne.n	8014440 <_printf_i+0x1f0>
 80143aa:	f04f 30ff 	mov.w	r0, #4294967295
 80143ae:	b004      	add	sp, #16
 80143b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80143b4:	6823      	ldr	r3, [r4, #0]
 80143b6:	f043 0320 	orr.w	r3, r3, #32
 80143ba:	6023      	str	r3, [r4, #0]
 80143bc:	4832      	ldr	r0, [pc, #200]	@ (8014488 <_printf_i+0x238>)
 80143be:	2778      	movs	r7, #120	@ 0x78
 80143c0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80143c4:	6823      	ldr	r3, [r4, #0]
 80143c6:	6831      	ldr	r1, [r6, #0]
 80143c8:	061f      	lsls	r7, r3, #24
 80143ca:	f851 5b04 	ldr.w	r5, [r1], #4
 80143ce:	d402      	bmi.n	80143d6 <_printf_i+0x186>
 80143d0:	065f      	lsls	r7, r3, #25
 80143d2:	bf48      	it	mi
 80143d4:	b2ad      	uxthmi	r5, r5
 80143d6:	6031      	str	r1, [r6, #0]
 80143d8:	07d9      	lsls	r1, r3, #31
 80143da:	bf44      	itt	mi
 80143dc:	f043 0320 	orrmi.w	r3, r3, #32
 80143e0:	6023      	strmi	r3, [r4, #0]
 80143e2:	b11d      	cbz	r5, 80143ec <_printf_i+0x19c>
 80143e4:	2310      	movs	r3, #16
 80143e6:	e7ad      	b.n	8014344 <_printf_i+0xf4>
 80143e8:	4826      	ldr	r0, [pc, #152]	@ (8014484 <_printf_i+0x234>)
 80143ea:	e7e9      	b.n	80143c0 <_printf_i+0x170>
 80143ec:	6823      	ldr	r3, [r4, #0]
 80143ee:	f023 0320 	bic.w	r3, r3, #32
 80143f2:	6023      	str	r3, [r4, #0]
 80143f4:	e7f6      	b.n	80143e4 <_printf_i+0x194>
 80143f6:	4616      	mov	r6, r2
 80143f8:	e7bd      	b.n	8014376 <_printf_i+0x126>
 80143fa:	6833      	ldr	r3, [r6, #0]
 80143fc:	6825      	ldr	r5, [r4, #0]
 80143fe:	6961      	ldr	r1, [r4, #20]
 8014400:	1d18      	adds	r0, r3, #4
 8014402:	6030      	str	r0, [r6, #0]
 8014404:	062e      	lsls	r6, r5, #24
 8014406:	681b      	ldr	r3, [r3, #0]
 8014408:	d501      	bpl.n	801440e <_printf_i+0x1be>
 801440a:	6019      	str	r1, [r3, #0]
 801440c:	e002      	b.n	8014414 <_printf_i+0x1c4>
 801440e:	0668      	lsls	r0, r5, #25
 8014410:	d5fb      	bpl.n	801440a <_printf_i+0x1ba>
 8014412:	8019      	strh	r1, [r3, #0]
 8014414:	2300      	movs	r3, #0
 8014416:	6123      	str	r3, [r4, #16]
 8014418:	4616      	mov	r6, r2
 801441a:	e7bc      	b.n	8014396 <_printf_i+0x146>
 801441c:	6833      	ldr	r3, [r6, #0]
 801441e:	1d1a      	adds	r2, r3, #4
 8014420:	6032      	str	r2, [r6, #0]
 8014422:	681e      	ldr	r6, [r3, #0]
 8014424:	6862      	ldr	r2, [r4, #4]
 8014426:	2100      	movs	r1, #0
 8014428:	4630      	mov	r0, r6
 801442a:	f7f3 fed9 	bl	80081e0 <memchr>
 801442e:	b108      	cbz	r0, 8014434 <_printf_i+0x1e4>
 8014430:	1b80      	subs	r0, r0, r6
 8014432:	6060      	str	r0, [r4, #4]
 8014434:	6863      	ldr	r3, [r4, #4]
 8014436:	6123      	str	r3, [r4, #16]
 8014438:	2300      	movs	r3, #0
 801443a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801443e:	e7aa      	b.n	8014396 <_printf_i+0x146>
 8014440:	6923      	ldr	r3, [r4, #16]
 8014442:	4632      	mov	r2, r6
 8014444:	4649      	mov	r1, r9
 8014446:	4640      	mov	r0, r8
 8014448:	47d0      	blx	sl
 801444a:	3001      	adds	r0, #1
 801444c:	d0ad      	beq.n	80143aa <_printf_i+0x15a>
 801444e:	6823      	ldr	r3, [r4, #0]
 8014450:	079b      	lsls	r3, r3, #30
 8014452:	d413      	bmi.n	801447c <_printf_i+0x22c>
 8014454:	68e0      	ldr	r0, [r4, #12]
 8014456:	9b03      	ldr	r3, [sp, #12]
 8014458:	4298      	cmp	r0, r3
 801445a:	bfb8      	it	lt
 801445c:	4618      	movlt	r0, r3
 801445e:	e7a6      	b.n	80143ae <_printf_i+0x15e>
 8014460:	2301      	movs	r3, #1
 8014462:	4632      	mov	r2, r6
 8014464:	4649      	mov	r1, r9
 8014466:	4640      	mov	r0, r8
 8014468:	47d0      	blx	sl
 801446a:	3001      	adds	r0, #1
 801446c:	d09d      	beq.n	80143aa <_printf_i+0x15a>
 801446e:	3501      	adds	r5, #1
 8014470:	68e3      	ldr	r3, [r4, #12]
 8014472:	9903      	ldr	r1, [sp, #12]
 8014474:	1a5b      	subs	r3, r3, r1
 8014476:	42ab      	cmp	r3, r5
 8014478:	dcf2      	bgt.n	8014460 <_printf_i+0x210>
 801447a:	e7eb      	b.n	8014454 <_printf_i+0x204>
 801447c:	2500      	movs	r5, #0
 801447e:	f104 0619 	add.w	r6, r4, #25
 8014482:	e7f5      	b.n	8014470 <_printf_i+0x220>
 8014484:	0801783a 	.word	0x0801783a
 8014488:	0801784b 	.word	0x0801784b

0801448c <std>:
 801448c:	2300      	movs	r3, #0
 801448e:	b510      	push	{r4, lr}
 8014490:	4604      	mov	r4, r0
 8014492:	e9c0 3300 	strd	r3, r3, [r0]
 8014496:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801449a:	6083      	str	r3, [r0, #8]
 801449c:	8181      	strh	r1, [r0, #12]
 801449e:	6643      	str	r3, [r0, #100]	@ 0x64
 80144a0:	81c2      	strh	r2, [r0, #14]
 80144a2:	6183      	str	r3, [r0, #24]
 80144a4:	4619      	mov	r1, r3
 80144a6:	2208      	movs	r2, #8
 80144a8:	305c      	adds	r0, #92	@ 0x5c
 80144aa:	f000 fa35 	bl	8014918 <memset>
 80144ae:	4b0d      	ldr	r3, [pc, #52]	@ (80144e4 <std+0x58>)
 80144b0:	6263      	str	r3, [r4, #36]	@ 0x24
 80144b2:	4b0d      	ldr	r3, [pc, #52]	@ (80144e8 <std+0x5c>)
 80144b4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80144b6:	4b0d      	ldr	r3, [pc, #52]	@ (80144ec <std+0x60>)
 80144b8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80144ba:	4b0d      	ldr	r3, [pc, #52]	@ (80144f0 <std+0x64>)
 80144bc:	6323      	str	r3, [r4, #48]	@ 0x30
 80144be:	4b0d      	ldr	r3, [pc, #52]	@ (80144f4 <std+0x68>)
 80144c0:	6224      	str	r4, [r4, #32]
 80144c2:	429c      	cmp	r4, r3
 80144c4:	d006      	beq.n	80144d4 <std+0x48>
 80144c6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80144ca:	4294      	cmp	r4, r2
 80144cc:	d002      	beq.n	80144d4 <std+0x48>
 80144ce:	33d0      	adds	r3, #208	@ 0xd0
 80144d0:	429c      	cmp	r4, r3
 80144d2:	d105      	bne.n	80144e0 <std+0x54>
 80144d4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80144d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80144dc:	f000 ba98 	b.w	8014a10 <__retarget_lock_init_recursive>
 80144e0:	bd10      	pop	{r4, pc}
 80144e2:	bf00      	nop
 80144e4:	08014735 	.word	0x08014735
 80144e8:	08014757 	.word	0x08014757
 80144ec:	0801478f 	.word	0x0801478f
 80144f0:	080147b3 	.word	0x080147b3
 80144f4:	2000130c 	.word	0x2000130c

080144f8 <stdio_exit_handler>:
 80144f8:	4a02      	ldr	r2, [pc, #8]	@ (8014504 <stdio_exit_handler+0xc>)
 80144fa:	4903      	ldr	r1, [pc, #12]	@ (8014508 <stdio_exit_handler+0x10>)
 80144fc:	4803      	ldr	r0, [pc, #12]	@ (801450c <stdio_exit_handler+0x14>)
 80144fe:	f000 b869 	b.w	80145d4 <_fwalk_sglue>
 8014502:	bf00      	nop
 8014504:	20000128 	.word	0x20000128
 8014508:	08016619 	.word	0x08016619
 801450c:	20000138 	.word	0x20000138

08014510 <cleanup_stdio>:
 8014510:	6841      	ldr	r1, [r0, #4]
 8014512:	4b0c      	ldr	r3, [pc, #48]	@ (8014544 <cleanup_stdio+0x34>)
 8014514:	4299      	cmp	r1, r3
 8014516:	b510      	push	{r4, lr}
 8014518:	4604      	mov	r4, r0
 801451a:	d001      	beq.n	8014520 <cleanup_stdio+0x10>
 801451c:	f002 f87c 	bl	8016618 <_fflush_r>
 8014520:	68a1      	ldr	r1, [r4, #8]
 8014522:	4b09      	ldr	r3, [pc, #36]	@ (8014548 <cleanup_stdio+0x38>)
 8014524:	4299      	cmp	r1, r3
 8014526:	d002      	beq.n	801452e <cleanup_stdio+0x1e>
 8014528:	4620      	mov	r0, r4
 801452a:	f002 f875 	bl	8016618 <_fflush_r>
 801452e:	68e1      	ldr	r1, [r4, #12]
 8014530:	4b06      	ldr	r3, [pc, #24]	@ (801454c <cleanup_stdio+0x3c>)
 8014532:	4299      	cmp	r1, r3
 8014534:	d004      	beq.n	8014540 <cleanup_stdio+0x30>
 8014536:	4620      	mov	r0, r4
 8014538:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801453c:	f002 b86c 	b.w	8016618 <_fflush_r>
 8014540:	bd10      	pop	{r4, pc}
 8014542:	bf00      	nop
 8014544:	2000130c 	.word	0x2000130c
 8014548:	20001374 	.word	0x20001374
 801454c:	200013dc 	.word	0x200013dc

08014550 <global_stdio_init.part.0>:
 8014550:	b510      	push	{r4, lr}
 8014552:	4b0b      	ldr	r3, [pc, #44]	@ (8014580 <global_stdio_init.part.0+0x30>)
 8014554:	4c0b      	ldr	r4, [pc, #44]	@ (8014584 <global_stdio_init.part.0+0x34>)
 8014556:	4a0c      	ldr	r2, [pc, #48]	@ (8014588 <global_stdio_init.part.0+0x38>)
 8014558:	601a      	str	r2, [r3, #0]
 801455a:	4620      	mov	r0, r4
 801455c:	2200      	movs	r2, #0
 801455e:	2104      	movs	r1, #4
 8014560:	f7ff ff94 	bl	801448c <std>
 8014564:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8014568:	2201      	movs	r2, #1
 801456a:	2109      	movs	r1, #9
 801456c:	f7ff ff8e 	bl	801448c <std>
 8014570:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8014574:	2202      	movs	r2, #2
 8014576:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801457a:	2112      	movs	r1, #18
 801457c:	f7ff bf86 	b.w	801448c <std>
 8014580:	20001444 	.word	0x20001444
 8014584:	2000130c 	.word	0x2000130c
 8014588:	080144f9 	.word	0x080144f9

0801458c <__sfp_lock_acquire>:
 801458c:	4801      	ldr	r0, [pc, #4]	@ (8014594 <__sfp_lock_acquire+0x8>)
 801458e:	f000 ba40 	b.w	8014a12 <__retarget_lock_acquire_recursive>
 8014592:	bf00      	nop
 8014594:	2000144d 	.word	0x2000144d

08014598 <__sfp_lock_release>:
 8014598:	4801      	ldr	r0, [pc, #4]	@ (80145a0 <__sfp_lock_release+0x8>)
 801459a:	f000 ba3b 	b.w	8014a14 <__retarget_lock_release_recursive>
 801459e:	bf00      	nop
 80145a0:	2000144d 	.word	0x2000144d

080145a4 <__sinit>:
 80145a4:	b510      	push	{r4, lr}
 80145a6:	4604      	mov	r4, r0
 80145a8:	f7ff fff0 	bl	801458c <__sfp_lock_acquire>
 80145ac:	6a23      	ldr	r3, [r4, #32]
 80145ae:	b11b      	cbz	r3, 80145b8 <__sinit+0x14>
 80145b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80145b4:	f7ff bff0 	b.w	8014598 <__sfp_lock_release>
 80145b8:	4b04      	ldr	r3, [pc, #16]	@ (80145cc <__sinit+0x28>)
 80145ba:	6223      	str	r3, [r4, #32]
 80145bc:	4b04      	ldr	r3, [pc, #16]	@ (80145d0 <__sinit+0x2c>)
 80145be:	681b      	ldr	r3, [r3, #0]
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	d1f5      	bne.n	80145b0 <__sinit+0xc>
 80145c4:	f7ff ffc4 	bl	8014550 <global_stdio_init.part.0>
 80145c8:	e7f2      	b.n	80145b0 <__sinit+0xc>
 80145ca:	bf00      	nop
 80145cc:	08014511 	.word	0x08014511
 80145d0:	20001444 	.word	0x20001444

080145d4 <_fwalk_sglue>:
 80145d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80145d8:	4607      	mov	r7, r0
 80145da:	4688      	mov	r8, r1
 80145dc:	4614      	mov	r4, r2
 80145de:	2600      	movs	r6, #0
 80145e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80145e4:	f1b9 0901 	subs.w	r9, r9, #1
 80145e8:	d505      	bpl.n	80145f6 <_fwalk_sglue+0x22>
 80145ea:	6824      	ldr	r4, [r4, #0]
 80145ec:	2c00      	cmp	r4, #0
 80145ee:	d1f7      	bne.n	80145e0 <_fwalk_sglue+0xc>
 80145f0:	4630      	mov	r0, r6
 80145f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80145f6:	89ab      	ldrh	r3, [r5, #12]
 80145f8:	2b01      	cmp	r3, #1
 80145fa:	d907      	bls.n	801460c <_fwalk_sglue+0x38>
 80145fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014600:	3301      	adds	r3, #1
 8014602:	d003      	beq.n	801460c <_fwalk_sglue+0x38>
 8014604:	4629      	mov	r1, r5
 8014606:	4638      	mov	r0, r7
 8014608:	47c0      	blx	r8
 801460a:	4306      	orrs	r6, r0
 801460c:	3568      	adds	r5, #104	@ 0x68
 801460e:	e7e9      	b.n	80145e4 <_fwalk_sglue+0x10>

08014610 <iprintf>:
 8014610:	b40f      	push	{r0, r1, r2, r3}
 8014612:	b507      	push	{r0, r1, r2, lr}
 8014614:	4906      	ldr	r1, [pc, #24]	@ (8014630 <iprintf+0x20>)
 8014616:	ab04      	add	r3, sp, #16
 8014618:	6808      	ldr	r0, [r1, #0]
 801461a:	f853 2b04 	ldr.w	r2, [r3], #4
 801461e:	6881      	ldr	r1, [r0, #8]
 8014620:	9301      	str	r3, [sp, #4]
 8014622:	f001 fe5d 	bl	80162e0 <_vfiprintf_r>
 8014626:	b003      	add	sp, #12
 8014628:	f85d eb04 	ldr.w	lr, [sp], #4
 801462c:	b004      	add	sp, #16
 801462e:	4770      	bx	lr
 8014630:	20000134 	.word	0x20000134

08014634 <_puts_r>:
 8014634:	6a03      	ldr	r3, [r0, #32]
 8014636:	b570      	push	{r4, r5, r6, lr}
 8014638:	6884      	ldr	r4, [r0, #8]
 801463a:	4605      	mov	r5, r0
 801463c:	460e      	mov	r6, r1
 801463e:	b90b      	cbnz	r3, 8014644 <_puts_r+0x10>
 8014640:	f7ff ffb0 	bl	80145a4 <__sinit>
 8014644:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014646:	07db      	lsls	r3, r3, #31
 8014648:	d405      	bmi.n	8014656 <_puts_r+0x22>
 801464a:	89a3      	ldrh	r3, [r4, #12]
 801464c:	0598      	lsls	r0, r3, #22
 801464e:	d402      	bmi.n	8014656 <_puts_r+0x22>
 8014650:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014652:	f000 f9de 	bl	8014a12 <__retarget_lock_acquire_recursive>
 8014656:	89a3      	ldrh	r3, [r4, #12]
 8014658:	0719      	lsls	r1, r3, #28
 801465a:	d502      	bpl.n	8014662 <_puts_r+0x2e>
 801465c:	6923      	ldr	r3, [r4, #16]
 801465e:	2b00      	cmp	r3, #0
 8014660:	d135      	bne.n	80146ce <_puts_r+0x9a>
 8014662:	4621      	mov	r1, r4
 8014664:	4628      	mov	r0, r5
 8014666:	f000 f8e7 	bl	8014838 <__swsetup_r>
 801466a:	b380      	cbz	r0, 80146ce <_puts_r+0x9a>
 801466c:	f04f 35ff 	mov.w	r5, #4294967295
 8014670:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014672:	07da      	lsls	r2, r3, #31
 8014674:	d405      	bmi.n	8014682 <_puts_r+0x4e>
 8014676:	89a3      	ldrh	r3, [r4, #12]
 8014678:	059b      	lsls	r3, r3, #22
 801467a:	d402      	bmi.n	8014682 <_puts_r+0x4e>
 801467c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801467e:	f000 f9c9 	bl	8014a14 <__retarget_lock_release_recursive>
 8014682:	4628      	mov	r0, r5
 8014684:	bd70      	pop	{r4, r5, r6, pc}
 8014686:	2b00      	cmp	r3, #0
 8014688:	da04      	bge.n	8014694 <_puts_r+0x60>
 801468a:	69a2      	ldr	r2, [r4, #24]
 801468c:	429a      	cmp	r2, r3
 801468e:	dc17      	bgt.n	80146c0 <_puts_r+0x8c>
 8014690:	290a      	cmp	r1, #10
 8014692:	d015      	beq.n	80146c0 <_puts_r+0x8c>
 8014694:	6823      	ldr	r3, [r4, #0]
 8014696:	1c5a      	adds	r2, r3, #1
 8014698:	6022      	str	r2, [r4, #0]
 801469a:	7019      	strb	r1, [r3, #0]
 801469c:	68a3      	ldr	r3, [r4, #8]
 801469e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80146a2:	3b01      	subs	r3, #1
 80146a4:	60a3      	str	r3, [r4, #8]
 80146a6:	2900      	cmp	r1, #0
 80146a8:	d1ed      	bne.n	8014686 <_puts_r+0x52>
 80146aa:	2b00      	cmp	r3, #0
 80146ac:	da11      	bge.n	80146d2 <_puts_r+0x9e>
 80146ae:	4622      	mov	r2, r4
 80146b0:	210a      	movs	r1, #10
 80146b2:	4628      	mov	r0, r5
 80146b4:	f000 f881 	bl	80147ba <__swbuf_r>
 80146b8:	3001      	adds	r0, #1
 80146ba:	d0d7      	beq.n	801466c <_puts_r+0x38>
 80146bc:	250a      	movs	r5, #10
 80146be:	e7d7      	b.n	8014670 <_puts_r+0x3c>
 80146c0:	4622      	mov	r2, r4
 80146c2:	4628      	mov	r0, r5
 80146c4:	f000 f879 	bl	80147ba <__swbuf_r>
 80146c8:	3001      	adds	r0, #1
 80146ca:	d1e7      	bne.n	801469c <_puts_r+0x68>
 80146cc:	e7ce      	b.n	801466c <_puts_r+0x38>
 80146ce:	3e01      	subs	r6, #1
 80146d0:	e7e4      	b.n	801469c <_puts_r+0x68>
 80146d2:	6823      	ldr	r3, [r4, #0]
 80146d4:	1c5a      	adds	r2, r3, #1
 80146d6:	6022      	str	r2, [r4, #0]
 80146d8:	220a      	movs	r2, #10
 80146da:	701a      	strb	r2, [r3, #0]
 80146dc:	e7ee      	b.n	80146bc <_puts_r+0x88>
	...

080146e0 <puts>:
 80146e0:	4b02      	ldr	r3, [pc, #8]	@ (80146ec <puts+0xc>)
 80146e2:	4601      	mov	r1, r0
 80146e4:	6818      	ldr	r0, [r3, #0]
 80146e6:	f7ff bfa5 	b.w	8014634 <_puts_r>
 80146ea:	bf00      	nop
 80146ec:	20000134 	.word	0x20000134

080146f0 <siprintf>:
 80146f0:	b40e      	push	{r1, r2, r3}
 80146f2:	b510      	push	{r4, lr}
 80146f4:	b09d      	sub	sp, #116	@ 0x74
 80146f6:	ab1f      	add	r3, sp, #124	@ 0x7c
 80146f8:	9002      	str	r0, [sp, #8]
 80146fa:	9006      	str	r0, [sp, #24]
 80146fc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8014700:	480a      	ldr	r0, [pc, #40]	@ (801472c <siprintf+0x3c>)
 8014702:	9107      	str	r1, [sp, #28]
 8014704:	9104      	str	r1, [sp, #16]
 8014706:	490a      	ldr	r1, [pc, #40]	@ (8014730 <siprintf+0x40>)
 8014708:	f853 2b04 	ldr.w	r2, [r3], #4
 801470c:	9105      	str	r1, [sp, #20]
 801470e:	2400      	movs	r4, #0
 8014710:	a902      	add	r1, sp, #8
 8014712:	6800      	ldr	r0, [r0, #0]
 8014714:	9301      	str	r3, [sp, #4]
 8014716:	941b      	str	r4, [sp, #108]	@ 0x6c
 8014718:	f001 fcbc 	bl	8016094 <_svfiprintf_r>
 801471c:	9b02      	ldr	r3, [sp, #8]
 801471e:	701c      	strb	r4, [r3, #0]
 8014720:	b01d      	add	sp, #116	@ 0x74
 8014722:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014726:	b003      	add	sp, #12
 8014728:	4770      	bx	lr
 801472a:	bf00      	nop
 801472c:	20000134 	.word	0x20000134
 8014730:	ffff0208 	.word	0xffff0208

08014734 <__sread>:
 8014734:	b510      	push	{r4, lr}
 8014736:	460c      	mov	r4, r1
 8014738:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801473c:	f000 f91a 	bl	8014974 <_read_r>
 8014740:	2800      	cmp	r0, #0
 8014742:	bfab      	itete	ge
 8014744:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8014746:	89a3      	ldrhlt	r3, [r4, #12]
 8014748:	181b      	addge	r3, r3, r0
 801474a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801474e:	bfac      	ite	ge
 8014750:	6563      	strge	r3, [r4, #84]	@ 0x54
 8014752:	81a3      	strhlt	r3, [r4, #12]
 8014754:	bd10      	pop	{r4, pc}

08014756 <__swrite>:
 8014756:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801475a:	461f      	mov	r7, r3
 801475c:	898b      	ldrh	r3, [r1, #12]
 801475e:	05db      	lsls	r3, r3, #23
 8014760:	4605      	mov	r5, r0
 8014762:	460c      	mov	r4, r1
 8014764:	4616      	mov	r6, r2
 8014766:	d505      	bpl.n	8014774 <__swrite+0x1e>
 8014768:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801476c:	2302      	movs	r3, #2
 801476e:	2200      	movs	r2, #0
 8014770:	f000 f8ee 	bl	8014950 <_lseek_r>
 8014774:	89a3      	ldrh	r3, [r4, #12]
 8014776:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801477a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801477e:	81a3      	strh	r3, [r4, #12]
 8014780:	4632      	mov	r2, r6
 8014782:	463b      	mov	r3, r7
 8014784:	4628      	mov	r0, r5
 8014786:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801478a:	f000 b905 	b.w	8014998 <_write_r>

0801478e <__sseek>:
 801478e:	b510      	push	{r4, lr}
 8014790:	460c      	mov	r4, r1
 8014792:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014796:	f000 f8db 	bl	8014950 <_lseek_r>
 801479a:	1c43      	adds	r3, r0, #1
 801479c:	89a3      	ldrh	r3, [r4, #12]
 801479e:	bf15      	itete	ne
 80147a0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80147a2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80147a6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80147aa:	81a3      	strheq	r3, [r4, #12]
 80147ac:	bf18      	it	ne
 80147ae:	81a3      	strhne	r3, [r4, #12]
 80147b0:	bd10      	pop	{r4, pc}

080147b2 <__sclose>:
 80147b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80147b6:	f000 b8bb 	b.w	8014930 <_close_r>

080147ba <__swbuf_r>:
 80147ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147bc:	460e      	mov	r6, r1
 80147be:	4614      	mov	r4, r2
 80147c0:	4605      	mov	r5, r0
 80147c2:	b118      	cbz	r0, 80147cc <__swbuf_r+0x12>
 80147c4:	6a03      	ldr	r3, [r0, #32]
 80147c6:	b90b      	cbnz	r3, 80147cc <__swbuf_r+0x12>
 80147c8:	f7ff feec 	bl	80145a4 <__sinit>
 80147cc:	69a3      	ldr	r3, [r4, #24]
 80147ce:	60a3      	str	r3, [r4, #8]
 80147d0:	89a3      	ldrh	r3, [r4, #12]
 80147d2:	071a      	lsls	r2, r3, #28
 80147d4:	d501      	bpl.n	80147da <__swbuf_r+0x20>
 80147d6:	6923      	ldr	r3, [r4, #16]
 80147d8:	b943      	cbnz	r3, 80147ec <__swbuf_r+0x32>
 80147da:	4621      	mov	r1, r4
 80147dc:	4628      	mov	r0, r5
 80147de:	f000 f82b 	bl	8014838 <__swsetup_r>
 80147e2:	b118      	cbz	r0, 80147ec <__swbuf_r+0x32>
 80147e4:	f04f 37ff 	mov.w	r7, #4294967295
 80147e8:	4638      	mov	r0, r7
 80147ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80147ec:	6823      	ldr	r3, [r4, #0]
 80147ee:	6922      	ldr	r2, [r4, #16]
 80147f0:	1a98      	subs	r0, r3, r2
 80147f2:	6963      	ldr	r3, [r4, #20]
 80147f4:	b2f6      	uxtb	r6, r6
 80147f6:	4283      	cmp	r3, r0
 80147f8:	4637      	mov	r7, r6
 80147fa:	dc05      	bgt.n	8014808 <__swbuf_r+0x4e>
 80147fc:	4621      	mov	r1, r4
 80147fe:	4628      	mov	r0, r5
 8014800:	f001 ff0a 	bl	8016618 <_fflush_r>
 8014804:	2800      	cmp	r0, #0
 8014806:	d1ed      	bne.n	80147e4 <__swbuf_r+0x2a>
 8014808:	68a3      	ldr	r3, [r4, #8]
 801480a:	3b01      	subs	r3, #1
 801480c:	60a3      	str	r3, [r4, #8]
 801480e:	6823      	ldr	r3, [r4, #0]
 8014810:	1c5a      	adds	r2, r3, #1
 8014812:	6022      	str	r2, [r4, #0]
 8014814:	701e      	strb	r6, [r3, #0]
 8014816:	6962      	ldr	r2, [r4, #20]
 8014818:	1c43      	adds	r3, r0, #1
 801481a:	429a      	cmp	r2, r3
 801481c:	d004      	beq.n	8014828 <__swbuf_r+0x6e>
 801481e:	89a3      	ldrh	r3, [r4, #12]
 8014820:	07db      	lsls	r3, r3, #31
 8014822:	d5e1      	bpl.n	80147e8 <__swbuf_r+0x2e>
 8014824:	2e0a      	cmp	r6, #10
 8014826:	d1df      	bne.n	80147e8 <__swbuf_r+0x2e>
 8014828:	4621      	mov	r1, r4
 801482a:	4628      	mov	r0, r5
 801482c:	f001 fef4 	bl	8016618 <_fflush_r>
 8014830:	2800      	cmp	r0, #0
 8014832:	d0d9      	beq.n	80147e8 <__swbuf_r+0x2e>
 8014834:	e7d6      	b.n	80147e4 <__swbuf_r+0x2a>
	...

08014838 <__swsetup_r>:
 8014838:	b538      	push	{r3, r4, r5, lr}
 801483a:	4b29      	ldr	r3, [pc, #164]	@ (80148e0 <__swsetup_r+0xa8>)
 801483c:	4605      	mov	r5, r0
 801483e:	6818      	ldr	r0, [r3, #0]
 8014840:	460c      	mov	r4, r1
 8014842:	b118      	cbz	r0, 801484c <__swsetup_r+0x14>
 8014844:	6a03      	ldr	r3, [r0, #32]
 8014846:	b90b      	cbnz	r3, 801484c <__swsetup_r+0x14>
 8014848:	f7ff feac 	bl	80145a4 <__sinit>
 801484c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014850:	0719      	lsls	r1, r3, #28
 8014852:	d422      	bmi.n	801489a <__swsetup_r+0x62>
 8014854:	06da      	lsls	r2, r3, #27
 8014856:	d407      	bmi.n	8014868 <__swsetup_r+0x30>
 8014858:	2209      	movs	r2, #9
 801485a:	602a      	str	r2, [r5, #0]
 801485c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014860:	81a3      	strh	r3, [r4, #12]
 8014862:	f04f 30ff 	mov.w	r0, #4294967295
 8014866:	e033      	b.n	80148d0 <__swsetup_r+0x98>
 8014868:	0758      	lsls	r0, r3, #29
 801486a:	d512      	bpl.n	8014892 <__swsetup_r+0x5a>
 801486c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801486e:	b141      	cbz	r1, 8014882 <__swsetup_r+0x4a>
 8014870:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014874:	4299      	cmp	r1, r3
 8014876:	d002      	beq.n	801487e <__swsetup_r+0x46>
 8014878:	4628      	mov	r0, r5
 801487a:	f000 ff35 	bl	80156e8 <_free_r>
 801487e:	2300      	movs	r3, #0
 8014880:	6363      	str	r3, [r4, #52]	@ 0x34
 8014882:	89a3      	ldrh	r3, [r4, #12]
 8014884:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014888:	81a3      	strh	r3, [r4, #12]
 801488a:	2300      	movs	r3, #0
 801488c:	6063      	str	r3, [r4, #4]
 801488e:	6923      	ldr	r3, [r4, #16]
 8014890:	6023      	str	r3, [r4, #0]
 8014892:	89a3      	ldrh	r3, [r4, #12]
 8014894:	f043 0308 	orr.w	r3, r3, #8
 8014898:	81a3      	strh	r3, [r4, #12]
 801489a:	6923      	ldr	r3, [r4, #16]
 801489c:	b94b      	cbnz	r3, 80148b2 <__swsetup_r+0x7a>
 801489e:	89a3      	ldrh	r3, [r4, #12]
 80148a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80148a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80148a8:	d003      	beq.n	80148b2 <__swsetup_r+0x7a>
 80148aa:	4621      	mov	r1, r4
 80148ac:	4628      	mov	r0, r5
 80148ae:	f001 ff01 	bl	80166b4 <__smakebuf_r>
 80148b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80148b6:	f013 0201 	ands.w	r2, r3, #1
 80148ba:	d00a      	beq.n	80148d2 <__swsetup_r+0x9a>
 80148bc:	2200      	movs	r2, #0
 80148be:	60a2      	str	r2, [r4, #8]
 80148c0:	6962      	ldr	r2, [r4, #20]
 80148c2:	4252      	negs	r2, r2
 80148c4:	61a2      	str	r2, [r4, #24]
 80148c6:	6922      	ldr	r2, [r4, #16]
 80148c8:	b942      	cbnz	r2, 80148dc <__swsetup_r+0xa4>
 80148ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80148ce:	d1c5      	bne.n	801485c <__swsetup_r+0x24>
 80148d0:	bd38      	pop	{r3, r4, r5, pc}
 80148d2:	0799      	lsls	r1, r3, #30
 80148d4:	bf58      	it	pl
 80148d6:	6962      	ldrpl	r2, [r4, #20]
 80148d8:	60a2      	str	r2, [r4, #8]
 80148da:	e7f4      	b.n	80148c6 <__swsetup_r+0x8e>
 80148dc:	2000      	movs	r0, #0
 80148de:	e7f7      	b.n	80148d0 <__swsetup_r+0x98>
 80148e0:	20000134 	.word	0x20000134

080148e4 <memmove>:
 80148e4:	4288      	cmp	r0, r1
 80148e6:	b510      	push	{r4, lr}
 80148e8:	eb01 0402 	add.w	r4, r1, r2
 80148ec:	d902      	bls.n	80148f4 <memmove+0x10>
 80148ee:	4284      	cmp	r4, r0
 80148f0:	4623      	mov	r3, r4
 80148f2:	d807      	bhi.n	8014904 <memmove+0x20>
 80148f4:	1e43      	subs	r3, r0, #1
 80148f6:	42a1      	cmp	r1, r4
 80148f8:	d008      	beq.n	801490c <memmove+0x28>
 80148fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80148fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014902:	e7f8      	b.n	80148f6 <memmove+0x12>
 8014904:	4402      	add	r2, r0
 8014906:	4601      	mov	r1, r0
 8014908:	428a      	cmp	r2, r1
 801490a:	d100      	bne.n	801490e <memmove+0x2a>
 801490c:	bd10      	pop	{r4, pc}
 801490e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014912:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014916:	e7f7      	b.n	8014908 <memmove+0x24>

08014918 <memset>:
 8014918:	4402      	add	r2, r0
 801491a:	4603      	mov	r3, r0
 801491c:	4293      	cmp	r3, r2
 801491e:	d100      	bne.n	8014922 <memset+0xa>
 8014920:	4770      	bx	lr
 8014922:	f803 1b01 	strb.w	r1, [r3], #1
 8014926:	e7f9      	b.n	801491c <memset+0x4>

08014928 <_localeconv_r>:
 8014928:	4800      	ldr	r0, [pc, #0]	@ (801492c <_localeconv_r+0x4>)
 801492a:	4770      	bx	lr
 801492c:	20000274 	.word	0x20000274

08014930 <_close_r>:
 8014930:	b538      	push	{r3, r4, r5, lr}
 8014932:	4d06      	ldr	r5, [pc, #24]	@ (801494c <_close_r+0x1c>)
 8014934:	2300      	movs	r3, #0
 8014936:	4604      	mov	r4, r0
 8014938:	4608      	mov	r0, r1
 801493a:	602b      	str	r3, [r5, #0]
 801493c:	f7f6 f87c 	bl	800aa38 <_close>
 8014940:	1c43      	adds	r3, r0, #1
 8014942:	d102      	bne.n	801494a <_close_r+0x1a>
 8014944:	682b      	ldr	r3, [r5, #0]
 8014946:	b103      	cbz	r3, 801494a <_close_r+0x1a>
 8014948:	6023      	str	r3, [r4, #0]
 801494a:	bd38      	pop	{r3, r4, r5, pc}
 801494c:	20001448 	.word	0x20001448

08014950 <_lseek_r>:
 8014950:	b538      	push	{r3, r4, r5, lr}
 8014952:	4d07      	ldr	r5, [pc, #28]	@ (8014970 <_lseek_r+0x20>)
 8014954:	4604      	mov	r4, r0
 8014956:	4608      	mov	r0, r1
 8014958:	4611      	mov	r1, r2
 801495a:	2200      	movs	r2, #0
 801495c:	602a      	str	r2, [r5, #0]
 801495e:	461a      	mov	r2, r3
 8014960:	f7f6 f891 	bl	800aa86 <_lseek>
 8014964:	1c43      	adds	r3, r0, #1
 8014966:	d102      	bne.n	801496e <_lseek_r+0x1e>
 8014968:	682b      	ldr	r3, [r5, #0]
 801496a:	b103      	cbz	r3, 801496e <_lseek_r+0x1e>
 801496c:	6023      	str	r3, [r4, #0]
 801496e:	bd38      	pop	{r3, r4, r5, pc}
 8014970:	20001448 	.word	0x20001448

08014974 <_read_r>:
 8014974:	b538      	push	{r3, r4, r5, lr}
 8014976:	4d07      	ldr	r5, [pc, #28]	@ (8014994 <_read_r+0x20>)
 8014978:	4604      	mov	r4, r0
 801497a:	4608      	mov	r0, r1
 801497c:	4611      	mov	r1, r2
 801497e:	2200      	movs	r2, #0
 8014980:	602a      	str	r2, [r5, #0]
 8014982:	461a      	mov	r2, r3
 8014984:	f7f6 f83b 	bl	800a9fe <_read>
 8014988:	1c43      	adds	r3, r0, #1
 801498a:	d102      	bne.n	8014992 <_read_r+0x1e>
 801498c:	682b      	ldr	r3, [r5, #0]
 801498e:	b103      	cbz	r3, 8014992 <_read_r+0x1e>
 8014990:	6023      	str	r3, [r4, #0]
 8014992:	bd38      	pop	{r3, r4, r5, pc}
 8014994:	20001448 	.word	0x20001448

08014998 <_write_r>:
 8014998:	b538      	push	{r3, r4, r5, lr}
 801499a:	4d07      	ldr	r5, [pc, #28]	@ (80149b8 <_write_r+0x20>)
 801499c:	4604      	mov	r4, r0
 801499e:	4608      	mov	r0, r1
 80149a0:	4611      	mov	r1, r2
 80149a2:	2200      	movs	r2, #0
 80149a4:	602a      	str	r2, [r5, #0]
 80149a6:	461a      	mov	r2, r3
 80149a8:	f7f5 fbc8 	bl	800a13c <_write>
 80149ac:	1c43      	adds	r3, r0, #1
 80149ae:	d102      	bne.n	80149b6 <_write_r+0x1e>
 80149b0:	682b      	ldr	r3, [r5, #0]
 80149b2:	b103      	cbz	r3, 80149b6 <_write_r+0x1e>
 80149b4:	6023      	str	r3, [r4, #0]
 80149b6:	bd38      	pop	{r3, r4, r5, pc}
 80149b8:	20001448 	.word	0x20001448

080149bc <__errno>:
 80149bc:	4b01      	ldr	r3, [pc, #4]	@ (80149c4 <__errno+0x8>)
 80149be:	6818      	ldr	r0, [r3, #0]
 80149c0:	4770      	bx	lr
 80149c2:	bf00      	nop
 80149c4:	20000134 	.word	0x20000134

080149c8 <__libc_init_array>:
 80149c8:	b570      	push	{r4, r5, r6, lr}
 80149ca:	4d0d      	ldr	r5, [pc, #52]	@ (8014a00 <__libc_init_array+0x38>)
 80149cc:	4c0d      	ldr	r4, [pc, #52]	@ (8014a04 <__libc_init_array+0x3c>)
 80149ce:	1b64      	subs	r4, r4, r5
 80149d0:	10a4      	asrs	r4, r4, #2
 80149d2:	2600      	movs	r6, #0
 80149d4:	42a6      	cmp	r6, r4
 80149d6:	d109      	bne.n	80149ec <__libc_init_array+0x24>
 80149d8:	4d0b      	ldr	r5, [pc, #44]	@ (8014a08 <__libc_init_array+0x40>)
 80149da:	4c0c      	ldr	r4, [pc, #48]	@ (8014a0c <__libc_init_array+0x44>)
 80149dc:	f001 ffe0 	bl	80169a0 <_init>
 80149e0:	1b64      	subs	r4, r4, r5
 80149e2:	10a4      	asrs	r4, r4, #2
 80149e4:	2600      	movs	r6, #0
 80149e6:	42a6      	cmp	r6, r4
 80149e8:	d105      	bne.n	80149f6 <__libc_init_array+0x2e>
 80149ea:	bd70      	pop	{r4, r5, r6, pc}
 80149ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80149f0:	4798      	blx	r3
 80149f2:	3601      	adds	r6, #1
 80149f4:	e7ee      	b.n	80149d4 <__libc_init_array+0xc>
 80149f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80149fa:	4798      	blx	r3
 80149fc:	3601      	adds	r6, #1
 80149fe:	e7f2      	b.n	80149e6 <__libc_init_array+0x1e>
 8014a00:	08017ba4 	.word	0x08017ba4
 8014a04:	08017ba4 	.word	0x08017ba4
 8014a08:	08017ba4 	.word	0x08017ba4
 8014a0c:	08017ba8 	.word	0x08017ba8

08014a10 <__retarget_lock_init_recursive>:
 8014a10:	4770      	bx	lr

08014a12 <__retarget_lock_acquire_recursive>:
 8014a12:	4770      	bx	lr

08014a14 <__retarget_lock_release_recursive>:
 8014a14:	4770      	bx	lr

08014a16 <memcpy>:
 8014a16:	440a      	add	r2, r1
 8014a18:	4291      	cmp	r1, r2
 8014a1a:	f100 33ff 	add.w	r3, r0, #4294967295
 8014a1e:	d100      	bne.n	8014a22 <memcpy+0xc>
 8014a20:	4770      	bx	lr
 8014a22:	b510      	push	{r4, lr}
 8014a24:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014a28:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014a2c:	4291      	cmp	r1, r2
 8014a2e:	d1f9      	bne.n	8014a24 <memcpy+0xe>
 8014a30:	bd10      	pop	{r4, pc}

08014a32 <quorem>:
 8014a32:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a36:	6903      	ldr	r3, [r0, #16]
 8014a38:	690c      	ldr	r4, [r1, #16]
 8014a3a:	42a3      	cmp	r3, r4
 8014a3c:	4607      	mov	r7, r0
 8014a3e:	db7e      	blt.n	8014b3e <quorem+0x10c>
 8014a40:	3c01      	subs	r4, #1
 8014a42:	f101 0814 	add.w	r8, r1, #20
 8014a46:	00a3      	lsls	r3, r4, #2
 8014a48:	f100 0514 	add.w	r5, r0, #20
 8014a4c:	9300      	str	r3, [sp, #0]
 8014a4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014a52:	9301      	str	r3, [sp, #4]
 8014a54:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014a58:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014a5c:	3301      	adds	r3, #1
 8014a5e:	429a      	cmp	r2, r3
 8014a60:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014a64:	fbb2 f6f3 	udiv	r6, r2, r3
 8014a68:	d32e      	bcc.n	8014ac8 <quorem+0x96>
 8014a6a:	f04f 0a00 	mov.w	sl, #0
 8014a6e:	46c4      	mov	ip, r8
 8014a70:	46ae      	mov	lr, r5
 8014a72:	46d3      	mov	fp, sl
 8014a74:	f85c 3b04 	ldr.w	r3, [ip], #4
 8014a78:	b298      	uxth	r0, r3
 8014a7a:	fb06 a000 	mla	r0, r6, r0, sl
 8014a7e:	0c02      	lsrs	r2, r0, #16
 8014a80:	0c1b      	lsrs	r3, r3, #16
 8014a82:	fb06 2303 	mla	r3, r6, r3, r2
 8014a86:	f8de 2000 	ldr.w	r2, [lr]
 8014a8a:	b280      	uxth	r0, r0
 8014a8c:	b292      	uxth	r2, r2
 8014a8e:	1a12      	subs	r2, r2, r0
 8014a90:	445a      	add	r2, fp
 8014a92:	f8de 0000 	ldr.w	r0, [lr]
 8014a96:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014a9a:	b29b      	uxth	r3, r3
 8014a9c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8014aa0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8014aa4:	b292      	uxth	r2, r2
 8014aa6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8014aaa:	45e1      	cmp	r9, ip
 8014aac:	f84e 2b04 	str.w	r2, [lr], #4
 8014ab0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8014ab4:	d2de      	bcs.n	8014a74 <quorem+0x42>
 8014ab6:	9b00      	ldr	r3, [sp, #0]
 8014ab8:	58eb      	ldr	r3, [r5, r3]
 8014aba:	b92b      	cbnz	r3, 8014ac8 <quorem+0x96>
 8014abc:	9b01      	ldr	r3, [sp, #4]
 8014abe:	3b04      	subs	r3, #4
 8014ac0:	429d      	cmp	r5, r3
 8014ac2:	461a      	mov	r2, r3
 8014ac4:	d32f      	bcc.n	8014b26 <quorem+0xf4>
 8014ac6:	613c      	str	r4, [r7, #16]
 8014ac8:	4638      	mov	r0, r7
 8014aca:	f001 f97f 	bl	8015dcc <__mcmp>
 8014ace:	2800      	cmp	r0, #0
 8014ad0:	db25      	blt.n	8014b1e <quorem+0xec>
 8014ad2:	4629      	mov	r1, r5
 8014ad4:	2000      	movs	r0, #0
 8014ad6:	f858 2b04 	ldr.w	r2, [r8], #4
 8014ada:	f8d1 c000 	ldr.w	ip, [r1]
 8014ade:	fa1f fe82 	uxth.w	lr, r2
 8014ae2:	fa1f f38c 	uxth.w	r3, ip
 8014ae6:	eba3 030e 	sub.w	r3, r3, lr
 8014aea:	4403      	add	r3, r0
 8014aec:	0c12      	lsrs	r2, r2, #16
 8014aee:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8014af2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8014af6:	b29b      	uxth	r3, r3
 8014af8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014afc:	45c1      	cmp	r9, r8
 8014afe:	f841 3b04 	str.w	r3, [r1], #4
 8014b02:	ea4f 4022 	mov.w	r0, r2, asr #16
 8014b06:	d2e6      	bcs.n	8014ad6 <quorem+0xa4>
 8014b08:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014b0c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014b10:	b922      	cbnz	r2, 8014b1c <quorem+0xea>
 8014b12:	3b04      	subs	r3, #4
 8014b14:	429d      	cmp	r5, r3
 8014b16:	461a      	mov	r2, r3
 8014b18:	d30b      	bcc.n	8014b32 <quorem+0x100>
 8014b1a:	613c      	str	r4, [r7, #16]
 8014b1c:	3601      	adds	r6, #1
 8014b1e:	4630      	mov	r0, r6
 8014b20:	b003      	add	sp, #12
 8014b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b26:	6812      	ldr	r2, [r2, #0]
 8014b28:	3b04      	subs	r3, #4
 8014b2a:	2a00      	cmp	r2, #0
 8014b2c:	d1cb      	bne.n	8014ac6 <quorem+0x94>
 8014b2e:	3c01      	subs	r4, #1
 8014b30:	e7c6      	b.n	8014ac0 <quorem+0x8e>
 8014b32:	6812      	ldr	r2, [r2, #0]
 8014b34:	3b04      	subs	r3, #4
 8014b36:	2a00      	cmp	r2, #0
 8014b38:	d1ef      	bne.n	8014b1a <quorem+0xe8>
 8014b3a:	3c01      	subs	r4, #1
 8014b3c:	e7ea      	b.n	8014b14 <quorem+0xe2>
 8014b3e:	2000      	movs	r0, #0
 8014b40:	e7ee      	b.n	8014b20 <quorem+0xee>
 8014b42:	0000      	movs	r0, r0
 8014b44:	0000      	movs	r0, r0
	...

08014b48 <_dtoa_r>:
 8014b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b4c:	69c7      	ldr	r7, [r0, #28]
 8014b4e:	b097      	sub	sp, #92	@ 0x5c
 8014b50:	ed8d 0b04 	vstr	d0, [sp, #16]
 8014b54:	ec55 4b10 	vmov	r4, r5, d0
 8014b58:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8014b5a:	9107      	str	r1, [sp, #28]
 8014b5c:	4681      	mov	r9, r0
 8014b5e:	920c      	str	r2, [sp, #48]	@ 0x30
 8014b60:	9311      	str	r3, [sp, #68]	@ 0x44
 8014b62:	b97f      	cbnz	r7, 8014b84 <_dtoa_r+0x3c>
 8014b64:	2010      	movs	r0, #16
 8014b66:	f000 fe09 	bl	801577c <malloc>
 8014b6a:	4602      	mov	r2, r0
 8014b6c:	f8c9 001c 	str.w	r0, [r9, #28]
 8014b70:	b920      	cbnz	r0, 8014b7c <_dtoa_r+0x34>
 8014b72:	4ba9      	ldr	r3, [pc, #676]	@ (8014e18 <_dtoa_r+0x2d0>)
 8014b74:	21ef      	movs	r1, #239	@ 0xef
 8014b76:	48a9      	ldr	r0, [pc, #676]	@ (8014e1c <_dtoa_r+0x2d4>)
 8014b78:	f001 fe0a 	bl	8016790 <__assert_func>
 8014b7c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8014b80:	6007      	str	r7, [r0, #0]
 8014b82:	60c7      	str	r7, [r0, #12]
 8014b84:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8014b88:	6819      	ldr	r1, [r3, #0]
 8014b8a:	b159      	cbz	r1, 8014ba4 <_dtoa_r+0x5c>
 8014b8c:	685a      	ldr	r2, [r3, #4]
 8014b8e:	604a      	str	r2, [r1, #4]
 8014b90:	2301      	movs	r3, #1
 8014b92:	4093      	lsls	r3, r2
 8014b94:	608b      	str	r3, [r1, #8]
 8014b96:	4648      	mov	r0, r9
 8014b98:	f000 fee6 	bl	8015968 <_Bfree>
 8014b9c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8014ba0:	2200      	movs	r2, #0
 8014ba2:	601a      	str	r2, [r3, #0]
 8014ba4:	1e2b      	subs	r3, r5, #0
 8014ba6:	bfb9      	ittee	lt
 8014ba8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8014bac:	9305      	strlt	r3, [sp, #20]
 8014bae:	2300      	movge	r3, #0
 8014bb0:	6033      	strge	r3, [r6, #0]
 8014bb2:	9f05      	ldr	r7, [sp, #20]
 8014bb4:	4b9a      	ldr	r3, [pc, #616]	@ (8014e20 <_dtoa_r+0x2d8>)
 8014bb6:	bfbc      	itt	lt
 8014bb8:	2201      	movlt	r2, #1
 8014bba:	6032      	strlt	r2, [r6, #0]
 8014bbc:	43bb      	bics	r3, r7
 8014bbe:	d112      	bne.n	8014be6 <_dtoa_r+0x9e>
 8014bc0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8014bc2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8014bc6:	6013      	str	r3, [r2, #0]
 8014bc8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014bcc:	4323      	orrs	r3, r4
 8014bce:	f000 855a 	beq.w	8015686 <_dtoa_r+0xb3e>
 8014bd2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8014bd4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8014e34 <_dtoa_r+0x2ec>
 8014bd8:	2b00      	cmp	r3, #0
 8014bda:	f000 855c 	beq.w	8015696 <_dtoa_r+0xb4e>
 8014bde:	f10a 0303 	add.w	r3, sl, #3
 8014be2:	f000 bd56 	b.w	8015692 <_dtoa_r+0xb4a>
 8014be6:	ed9d 7b04 	vldr	d7, [sp, #16]
 8014bea:	2200      	movs	r2, #0
 8014bec:	ec51 0b17 	vmov	r0, r1, d7
 8014bf0:	2300      	movs	r3, #0
 8014bf2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8014bf6:	f7f3 ff6f 	bl	8008ad8 <__aeabi_dcmpeq>
 8014bfa:	4680      	mov	r8, r0
 8014bfc:	b158      	cbz	r0, 8014c16 <_dtoa_r+0xce>
 8014bfe:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8014c00:	2301      	movs	r3, #1
 8014c02:	6013      	str	r3, [r2, #0]
 8014c04:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8014c06:	b113      	cbz	r3, 8014c0e <_dtoa_r+0xc6>
 8014c08:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8014c0a:	4b86      	ldr	r3, [pc, #536]	@ (8014e24 <_dtoa_r+0x2dc>)
 8014c0c:	6013      	str	r3, [r2, #0]
 8014c0e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8014e38 <_dtoa_r+0x2f0>
 8014c12:	f000 bd40 	b.w	8015696 <_dtoa_r+0xb4e>
 8014c16:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8014c1a:	aa14      	add	r2, sp, #80	@ 0x50
 8014c1c:	a915      	add	r1, sp, #84	@ 0x54
 8014c1e:	4648      	mov	r0, r9
 8014c20:	f001 f984 	bl	8015f2c <__d2b>
 8014c24:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8014c28:	9002      	str	r0, [sp, #8]
 8014c2a:	2e00      	cmp	r6, #0
 8014c2c:	d078      	beq.n	8014d20 <_dtoa_r+0x1d8>
 8014c2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014c30:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8014c34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014c38:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8014c3c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8014c40:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8014c44:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8014c48:	4619      	mov	r1, r3
 8014c4a:	2200      	movs	r2, #0
 8014c4c:	4b76      	ldr	r3, [pc, #472]	@ (8014e28 <_dtoa_r+0x2e0>)
 8014c4e:	f7f3 fb23 	bl	8008298 <__aeabi_dsub>
 8014c52:	a36b      	add	r3, pc, #428	@ (adr r3, 8014e00 <_dtoa_r+0x2b8>)
 8014c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c58:	f7f3 fcd6 	bl	8008608 <__aeabi_dmul>
 8014c5c:	a36a      	add	r3, pc, #424	@ (adr r3, 8014e08 <_dtoa_r+0x2c0>)
 8014c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c62:	f7f3 fb1b 	bl	800829c <__adddf3>
 8014c66:	4604      	mov	r4, r0
 8014c68:	4630      	mov	r0, r6
 8014c6a:	460d      	mov	r5, r1
 8014c6c:	f7f3 fc62 	bl	8008534 <__aeabi_i2d>
 8014c70:	a367      	add	r3, pc, #412	@ (adr r3, 8014e10 <_dtoa_r+0x2c8>)
 8014c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c76:	f7f3 fcc7 	bl	8008608 <__aeabi_dmul>
 8014c7a:	4602      	mov	r2, r0
 8014c7c:	460b      	mov	r3, r1
 8014c7e:	4620      	mov	r0, r4
 8014c80:	4629      	mov	r1, r5
 8014c82:	f7f3 fb0b 	bl	800829c <__adddf3>
 8014c86:	4604      	mov	r4, r0
 8014c88:	460d      	mov	r5, r1
 8014c8a:	f7f3 ff6d 	bl	8008b68 <__aeabi_d2iz>
 8014c8e:	2200      	movs	r2, #0
 8014c90:	4607      	mov	r7, r0
 8014c92:	2300      	movs	r3, #0
 8014c94:	4620      	mov	r0, r4
 8014c96:	4629      	mov	r1, r5
 8014c98:	f7f3 ff28 	bl	8008aec <__aeabi_dcmplt>
 8014c9c:	b140      	cbz	r0, 8014cb0 <_dtoa_r+0x168>
 8014c9e:	4638      	mov	r0, r7
 8014ca0:	f7f3 fc48 	bl	8008534 <__aeabi_i2d>
 8014ca4:	4622      	mov	r2, r4
 8014ca6:	462b      	mov	r3, r5
 8014ca8:	f7f3 ff16 	bl	8008ad8 <__aeabi_dcmpeq>
 8014cac:	b900      	cbnz	r0, 8014cb0 <_dtoa_r+0x168>
 8014cae:	3f01      	subs	r7, #1
 8014cb0:	2f16      	cmp	r7, #22
 8014cb2:	d852      	bhi.n	8014d5a <_dtoa_r+0x212>
 8014cb4:	4b5d      	ldr	r3, [pc, #372]	@ (8014e2c <_dtoa_r+0x2e4>)
 8014cb6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8014cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cbe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8014cc2:	f7f3 ff13 	bl	8008aec <__aeabi_dcmplt>
 8014cc6:	2800      	cmp	r0, #0
 8014cc8:	d049      	beq.n	8014d5e <_dtoa_r+0x216>
 8014cca:	3f01      	subs	r7, #1
 8014ccc:	2300      	movs	r3, #0
 8014cce:	9310      	str	r3, [sp, #64]	@ 0x40
 8014cd0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8014cd2:	1b9b      	subs	r3, r3, r6
 8014cd4:	1e5a      	subs	r2, r3, #1
 8014cd6:	bf45      	ittet	mi
 8014cd8:	f1c3 0301 	rsbmi	r3, r3, #1
 8014cdc:	9300      	strmi	r3, [sp, #0]
 8014cde:	2300      	movpl	r3, #0
 8014ce0:	2300      	movmi	r3, #0
 8014ce2:	9206      	str	r2, [sp, #24]
 8014ce4:	bf54      	ite	pl
 8014ce6:	9300      	strpl	r3, [sp, #0]
 8014ce8:	9306      	strmi	r3, [sp, #24]
 8014cea:	2f00      	cmp	r7, #0
 8014cec:	db39      	blt.n	8014d62 <_dtoa_r+0x21a>
 8014cee:	9b06      	ldr	r3, [sp, #24]
 8014cf0:	970d      	str	r7, [sp, #52]	@ 0x34
 8014cf2:	443b      	add	r3, r7
 8014cf4:	9306      	str	r3, [sp, #24]
 8014cf6:	2300      	movs	r3, #0
 8014cf8:	9308      	str	r3, [sp, #32]
 8014cfa:	9b07      	ldr	r3, [sp, #28]
 8014cfc:	2b09      	cmp	r3, #9
 8014cfe:	d863      	bhi.n	8014dc8 <_dtoa_r+0x280>
 8014d00:	2b05      	cmp	r3, #5
 8014d02:	bfc4      	itt	gt
 8014d04:	3b04      	subgt	r3, #4
 8014d06:	9307      	strgt	r3, [sp, #28]
 8014d08:	9b07      	ldr	r3, [sp, #28]
 8014d0a:	f1a3 0302 	sub.w	r3, r3, #2
 8014d0e:	bfcc      	ite	gt
 8014d10:	2400      	movgt	r4, #0
 8014d12:	2401      	movle	r4, #1
 8014d14:	2b03      	cmp	r3, #3
 8014d16:	d863      	bhi.n	8014de0 <_dtoa_r+0x298>
 8014d18:	e8df f003 	tbb	[pc, r3]
 8014d1c:	2b375452 	.word	0x2b375452
 8014d20:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8014d24:	441e      	add	r6, r3
 8014d26:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8014d2a:	2b20      	cmp	r3, #32
 8014d2c:	bfc1      	itttt	gt
 8014d2e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8014d32:	409f      	lslgt	r7, r3
 8014d34:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8014d38:	fa24 f303 	lsrgt.w	r3, r4, r3
 8014d3c:	bfd6      	itet	le
 8014d3e:	f1c3 0320 	rsble	r3, r3, #32
 8014d42:	ea47 0003 	orrgt.w	r0, r7, r3
 8014d46:	fa04 f003 	lslle.w	r0, r4, r3
 8014d4a:	f7f3 fbe3 	bl	8008514 <__aeabi_ui2d>
 8014d4e:	2201      	movs	r2, #1
 8014d50:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8014d54:	3e01      	subs	r6, #1
 8014d56:	9212      	str	r2, [sp, #72]	@ 0x48
 8014d58:	e776      	b.n	8014c48 <_dtoa_r+0x100>
 8014d5a:	2301      	movs	r3, #1
 8014d5c:	e7b7      	b.n	8014cce <_dtoa_r+0x186>
 8014d5e:	9010      	str	r0, [sp, #64]	@ 0x40
 8014d60:	e7b6      	b.n	8014cd0 <_dtoa_r+0x188>
 8014d62:	9b00      	ldr	r3, [sp, #0]
 8014d64:	1bdb      	subs	r3, r3, r7
 8014d66:	9300      	str	r3, [sp, #0]
 8014d68:	427b      	negs	r3, r7
 8014d6a:	9308      	str	r3, [sp, #32]
 8014d6c:	2300      	movs	r3, #0
 8014d6e:	930d      	str	r3, [sp, #52]	@ 0x34
 8014d70:	e7c3      	b.n	8014cfa <_dtoa_r+0x1b2>
 8014d72:	2301      	movs	r3, #1
 8014d74:	9309      	str	r3, [sp, #36]	@ 0x24
 8014d76:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014d78:	eb07 0b03 	add.w	fp, r7, r3
 8014d7c:	f10b 0301 	add.w	r3, fp, #1
 8014d80:	2b01      	cmp	r3, #1
 8014d82:	9303      	str	r3, [sp, #12]
 8014d84:	bfb8      	it	lt
 8014d86:	2301      	movlt	r3, #1
 8014d88:	e006      	b.n	8014d98 <_dtoa_r+0x250>
 8014d8a:	2301      	movs	r3, #1
 8014d8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8014d8e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	dd28      	ble.n	8014de6 <_dtoa_r+0x29e>
 8014d94:	469b      	mov	fp, r3
 8014d96:	9303      	str	r3, [sp, #12]
 8014d98:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8014d9c:	2100      	movs	r1, #0
 8014d9e:	2204      	movs	r2, #4
 8014da0:	f102 0514 	add.w	r5, r2, #20
 8014da4:	429d      	cmp	r5, r3
 8014da6:	d926      	bls.n	8014df6 <_dtoa_r+0x2ae>
 8014da8:	6041      	str	r1, [r0, #4]
 8014daa:	4648      	mov	r0, r9
 8014dac:	f000 fd9c 	bl	80158e8 <_Balloc>
 8014db0:	4682      	mov	sl, r0
 8014db2:	2800      	cmp	r0, #0
 8014db4:	d142      	bne.n	8014e3c <_dtoa_r+0x2f4>
 8014db6:	4b1e      	ldr	r3, [pc, #120]	@ (8014e30 <_dtoa_r+0x2e8>)
 8014db8:	4602      	mov	r2, r0
 8014dba:	f240 11af 	movw	r1, #431	@ 0x1af
 8014dbe:	e6da      	b.n	8014b76 <_dtoa_r+0x2e>
 8014dc0:	2300      	movs	r3, #0
 8014dc2:	e7e3      	b.n	8014d8c <_dtoa_r+0x244>
 8014dc4:	2300      	movs	r3, #0
 8014dc6:	e7d5      	b.n	8014d74 <_dtoa_r+0x22c>
 8014dc8:	2401      	movs	r4, #1
 8014dca:	2300      	movs	r3, #0
 8014dcc:	9307      	str	r3, [sp, #28]
 8014dce:	9409      	str	r4, [sp, #36]	@ 0x24
 8014dd0:	f04f 3bff 	mov.w	fp, #4294967295
 8014dd4:	2200      	movs	r2, #0
 8014dd6:	f8cd b00c 	str.w	fp, [sp, #12]
 8014dda:	2312      	movs	r3, #18
 8014ddc:	920c      	str	r2, [sp, #48]	@ 0x30
 8014dde:	e7db      	b.n	8014d98 <_dtoa_r+0x250>
 8014de0:	2301      	movs	r3, #1
 8014de2:	9309      	str	r3, [sp, #36]	@ 0x24
 8014de4:	e7f4      	b.n	8014dd0 <_dtoa_r+0x288>
 8014de6:	f04f 0b01 	mov.w	fp, #1
 8014dea:	f8cd b00c 	str.w	fp, [sp, #12]
 8014dee:	465b      	mov	r3, fp
 8014df0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8014df4:	e7d0      	b.n	8014d98 <_dtoa_r+0x250>
 8014df6:	3101      	adds	r1, #1
 8014df8:	0052      	lsls	r2, r2, #1
 8014dfa:	e7d1      	b.n	8014da0 <_dtoa_r+0x258>
 8014dfc:	f3af 8000 	nop.w
 8014e00:	636f4361 	.word	0x636f4361
 8014e04:	3fd287a7 	.word	0x3fd287a7
 8014e08:	8b60c8b3 	.word	0x8b60c8b3
 8014e0c:	3fc68a28 	.word	0x3fc68a28
 8014e10:	509f79fb 	.word	0x509f79fb
 8014e14:	3fd34413 	.word	0x3fd34413
 8014e18:	08017869 	.word	0x08017869
 8014e1c:	08017880 	.word	0x08017880
 8014e20:	7ff00000 	.word	0x7ff00000
 8014e24:	08017839 	.word	0x08017839
 8014e28:	3ff80000 	.word	0x3ff80000
 8014e2c:	080179d0 	.word	0x080179d0
 8014e30:	080178d8 	.word	0x080178d8
 8014e34:	08017865 	.word	0x08017865
 8014e38:	08017838 	.word	0x08017838
 8014e3c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8014e40:	6018      	str	r0, [r3, #0]
 8014e42:	9b03      	ldr	r3, [sp, #12]
 8014e44:	2b0e      	cmp	r3, #14
 8014e46:	f200 80a1 	bhi.w	8014f8c <_dtoa_r+0x444>
 8014e4a:	2c00      	cmp	r4, #0
 8014e4c:	f000 809e 	beq.w	8014f8c <_dtoa_r+0x444>
 8014e50:	2f00      	cmp	r7, #0
 8014e52:	dd33      	ble.n	8014ebc <_dtoa_r+0x374>
 8014e54:	4b9c      	ldr	r3, [pc, #624]	@ (80150c8 <_dtoa_r+0x580>)
 8014e56:	f007 020f 	and.w	r2, r7, #15
 8014e5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014e5e:	ed93 7b00 	vldr	d7, [r3]
 8014e62:	05f8      	lsls	r0, r7, #23
 8014e64:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8014e68:	ea4f 1427 	mov.w	r4, r7, asr #4
 8014e6c:	d516      	bpl.n	8014e9c <_dtoa_r+0x354>
 8014e6e:	4b97      	ldr	r3, [pc, #604]	@ (80150cc <_dtoa_r+0x584>)
 8014e70:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8014e74:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014e78:	f7f3 fcf0 	bl	800885c <__aeabi_ddiv>
 8014e7c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014e80:	f004 040f 	and.w	r4, r4, #15
 8014e84:	2603      	movs	r6, #3
 8014e86:	4d91      	ldr	r5, [pc, #580]	@ (80150cc <_dtoa_r+0x584>)
 8014e88:	b954      	cbnz	r4, 8014ea0 <_dtoa_r+0x358>
 8014e8a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8014e8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014e92:	f7f3 fce3 	bl	800885c <__aeabi_ddiv>
 8014e96:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014e9a:	e028      	b.n	8014eee <_dtoa_r+0x3a6>
 8014e9c:	2602      	movs	r6, #2
 8014e9e:	e7f2      	b.n	8014e86 <_dtoa_r+0x33e>
 8014ea0:	07e1      	lsls	r1, r4, #31
 8014ea2:	d508      	bpl.n	8014eb6 <_dtoa_r+0x36e>
 8014ea4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8014ea8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014eac:	f7f3 fbac 	bl	8008608 <__aeabi_dmul>
 8014eb0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8014eb4:	3601      	adds	r6, #1
 8014eb6:	1064      	asrs	r4, r4, #1
 8014eb8:	3508      	adds	r5, #8
 8014eba:	e7e5      	b.n	8014e88 <_dtoa_r+0x340>
 8014ebc:	f000 80af 	beq.w	801501e <_dtoa_r+0x4d6>
 8014ec0:	427c      	negs	r4, r7
 8014ec2:	4b81      	ldr	r3, [pc, #516]	@ (80150c8 <_dtoa_r+0x580>)
 8014ec4:	4d81      	ldr	r5, [pc, #516]	@ (80150cc <_dtoa_r+0x584>)
 8014ec6:	f004 020f 	and.w	r2, r4, #15
 8014eca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ed2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8014ed6:	f7f3 fb97 	bl	8008608 <__aeabi_dmul>
 8014eda:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014ede:	1124      	asrs	r4, r4, #4
 8014ee0:	2300      	movs	r3, #0
 8014ee2:	2602      	movs	r6, #2
 8014ee4:	2c00      	cmp	r4, #0
 8014ee6:	f040 808f 	bne.w	8015008 <_dtoa_r+0x4c0>
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	d1d3      	bne.n	8014e96 <_dtoa_r+0x34e>
 8014eee:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014ef0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8014ef4:	2b00      	cmp	r3, #0
 8014ef6:	f000 8094 	beq.w	8015022 <_dtoa_r+0x4da>
 8014efa:	4b75      	ldr	r3, [pc, #468]	@ (80150d0 <_dtoa_r+0x588>)
 8014efc:	2200      	movs	r2, #0
 8014efe:	4620      	mov	r0, r4
 8014f00:	4629      	mov	r1, r5
 8014f02:	f7f3 fdf3 	bl	8008aec <__aeabi_dcmplt>
 8014f06:	2800      	cmp	r0, #0
 8014f08:	f000 808b 	beq.w	8015022 <_dtoa_r+0x4da>
 8014f0c:	9b03      	ldr	r3, [sp, #12]
 8014f0e:	2b00      	cmp	r3, #0
 8014f10:	f000 8087 	beq.w	8015022 <_dtoa_r+0x4da>
 8014f14:	f1bb 0f00 	cmp.w	fp, #0
 8014f18:	dd34      	ble.n	8014f84 <_dtoa_r+0x43c>
 8014f1a:	4620      	mov	r0, r4
 8014f1c:	4b6d      	ldr	r3, [pc, #436]	@ (80150d4 <_dtoa_r+0x58c>)
 8014f1e:	2200      	movs	r2, #0
 8014f20:	4629      	mov	r1, r5
 8014f22:	f7f3 fb71 	bl	8008608 <__aeabi_dmul>
 8014f26:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014f2a:	f107 38ff 	add.w	r8, r7, #4294967295
 8014f2e:	3601      	adds	r6, #1
 8014f30:	465c      	mov	r4, fp
 8014f32:	4630      	mov	r0, r6
 8014f34:	f7f3 fafe 	bl	8008534 <__aeabi_i2d>
 8014f38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014f3c:	f7f3 fb64 	bl	8008608 <__aeabi_dmul>
 8014f40:	4b65      	ldr	r3, [pc, #404]	@ (80150d8 <_dtoa_r+0x590>)
 8014f42:	2200      	movs	r2, #0
 8014f44:	f7f3 f9aa 	bl	800829c <__adddf3>
 8014f48:	4605      	mov	r5, r0
 8014f4a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8014f4e:	2c00      	cmp	r4, #0
 8014f50:	d16a      	bne.n	8015028 <_dtoa_r+0x4e0>
 8014f52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014f56:	4b61      	ldr	r3, [pc, #388]	@ (80150dc <_dtoa_r+0x594>)
 8014f58:	2200      	movs	r2, #0
 8014f5a:	f7f3 f99d 	bl	8008298 <__aeabi_dsub>
 8014f5e:	4602      	mov	r2, r0
 8014f60:	460b      	mov	r3, r1
 8014f62:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8014f66:	462a      	mov	r2, r5
 8014f68:	4633      	mov	r3, r6
 8014f6a:	f7f3 fddd 	bl	8008b28 <__aeabi_dcmpgt>
 8014f6e:	2800      	cmp	r0, #0
 8014f70:	f040 8298 	bne.w	80154a4 <_dtoa_r+0x95c>
 8014f74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014f78:	462a      	mov	r2, r5
 8014f7a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8014f7e:	f7f3 fdb5 	bl	8008aec <__aeabi_dcmplt>
 8014f82:	bb38      	cbnz	r0, 8014fd4 <_dtoa_r+0x48c>
 8014f84:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8014f88:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8014f8c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8014f8e:	2b00      	cmp	r3, #0
 8014f90:	f2c0 8157 	blt.w	8015242 <_dtoa_r+0x6fa>
 8014f94:	2f0e      	cmp	r7, #14
 8014f96:	f300 8154 	bgt.w	8015242 <_dtoa_r+0x6fa>
 8014f9a:	4b4b      	ldr	r3, [pc, #300]	@ (80150c8 <_dtoa_r+0x580>)
 8014f9c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8014fa0:	ed93 7b00 	vldr	d7, [r3]
 8014fa4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014fa6:	2b00      	cmp	r3, #0
 8014fa8:	ed8d 7b00 	vstr	d7, [sp]
 8014fac:	f280 80e5 	bge.w	801517a <_dtoa_r+0x632>
 8014fb0:	9b03      	ldr	r3, [sp, #12]
 8014fb2:	2b00      	cmp	r3, #0
 8014fb4:	f300 80e1 	bgt.w	801517a <_dtoa_r+0x632>
 8014fb8:	d10c      	bne.n	8014fd4 <_dtoa_r+0x48c>
 8014fba:	4b48      	ldr	r3, [pc, #288]	@ (80150dc <_dtoa_r+0x594>)
 8014fbc:	2200      	movs	r2, #0
 8014fbe:	ec51 0b17 	vmov	r0, r1, d7
 8014fc2:	f7f3 fb21 	bl	8008608 <__aeabi_dmul>
 8014fc6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014fca:	f7f3 fda3 	bl	8008b14 <__aeabi_dcmpge>
 8014fce:	2800      	cmp	r0, #0
 8014fd0:	f000 8266 	beq.w	80154a0 <_dtoa_r+0x958>
 8014fd4:	2400      	movs	r4, #0
 8014fd6:	4625      	mov	r5, r4
 8014fd8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014fda:	4656      	mov	r6, sl
 8014fdc:	ea6f 0803 	mvn.w	r8, r3
 8014fe0:	2700      	movs	r7, #0
 8014fe2:	4621      	mov	r1, r4
 8014fe4:	4648      	mov	r0, r9
 8014fe6:	f000 fcbf 	bl	8015968 <_Bfree>
 8014fea:	2d00      	cmp	r5, #0
 8014fec:	f000 80bd 	beq.w	801516a <_dtoa_r+0x622>
 8014ff0:	b12f      	cbz	r7, 8014ffe <_dtoa_r+0x4b6>
 8014ff2:	42af      	cmp	r7, r5
 8014ff4:	d003      	beq.n	8014ffe <_dtoa_r+0x4b6>
 8014ff6:	4639      	mov	r1, r7
 8014ff8:	4648      	mov	r0, r9
 8014ffa:	f000 fcb5 	bl	8015968 <_Bfree>
 8014ffe:	4629      	mov	r1, r5
 8015000:	4648      	mov	r0, r9
 8015002:	f000 fcb1 	bl	8015968 <_Bfree>
 8015006:	e0b0      	b.n	801516a <_dtoa_r+0x622>
 8015008:	07e2      	lsls	r2, r4, #31
 801500a:	d505      	bpl.n	8015018 <_dtoa_r+0x4d0>
 801500c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015010:	f7f3 fafa 	bl	8008608 <__aeabi_dmul>
 8015014:	3601      	adds	r6, #1
 8015016:	2301      	movs	r3, #1
 8015018:	1064      	asrs	r4, r4, #1
 801501a:	3508      	adds	r5, #8
 801501c:	e762      	b.n	8014ee4 <_dtoa_r+0x39c>
 801501e:	2602      	movs	r6, #2
 8015020:	e765      	b.n	8014eee <_dtoa_r+0x3a6>
 8015022:	9c03      	ldr	r4, [sp, #12]
 8015024:	46b8      	mov	r8, r7
 8015026:	e784      	b.n	8014f32 <_dtoa_r+0x3ea>
 8015028:	4b27      	ldr	r3, [pc, #156]	@ (80150c8 <_dtoa_r+0x580>)
 801502a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801502c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8015030:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8015034:	4454      	add	r4, sl
 8015036:	2900      	cmp	r1, #0
 8015038:	d054      	beq.n	80150e4 <_dtoa_r+0x59c>
 801503a:	4929      	ldr	r1, [pc, #164]	@ (80150e0 <_dtoa_r+0x598>)
 801503c:	2000      	movs	r0, #0
 801503e:	f7f3 fc0d 	bl	800885c <__aeabi_ddiv>
 8015042:	4633      	mov	r3, r6
 8015044:	462a      	mov	r2, r5
 8015046:	f7f3 f927 	bl	8008298 <__aeabi_dsub>
 801504a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801504e:	4656      	mov	r6, sl
 8015050:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015054:	f7f3 fd88 	bl	8008b68 <__aeabi_d2iz>
 8015058:	4605      	mov	r5, r0
 801505a:	f7f3 fa6b 	bl	8008534 <__aeabi_i2d>
 801505e:	4602      	mov	r2, r0
 8015060:	460b      	mov	r3, r1
 8015062:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015066:	f7f3 f917 	bl	8008298 <__aeabi_dsub>
 801506a:	3530      	adds	r5, #48	@ 0x30
 801506c:	4602      	mov	r2, r0
 801506e:	460b      	mov	r3, r1
 8015070:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8015074:	f806 5b01 	strb.w	r5, [r6], #1
 8015078:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801507c:	f7f3 fd36 	bl	8008aec <__aeabi_dcmplt>
 8015080:	2800      	cmp	r0, #0
 8015082:	d172      	bne.n	801516a <_dtoa_r+0x622>
 8015084:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015088:	4911      	ldr	r1, [pc, #68]	@ (80150d0 <_dtoa_r+0x588>)
 801508a:	2000      	movs	r0, #0
 801508c:	f7f3 f904 	bl	8008298 <__aeabi_dsub>
 8015090:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8015094:	f7f3 fd2a 	bl	8008aec <__aeabi_dcmplt>
 8015098:	2800      	cmp	r0, #0
 801509a:	f040 80b4 	bne.w	8015206 <_dtoa_r+0x6be>
 801509e:	42a6      	cmp	r6, r4
 80150a0:	f43f af70 	beq.w	8014f84 <_dtoa_r+0x43c>
 80150a4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80150a8:	4b0a      	ldr	r3, [pc, #40]	@ (80150d4 <_dtoa_r+0x58c>)
 80150aa:	2200      	movs	r2, #0
 80150ac:	f7f3 faac 	bl	8008608 <__aeabi_dmul>
 80150b0:	4b08      	ldr	r3, [pc, #32]	@ (80150d4 <_dtoa_r+0x58c>)
 80150b2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80150b6:	2200      	movs	r2, #0
 80150b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80150bc:	f7f3 faa4 	bl	8008608 <__aeabi_dmul>
 80150c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80150c4:	e7c4      	b.n	8015050 <_dtoa_r+0x508>
 80150c6:	bf00      	nop
 80150c8:	080179d0 	.word	0x080179d0
 80150cc:	080179a8 	.word	0x080179a8
 80150d0:	3ff00000 	.word	0x3ff00000
 80150d4:	40240000 	.word	0x40240000
 80150d8:	401c0000 	.word	0x401c0000
 80150dc:	40140000 	.word	0x40140000
 80150e0:	3fe00000 	.word	0x3fe00000
 80150e4:	4631      	mov	r1, r6
 80150e6:	4628      	mov	r0, r5
 80150e8:	f7f3 fa8e 	bl	8008608 <__aeabi_dmul>
 80150ec:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80150f0:	9413      	str	r4, [sp, #76]	@ 0x4c
 80150f2:	4656      	mov	r6, sl
 80150f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80150f8:	f7f3 fd36 	bl	8008b68 <__aeabi_d2iz>
 80150fc:	4605      	mov	r5, r0
 80150fe:	f7f3 fa19 	bl	8008534 <__aeabi_i2d>
 8015102:	4602      	mov	r2, r0
 8015104:	460b      	mov	r3, r1
 8015106:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801510a:	f7f3 f8c5 	bl	8008298 <__aeabi_dsub>
 801510e:	3530      	adds	r5, #48	@ 0x30
 8015110:	f806 5b01 	strb.w	r5, [r6], #1
 8015114:	4602      	mov	r2, r0
 8015116:	460b      	mov	r3, r1
 8015118:	42a6      	cmp	r6, r4
 801511a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801511e:	f04f 0200 	mov.w	r2, #0
 8015122:	d124      	bne.n	801516e <_dtoa_r+0x626>
 8015124:	4baf      	ldr	r3, [pc, #700]	@ (80153e4 <_dtoa_r+0x89c>)
 8015126:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801512a:	f7f3 f8b7 	bl	800829c <__adddf3>
 801512e:	4602      	mov	r2, r0
 8015130:	460b      	mov	r3, r1
 8015132:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015136:	f7f3 fcf7 	bl	8008b28 <__aeabi_dcmpgt>
 801513a:	2800      	cmp	r0, #0
 801513c:	d163      	bne.n	8015206 <_dtoa_r+0x6be>
 801513e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8015142:	49a8      	ldr	r1, [pc, #672]	@ (80153e4 <_dtoa_r+0x89c>)
 8015144:	2000      	movs	r0, #0
 8015146:	f7f3 f8a7 	bl	8008298 <__aeabi_dsub>
 801514a:	4602      	mov	r2, r0
 801514c:	460b      	mov	r3, r1
 801514e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015152:	f7f3 fccb 	bl	8008aec <__aeabi_dcmplt>
 8015156:	2800      	cmp	r0, #0
 8015158:	f43f af14 	beq.w	8014f84 <_dtoa_r+0x43c>
 801515c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801515e:	1e73      	subs	r3, r6, #1
 8015160:	9313      	str	r3, [sp, #76]	@ 0x4c
 8015162:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015166:	2b30      	cmp	r3, #48	@ 0x30
 8015168:	d0f8      	beq.n	801515c <_dtoa_r+0x614>
 801516a:	4647      	mov	r7, r8
 801516c:	e03b      	b.n	80151e6 <_dtoa_r+0x69e>
 801516e:	4b9e      	ldr	r3, [pc, #632]	@ (80153e8 <_dtoa_r+0x8a0>)
 8015170:	f7f3 fa4a 	bl	8008608 <__aeabi_dmul>
 8015174:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015178:	e7bc      	b.n	80150f4 <_dtoa_r+0x5ac>
 801517a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801517e:	4656      	mov	r6, sl
 8015180:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015184:	4620      	mov	r0, r4
 8015186:	4629      	mov	r1, r5
 8015188:	f7f3 fb68 	bl	800885c <__aeabi_ddiv>
 801518c:	f7f3 fcec 	bl	8008b68 <__aeabi_d2iz>
 8015190:	4680      	mov	r8, r0
 8015192:	f7f3 f9cf 	bl	8008534 <__aeabi_i2d>
 8015196:	e9dd 2300 	ldrd	r2, r3, [sp]
 801519a:	f7f3 fa35 	bl	8008608 <__aeabi_dmul>
 801519e:	4602      	mov	r2, r0
 80151a0:	460b      	mov	r3, r1
 80151a2:	4620      	mov	r0, r4
 80151a4:	4629      	mov	r1, r5
 80151a6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80151aa:	f7f3 f875 	bl	8008298 <__aeabi_dsub>
 80151ae:	f806 4b01 	strb.w	r4, [r6], #1
 80151b2:	9d03      	ldr	r5, [sp, #12]
 80151b4:	eba6 040a 	sub.w	r4, r6, sl
 80151b8:	42a5      	cmp	r5, r4
 80151ba:	4602      	mov	r2, r0
 80151bc:	460b      	mov	r3, r1
 80151be:	d133      	bne.n	8015228 <_dtoa_r+0x6e0>
 80151c0:	f7f3 f86c 	bl	800829c <__adddf3>
 80151c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80151c8:	4604      	mov	r4, r0
 80151ca:	460d      	mov	r5, r1
 80151cc:	f7f3 fcac 	bl	8008b28 <__aeabi_dcmpgt>
 80151d0:	b9c0      	cbnz	r0, 8015204 <_dtoa_r+0x6bc>
 80151d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80151d6:	4620      	mov	r0, r4
 80151d8:	4629      	mov	r1, r5
 80151da:	f7f3 fc7d 	bl	8008ad8 <__aeabi_dcmpeq>
 80151de:	b110      	cbz	r0, 80151e6 <_dtoa_r+0x69e>
 80151e0:	f018 0f01 	tst.w	r8, #1
 80151e4:	d10e      	bne.n	8015204 <_dtoa_r+0x6bc>
 80151e6:	9902      	ldr	r1, [sp, #8]
 80151e8:	4648      	mov	r0, r9
 80151ea:	f000 fbbd 	bl	8015968 <_Bfree>
 80151ee:	2300      	movs	r3, #0
 80151f0:	7033      	strb	r3, [r6, #0]
 80151f2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80151f4:	3701      	adds	r7, #1
 80151f6:	601f      	str	r7, [r3, #0]
 80151f8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80151fa:	2b00      	cmp	r3, #0
 80151fc:	f000 824b 	beq.w	8015696 <_dtoa_r+0xb4e>
 8015200:	601e      	str	r6, [r3, #0]
 8015202:	e248      	b.n	8015696 <_dtoa_r+0xb4e>
 8015204:	46b8      	mov	r8, r7
 8015206:	4633      	mov	r3, r6
 8015208:	461e      	mov	r6, r3
 801520a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801520e:	2a39      	cmp	r2, #57	@ 0x39
 8015210:	d106      	bne.n	8015220 <_dtoa_r+0x6d8>
 8015212:	459a      	cmp	sl, r3
 8015214:	d1f8      	bne.n	8015208 <_dtoa_r+0x6c0>
 8015216:	2230      	movs	r2, #48	@ 0x30
 8015218:	f108 0801 	add.w	r8, r8, #1
 801521c:	f88a 2000 	strb.w	r2, [sl]
 8015220:	781a      	ldrb	r2, [r3, #0]
 8015222:	3201      	adds	r2, #1
 8015224:	701a      	strb	r2, [r3, #0]
 8015226:	e7a0      	b.n	801516a <_dtoa_r+0x622>
 8015228:	4b6f      	ldr	r3, [pc, #444]	@ (80153e8 <_dtoa_r+0x8a0>)
 801522a:	2200      	movs	r2, #0
 801522c:	f7f3 f9ec 	bl	8008608 <__aeabi_dmul>
 8015230:	2200      	movs	r2, #0
 8015232:	2300      	movs	r3, #0
 8015234:	4604      	mov	r4, r0
 8015236:	460d      	mov	r5, r1
 8015238:	f7f3 fc4e 	bl	8008ad8 <__aeabi_dcmpeq>
 801523c:	2800      	cmp	r0, #0
 801523e:	d09f      	beq.n	8015180 <_dtoa_r+0x638>
 8015240:	e7d1      	b.n	80151e6 <_dtoa_r+0x69e>
 8015242:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015244:	2a00      	cmp	r2, #0
 8015246:	f000 80ea 	beq.w	801541e <_dtoa_r+0x8d6>
 801524a:	9a07      	ldr	r2, [sp, #28]
 801524c:	2a01      	cmp	r2, #1
 801524e:	f300 80cd 	bgt.w	80153ec <_dtoa_r+0x8a4>
 8015252:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8015254:	2a00      	cmp	r2, #0
 8015256:	f000 80c1 	beq.w	80153dc <_dtoa_r+0x894>
 801525a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801525e:	9c08      	ldr	r4, [sp, #32]
 8015260:	9e00      	ldr	r6, [sp, #0]
 8015262:	9a00      	ldr	r2, [sp, #0]
 8015264:	441a      	add	r2, r3
 8015266:	9200      	str	r2, [sp, #0]
 8015268:	9a06      	ldr	r2, [sp, #24]
 801526a:	2101      	movs	r1, #1
 801526c:	441a      	add	r2, r3
 801526e:	4648      	mov	r0, r9
 8015270:	9206      	str	r2, [sp, #24]
 8015272:	f000 fc2d 	bl	8015ad0 <__i2b>
 8015276:	4605      	mov	r5, r0
 8015278:	b166      	cbz	r6, 8015294 <_dtoa_r+0x74c>
 801527a:	9b06      	ldr	r3, [sp, #24]
 801527c:	2b00      	cmp	r3, #0
 801527e:	dd09      	ble.n	8015294 <_dtoa_r+0x74c>
 8015280:	42b3      	cmp	r3, r6
 8015282:	9a00      	ldr	r2, [sp, #0]
 8015284:	bfa8      	it	ge
 8015286:	4633      	movge	r3, r6
 8015288:	1ad2      	subs	r2, r2, r3
 801528a:	9200      	str	r2, [sp, #0]
 801528c:	9a06      	ldr	r2, [sp, #24]
 801528e:	1af6      	subs	r6, r6, r3
 8015290:	1ad3      	subs	r3, r2, r3
 8015292:	9306      	str	r3, [sp, #24]
 8015294:	9b08      	ldr	r3, [sp, #32]
 8015296:	b30b      	cbz	r3, 80152dc <_dtoa_r+0x794>
 8015298:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801529a:	2b00      	cmp	r3, #0
 801529c:	f000 80c6 	beq.w	801542c <_dtoa_r+0x8e4>
 80152a0:	2c00      	cmp	r4, #0
 80152a2:	f000 80c0 	beq.w	8015426 <_dtoa_r+0x8de>
 80152a6:	4629      	mov	r1, r5
 80152a8:	4622      	mov	r2, r4
 80152aa:	4648      	mov	r0, r9
 80152ac:	f000 fcc8 	bl	8015c40 <__pow5mult>
 80152b0:	9a02      	ldr	r2, [sp, #8]
 80152b2:	4601      	mov	r1, r0
 80152b4:	4605      	mov	r5, r0
 80152b6:	4648      	mov	r0, r9
 80152b8:	f000 fc20 	bl	8015afc <__multiply>
 80152bc:	9902      	ldr	r1, [sp, #8]
 80152be:	4680      	mov	r8, r0
 80152c0:	4648      	mov	r0, r9
 80152c2:	f000 fb51 	bl	8015968 <_Bfree>
 80152c6:	9b08      	ldr	r3, [sp, #32]
 80152c8:	1b1b      	subs	r3, r3, r4
 80152ca:	9308      	str	r3, [sp, #32]
 80152cc:	f000 80b1 	beq.w	8015432 <_dtoa_r+0x8ea>
 80152d0:	9a08      	ldr	r2, [sp, #32]
 80152d2:	4641      	mov	r1, r8
 80152d4:	4648      	mov	r0, r9
 80152d6:	f000 fcb3 	bl	8015c40 <__pow5mult>
 80152da:	9002      	str	r0, [sp, #8]
 80152dc:	2101      	movs	r1, #1
 80152de:	4648      	mov	r0, r9
 80152e0:	f000 fbf6 	bl	8015ad0 <__i2b>
 80152e4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80152e6:	4604      	mov	r4, r0
 80152e8:	2b00      	cmp	r3, #0
 80152ea:	f000 81d8 	beq.w	801569e <_dtoa_r+0xb56>
 80152ee:	461a      	mov	r2, r3
 80152f0:	4601      	mov	r1, r0
 80152f2:	4648      	mov	r0, r9
 80152f4:	f000 fca4 	bl	8015c40 <__pow5mult>
 80152f8:	9b07      	ldr	r3, [sp, #28]
 80152fa:	2b01      	cmp	r3, #1
 80152fc:	4604      	mov	r4, r0
 80152fe:	f300 809f 	bgt.w	8015440 <_dtoa_r+0x8f8>
 8015302:	9b04      	ldr	r3, [sp, #16]
 8015304:	2b00      	cmp	r3, #0
 8015306:	f040 8097 	bne.w	8015438 <_dtoa_r+0x8f0>
 801530a:	9b05      	ldr	r3, [sp, #20]
 801530c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015310:	2b00      	cmp	r3, #0
 8015312:	f040 8093 	bne.w	801543c <_dtoa_r+0x8f4>
 8015316:	9b05      	ldr	r3, [sp, #20]
 8015318:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801531c:	0d1b      	lsrs	r3, r3, #20
 801531e:	051b      	lsls	r3, r3, #20
 8015320:	b133      	cbz	r3, 8015330 <_dtoa_r+0x7e8>
 8015322:	9b00      	ldr	r3, [sp, #0]
 8015324:	3301      	adds	r3, #1
 8015326:	9300      	str	r3, [sp, #0]
 8015328:	9b06      	ldr	r3, [sp, #24]
 801532a:	3301      	adds	r3, #1
 801532c:	9306      	str	r3, [sp, #24]
 801532e:	2301      	movs	r3, #1
 8015330:	9308      	str	r3, [sp, #32]
 8015332:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015334:	2b00      	cmp	r3, #0
 8015336:	f000 81b8 	beq.w	80156aa <_dtoa_r+0xb62>
 801533a:	6923      	ldr	r3, [r4, #16]
 801533c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015340:	6918      	ldr	r0, [r3, #16]
 8015342:	f000 fb79 	bl	8015a38 <__hi0bits>
 8015346:	f1c0 0020 	rsb	r0, r0, #32
 801534a:	9b06      	ldr	r3, [sp, #24]
 801534c:	4418      	add	r0, r3
 801534e:	f010 001f 	ands.w	r0, r0, #31
 8015352:	f000 8082 	beq.w	801545a <_dtoa_r+0x912>
 8015356:	f1c0 0320 	rsb	r3, r0, #32
 801535a:	2b04      	cmp	r3, #4
 801535c:	dd73      	ble.n	8015446 <_dtoa_r+0x8fe>
 801535e:	9b00      	ldr	r3, [sp, #0]
 8015360:	f1c0 001c 	rsb	r0, r0, #28
 8015364:	4403      	add	r3, r0
 8015366:	9300      	str	r3, [sp, #0]
 8015368:	9b06      	ldr	r3, [sp, #24]
 801536a:	4403      	add	r3, r0
 801536c:	4406      	add	r6, r0
 801536e:	9306      	str	r3, [sp, #24]
 8015370:	9b00      	ldr	r3, [sp, #0]
 8015372:	2b00      	cmp	r3, #0
 8015374:	dd05      	ble.n	8015382 <_dtoa_r+0x83a>
 8015376:	9902      	ldr	r1, [sp, #8]
 8015378:	461a      	mov	r2, r3
 801537a:	4648      	mov	r0, r9
 801537c:	f000 fcba 	bl	8015cf4 <__lshift>
 8015380:	9002      	str	r0, [sp, #8]
 8015382:	9b06      	ldr	r3, [sp, #24]
 8015384:	2b00      	cmp	r3, #0
 8015386:	dd05      	ble.n	8015394 <_dtoa_r+0x84c>
 8015388:	4621      	mov	r1, r4
 801538a:	461a      	mov	r2, r3
 801538c:	4648      	mov	r0, r9
 801538e:	f000 fcb1 	bl	8015cf4 <__lshift>
 8015392:	4604      	mov	r4, r0
 8015394:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015396:	2b00      	cmp	r3, #0
 8015398:	d061      	beq.n	801545e <_dtoa_r+0x916>
 801539a:	9802      	ldr	r0, [sp, #8]
 801539c:	4621      	mov	r1, r4
 801539e:	f000 fd15 	bl	8015dcc <__mcmp>
 80153a2:	2800      	cmp	r0, #0
 80153a4:	da5b      	bge.n	801545e <_dtoa_r+0x916>
 80153a6:	2300      	movs	r3, #0
 80153a8:	9902      	ldr	r1, [sp, #8]
 80153aa:	220a      	movs	r2, #10
 80153ac:	4648      	mov	r0, r9
 80153ae:	f000 fafd 	bl	80159ac <__multadd>
 80153b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80153b4:	9002      	str	r0, [sp, #8]
 80153b6:	f107 38ff 	add.w	r8, r7, #4294967295
 80153ba:	2b00      	cmp	r3, #0
 80153bc:	f000 8177 	beq.w	80156ae <_dtoa_r+0xb66>
 80153c0:	4629      	mov	r1, r5
 80153c2:	2300      	movs	r3, #0
 80153c4:	220a      	movs	r2, #10
 80153c6:	4648      	mov	r0, r9
 80153c8:	f000 faf0 	bl	80159ac <__multadd>
 80153cc:	f1bb 0f00 	cmp.w	fp, #0
 80153d0:	4605      	mov	r5, r0
 80153d2:	dc6f      	bgt.n	80154b4 <_dtoa_r+0x96c>
 80153d4:	9b07      	ldr	r3, [sp, #28]
 80153d6:	2b02      	cmp	r3, #2
 80153d8:	dc49      	bgt.n	801546e <_dtoa_r+0x926>
 80153da:	e06b      	b.n	80154b4 <_dtoa_r+0x96c>
 80153dc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80153de:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80153e2:	e73c      	b.n	801525e <_dtoa_r+0x716>
 80153e4:	3fe00000 	.word	0x3fe00000
 80153e8:	40240000 	.word	0x40240000
 80153ec:	9b03      	ldr	r3, [sp, #12]
 80153ee:	1e5c      	subs	r4, r3, #1
 80153f0:	9b08      	ldr	r3, [sp, #32]
 80153f2:	42a3      	cmp	r3, r4
 80153f4:	db09      	blt.n	801540a <_dtoa_r+0x8c2>
 80153f6:	1b1c      	subs	r4, r3, r4
 80153f8:	9b03      	ldr	r3, [sp, #12]
 80153fa:	2b00      	cmp	r3, #0
 80153fc:	f6bf af30 	bge.w	8015260 <_dtoa_r+0x718>
 8015400:	9b00      	ldr	r3, [sp, #0]
 8015402:	9a03      	ldr	r2, [sp, #12]
 8015404:	1a9e      	subs	r6, r3, r2
 8015406:	2300      	movs	r3, #0
 8015408:	e72b      	b.n	8015262 <_dtoa_r+0x71a>
 801540a:	9b08      	ldr	r3, [sp, #32]
 801540c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801540e:	9408      	str	r4, [sp, #32]
 8015410:	1ae3      	subs	r3, r4, r3
 8015412:	441a      	add	r2, r3
 8015414:	9e00      	ldr	r6, [sp, #0]
 8015416:	9b03      	ldr	r3, [sp, #12]
 8015418:	920d      	str	r2, [sp, #52]	@ 0x34
 801541a:	2400      	movs	r4, #0
 801541c:	e721      	b.n	8015262 <_dtoa_r+0x71a>
 801541e:	9c08      	ldr	r4, [sp, #32]
 8015420:	9e00      	ldr	r6, [sp, #0]
 8015422:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8015424:	e728      	b.n	8015278 <_dtoa_r+0x730>
 8015426:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801542a:	e751      	b.n	80152d0 <_dtoa_r+0x788>
 801542c:	9a08      	ldr	r2, [sp, #32]
 801542e:	9902      	ldr	r1, [sp, #8]
 8015430:	e750      	b.n	80152d4 <_dtoa_r+0x78c>
 8015432:	f8cd 8008 	str.w	r8, [sp, #8]
 8015436:	e751      	b.n	80152dc <_dtoa_r+0x794>
 8015438:	2300      	movs	r3, #0
 801543a:	e779      	b.n	8015330 <_dtoa_r+0x7e8>
 801543c:	9b04      	ldr	r3, [sp, #16]
 801543e:	e777      	b.n	8015330 <_dtoa_r+0x7e8>
 8015440:	2300      	movs	r3, #0
 8015442:	9308      	str	r3, [sp, #32]
 8015444:	e779      	b.n	801533a <_dtoa_r+0x7f2>
 8015446:	d093      	beq.n	8015370 <_dtoa_r+0x828>
 8015448:	9a00      	ldr	r2, [sp, #0]
 801544a:	331c      	adds	r3, #28
 801544c:	441a      	add	r2, r3
 801544e:	9200      	str	r2, [sp, #0]
 8015450:	9a06      	ldr	r2, [sp, #24]
 8015452:	441a      	add	r2, r3
 8015454:	441e      	add	r6, r3
 8015456:	9206      	str	r2, [sp, #24]
 8015458:	e78a      	b.n	8015370 <_dtoa_r+0x828>
 801545a:	4603      	mov	r3, r0
 801545c:	e7f4      	b.n	8015448 <_dtoa_r+0x900>
 801545e:	9b03      	ldr	r3, [sp, #12]
 8015460:	2b00      	cmp	r3, #0
 8015462:	46b8      	mov	r8, r7
 8015464:	dc20      	bgt.n	80154a8 <_dtoa_r+0x960>
 8015466:	469b      	mov	fp, r3
 8015468:	9b07      	ldr	r3, [sp, #28]
 801546a:	2b02      	cmp	r3, #2
 801546c:	dd1e      	ble.n	80154ac <_dtoa_r+0x964>
 801546e:	f1bb 0f00 	cmp.w	fp, #0
 8015472:	f47f adb1 	bne.w	8014fd8 <_dtoa_r+0x490>
 8015476:	4621      	mov	r1, r4
 8015478:	465b      	mov	r3, fp
 801547a:	2205      	movs	r2, #5
 801547c:	4648      	mov	r0, r9
 801547e:	f000 fa95 	bl	80159ac <__multadd>
 8015482:	4601      	mov	r1, r0
 8015484:	4604      	mov	r4, r0
 8015486:	9802      	ldr	r0, [sp, #8]
 8015488:	f000 fca0 	bl	8015dcc <__mcmp>
 801548c:	2800      	cmp	r0, #0
 801548e:	f77f ada3 	ble.w	8014fd8 <_dtoa_r+0x490>
 8015492:	4656      	mov	r6, sl
 8015494:	2331      	movs	r3, #49	@ 0x31
 8015496:	f806 3b01 	strb.w	r3, [r6], #1
 801549a:	f108 0801 	add.w	r8, r8, #1
 801549e:	e59f      	b.n	8014fe0 <_dtoa_r+0x498>
 80154a0:	9c03      	ldr	r4, [sp, #12]
 80154a2:	46b8      	mov	r8, r7
 80154a4:	4625      	mov	r5, r4
 80154a6:	e7f4      	b.n	8015492 <_dtoa_r+0x94a>
 80154a8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80154ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80154ae:	2b00      	cmp	r3, #0
 80154b0:	f000 8101 	beq.w	80156b6 <_dtoa_r+0xb6e>
 80154b4:	2e00      	cmp	r6, #0
 80154b6:	dd05      	ble.n	80154c4 <_dtoa_r+0x97c>
 80154b8:	4629      	mov	r1, r5
 80154ba:	4632      	mov	r2, r6
 80154bc:	4648      	mov	r0, r9
 80154be:	f000 fc19 	bl	8015cf4 <__lshift>
 80154c2:	4605      	mov	r5, r0
 80154c4:	9b08      	ldr	r3, [sp, #32]
 80154c6:	2b00      	cmp	r3, #0
 80154c8:	d05c      	beq.n	8015584 <_dtoa_r+0xa3c>
 80154ca:	6869      	ldr	r1, [r5, #4]
 80154cc:	4648      	mov	r0, r9
 80154ce:	f000 fa0b 	bl	80158e8 <_Balloc>
 80154d2:	4606      	mov	r6, r0
 80154d4:	b928      	cbnz	r0, 80154e2 <_dtoa_r+0x99a>
 80154d6:	4b82      	ldr	r3, [pc, #520]	@ (80156e0 <_dtoa_r+0xb98>)
 80154d8:	4602      	mov	r2, r0
 80154da:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80154de:	f7ff bb4a 	b.w	8014b76 <_dtoa_r+0x2e>
 80154e2:	692a      	ldr	r2, [r5, #16]
 80154e4:	3202      	adds	r2, #2
 80154e6:	0092      	lsls	r2, r2, #2
 80154e8:	f105 010c 	add.w	r1, r5, #12
 80154ec:	300c      	adds	r0, #12
 80154ee:	f7ff fa92 	bl	8014a16 <memcpy>
 80154f2:	2201      	movs	r2, #1
 80154f4:	4631      	mov	r1, r6
 80154f6:	4648      	mov	r0, r9
 80154f8:	f000 fbfc 	bl	8015cf4 <__lshift>
 80154fc:	f10a 0301 	add.w	r3, sl, #1
 8015500:	9300      	str	r3, [sp, #0]
 8015502:	eb0a 030b 	add.w	r3, sl, fp
 8015506:	9308      	str	r3, [sp, #32]
 8015508:	9b04      	ldr	r3, [sp, #16]
 801550a:	f003 0301 	and.w	r3, r3, #1
 801550e:	462f      	mov	r7, r5
 8015510:	9306      	str	r3, [sp, #24]
 8015512:	4605      	mov	r5, r0
 8015514:	9b00      	ldr	r3, [sp, #0]
 8015516:	9802      	ldr	r0, [sp, #8]
 8015518:	4621      	mov	r1, r4
 801551a:	f103 3bff 	add.w	fp, r3, #4294967295
 801551e:	f7ff fa88 	bl	8014a32 <quorem>
 8015522:	4603      	mov	r3, r0
 8015524:	3330      	adds	r3, #48	@ 0x30
 8015526:	9003      	str	r0, [sp, #12]
 8015528:	4639      	mov	r1, r7
 801552a:	9802      	ldr	r0, [sp, #8]
 801552c:	9309      	str	r3, [sp, #36]	@ 0x24
 801552e:	f000 fc4d 	bl	8015dcc <__mcmp>
 8015532:	462a      	mov	r2, r5
 8015534:	9004      	str	r0, [sp, #16]
 8015536:	4621      	mov	r1, r4
 8015538:	4648      	mov	r0, r9
 801553a:	f000 fc63 	bl	8015e04 <__mdiff>
 801553e:	68c2      	ldr	r2, [r0, #12]
 8015540:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015542:	4606      	mov	r6, r0
 8015544:	bb02      	cbnz	r2, 8015588 <_dtoa_r+0xa40>
 8015546:	4601      	mov	r1, r0
 8015548:	9802      	ldr	r0, [sp, #8]
 801554a:	f000 fc3f 	bl	8015dcc <__mcmp>
 801554e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015550:	4602      	mov	r2, r0
 8015552:	4631      	mov	r1, r6
 8015554:	4648      	mov	r0, r9
 8015556:	920c      	str	r2, [sp, #48]	@ 0x30
 8015558:	9309      	str	r3, [sp, #36]	@ 0x24
 801555a:	f000 fa05 	bl	8015968 <_Bfree>
 801555e:	9b07      	ldr	r3, [sp, #28]
 8015560:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8015562:	9e00      	ldr	r6, [sp, #0]
 8015564:	ea42 0103 	orr.w	r1, r2, r3
 8015568:	9b06      	ldr	r3, [sp, #24]
 801556a:	4319      	orrs	r1, r3
 801556c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801556e:	d10d      	bne.n	801558c <_dtoa_r+0xa44>
 8015570:	2b39      	cmp	r3, #57	@ 0x39
 8015572:	d027      	beq.n	80155c4 <_dtoa_r+0xa7c>
 8015574:	9a04      	ldr	r2, [sp, #16]
 8015576:	2a00      	cmp	r2, #0
 8015578:	dd01      	ble.n	801557e <_dtoa_r+0xa36>
 801557a:	9b03      	ldr	r3, [sp, #12]
 801557c:	3331      	adds	r3, #49	@ 0x31
 801557e:	f88b 3000 	strb.w	r3, [fp]
 8015582:	e52e      	b.n	8014fe2 <_dtoa_r+0x49a>
 8015584:	4628      	mov	r0, r5
 8015586:	e7b9      	b.n	80154fc <_dtoa_r+0x9b4>
 8015588:	2201      	movs	r2, #1
 801558a:	e7e2      	b.n	8015552 <_dtoa_r+0xa0a>
 801558c:	9904      	ldr	r1, [sp, #16]
 801558e:	2900      	cmp	r1, #0
 8015590:	db04      	blt.n	801559c <_dtoa_r+0xa54>
 8015592:	9807      	ldr	r0, [sp, #28]
 8015594:	4301      	orrs	r1, r0
 8015596:	9806      	ldr	r0, [sp, #24]
 8015598:	4301      	orrs	r1, r0
 801559a:	d120      	bne.n	80155de <_dtoa_r+0xa96>
 801559c:	2a00      	cmp	r2, #0
 801559e:	ddee      	ble.n	801557e <_dtoa_r+0xa36>
 80155a0:	9902      	ldr	r1, [sp, #8]
 80155a2:	9300      	str	r3, [sp, #0]
 80155a4:	2201      	movs	r2, #1
 80155a6:	4648      	mov	r0, r9
 80155a8:	f000 fba4 	bl	8015cf4 <__lshift>
 80155ac:	4621      	mov	r1, r4
 80155ae:	9002      	str	r0, [sp, #8]
 80155b0:	f000 fc0c 	bl	8015dcc <__mcmp>
 80155b4:	2800      	cmp	r0, #0
 80155b6:	9b00      	ldr	r3, [sp, #0]
 80155b8:	dc02      	bgt.n	80155c0 <_dtoa_r+0xa78>
 80155ba:	d1e0      	bne.n	801557e <_dtoa_r+0xa36>
 80155bc:	07da      	lsls	r2, r3, #31
 80155be:	d5de      	bpl.n	801557e <_dtoa_r+0xa36>
 80155c0:	2b39      	cmp	r3, #57	@ 0x39
 80155c2:	d1da      	bne.n	801557a <_dtoa_r+0xa32>
 80155c4:	2339      	movs	r3, #57	@ 0x39
 80155c6:	f88b 3000 	strb.w	r3, [fp]
 80155ca:	4633      	mov	r3, r6
 80155cc:	461e      	mov	r6, r3
 80155ce:	3b01      	subs	r3, #1
 80155d0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80155d4:	2a39      	cmp	r2, #57	@ 0x39
 80155d6:	d04e      	beq.n	8015676 <_dtoa_r+0xb2e>
 80155d8:	3201      	adds	r2, #1
 80155da:	701a      	strb	r2, [r3, #0]
 80155dc:	e501      	b.n	8014fe2 <_dtoa_r+0x49a>
 80155de:	2a00      	cmp	r2, #0
 80155e0:	dd03      	ble.n	80155ea <_dtoa_r+0xaa2>
 80155e2:	2b39      	cmp	r3, #57	@ 0x39
 80155e4:	d0ee      	beq.n	80155c4 <_dtoa_r+0xa7c>
 80155e6:	3301      	adds	r3, #1
 80155e8:	e7c9      	b.n	801557e <_dtoa_r+0xa36>
 80155ea:	9a00      	ldr	r2, [sp, #0]
 80155ec:	9908      	ldr	r1, [sp, #32]
 80155ee:	f802 3c01 	strb.w	r3, [r2, #-1]
 80155f2:	428a      	cmp	r2, r1
 80155f4:	d028      	beq.n	8015648 <_dtoa_r+0xb00>
 80155f6:	9902      	ldr	r1, [sp, #8]
 80155f8:	2300      	movs	r3, #0
 80155fa:	220a      	movs	r2, #10
 80155fc:	4648      	mov	r0, r9
 80155fe:	f000 f9d5 	bl	80159ac <__multadd>
 8015602:	42af      	cmp	r7, r5
 8015604:	9002      	str	r0, [sp, #8]
 8015606:	f04f 0300 	mov.w	r3, #0
 801560a:	f04f 020a 	mov.w	r2, #10
 801560e:	4639      	mov	r1, r7
 8015610:	4648      	mov	r0, r9
 8015612:	d107      	bne.n	8015624 <_dtoa_r+0xadc>
 8015614:	f000 f9ca 	bl	80159ac <__multadd>
 8015618:	4607      	mov	r7, r0
 801561a:	4605      	mov	r5, r0
 801561c:	9b00      	ldr	r3, [sp, #0]
 801561e:	3301      	adds	r3, #1
 8015620:	9300      	str	r3, [sp, #0]
 8015622:	e777      	b.n	8015514 <_dtoa_r+0x9cc>
 8015624:	f000 f9c2 	bl	80159ac <__multadd>
 8015628:	4629      	mov	r1, r5
 801562a:	4607      	mov	r7, r0
 801562c:	2300      	movs	r3, #0
 801562e:	220a      	movs	r2, #10
 8015630:	4648      	mov	r0, r9
 8015632:	f000 f9bb 	bl	80159ac <__multadd>
 8015636:	4605      	mov	r5, r0
 8015638:	e7f0      	b.n	801561c <_dtoa_r+0xad4>
 801563a:	f1bb 0f00 	cmp.w	fp, #0
 801563e:	bfcc      	ite	gt
 8015640:	465e      	movgt	r6, fp
 8015642:	2601      	movle	r6, #1
 8015644:	4456      	add	r6, sl
 8015646:	2700      	movs	r7, #0
 8015648:	9902      	ldr	r1, [sp, #8]
 801564a:	9300      	str	r3, [sp, #0]
 801564c:	2201      	movs	r2, #1
 801564e:	4648      	mov	r0, r9
 8015650:	f000 fb50 	bl	8015cf4 <__lshift>
 8015654:	4621      	mov	r1, r4
 8015656:	9002      	str	r0, [sp, #8]
 8015658:	f000 fbb8 	bl	8015dcc <__mcmp>
 801565c:	2800      	cmp	r0, #0
 801565e:	dcb4      	bgt.n	80155ca <_dtoa_r+0xa82>
 8015660:	d102      	bne.n	8015668 <_dtoa_r+0xb20>
 8015662:	9b00      	ldr	r3, [sp, #0]
 8015664:	07db      	lsls	r3, r3, #31
 8015666:	d4b0      	bmi.n	80155ca <_dtoa_r+0xa82>
 8015668:	4633      	mov	r3, r6
 801566a:	461e      	mov	r6, r3
 801566c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015670:	2a30      	cmp	r2, #48	@ 0x30
 8015672:	d0fa      	beq.n	801566a <_dtoa_r+0xb22>
 8015674:	e4b5      	b.n	8014fe2 <_dtoa_r+0x49a>
 8015676:	459a      	cmp	sl, r3
 8015678:	d1a8      	bne.n	80155cc <_dtoa_r+0xa84>
 801567a:	2331      	movs	r3, #49	@ 0x31
 801567c:	f108 0801 	add.w	r8, r8, #1
 8015680:	f88a 3000 	strb.w	r3, [sl]
 8015684:	e4ad      	b.n	8014fe2 <_dtoa_r+0x49a>
 8015686:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8015688:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80156e4 <_dtoa_r+0xb9c>
 801568c:	b11b      	cbz	r3, 8015696 <_dtoa_r+0xb4e>
 801568e:	f10a 0308 	add.w	r3, sl, #8
 8015692:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8015694:	6013      	str	r3, [r2, #0]
 8015696:	4650      	mov	r0, sl
 8015698:	b017      	add	sp, #92	@ 0x5c
 801569a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801569e:	9b07      	ldr	r3, [sp, #28]
 80156a0:	2b01      	cmp	r3, #1
 80156a2:	f77f ae2e 	ble.w	8015302 <_dtoa_r+0x7ba>
 80156a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80156a8:	9308      	str	r3, [sp, #32]
 80156aa:	2001      	movs	r0, #1
 80156ac:	e64d      	b.n	801534a <_dtoa_r+0x802>
 80156ae:	f1bb 0f00 	cmp.w	fp, #0
 80156b2:	f77f aed9 	ble.w	8015468 <_dtoa_r+0x920>
 80156b6:	4656      	mov	r6, sl
 80156b8:	9802      	ldr	r0, [sp, #8]
 80156ba:	4621      	mov	r1, r4
 80156bc:	f7ff f9b9 	bl	8014a32 <quorem>
 80156c0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80156c4:	f806 3b01 	strb.w	r3, [r6], #1
 80156c8:	eba6 020a 	sub.w	r2, r6, sl
 80156cc:	4593      	cmp	fp, r2
 80156ce:	ddb4      	ble.n	801563a <_dtoa_r+0xaf2>
 80156d0:	9902      	ldr	r1, [sp, #8]
 80156d2:	2300      	movs	r3, #0
 80156d4:	220a      	movs	r2, #10
 80156d6:	4648      	mov	r0, r9
 80156d8:	f000 f968 	bl	80159ac <__multadd>
 80156dc:	9002      	str	r0, [sp, #8]
 80156de:	e7eb      	b.n	80156b8 <_dtoa_r+0xb70>
 80156e0:	080178d8 	.word	0x080178d8
 80156e4:	0801785c 	.word	0x0801785c

080156e8 <_free_r>:
 80156e8:	b538      	push	{r3, r4, r5, lr}
 80156ea:	4605      	mov	r5, r0
 80156ec:	2900      	cmp	r1, #0
 80156ee:	d041      	beq.n	8015774 <_free_r+0x8c>
 80156f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80156f4:	1f0c      	subs	r4, r1, #4
 80156f6:	2b00      	cmp	r3, #0
 80156f8:	bfb8      	it	lt
 80156fa:	18e4      	addlt	r4, r4, r3
 80156fc:	f000 f8e8 	bl	80158d0 <__malloc_lock>
 8015700:	4a1d      	ldr	r2, [pc, #116]	@ (8015778 <_free_r+0x90>)
 8015702:	6813      	ldr	r3, [r2, #0]
 8015704:	b933      	cbnz	r3, 8015714 <_free_r+0x2c>
 8015706:	6063      	str	r3, [r4, #4]
 8015708:	6014      	str	r4, [r2, #0]
 801570a:	4628      	mov	r0, r5
 801570c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015710:	f000 b8e4 	b.w	80158dc <__malloc_unlock>
 8015714:	42a3      	cmp	r3, r4
 8015716:	d908      	bls.n	801572a <_free_r+0x42>
 8015718:	6820      	ldr	r0, [r4, #0]
 801571a:	1821      	adds	r1, r4, r0
 801571c:	428b      	cmp	r3, r1
 801571e:	bf01      	itttt	eq
 8015720:	6819      	ldreq	r1, [r3, #0]
 8015722:	685b      	ldreq	r3, [r3, #4]
 8015724:	1809      	addeq	r1, r1, r0
 8015726:	6021      	streq	r1, [r4, #0]
 8015728:	e7ed      	b.n	8015706 <_free_r+0x1e>
 801572a:	461a      	mov	r2, r3
 801572c:	685b      	ldr	r3, [r3, #4]
 801572e:	b10b      	cbz	r3, 8015734 <_free_r+0x4c>
 8015730:	42a3      	cmp	r3, r4
 8015732:	d9fa      	bls.n	801572a <_free_r+0x42>
 8015734:	6811      	ldr	r1, [r2, #0]
 8015736:	1850      	adds	r0, r2, r1
 8015738:	42a0      	cmp	r0, r4
 801573a:	d10b      	bne.n	8015754 <_free_r+0x6c>
 801573c:	6820      	ldr	r0, [r4, #0]
 801573e:	4401      	add	r1, r0
 8015740:	1850      	adds	r0, r2, r1
 8015742:	4283      	cmp	r3, r0
 8015744:	6011      	str	r1, [r2, #0]
 8015746:	d1e0      	bne.n	801570a <_free_r+0x22>
 8015748:	6818      	ldr	r0, [r3, #0]
 801574a:	685b      	ldr	r3, [r3, #4]
 801574c:	6053      	str	r3, [r2, #4]
 801574e:	4408      	add	r0, r1
 8015750:	6010      	str	r0, [r2, #0]
 8015752:	e7da      	b.n	801570a <_free_r+0x22>
 8015754:	d902      	bls.n	801575c <_free_r+0x74>
 8015756:	230c      	movs	r3, #12
 8015758:	602b      	str	r3, [r5, #0]
 801575a:	e7d6      	b.n	801570a <_free_r+0x22>
 801575c:	6820      	ldr	r0, [r4, #0]
 801575e:	1821      	adds	r1, r4, r0
 8015760:	428b      	cmp	r3, r1
 8015762:	bf04      	itt	eq
 8015764:	6819      	ldreq	r1, [r3, #0]
 8015766:	685b      	ldreq	r3, [r3, #4]
 8015768:	6063      	str	r3, [r4, #4]
 801576a:	bf04      	itt	eq
 801576c:	1809      	addeq	r1, r1, r0
 801576e:	6021      	streq	r1, [r4, #0]
 8015770:	6054      	str	r4, [r2, #4]
 8015772:	e7ca      	b.n	801570a <_free_r+0x22>
 8015774:	bd38      	pop	{r3, r4, r5, pc}
 8015776:	bf00      	nop
 8015778:	20001454 	.word	0x20001454

0801577c <malloc>:
 801577c:	4b02      	ldr	r3, [pc, #8]	@ (8015788 <malloc+0xc>)
 801577e:	4601      	mov	r1, r0
 8015780:	6818      	ldr	r0, [r3, #0]
 8015782:	f000 b825 	b.w	80157d0 <_malloc_r>
 8015786:	bf00      	nop
 8015788:	20000134 	.word	0x20000134

0801578c <sbrk_aligned>:
 801578c:	b570      	push	{r4, r5, r6, lr}
 801578e:	4e0f      	ldr	r6, [pc, #60]	@ (80157cc <sbrk_aligned+0x40>)
 8015790:	460c      	mov	r4, r1
 8015792:	6831      	ldr	r1, [r6, #0]
 8015794:	4605      	mov	r5, r0
 8015796:	b911      	cbnz	r1, 801579e <sbrk_aligned+0x12>
 8015798:	f000 ffea 	bl	8016770 <_sbrk_r>
 801579c:	6030      	str	r0, [r6, #0]
 801579e:	4621      	mov	r1, r4
 80157a0:	4628      	mov	r0, r5
 80157a2:	f000 ffe5 	bl	8016770 <_sbrk_r>
 80157a6:	1c43      	adds	r3, r0, #1
 80157a8:	d103      	bne.n	80157b2 <sbrk_aligned+0x26>
 80157aa:	f04f 34ff 	mov.w	r4, #4294967295
 80157ae:	4620      	mov	r0, r4
 80157b0:	bd70      	pop	{r4, r5, r6, pc}
 80157b2:	1cc4      	adds	r4, r0, #3
 80157b4:	f024 0403 	bic.w	r4, r4, #3
 80157b8:	42a0      	cmp	r0, r4
 80157ba:	d0f8      	beq.n	80157ae <sbrk_aligned+0x22>
 80157bc:	1a21      	subs	r1, r4, r0
 80157be:	4628      	mov	r0, r5
 80157c0:	f000 ffd6 	bl	8016770 <_sbrk_r>
 80157c4:	3001      	adds	r0, #1
 80157c6:	d1f2      	bne.n	80157ae <sbrk_aligned+0x22>
 80157c8:	e7ef      	b.n	80157aa <sbrk_aligned+0x1e>
 80157ca:	bf00      	nop
 80157cc:	20001450 	.word	0x20001450

080157d0 <_malloc_r>:
 80157d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80157d4:	1ccd      	adds	r5, r1, #3
 80157d6:	f025 0503 	bic.w	r5, r5, #3
 80157da:	3508      	adds	r5, #8
 80157dc:	2d0c      	cmp	r5, #12
 80157de:	bf38      	it	cc
 80157e0:	250c      	movcc	r5, #12
 80157e2:	2d00      	cmp	r5, #0
 80157e4:	4606      	mov	r6, r0
 80157e6:	db01      	blt.n	80157ec <_malloc_r+0x1c>
 80157e8:	42a9      	cmp	r1, r5
 80157ea:	d904      	bls.n	80157f6 <_malloc_r+0x26>
 80157ec:	230c      	movs	r3, #12
 80157ee:	6033      	str	r3, [r6, #0]
 80157f0:	2000      	movs	r0, #0
 80157f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80157f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80158cc <_malloc_r+0xfc>
 80157fa:	f000 f869 	bl	80158d0 <__malloc_lock>
 80157fe:	f8d8 3000 	ldr.w	r3, [r8]
 8015802:	461c      	mov	r4, r3
 8015804:	bb44      	cbnz	r4, 8015858 <_malloc_r+0x88>
 8015806:	4629      	mov	r1, r5
 8015808:	4630      	mov	r0, r6
 801580a:	f7ff ffbf 	bl	801578c <sbrk_aligned>
 801580e:	1c43      	adds	r3, r0, #1
 8015810:	4604      	mov	r4, r0
 8015812:	d158      	bne.n	80158c6 <_malloc_r+0xf6>
 8015814:	f8d8 4000 	ldr.w	r4, [r8]
 8015818:	4627      	mov	r7, r4
 801581a:	2f00      	cmp	r7, #0
 801581c:	d143      	bne.n	80158a6 <_malloc_r+0xd6>
 801581e:	2c00      	cmp	r4, #0
 8015820:	d04b      	beq.n	80158ba <_malloc_r+0xea>
 8015822:	6823      	ldr	r3, [r4, #0]
 8015824:	4639      	mov	r1, r7
 8015826:	4630      	mov	r0, r6
 8015828:	eb04 0903 	add.w	r9, r4, r3
 801582c:	f000 ffa0 	bl	8016770 <_sbrk_r>
 8015830:	4581      	cmp	r9, r0
 8015832:	d142      	bne.n	80158ba <_malloc_r+0xea>
 8015834:	6821      	ldr	r1, [r4, #0]
 8015836:	1a6d      	subs	r5, r5, r1
 8015838:	4629      	mov	r1, r5
 801583a:	4630      	mov	r0, r6
 801583c:	f7ff ffa6 	bl	801578c <sbrk_aligned>
 8015840:	3001      	adds	r0, #1
 8015842:	d03a      	beq.n	80158ba <_malloc_r+0xea>
 8015844:	6823      	ldr	r3, [r4, #0]
 8015846:	442b      	add	r3, r5
 8015848:	6023      	str	r3, [r4, #0]
 801584a:	f8d8 3000 	ldr.w	r3, [r8]
 801584e:	685a      	ldr	r2, [r3, #4]
 8015850:	bb62      	cbnz	r2, 80158ac <_malloc_r+0xdc>
 8015852:	f8c8 7000 	str.w	r7, [r8]
 8015856:	e00f      	b.n	8015878 <_malloc_r+0xa8>
 8015858:	6822      	ldr	r2, [r4, #0]
 801585a:	1b52      	subs	r2, r2, r5
 801585c:	d420      	bmi.n	80158a0 <_malloc_r+0xd0>
 801585e:	2a0b      	cmp	r2, #11
 8015860:	d917      	bls.n	8015892 <_malloc_r+0xc2>
 8015862:	1961      	adds	r1, r4, r5
 8015864:	42a3      	cmp	r3, r4
 8015866:	6025      	str	r5, [r4, #0]
 8015868:	bf18      	it	ne
 801586a:	6059      	strne	r1, [r3, #4]
 801586c:	6863      	ldr	r3, [r4, #4]
 801586e:	bf08      	it	eq
 8015870:	f8c8 1000 	streq.w	r1, [r8]
 8015874:	5162      	str	r2, [r4, r5]
 8015876:	604b      	str	r3, [r1, #4]
 8015878:	4630      	mov	r0, r6
 801587a:	f000 f82f 	bl	80158dc <__malloc_unlock>
 801587e:	f104 000b 	add.w	r0, r4, #11
 8015882:	1d23      	adds	r3, r4, #4
 8015884:	f020 0007 	bic.w	r0, r0, #7
 8015888:	1ac2      	subs	r2, r0, r3
 801588a:	bf1c      	itt	ne
 801588c:	1a1b      	subne	r3, r3, r0
 801588e:	50a3      	strne	r3, [r4, r2]
 8015890:	e7af      	b.n	80157f2 <_malloc_r+0x22>
 8015892:	6862      	ldr	r2, [r4, #4]
 8015894:	42a3      	cmp	r3, r4
 8015896:	bf0c      	ite	eq
 8015898:	f8c8 2000 	streq.w	r2, [r8]
 801589c:	605a      	strne	r2, [r3, #4]
 801589e:	e7eb      	b.n	8015878 <_malloc_r+0xa8>
 80158a0:	4623      	mov	r3, r4
 80158a2:	6864      	ldr	r4, [r4, #4]
 80158a4:	e7ae      	b.n	8015804 <_malloc_r+0x34>
 80158a6:	463c      	mov	r4, r7
 80158a8:	687f      	ldr	r7, [r7, #4]
 80158aa:	e7b6      	b.n	801581a <_malloc_r+0x4a>
 80158ac:	461a      	mov	r2, r3
 80158ae:	685b      	ldr	r3, [r3, #4]
 80158b0:	42a3      	cmp	r3, r4
 80158b2:	d1fb      	bne.n	80158ac <_malloc_r+0xdc>
 80158b4:	2300      	movs	r3, #0
 80158b6:	6053      	str	r3, [r2, #4]
 80158b8:	e7de      	b.n	8015878 <_malloc_r+0xa8>
 80158ba:	230c      	movs	r3, #12
 80158bc:	6033      	str	r3, [r6, #0]
 80158be:	4630      	mov	r0, r6
 80158c0:	f000 f80c 	bl	80158dc <__malloc_unlock>
 80158c4:	e794      	b.n	80157f0 <_malloc_r+0x20>
 80158c6:	6005      	str	r5, [r0, #0]
 80158c8:	e7d6      	b.n	8015878 <_malloc_r+0xa8>
 80158ca:	bf00      	nop
 80158cc:	20001454 	.word	0x20001454

080158d0 <__malloc_lock>:
 80158d0:	4801      	ldr	r0, [pc, #4]	@ (80158d8 <__malloc_lock+0x8>)
 80158d2:	f7ff b89e 	b.w	8014a12 <__retarget_lock_acquire_recursive>
 80158d6:	bf00      	nop
 80158d8:	2000144c 	.word	0x2000144c

080158dc <__malloc_unlock>:
 80158dc:	4801      	ldr	r0, [pc, #4]	@ (80158e4 <__malloc_unlock+0x8>)
 80158de:	f7ff b899 	b.w	8014a14 <__retarget_lock_release_recursive>
 80158e2:	bf00      	nop
 80158e4:	2000144c 	.word	0x2000144c

080158e8 <_Balloc>:
 80158e8:	b570      	push	{r4, r5, r6, lr}
 80158ea:	69c6      	ldr	r6, [r0, #28]
 80158ec:	4604      	mov	r4, r0
 80158ee:	460d      	mov	r5, r1
 80158f0:	b976      	cbnz	r6, 8015910 <_Balloc+0x28>
 80158f2:	2010      	movs	r0, #16
 80158f4:	f7ff ff42 	bl	801577c <malloc>
 80158f8:	4602      	mov	r2, r0
 80158fa:	61e0      	str	r0, [r4, #28]
 80158fc:	b920      	cbnz	r0, 8015908 <_Balloc+0x20>
 80158fe:	4b18      	ldr	r3, [pc, #96]	@ (8015960 <_Balloc+0x78>)
 8015900:	4818      	ldr	r0, [pc, #96]	@ (8015964 <_Balloc+0x7c>)
 8015902:	216b      	movs	r1, #107	@ 0x6b
 8015904:	f000 ff44 	bl	8016790 <__assert_func>
 8015908:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801590c:	6006      	str	r6, [r0, #0]
 801590e:	60c6      	str	r6, [r0, #12]
 8015910:	69e6      	ldr	r6, [r4, #28]
 8015912:	68f3      	ldr	r3, [r6, #12]
 8015914:	b183      	cbz	r3, 8015938 <_Balloc+0x50>
 8015916:	69e3      	ldr	r3, [r4, #28]
 8015918:	68db      	ldr	r3, [r3, #12]
 801591a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801591e:	b9b8      	cbnz	r0, 8015950 <_Balloc+0x68>
 8015920:	2101      	movs	r1, #1
 8015922:	fa01 f605 	lsl.w	r6, r1, r5
 8015926:	1d72      	adds	r2, r6, #5
 8015928:	0092      	lsls	r2, r2, #2
 801592a:	4620      	mov	r0, r4
 801592c:	f000 ff4e 	bl	80167cc <_calloc_r>
 8015930:	b160      	cbz	r0, 801594c <_Balloc+0x64>
 8015932:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8015936:	e00e      	b.n	8015956 <_Balloc+0x6e>
 8015938:	2221      	movs	r2, #33	@ 0x21
 801593a:	2104      	movs	r1, #4
 801593c:	4620      	mov	r0, r4
 801593e:	f000 ff45 	bl	80167cc <_calloc_r>
 8015942:	69e3      	ldr	r3, [r4, #28]
 8015944:	60f0      	str	r0, [r6, #12]
 8015946:	68db      	ldr	r3, [r3, #12]
 8015948:	2b00      	cmp	r3, #0
 801594a:	d1e4      	bne.n	8015916 <_Balloc+0x2e>
 801594c:	2000      	movs	r0, #0
 801594e:	bd70      	pop	{r4, r5, r6, pc}
 8015950:	6802      	ldr	r2, [r0, #0]
 8015952:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015956:	2300      	movs	r3, #0
 8015958:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801595c:	e7f7      	b.n	801594e <_Balloc+0x66>
 801595e:	bf00      	nop
 8015960:	08017869 	.word	0x08017869
 8015964:	080178e9 	.word	0x080178e9

08015968 <_Bfree>:
 8015968:	b570      	push	{r4, r5, r6, lr}
 801596a:	69c6      	ldr	r6, [r0, #28]
 801596c:	4605      	mov	r5, r0
 801596e:	460c      	mov	r4, r1
 8015970:	b976      	cbnz	r6, 8015990 <_Bfree+0x28>
 8015972:	2010      	movs	r0, #16
 8015974:	f7ff ff02 	bl	801577c <malloc>
 8015978:	4602      	mov	r2, r0
 801597a:	61e8      	str	r0, [r5, #28]
 801597c:	b920      	cbnz	r0, 8015988 <_Bfree+0x20>
 801597e:	4b09      	ldr	r3, [pc, #36]	@ (80159a4 <_Bfree+0x3c>)
 8015980:	4809      	ldr	r0, [pc, #36]	@ (80159a8 <_Bfree+0x40>)
 8015982:	218f      	movs	r1, #143	@ 0x8f
 8015984:	f000 ff04 	bl	8016790 <__assert_func>
 8015988:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801598c:	6006      	str	r6, [r0, #0]
 801598e:	60c6      	str	r6, [r0, #12]
 8015990:	b13c      	cbz	r4, 80159a2 <_Bfree+0x3a>
 8015992:	69eb      	ldr	r3, [r5, #28]
 8015994:	6862      	ldr	r2, [r4, #4]
 8015996:	68db      	ldr	r3, [r3, #12]
 8015998:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801599c:	6021      	str	r1, [r4, #0]
 801599e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80159a2:	bd70      	pop	{r4, r5, r6, pc}
 80159a4:	08017869 	.word	0x08017869
 80159a8:	080178e9 	.word	0x080178e9

080159ac <__multadd>:
 80159ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80159b0:	690d      	ldr	r5, [r1, #16]
 80159b2:	4607      	mov	r7, r0
 80159b4:	460c      	mov	r4, r1
 80159b6:	461e      	mov	r6, r3
 80159b8:	f101 0c14 	add.w	ip, r1, #20
 80159bc:	2000      	movs	r0, #0
 80159be:	f8dc 3000 	ldr.w	r3, [ip]
 80159c2:	b299      	uxth	r1, r3
 80159c4:	fb02 6101 	mla	r1, r2, r1, r6
 80159c8:	0c1e      	lsrs	r6, r3, #16
 80159ca:	0c0b      	lsrs	r3, r1, #16
 80159cc:	fb02 3306 	mla	r3, r2, r6, r3
 80159d0:	b289      	uxth	r1, r1
 80159d2:	3001      	adds	r0, #1
 80159d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80159d8:	4285      	cmp	r5, r0
 80159da:	f84c 1b04 	str.w	r1, [ip], #4
 80159de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80159e2:	dcec      	bgt.n	80159be <__multadd+0x12>
 80159e4:	b30e      	cbz	r6, 8015a2a <__multadd+0x7e>
 80159e6:	68a3      	ldr	r3, [r4, #8]
 80159e8:	42ab      	cmp	r3, r5
 80159ea:	dc19      	bgt.n	8015a20 <__multadd+0x74>
 80159ec:	6861      	ldr	r1, [r4, #4]
 80159ee:	4638      	mov	r0, r7
 80159f0:	3101      	adds	r1, #1
 80159f2:	f7ff ff79 	bl	80158e8 <_Balloc>
 80159f6:	4680      	mov	r8, r0
 80159f8:	b928      	cbnz	r0, 8015a06 <__multadd+0x5a>
 80159fa:	4602      	mov	r2, r0
 80159fc:	4b0c      	ldr	r3, [pc, #48]	@ (8015a30 <__multadd+0x84>)
 80159fe:	480d      	ldr	r0, [pc, #52]	@ (8015a34 <__multadd+0x88>)
 8015a00:	21ba      	movs	r1, #186	@ 0xba
 8015a02:	f000 fec5 	bl	8016790 <__assert_func>
 8015a06:	6922      	ldr	r2, [r4, #16]
 8015a08:	3202      	adds	r2, #2
 8015a0a:	f104 010c 	add.w	r1, r4, #12
 8015a0e:	0092      	lsls	r2, r2, #2
 8015a10:	300c      	adds	r0, #12
 8015a12:	f7ff f800 	bl	8014a16 <memcpy>
 8015a16:	4621      	mov	r1, r4
 8015a18:	4638      	mov	r0, r7
 8015a1a:	f7ff ffa5 	bl	8015968 <_Bfree>
 8015a1e:	4644      	mov	r4, r8
 8015a20:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015a24:	3501      	adds	r5, #1
 8015a26:	615e      	str	r6, [r3, #20]
 8015a28:	6125      	str	r5, [r4, #16]
 8015a2a:	4620      	mov	r0, r4
 8015a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a30:	080178d8 	.word	0x080178d8
 8015a34:	080178e9 	.word	0x080178e9

08015a38 <__hi0bits>:
 8015a38:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8015a3c:	4603      	mov	r3, r0
 8015a3e:	bf36      	itet	cc
 8015a40:	0403      	lslcc	r3, r0, #16
 8015a42:	2000      	movcs	r0, #0
 8015a44:	2010      	movcc	r0, #16
 8015a46:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8015a4a:	bf3c      	itt	cc
 8015a4c:	021b      	lslcc	r3, r3, #8
 8015a4e:	3008      	addcc	r0, #8
 8015a50:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8015a54:	bf3c      	itt	cc
 8015a56:	011b      	lslcc	r3, r3, #4
 8015a58:	3004      	addcc	r0, #4
 8015a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015a5e:	bf3c      	itt	cc
 8015a60:	009b      	lslcc	r3, r3, #2
 8015a62:	3002      	addcc	r0, #2
 8015a64:	2b00      	cmp	r3, #0
 8015a66:	db05      	blt.n	8015a74 <__hi0bits+0x3c>
 8015a68:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8015a6c:	f100 0001 	add.w	r0, r0, #1
 8015a70:	bf08      	it	eq
 8015a72:	2020      	moveq	r0, #32
 8015a74:	4770      	bx	lr

08015a76 <__lo0bits>:
 8015a76:	6803      	ldr	r3, [r0, #0]
 8015a78:	4602      	mov	r2, r0
 8015a7a:	f013 0007 	ands.w	r0, r3, #7
 8015a7e:	d00b      	beq.n	8015a98 <__lo0bits+0x22>
 8015a80:	07d9      	lsls	r1, r3, #31
 8015a82:	d421      	bmi.n	8015ac8 <__lo0bits+0x52>
 8015a84:	0798      	lsls	r0, r3, #30
 8015a86:	bf49      	itett	mi
 8015a88:	085b      	lsrmi	r3, r3, #1
 8015a8a:	089b      	lsrpl	r3, r3, #2
 8015a8c:	2001      	movmi	r0, #1
 8015a8e:	6013      	strmi	r3, [r2, #0]
 8015a90:	bf5c      	itt	pl
 8015a92:	6013      	strpl	r3, [r2, #0]
 8015a94:	2002      	movpl	r0, #2
 8015a96:	4770      	bx	lr
 8015a98:	b299      	uxth	r1, r3
 8015a9a:	b909      	cbnz	r1, 8015aa0 <__lo0bits+0x2a>
 8015a9c:	0c1b      	lsrs	r3, r3, #16
 8015a9e:	2010      	movs	r0, #16
 8015aa0:	b2d9      	uxtb	r1, r3
 8015aa2:	b909      	cbnz	r1, 8015aa8 <__lo0bits+0x32>
 8015aa4:	3008      	adds	r0, #8
 8015aa6:	0a1b      	lsrs	r3, r3, #8
 8015aa8:	0719      	lsls	r1, r3, #28
 8015aaa:	bf04      	itt	eq
 8015aac:	091b      	lsreq	r3, r3, #4
 8015aae:	3004      	addeq	r0, #4
 8015ab0:	0799      	lsls	r1, r3, #30
 8015ab2:	bf04      	itt	eq
 8015ab4:	089b      	lsreq	r3, r3, #2
 8015ab6:	3002      	addeq	r0, #2
 8015ab8:	07d9      	lsls	r1, r3, #31
 8015aba:	d403      	bmi.n	8015ac4 <__lo0bits+0x4e>
 8015abc:	085b      	lsrs	r3, r3, #1
 8015abe:	f100 0001 	add.w	r0, r0, #1
 8015ac2:	d003      	beq.n	8015acc <__lo0bits+0x56>
 8015ac4:	6013      	str	r3, [r2, #0]
 8015ac6:	4770      	bx	lr
 8015ac8:	2000      	movs	r0, #0
 8015aca:	4770      	bx	lr
 8015acc:	2020      	movs	r0, #32
 8015ace:	4770      	bx	lr

08015ad0 <__i2b>:
 8015ad0:	b510      	push	{r4, lr}
 8015ad2:	460c      	mov	r4, r1
 8015ad4:	2101      	movs	r1, #1
 8015ad6:	f7ff ff07 	bl	80158e8 <_Balloc>
 8015ada:	4602      	mov	r2, r0
 8015adc:	b928      	cbnz	r0, 8015aea <__i2b+0x1a>
 8015ade:	4b05      	ldr	r3, [pc, #20]	@ (8015af4 <__i2b+0x24>)
 8015ae0:	4805      	ldr	r0, [pc, #20]	@ (8015af8 <__i2b+0x28>)
 8015ae2:	f240 1145 	movw	r1, #325	@ 0x145
 8015ae6:	f000 fe53 	bl	8016790 <__assert_func>
 8015aea:	2301      	movs	r3, #1
 8015aec:	6144      	str	r4, [r0, #20]
 8015aee:	6103      	str	r3, [r0, #16]
 8015af0:	bd10      	pop	{r4, pc}
 8015af2:	bf00      	nop
 8015af4:	080178d8 	.word	0x080178d8
 8015af8:	080178e9 	.word	0x080178e9

08015afc <__multiply>:
 8015afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b00:	4617      	mov	r7, r2
 8015b02:	690a      	ldr	r2, [r1, #16]
 8015b04:	693b      	ldr	r3, [r7, #16]
 8015b06:	429a      	cmp	r2, r3
 8015b08:	bfa8      	it	ge
 8015b0a:	463b      	movge	r3, r7
 8015b0c:	4689      	mov	r9, r1
 8015b0e:	bfa4      	itt	ge
 8015b10:	460f      	movge	r7, r1
 8015b12:	4699      	movge	r9, r3
 8015b14:	693d      	ldr	r5, [r7, #16]
 8015b16:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8015b1a:	68bb      	ldr	r3, [r7, #8]
 8015b1c:	6879      	ldr	r1, [r7, #4]
 8015b1e:	eb05 060a 	add.w	r6, r5, sl
 8015b22:	42b3      	cmp	r3, r6
 8015b24:	b085      	sub	sp, #20
 8015b26:	bfb8      	it	lt
 8015b28:	3101      	addlt	r1, #1
 8015b2a:	f7ff fedd 	bl	80158e8 <_Balloc>
 8015b2e:	b930      	cbnz	r0, 8015b3e <__multiply+0x42>
 8015b30:	4602      	mov	r2, r0
 8015b32:	4b41      	ldr	r3, [pc, #260]	@ (8015c38 <__multiply+0x13c>)
 8015b34:	4841      	ldr	r0, [pc, #260]	@ (8015c3c <__multiply+0x140>)
 8015b36:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8015b3a:	f000 fe29 	bl	8016790 <__assert_func>
 8015b3e:	f100 0414 	add.w	r4, r0, #20
 8015b42:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8015b46:	4623      	mov	r3, r4
 8015b48:	2200      	movs	r2, #0
 8015b4a:	4573      	cmp	r3, lr
 8015b4c:	d320      	bcc.n	8015b90 <__multiply+0x94>
 8015b4e:	f107 0814 	add.w	r8, r7, #20
 8015b52:	f109 0114 	add.w	r1, r9, #20
 8015b56:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8015b5a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8015b5e:	9302      	str	r3, [sp, #8]
 8015b60:	1beb      	subs	r3, r5, r7
 8015b62:	3b15      	subs	r3, #21
 8015b64:	f023 0303 	bic.w	r3, r3, #3
 8015b68:	3304      	adds	r3, #4
 8015b6a:	3715      	adds	r7, #21
 8015b6c:	42bd      	cmp	r5, r7
 8015b6e:	bf38      	it	cc
 8015b70:	2304      	movcc	r3, #4
 8015b72:	9301      	str	r3, [sp, #4]
 8015b74:	9b02      	ldr	r3, [sp, #8]
 8015b76:	9103      	str	r1, [sp, #12]
 8015b78:	428b      	cmp	r3, r1
 8015b7a:	d80c      	bhi.n	8015b96 <__multiply+0x9a>
 8015b7c:	2e00      	cmp	r6, #0
 8015b7e:	dd03      	ble.n	8015b88 <__multiply+0x8c>
 8015b80:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8015b84:	2b00      	cmp	r3, #0
 8015b86:	d055      	beq.n	8015c34 <__multiply+0x138>
 8015b88:	6106      	str	r6, [r0, #16]
 8015b8a:	b005      	add	sp, #20
 8015b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b90:	f843 2b04 	str.w	r2, [r3], #4
 8015b94:	e7d9      	b.n	8015b4a <__multiply+0x4e>
 8015b96:	f8b1 a000 	ldrh.w	sl, [r1]
 8015b9a:	f1ba 0f00 	cmp.w	sl, #0
 8015b9e:	d01f      	beq.n	8015be0 <__multiply+0xe4>
 8015ba0:	46c4      	mov	ip, r8
 8015ba2:	46a1      	mov	r9, r4
 8015ba4:	2700      	movs	r7, #0
 8015ba6:	f85c 2b04 	ldr.w	r2, [ip], #4
 8015baa:	f8d9 3000 	ldr.w	r3, [r9]
 8015bae:	fa1f fb82 	uxth.w	fp, r2
 8015bb2:	b29b      	uxth	r3, r3
 8015bb4:	fb0a 330b 	mla	r3, sl, fp, r3
 8015bb8:	443b      	add	r3, r7
 8015bba:	f8d9 7000 	ldr.w	r7, [r9]
 8015bbe:	0c12      	lsrs	r2, r2, #16
 8015bc0:	0c3f      	lsrs	r7, r7, #16
 8015bc2:	fb0a 7202 	mla	r2, sl, r2, r7
 8015bc6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8015bca:	b29b      	uxth	r3, r3
 8015bcc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015bd0:	4565      	cmp	r5, ip
 8015bd2:	f849 3b04 	str.w	r3, [r9], #4
 8015bd6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8015bda:	d8e4      	bhi.n	8015ba6 <__multiply+0xaa>
 8015bdc:	9b01      	ldr	r3, [sp, #4]
 8015bde:	50e7      	str	r7, [r4, r3]
 8015be0:	9b03      	ldr	r3, [sp, #12]
 8015be2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8015be6:	3104      	adds	r1, #4
 8015be8:	f1b9 0f00 	cmp.w	r9, #0
 8015bec:	d020      	beq.n	8015c30 <__multiply+0x134>
 8015bee:	6823      	ldr	r3, [r4, #0]
 8015bf0:	4647      	mov	r7, r8
 8015bf2:	46a4      	mov	ip, r4
 8015bf4:	f04f 0a00 	mov.w	sl, #0
 8015bf8:	f8b7 b000 	ldrh.w	fp, [r7]
 8015bfc:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8015c00:	fb09 220b 	mla	r2, r9, fp, r2
 8015c04:	4452      	add	r2, sl
 8015c06:	b29b      	uxth	r3, r3
 8015c08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015c0c:	f84c 3b04 	str.w	r3, [ip], #4
 8015c10:	f857 3b04 	ldr.w	r3, [r7], #4
 8015c14:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015c18:	f8bc 3000 	ldrh.w	r3, [ip]
 8015c1c:	fb09 330a 	mla	r3, r9, sl, r3
 8015c20:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8015c24:	42bd      	cmp	r5, r7
 8015c26:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015c2a:	d8e5      	bhi.n	8015bf8 <__multiply+0xfc>
 8015c2c:	9a01      	ldr	r2, [sp, #4]
 8015c2e:	50a3      	str	r3, [r4, r2]
 8015c30:	3404      	adds	r4, #4
 8015c32:	e79f      	b.n	8015b74 <__multiply+0x78>
 8015c34:	3e01      	subs	r6, #1
 8015c36:	e7a1      	b.n	8015b7c <__multiply+0x80>
 8015c38:	080178d8 	.word	0x080178d8
 8015c3c:	080178e9 	.word	0x080178e9

08015c40 <__pow5mult>:
 8015c40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015c44:	4615      	mov	r5, r2
 8015c46:	f012 0203 	ands.w	r2, r2, #3
 8015c4a:	4607      	mov	r7, r0
 8015c4c:	460e      	mov	r6, r1
 8015c4e:	d007      	beq.n	8015c60 <__pow5mult+0x20>
 8015c50:	4c25      	ldr	r4, [pc, #148]	@ (8015ce8 <__pow5mult+0xa8>)
 8015c52:	3a01      	subs	r2, #1
 8015c54:	2300      	movs	r3, #0
 8015c56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015c5a:	f7ff fea7 	bl	80159ac <__multadd>
 8015c5e:	4606      	mov	r6, r0
 8015c60:	10ad      	asrs	r5, r5, #2
 8015c62:	d03d      	beq.n	8015ce0 <__pow5mult+0xa0>
 8015c64:	69fc      	ldr	r4, [r7, #28]
 8015c66:	b97c      	cbnz	r4, 8015c88 <__pow5mult+0x48>
 8015c68:	2010      	movs	r0, #16
 8015c6a:	f7ff fd87 	bl	801577c <malloc>
 8015c6e:	4602      	mov	r2, r0
 8015c70:	61f8      	str	r0, [r7, #28]
 8015c72:	b928      	cbnz	r0, 8015c80 <__pow5mult+0x40>
 8015c74:	4b1d      	ldr	r3, [pc, #116]	@ (8015cec <__pow5mult+0xac>)
 8015c76:	481e      	ldr	r0, [pc, #120]	@ (8015cf0 <__pow5mult+0xb0>)
 8015c78:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8015c7c:	f000 fd88 	bl	8016790 <__assert_func>
 8015c80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015c84:	6004      	str	r4, [r0, #0]
 8015c86:	60c4      	str	r4, [r0, #12]
 8015c88:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8015c8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015c90:	b94c      	cbnz	r4, 8015ca6 <__pow5mult+0x66>
 8015c92:	f240 2171 	movw	r1, #625	@ 0x271
 8015c96:	4638      	mov	r0, r7
 8015c98:	f7ff ff1a 	bl	8015ad0 <__i2b>
 8015c9c:	2300      	movs	r3, #0
 8015c9e:	f8c8 0008 	str.w	r0, [r8, #8]
 8015ca2:	4604      	mov	r4, r0
 8015ca4:	6003      	str	r3, [r0, #0]
 8015ca6:	f04f 0900 	mov.w	r9, #0
 8015caa:	07eb      	lsls	r3, r5, #31
 8015cac:	d50a      	bpl.n	8015cc4 <__pow5mult+0x84>
 8015cae:	4631      	mov	r1, r6
 8015cb0:	4622      	mov	r2, r4
 8015cb2:	4638      	mov	r0, r7
 8015cb4:	f7ff ff22 	bl	8015afc <__multiply>
 8015cb8:	4631      	mov	r1, r6
 8015cba:	4680      	mov	r8, r0
 8015cbc:	4638      	mov	r0, r7
 8015cbe:	f7ff fe53 	bl	8015968 <_Bfree>
 8015cc2:	4646      	mov	r6, r8
 8015cc4:	106d      	asrs	r5, r5, #1
 8015cc6:	d00b      	beq.n	8015ce0 <__pow5mult+0xa0>
 8015cc8:	6820      	ldr	r0, [r4, #0]
 8015cca:	b938      	cbnz	r0, 8015cdc <__pow5mult+0x9c>
 8015ccc:	4622      	mov	r2, r4
 8015cce:	4621      	mov	r1, r4
 8015cd0:	4638      	mov	r0, r7
 8015cd2:	f7ff ff13 	bl	8015afc <__multiply>
 8015cd6:	6020      	str	r0, [r4, #0]
 8015cd8:	f8c0 9000 	str.w	r9, [r0]
 8015cdc:	4604      	mov	r4, r0
 8015cde:	e7e4      	b.n	8015caa <__pow5mult+0x6a>
 8015ce0:	4630      	mov	r0, r6
 8015ce2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015ce6:	bf00      	nop
 8015ce8:	0801799c 	.word	0x0801799c
 8015cec:	08017869 	.word	0x08017869
 8015cf0:	080178e9 	.word	0x080178e9

08015cf4 <__lshift>:
 8015cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015cf8:	460c      	mov	r4, r1
 8015cfa:	6849      	ldr	r1, [r1, #4]
 8015cfc:	6923      	ldr	r3, [r4, #16]
 8015cfe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8015d02:	68a3      	ldr	r3, [r4, #8]
 8015d04:	4607      	mov	r7, r0
 8015d06:	4691      	mov	r9, r2
 8015d08:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015d0c:	f108 0601 	add.w	r6, r8, #1
 8015d10:	42b3      	cmp	r3, r6
 8015d12:	db0b      	blt.n	8015d2c <__lshift+0x38>
 8015d14:	4638      	mov	r0, r7
 8015d16:	f7ff fde7 	bl	80158e8 <_Balloc>
 8015d1a:	4605      	mov	r5, r0
 8015d1c:	b948      	cbnz	r0, 8015d32 <__lshift+0x3e>
 8015d1e:	4602      	mov	r2, r0
 8015d20:	4b28      	ldr	r3, [pc, #160]	@ (8015dc4 <__lshift+0xd0>)
 8015d22:	4829      	ldr	r0, [pc, #164]	@ (8015dc8 <__lshift+0xd4>)
 8015d24:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8015d28:	f000 fd32 	bl	8016790 <__assert_func>
 8015d2c:	3101      	adds	r1, #1
 8015d2e:	005b      	lsls	r3, r3, #1
 8015d30:	e7ee      	b.n	8015d10 <__lshift+0x1c>
 8015d32:	2300      	movs	r3, #0
 8015d34:	f100 0114 	add.w	r1, r0, #20
 8015d38:	f100 0210 	add.w	r2, r0, #16
 8015d3c:	4618      	mov	r0, r3
 8015d3e:	4553      	cmp	r3, sl
 8015d40:	db33      	blt.n	8015daa <__lshift+0xb6>
 8015d42:	6920      	ldr	r0, [r4, #16]
 8015d44:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015d48:	f104 0314 	add.w	r3, r4, #20
 8015d4c:	f019 091f 	ands.w	r9, r9, #31
 8015d50:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015d54:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015d58:	d02b      	beq.n	8015db2 <__lshift+0xbe>
 8015d5a:	f1c9 0e20 	rsb	lr, r9, #32
 8015d5e:	468a      	mov	sl, r1
 8015d60:	2200      	movs	r2, #0
 8015d62:	6818      	ldr	r0, [r3, #0]
 8015d64:	fa00 f009 	lsl.w	r0, r0, r9
 8015d68:	4310      	orrs	r0, r2
 8015d6a:	f84a 0b04 	str.w	r0, [sl], #4
 8015d6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8015d72:	459c      	cmp	ip, r3
 8015d74:	fa22 f20e 	lsr.w	r2, r2, lr
 8015d78:	d8f3      	bhi.n	8015d62 <__lshift+0x6e>
 8015d7a:	ebac 0304 	sub.w	r3, ip, r4
 8015d7e:	3b15      	subs	r3, #21
 8015d80:	f023 0303 	bic.w	r3, r3, #3
 8015d84:	3304      	adds	r3, #4
 8015d86:	f104 0015 	add.w	r0, r4, #21
 8015d8a:	4560      	cmp	r0, ip
 8015d8c:	bf88      	it	hi
 8015d8e:	2304      	movhi	r3, #4
 8015d90:	50ca      	str	r2, [r1, r3]
 8015d92:	b10a      	cbz	r2, 8015d98 <__lshift+0xa4>
 8015d94:	f108 0602 	add.w	r6, r8, #2
 8015d98:	3e01      	subs	r6, #1
 8015d9a:	4638      	mov	r0, r7
 8015d9c:	612e      	str	r6, [r5, #16]
 8015d9e:	4621      	mov	r1, r4
 8015da0:	f7ff fde2 	bl	8015968 <_Bfree>
 8015da4:	4628      	mov	r0, r5
 8015da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015daa:	f842 0f04 	str.w	r0, [r2, #4]!
 8015dae:	3301      	adds	r3, #1
 8015db0:	e7c5      	b.n	8015d3e <__lshift+0x4a>
 8015db2:	3904      	subs	r1, #4
 8015db4:	f853 2b04 	ldr.w	r2, [r3], #4
 8015db8:	f841 2f04 	str.w	r2, [r1, #4]!
 8015dbc:	459c      	cmp	ip, r3
 8015dbe:	d8f9      	bhi.n	8015db4 <__lshift+0xc0>
 8015dc0:	e7ea      	b.n	8015d98 <__lshift+0xa4>
 8015dc2:	bf00      	nop
 8015dc4:	080178d8 	.word	0x080178d8
 8015dc8:	080178e9 	.word	0x080178e9

08015dcc <__mcmp>:
 8015dcc:	690a      	ldr	r2, [r1, #16]
 8015dce:	4603      	mov	r3, r0
 8015dd0:	6900      	ldr	r0, [r0, #16]
 8015dd2:	1a80      	subs	r0, r0, r2
 8015dd4:	b530      	push	{r4, r5, lr}
 8015dd6:	d10e      	bne.n	8015df6 <__mcmp+0x2a>
 8015dd8:	3314      	adds	r3, #20
 8015dda:	3114      	adds	r1, #20
 8015ddc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8015de0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8015de4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8015de8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8015dec:	4295      	cmp	r5, r2
 8015dee:	d003      	beq.n	8015df8 <__mcmp+0x2c>
 8015df0:	d205      	bcs.n	8015dfe <__mcmp+0x32>
 8015df2:	f04f 30ff 	mov.w	r0, #4294967295
 8015df6:	bd30      	pop	{r4, r5, pc}
 8015df8:	42a3      	cmp	r3, r4
 8015dfa:	d3f3      	bcc.n	8015de4 <__mcmp+0x18>
 8015dfc:	e7fb      	b.n	8015df6 <__mcmp+0x2a>
 8015dfe:	2001      	movs	r0, #1
 8015e00:	e7f9      	b.n	8015df6 <__mcmp+0x2a>
	...

08015e04 <__mdiff>:
 8015e04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e08:	4689      	mov	r9, r1
 8015e0a:	4606      	mov	r6, r0
 8015e0c:	4611      	mov	r1, r2
 8015e0e:	4648      	mov	r0, r9
 8015e10:	4614      	mov	r4, r2
 8015e12:	f7ff ffdb 	bl	8015dcc <__mcmp>
 8015e16:	1e05      	subs	r5, r0, #0
 8015e18:	d112      	bne.n	8015e40 <__mdiff+0x3c>
 8015e1a:	4629      	mov	r1, r5
 8015e1c:	4630      	mov	r0, r6
 8015e1e:	f7ff fd63 	bl	80158e8 <_Balloc>
 8015e22:	4602      	mov	r2, r0
 8015e24:	b928      	cbnz	r0, 8015e32 <__mdiff+0x2e>
 8015e26:	4b3f      	ldr	r3, [pc, #252]	@ (8015f24 <__mdiff+0x120>)
 8015e28:	f240 2137 	movw	r1, #567	@ 0x237
 8015e2c:	483e      	ldr	r0, [pc, #248]	@ (8015f28 <__mdiff+0x124>)
 8015e2e:	f000 fcaf 	bl	8016790 <__assert_func>
 8015e32:	2301      	movs	r3, #1
 8015e34:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015e38:	4610      	mov	r0, r2
 8015e3a:	b003      	add	sp, #12
 8015e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e40:	bfbc      	itt	lt
 8015e42:	464b      	movlt	r3, r9
 8015e44:	46a1      	movlt	r9, r4
 8015e46:	4630      	mov	r0, r6
 8015e48:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8015e4c:	bfba      	itte	lt
 8015e4e:	461c      	movlt	r4, r3
 8015e50:	2501      	movlt	r5, #1
 8015e52:	2500      	movge	r5, #0
 8015e54:	f7ff fd48 	bl	80158e8 <_Balloc>
 8015e58:	4602      	mov	r2, r0
 8015e5a:	b918      	cbnz	r0, 8015e64 <__mdiff+0x60>
 8015e5c:	4b31      	ldr	r3, [pc, #196]	@ (8015f24 <__mdiff+0x120>)
 8015e5e:	f240 2145 	movw	r1, #581	@ 0x245
 8015e62:	e7e3      	b.n	8015e2c <__mdiff+0x28>
 8015e64:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8015e68:	6926      	ldr	r6, [r4, #16]
 8015e6a:	60c5      	str	r5, [r0, #12]
 8015e6c:	f109 0310 	add.w	r3, r9, #16
 8015e70:	f109 0514 	add.w	r5, r9, #20
 8015e74:	f104 0e14 	add.w	lr, r4, #20
 8015e78:	f100 0b14 	add.w	fp, r0, #20
 8015e7c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8015e80:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8015e84:	9301      	str	r3, [sp, #4]
 8015e86:	46d9      	mov	r9, fp
 8015e88:	f04f 0c00 	mov.w	ip, #0
 8015e8c:	9b01      	ldr	r3, [sp, #4]
 8015e8e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8015e92:	f853 af04 	ldr.w	sl, [r3, #4]!
 8015e96:	9301      	str	r3, [sp, #4]
 8015e98:	fa1f f38a 	uxth.w	r3, sl
 8015e9c:	4619      	mov	r1, r3
 8015e9e:	b283      	uxth	r3, r0
 8015ea0:	1acb      	subs	r3, r1, r3
 8015ea2:	0c00      	lsrs	r0, r0, #16
 8015ea4:	4463      	add	r3, ip
 8015ea6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8015eaa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8015eae:	b29b      	uxth	r3, r3
 8015eb0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8015eb4:	4576      	cmp	r6, lr
 8015eb6:	f849 3b04 	str.w	r3, [r9], #4
 8015eba:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8015ebe:	d8e5      	bhi.n	8015e8c <__mdiff+0x88>
 8015ec0:	1b33      	subs	r3, r6, r4
 8015ec2:	3b15      	subs	r3, #21
 8015ec4:	f023 0303 	bic.w	r3, r3, #3
 8015ec8:	3415      	adds	r4, #21
 8015eca:	3304      	adds	r3, #4
 8015ecc:	42a6      	cmp	r6, r4
 8015ece:	bf38      	it	cc
 8015ed0:	2304      	movcc	r3, #4
 8015ed2:	441d      	add	r5, r3
 8015ed4:	445b      	add	r3, fp
 8015ed6:	461e      	mov	r6, r3
 8015ed8:	462c      	mov	r4, r5
 8015eda:	4544      	cmp	r4, r8
 8015edc:	d30e      	bcc.n	8015efc <__mdiff+0xf8>
 8015ede:	f108 0103 	add.w	r1, r8, #3
 8015ee2:	1b49      	subs	r1, r1, r5
 8015ee4:	f021 0103 	bic.w	r1, r1, #3
 8015ee8:	3d03      	subs	r5, #3
 8015eea:	45a8      	cmp	r8, r5
 8015eec:	bf38      	it	cc
 8015eee:	2100      	movcc	r1, #0
 8015ef0:	440b      	add	r3, r1
 8015ef2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015ef6:	b191      	cbz	r1, 8015f1e <__mdiff+0x11a>
 8015ef8:	6117      	str	r7, [r2, #16]
 8015efa:	e79d      	b.n	8015e38 <__mdiff+0x34>
 8015efc:	f854 1b04 	ldr.w	r1, [r4], #4
 8015f00:	46e6      	mov	lr, ip
 8015f02:	0c08      	lsrs	r0, r1, #16
 8015f04:	fa1c fc81 	uxtah	ip, ip, r1
 8015f08:	4471      	add	r1, lr
 8015f0a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8015f0e:	b289      	uxth	r1, r1
 8015f10:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8015f14:	f846 1b04 	str.w	r1, [r6], #4
 8015f18:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8015f1c:	e7dd      	b.n	8015eda <__mdiff+0xd6>
 8015f1e:	3f01      	subs	r7, #1
 8015f20:	e7e7      	b.n	8015ef2 <__mdiff+0xee>
 8015f22:	bf00      	nop
 8015f24:	080178d8 	.word	0x080178d8
 8015f28:	080178e9 	.word	0x080178e9

08015f2c <__d2b>:
 8015f2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015f30:	460f      	mov	r7, r1
 8015f32:	2101      	movs	r1, #1
 8015f34:	ec59 8b10 	vmov	r8, r9, d0
 8015f38:	4616      	mov	r6, r2
 8015f3a:	f7ff fcd5 	bl	80158e8 <_Balloc>
 8015f3e:	4604      	mov	r4, r0
 8015f40:	b930      	cbnz	r0, 8015f50 <__d2b+0x24>
 8015f42:	4602      	mov	r2, r0
 8015f44:	4b23      	ldr	r3, [pc, #140]	@ (8015fd4 <__d2b+0xa8>)
 8015f46:	4824      	ldr	r0, [pc, #144]	@ (8015fd8 <__d2b+0xac>)
 8015f48:	f240 310f 	movw	r1, #783	@ 0x30f
 8015f4c:	f000 fc20 	bl	8016790 <__assert_func>
 8015f50:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8015f54:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015f58:	b10d      	cbz	r5, 8015f5e <__d2b+0x32>
 8015f5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8015f5e:	9301      	str	r3, [sp, #4]
 8015f60:	f1b8 0300 	subs.w	r3, r8, #0
 8015f64:	d023      	beq.n	8015fae <__d2b+0x82>
 8015f66:	4668      	mov	r0, sp
 8015f68:	9300      	str	r3, [sp, #0]
 8015f6a:	f7ff fd84 	bl	8015a76 <__lo0bits>
 8015f6e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8015f72:	b1d0      	cbz	r0, 8015faa <__d2b+0x7e>
 8015f74:	f1c0 0320 	rsb	r3, r0, #32
 8015f78:	fa02 f303 	lsl.w	r3, r2, r3
 8015f7c:	430b      	orrs	r3, r1
 8015f7e:	40c2      	lsrs	r2, r0
 8015f80:	6163      	str	r3, [r4, #20]
 8015f82:	9201      	str	r2, [sp, #4]
 8015f84:	9b01      	ldr	r3, [sp, #4]
 8015f86:	61a3      	str	r3, [r4, #24]
 8015f88:	2b00      	cmp	r3, #0
 8015f8a:	bf0c      	ite	eq
 8015f8c:	2201      	moveq	r2, #1
 8015f8e:	2202      	movne	r2, #2
 8015f90:	6122      	str	r2, [r4, #16]
 8015f92:	b1a5      	cbz	r5, 8015fbe <__d2b+0x92>
 8015f94:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8015f98:	4405      	add	r5, r0
 8015f9a:	603d      	str	r5, [r7, #0]
 8015f9c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8015fa0:	6030      	str	r0, [r6, #0]
 8015fa2:	4620      	mov	r0, r4
 8015fa4:	b003      	add	sp, #12
 8015fa6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015faa:	6161      	str	r1, [r4, #20]
 8015fac:	e7ea      	b.n	8015f84 <__d2b+0x58>
 8015fae:	a801      	add	r0, sp, #4
 8015fb0:	f7ff fd61 	bl	8015a76 <__lo0bits>
 8015fb4:	9b01      	ldr	r3, [sp, #4]
 8015fb6:	6163      	str	r3, [r4, #20]
 8015fb8:	3020      	adds	r0, #32
 8015fba:	2201      	movs	r2, #1
 8015fbc:	e7e8      	b.n	8015f90 <__d2b+0x64>
 8015fbe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8015fc2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8015fc6:	6038      	str	r0, [r7, #0]
 8015fc8:	6918      	ldr	r0, [r3, #16]
 8015fca:	f7ff fd35 	bl	8015a38 <__hi0bits>
 8015fce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8015fd2:	e7e5      	b.n	8015fa0 <__d2b+0x74>
 8015fd4:	080178d8 	.word	0x080178d8
 8015fd8:	080178e9 	.word	0x080178e9

08015fdc <__ssputs_r>:
 8015fdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015fe0:	688e      	ldr	r6, [r1, #8]
 8015fe2:	461f      	mov	r7, r3
 8015fe4:	42be      	cmp	r6, r7
 8015fe6:	680b      	ldr	r3, [r1, #0]
 8015fe8:	4682      	mov	sl, r0
 8015fea:	460c      	mov	r4, r1
 8015fec:	4690      	mov	r8, r2
 8015fee:	d82d      	bhi.n	801604c <__ssputs_r+0x70>
 8015ff0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015ff4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8015ff8:	d026      	beq.n	8016048 <__ssputs_r+0x6c>
 8015ffa:	6965      	ldr	r5, [r4, #20]
 8015ffc:	6909      	ldr	r1, [r1, #16]
 8015ffe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016002:	eba3 0901 	sub.w	r9, r3, r1
 8016006:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801600a:	1c7b      	adds	r3, r7, #1
 801600c:	444b      	add	r3, r9
 801600e:	106d      	asrs	r5, r5, #1
 8016010:	429d      	cmp	r5, r3
 8016012:	bf38      	it	cc
 8016014:	461d      	movcc	r5, r3
 8016016:	0553      	lsls	r3, r2, #21
 8016018:	d527      	bpl.n	801606a <__ssputs_r+0x8e>
 801601a:	4629      	mov	r1, r5
 801601c:	f7ff fbd8 	bl	80157d0 <_malloc_r>
 8016020:	4606      	mov	r6, r0
 8016022:	b360      	cbz	r0, 801607e <__ssputs_r+0xa2>
 8016024:	6921      	ldr	r1, [r4, #16]
 8016026:	464a      	mov	r2, r9
 8016028:	f7fe fcf5 	bl	8014a16 <memcpy>
 801602c:	89a3      	ldrh	r3, [r4, #12]
 801602e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8016032:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016036:	81a3      	strh	r3, [r4, #12]
 8016038:	6126      	str	r6, [r4, #16]
 801603a:	6165      	str	r5, [r4, #20]
 801603c:	444e      	add	r6, r9
 801603e:	eba5 0509 	sub.w	r5, r5, r9
 8016042:	6026      	str	r6, [r4, #0]
 8016044:	60a5      	str	r5, [r4, #8]
 8016046:	463e      	mov	r6, r7
 8016048:	42be      	cmp	r6, r7
 801604a:	d900      	bls.n	801604e <__ssputs_r+0x72>
 801604c:	463e      	mov	r6, r7
 801604e:	6820      	ldr	r0, [r4, #0]
 8016050:	4632      	mov	r2, r6
 8016052:	4641      	mov	r1, r8
 8016054:	f7fe fc46 	bl	80148e4 <memmove>
 8016058:	68a3      	ldr	r3, [r4, #8]
 801605a:	1b9b      	subs	r3, r3, r6
 801605c:	60a3      	str	r3, [r4, #8]
 801605e:	6823      	ldr	r3, [r4, #0]
 8016060:	4433      	add	r3, r6
 8016062:	6023      	str	r3, [r4, #0]
 8016064:	2000      	movs	r0, #0
 8016066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801606a:	462a      	mov	r2, r5
 801606c:	f000 fbd4 	bl	8016818 <_realloc_r>
 8016070:	4606      	mov	r6, r0
 8016072:	2800      	cmp	r0, #0
 8016074:	d1e0      	bne.n	8016038 <__ssputs_r+0x5c>
 8016076:	6921      	ldr	r1, [r4, #16]
 8016078:	4650      	mov	r0, sl
 801607a:	f7ff fb35 	bl	80156e8 <_free_r>
 801607e:	230c      	movs	r3, #12
 8016080:	f8ca 3000 	str.w	r3, [sl]
 8016084:	89a3      	ldrh	r3, [r4, #12]
 8016086:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801608a:	81a3      	strh	r3, [r4, #12]
 801608c:	f04f 30ff 	mov.w	r0, #4294967295
 8016090:	e7e9      	b.n	8016066 <__ssputs_r+0x8a>
	...

08016094 <_svfiprintf_r>:
 8016094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016098:	4698      	mov	r8, r3
 801609a:	898b      	ldrh	r3, [r1, #12]
 801609c:	061b      	lsls	r3, r3, #24
 801609e:	b09d      	sub	sp, #116	@ 0x74
 80160a0:	4607      	mov	r7, r0
 80160a2:	460d      	mov	r5, r1
 80160a4:	4614      	mov	r4, r2
 80160a6:	d510      	bpl.n	80160ca <_svfiprintf_r+0x36>
 80160a8:	690b      	ldr	r3, [r1, #16]
 80160aa:	b973      	cbnz	r3, 80160ca <_svfiprintf_r+0x36>
 80160ac:	2140      	movs	r1, #64	@ 0x40
 80160ae:	f7ff fb8f 	bl	80157d0 <_malloc_r>
 80160b2:	6028      	str	r0, [r5, #0]
 80160b4:	6128      	str	r0, [r5, #16]
 80160b6:	b930      	cbnz	r0, 80160c6 <_svfiprintf_r+0x32>
 80160b8:	230c      	movs	r3, #12
 80160ba:	603b      	str	r3, [r7, #0]
 80160bc:	f04f 30ff 	mov.w	r0, #4294967295
 80160c0:	b01d      	add	sp, #116	@ 0x74
 80160c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80160c6:	2340      	movs	r3, #64	@ 0x40
 80160c8:	616b      	str	r3, [r5, #20]
 80160ca:	2300      	movs	r3, #0
 80160cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80160ce:	2320      	movs	r3, #32
 80160d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80160d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80160d8:	2330      	movs	r3, #48	@ 0x30
 80160da:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8016278 <_svfiprintf_r+0x1e4>
 80160de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80160e2:	f04f 0901 	mov.w	r9, #1
 80160e6:	4623      	mov	r3, r4
 80160e8:	469a      	mov	sl, r3
 80160ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80160ee:	b10a      	cbz	r2, 80160f4 <_svfiprintf_r+0x60>
 80160f0:	2a25      	cmp	r2, #37	@ 0x25
 80160f2:	d1f9      	bne.n	80160e8 <_svfiprintf_r+0x54>
 80160f4:	ebba 0b04 	subs.w	fp, sl, r4
 80160f8:	d00b      	beq.n	8016112 <_svfiprintf_r+0x7e>
 80160fa:	465b      	mov	r3, fp
 80160fc:	4622      	mov	r2, r4
 80160fe:	4629      	mov	r1, r5
 8016100:	4638      	mov	r0, r7
 8016102:	f7ff ff6b 	bl	8015fdc <__ssputs_r>
 8016106:	3001      	adds	r0, #1
 8016108:	f000 80a7 	beq.w	801625a <_svfiprintf_r+0x1c6>
 801610c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801610e:	445a      	add	r2, fp
 8016110:	9209      	str	r2, [sp, #36]	@ 0x24
 8016112:	f89a 3000 	ldrb.w	r3, [sl]
 8016116:	2b00      	cmp	r3, #0
 8016118:	f000 809f 	beq.w	801625a <_svfiprintf_r+0x1c6>
 801611c:	2300      	movs	r3, #0
 801611e:	f04f 32ff 	mov.w	r2, #4294967295
 8016122:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016126:	f10a 0a01 	add.w	sl, sl, #1
 801612a:	9304      	str	r3, [sp, #16]
 801612c:	9307      	str	r3, [sp, #28]
 801612e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016132:	931a      	str	r3, [sp, #104]	@ 0x68
 8016134:	4654      	mov	r4, sl
 8016136:	2205      	movs	r2, #5
 8016138:	f814 1b01 	ldrb.w	r1, [r4], #1
 801613c:	484e      	ldr	r0, [pc, #312]	@ (8016278 <_svfiprintf_r+0x1e4>)
 801613e:	f7f2 f84f 	bl	80081e0 <memchr>
 8016142:	9a04      	ldr	r2, [sp, #16]
 8016144:	b9d8      	cbnz	r0, 801617e <_svfiprintf_r+0xea>
 8016146:	06d0      	lsls	r0, r2, #27
 8016148:	bf44      	itt	mi
 801614a:	2320      	movmi	r3, #32
 801614c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016150:	0711      	lsls	r1, r2, #28
 8016152:	bf44      	itt	mi
 8016154:	232b      	movmi	r3, #43	@ 0x2b
 8016156:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801615a:	f89a 3000 	ldrb.w	r3, [sl]
 801615e:	2b2a      	cmp	r3, #42	@ 0x2a
 8016160:	d015      	beq.n	801618e <_svfiprintf_r+0xfa>
 8016162:	9a07      	ldr	r2, [sp, #28]
 8016164:	4654      	mov	r4, sl
 8016166:	2000      	movs	r0, #0
 8016168:	f04f 0c0a 	mov.w	ip, #10
 801616c:	4621      	mov	r1, r4
 801616e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016172:	3b30      	subs	r3, #48	@ 0x30
 8016174:	2b09      	cmp	r3, #9
 8016176:	d94b      	bls.n	8016210 <_svfiprintf_r+0x17c>
 8016178:	b1b0      	cbz	r0, 80161a8 <_svfiprintf_r+0x114>
 801617a:	9207      	str	r2, [sp, #28]
 801617c:	e014      	b.n	80161a8 <_svfiprintf_r+0x114>
 801617e:	eba0 0308 	sub.w	r3, r0, r8
 8016182:	fa09 f303 	lsl.w	r3, r9, r3
 8016186:	4313      	orrs	r3, r2
 8016188:	9304      	str	r3, [sp, #16]
 801618a:	46a2      	mov	sl, r4
 801618c:	e7d2      	b.n	8016134 <_svfiprintf_r+0xa0>
 801618e:	9b03      	ldr	r3, [sp, #12]
 8016190:	1d19      	adds	r1, r3, #4
 8016192:	681b      	ldr	r3, [r3, #0]
 8016194:	9103      	str	r1, [sp, #12]
 8016196:	2b00      	cmp	r3, #0
 8016198:	bfbb      	ittet	lt
 801619a:	425b      	neglt	r3, r3
 801619c:	f042 0202 	orrlt.w	r2, r2, #2
 80161a0:	9307      	strge	r3, [sp, #28]
 80161a2:	9307      	strlt	r3, [sp, #28]
 80161a4:	bfb8      	it	lt
 80161a6:	9204      	strlt	r2, [sp, #16]
 80161a8:	7823      	ldrb	r3, [r4, #0]
 80161aa:	2b2e      	cmp	r3, #46	@ 0x2e
 80161ac:	d10a      	bne.n	80161c4 <_svfiprintf_r+0x130>
 80161ae:	7863      	ldrb	r3, [r4, #1]
 80161b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80161b2:	d132      	bne.n	801621a <_svfiprintf_r+0x186>
 80161b4:	9b03      	ldr	r3, [sp, #12]
 80161b6:	1d1a      	adds	r2, r3, #4
 80161b8:	681b      	ldr	r3, [r3, #0]
 80161ba:	9203      	str	r2, [sp, #12]
 80161bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80161c0:	3402      	adds	r4, #2
 80161c2:	9305      	str	r3, [sp, #20]
 80161c4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8016288 <_svfiprintf_r+0x1f4>
 80161c8:	7821      	ldrb	r1, [r4, #0]
 80161ca:	2203      	movs	r2, #3
 80161cc:	4650      	mov	r0, sl
 80161ce:	f7f2 f807 	bl	80081e0 <memchr>
 80161d2:	b138      	cbz	r0, 80161e4 <_svfiprintf_r+0x150>
 80161d4:	9b04      	ldr	r3, [sp, #16]
 80161d6:	eba0 000a 	sub.w	r0, r0, sl
 80161da:	2240      	movs	r2, #64	@ 0x40
 80161dc:	4082      	lsls	r2, r0
 80161de:	4313      	orrs	r3, r2
 80161e0:	3401      	adds	r4, #1
 80161e2:	9304      	str	r3, [sp, #16]
 80161e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80161e8:	4824      	ldr	r0, [pc, #144]	@ (801627c <_svfiprintf_r+0x1e8>)
 80161ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80161ee:	2206      	movs	r2, #6
 80161f0:	f7f1 fff6 	bl	80081e0 <memchr>
 80161f4:	2800      	cmp	r0, #0
 80161f6:	d036      	beq.n	8016266 <_svfiprintf_r+0x1d2>
 80161f8:	4b21      	ldr	r3, [pc, #132]	@ (8016280 <_svfiprintf_r+0x1ec>)
 80161fa:	bb1b      	cbnz	r3, 8016244 <_svfiprintf_r+0x1b0>
 80161fc:	9b03      	ldr	r3, [sp, #12]
 80161fe:	3307      	adds	r3, #7
 8016200:	f023 0307 	bic.w	r3, r3, #7
 8016204:	3308      	adds	r3, #8
 8016206:	9303      	str	r3, [sp, #12]
 8016208:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801620a:	4433      	add	r3, r6
 801620c:	9309      	str	r3, [sp, #36]	@ 0x24
 801620e:	e76a      	b.n	80160e6 <_svfiprintf_r+0x52>
 8016210:	fb0c 3202 	mla	r2, ip, r2, r3
 8016214:	460c      	mov	r4, r1
 8016216:	2001      	movs	r0, #1
 8016218:	e7a8      	b.n	801616c <_svfiprintf_r+0xd8>
 801621a:	2300      	movs	r3, #0
 801621c:	3401      	adds	r4, #1
 801621e:	9305      	str	r3, [sp, #20]
 8016220:	4619      	mov	r1, r3
 8016222:	f04f 0c0a 	mov.w	ip, #10
 8016226:	4620      	mov	r0, r4
 8016228:	f810 2b01 	ldrb.w	r2, [r0], #1
 801622c:	3a30      	subs	r2, #48	@ 0x30
 801622e:	2a09      	cmp	r2, #9
 8016230:	d903      	bls.n	801623a <_svfiprintf_r+0x1a6>
 8016232:	2b00      	cmp	r3, #0
 8016234:	d0c6      	beq.n	80161c4 <_svfiprintf_r+0x130>
 8016236:	9105      	str	r1, [sp, #20]
 8016238:	e7c4      	b.n	80161c4 <_svfiprintf_r+0x130>
 801623a:	fb0c 2101 	mla	r1, ip, r1, r2
 801623e:	4604      	mov	r4, r0
 8016240:	2301      	movs	r3, #1
 8016242:	e7f0      	b.n	8016226 <_svfiprintf_r+0x192>
 8016244:	ab03      	add	r3, sp, #12
 8016246:	9300      	str	r3, [sp, #0]
 8016248:	462a      	mov	r2, r5
 801624a:	4b0e      	ldr	r3, [pc, #56]	@ (8016284 <_svfiprintf_r+0x1f0>)
 801624c:	a904      	add	r1, sp, #16
 801624e:	4638      	mov	r0, r7
 8016250:	f7fd fd66 	bl	8013d20 <_printf_float>
 8016254:	1c42      	adds	r2, r0, #1
 8016256:	4606      	mov	r6, r0
 8016258:	d1d6      	bne.n	8016208 <_svfiprintf_r+0x174>
 801625a:	89ab      	ldrh	r3, [r5, #12]
 801625c:	065b      	lsls	r3, r3, #25
 801625e:	f53f af2d 	bmi.w	80160bc <_svfiprintf_r+0x28>
 8016262:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016264:	e72c      	b.n	80160c0 <_svfiprintf_r+0x2c>
 8016266:	ab03      	add	r3, sp, #12
 8016268:	9300      	str	r3, [sp, #0]
 801626a:	462a      	mov	r2, r5
 801626c:	4b05      	ldr	r3, [pc, #20]	@ (8016284 <_svfiprintf_r+0x1f0>)
 801626e:	a904      	add	r1, sp, #16
 8016270:	4638      	mov	r0, r7
 8016272:	f7fd ffed 	bl	8014250 <_printf_i>
 8016276:	e7ed      	b.n	8016254 <_svfiprintf_r+0x1c0>
 8016278:	08017942 	.word	0x08017942
 801627c:	0801794c 	.word	0x0801794c
 8016280:	08013d21 	.word	0x08013d21
 8016284:	08015fdd 	.word	0x08015fdd
 8016288:	08017948 	.word	0x08017948

0801628c <__sfputc_r>:
 801628c:	6893      	ldr	r3, [r2, #8]
 801628e:	3b01      	subs	r3, #1
 8016290:	2b00      	cmp	r3, #0
 8016292:	b410      	push	{r4}
 8016294:	6093      	str	r3, [r2, #8]
 8016296:	da08      	bge.n	80162aa <__sfputc_r+0x1e>
 8016298:	6994      	ldr	r4, [r2, #24]
 801629a:	42a3      	cmp	r3, r4
 801629c:	db01      	blt.n	80162a2 <__sfputc_r+0x16>
 801629e:	290a      	cmp	r1, #10
 80162a0:	d103      	bne.n	80162aa <__sfputc_r+0x1e>
 80162a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80162a6:	f7fe ba88 	b.w	80147ba <__swbuf_r>
 80162aa:	6813      	ldr	r3, [r2, #0]
 80162ac:	1c58      	adds	r0, r3, #1
 80162ae:	6010      	str	r0, [r2, #0]
 80162b0:	7019      	strb	r1, [r3, #0]
 80162b2:	4608      	mov	r0, r1
 80162b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80162b8:	4770      	bx	lr

080162ba <__sfputs_r>:
 80162ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80162bc:	4606      	mov	r6, r0
 80162be:	460f      	mov	r7, r1
 80162c0:	4614      	mov	r4, r2
 80162c2:	18d5      	adds	r5, r2, r3
 80162c4:	42ac      	cmp	r4, r5
 80162c6:	d101      	bne.n	80162cc <__sfputs_r+0x12>
 80162c8:	2000      	movs	r0, #0
 80162ca:	e007      	b.n	80162dc <__sfputs_r+0x22>
 80162cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80162d0:	463a      	mov	r2, r7
 80162d2:	4630      	mov	r0, r6
 80162d4:	f7ff ffda 	bl	801628c <__sfputc_r>
 80162d8:	1c43      	adds	r3, r0, #1
 80162da:	d1f3      	bne.n	80162c4 <__sfputs_r+0xa>
 80162dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080162e0 <_vfiprintf_r>:
 80162e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162e4:	460d      	mov	r5, r1
 80162e6:	b09d      	sub	sp, #116	@ 0x74
 80162e8:	4614      	mov	r4, r2
 80162ea:	4698      	mov	r8, r3
 80162ec:	4606      	mov	r6, r0
 80162ee:	b118      	cbz	r0, 80162f8 <_vfiprintf_r+0x18>
 80162f0:	6a03      	ldr	r3, [r0, #32]
 80162f2:	b90b      	cbnz	r3, 80162f8 <_vfiprintf_r+0x18>
 80162f4:	f7fe f956 	bl	80145a4 <__sinit>
 80162f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80162fa:	07d9      	lsls	r1, r3, #31
 80162fc:	d405      	bmi.n	801630a <_vfiprintf_r+0x2a>
 80162fe:	89ab      	ldrh	r3, [r5, #12]
 8016300:	059a      	lsls	r2, r3, #22
 8016302:	d402      	bmi.n	801630a <_vfiprintf_r+0x2a>
 8016304:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016306:	f7fe fb84 	bl	8014a12 <__retarget_lock_acquire_recursive>
 801630a:	89ab      	ldrh	r3, [r5, #12]
 801630c:	071b      	lsls	r3, r3, #28
 801630e:	d501      	bpl.n	8016314 <_vfiprintf_r+0x34>
 8016310:	692b      	ldr	r3, [r5, #16]
 8016312:	b99b      	cbnz	r3, 801633c <_vfiprintf_r+0x5c>
 8016314:	4629      	mov	r1, r5
 8016316:	4630      	mov	r0, r6
 8016318:	f7fe fa8e 	bl	8014838 <__swsetup_r>
 801631c:	b170      	cbz	r0, 801633c <_vfiprintf_r+0x5c>
 801631e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016320:	07dc      	lsls	r4, r3, #31
 8016322:	d504      	bpl.n	801632e <_vfiprintf_r+0x4e>
 8016324:	f04f 30ff 	mov.w	r0, #4294967295
 8016328:	b01d      	add	sp, #116	@ 0x74
 801632a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801632e:	89ab      	ldrh	r3, [r5, #12]
 8016330:	0598      	lsls	r0, r3, #22
 8016332:	d4f7      	bmi.n	8016324 <_vfiprintf_r+0x44>
 8016334:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016336:	f7fe fb6d 	bl	8014a14 <__retarget_lock_release_recursive>
 801633a:	e7f3      	b.n	8016324 <_vfiprintf_r+0x44>
 801633c:	2300      	movs	r3, #0
 801633e:	9309      	str	r3, [sp, #36]	@ 0x24
 8016340:	2320      	movs	r3, #32
 8016342:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016346:	f8cd 800c 	str.w	r8, [sp, #12]
 801634a:	2330      	movs	r3, #48	@ 0x30
 801634c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80164fc <_vfiprintf_r+0x21c>
 8016350:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016354:	f04f 0901 	mov.w	r9, #1
 8016358:	4623      	mov	r3, r4
 801635a:	469a      	mov	sl, r3
 801635c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016360:	b10a      	cbz	r2, 8016366 <_vfiprintf_r+0x86>
 8016362:	2a25      	cmp	r2, #37	@ 0x25
 8016364:	d1f9      	bne.n	801635a <_vfiprintf_r+0x7a>
 8016366:	ebba 0b04 	subs.w	fp, sl, r4
 801636a:	d00b      	beq.n	8016384 <_vfiprintf_r+0xa4>
 801636c:	465b      	mov	r3, fp
 801636e:	4622      	mov	r2, r4
 8016370:	4629      	mov	r1, r5
 8016372:	4630      	mov	r0, r6
 8016374:	f7ff ffa1 	bl	80162ba <__sfputs_r>
 8016378:	3001      	adds	r0, #1
 801637a:	f000 80a7 	beq.w	80164cc <_vfiprintf_r+0x1ec>
 801637e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016380:	445a      	add	r2, fp
 8016382:	9209      	str	r2, [sp, #36]	@ 0x24
 8016384:	f89a 3000 	ldrb.w	r3, [sl]
 8016388:	2b00      	cmp	r3, #0
 801638a:	f000 809f 	beq.w	80164cc <_vfiprintf_r+0x1ec>
 801638e:	2300      	movs	r3, #0
 8016390:	f04f 32ff 	mov.w	r2, #4294967295
 8016394:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016398:	f10a 0a01 	add.w	sl, sl, #1
 801639c:	9304      	str	r3, [sp, #16]
 801639e:	9307      	str	r3, [sp, #28]
 80163a0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80163a4:	931a      	str	r3, [sp, #104]	@ 0x68
 80163a6:	4654      	mov	r4, sl
 80163a8:	2205      	movs	r2, #5
 80163aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80163ae:	4853      	ldr	r0, [pc, #332]	@ (80164fc <_vfiprintf_r+0x21c>)
 80163b0:	f7f1 ff16 	bl	80081e0 <memchr>
 80163b4:	9a04      	ldr	r2, [sp, #16]
 80163b6:	b9d8      	cbnz	r0, 80163f0 <_vfiprintf_r+0x110>
 80163b8:	06d1      	lsls	r1, r2, #27
 80163ba:	bf44      	itt	mi
 80163bc:	2320      	movmi	r3, #32
 80163be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80163c2:	0713      	lsls	r3, r2, #28
 80163c4:	bf44      	itt	mi
 80163c6:	232b      	movmi	r3, #43	@ 0x2b
 80163c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80163cc:	f89a 3000 	ldrb.w	r3, [sl]
 80163d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80163d2:	d015      	beq.n	8016400 <_vfiprintf_r+0x120>
 80163d4:	9a07      	ldr	r2, [sp, #28]
 80163d6:	4654      	mov	r4, sl
 80163d8:	2000      	movs	r0, #0
 80163da:	f04f 0c0a 	mov.w	ip, #10
 80163de:	4621      	mov	r1, r4
 80163e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80163e4:	3b30      	subs	r3, #48	@ 0x30
 80163e6:	2b09      	cmp	r3, #9
 80163e8:	d94b      	bls.n	8016482 <_vfiprintf_r+0x1a2>
 80163ea:	b1b0      	cbz	r0, 801641a <_vfiprintf_r+0x13a>
 80163ec:	9207      	str	r2, [sp, #28]
 80163ee:	e014      	b.n	801641a <_vfiprintf_r+0x13a>
 80163f0:	eba0 0308 	sub.w	r3, r0, r8
 80163f4:	fa09 f303 	lsl.w	r3, r9, r3
 80163f8:	4313      	orrs	r3, r2
 80163fa:	9304      	str	r3, [sp, #16]
 80163fc:	46a2      	mov	sl, r4
 80163fe:	e7d2      	b.n	80163a6 <_vfiprintf_r+0xc6>
 8016400:	9b03      	ldr	r3, [sp, #12]
 8016402:	1d19      	adds	r1, r3, #4
 8016404:	681b      	ldr	r3, [r3, #0]
 8016406:	9103      	str	r1, [sp, #12]
 8016408:	2b00      	cmp	r3, #0
 801640a:	bfbb      	ittet	lt
 801640c:	425b      	neglt	r3, r3
 801640e:	f042 0202 	orrlt.w	r2, r2, #2
 8016412:	9307      	strge	r3, [sp, #28]
 8016414:	9307      	strlt	r3, [sp, #28]
 8016416:	bfb8      	it	lt
 8016418:	9204      	strlt	r2, [sp, #16]
 801641a:	7823      	ldrb	r3, [r4, #0]
 801641c:	2b2e      	cmp	r3, #46	@ 0x2e
 801641e:	d10a      	bne.n	8016436 <_vfiprintf_r+0x156>
 8016420:	7863      	ldrb	r3, [r4, #1]
 8016422:	2b2a      	cmp	r3, #42	@ 0x2a
 8016424:	d132      	bne.n	801648c <_vfiprintf_r+0x1ac>
 8016426:	9b03      	ldr	r3, [sp, #12]
 8016428:	1d1a      	adds	r2, r3, #4
 801642a:	681b      	ldr	r3, [r3, #0]
 801642c:	9203      	str	r2, [sp, #12]
 801642e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016432:	3402      	adds	r4, #2
 8016434:	9305      	str	r3, [sp, #20]
 8016436:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801650c <_vfiprintf_r+0x22c>
 801643a:	7821      	ldrb	r1, [r4, #0]
 801643c:	2203      	movs	r2, #3
 801643e:	4650      	mov	r0, sl
 8016440:	f7f1 fece 	bl	80081e0 <memchr>
 8016444:	b138      	cbz	r0, 8016456 <_vfiprintf_r+0x176>
 8016446:	9b04      	ldr	r3, [sp, #16]
 8016448:	eba0 000a 	sub.w	r0, r0, sl
 801644c:	2240      	movs	r2, #64	@ 0x40
 801644e:	4082      	lsls	r2, r0
 8016450:	4313      	orrs	r3, r2
 8016452:	3401      	adds	r4, #1
 8016454:	9304      	str	r3, [sp, #16]
 8016456:	f814 1b01 	ldrb.w	r1, [r4], #1
 801645a:	4829      	ldr	r0, [pc, #164]	@ (8016500 <_vfiprintf_r+0x220>)
 801645c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016460:	2206      	movs	r2, #6
 8016462:	f7f1 febd 	bl	80081e0 <memchr>
 8016466:	2800      	cmp	r0, #0
 8016468:	d03f      	beq.n	80164ea <_vfiprintf_r+0x20a>
 801646a:	4b26      	ldr	r3, [pc, #152]	@ (8016504 <_vfiprintf_r+0x224>)
 801646c:	bb1b      	cbnz	r3, 80164b6 <_vfiprintf_r+0x1d6>
 801646e:	9b03      	ldr	r3, [sp, #12]
 8016470:	3307      	adds	r3, #7
 8016472:	f023 0307 	bic.w	r3, r3, #7
 8016476:	3308      	adds	r3, #8
 8016478:	9303      	str	r3, [sp, #12]
 801647a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801647c:	443b      	add	r3, r7
 801647e:	9309      	str	r3, [sp, #36]	@ 0x24
 8016480:	e76a      	b.n	8016358 <_vfiprintf_r+0x78>
 8016482:	fb0c 3202 	mla	r2, ip, r2, r3
 8016486:	460c      	mov	r4, r1
 8016488:	2001      	movs	r0, #1
 801648a:	e7a8      	b.n	80163de <_vfiprintf_r+0xfe>
 801648c:	2300      	movs	r3, #0
 801648e:	3401      	adds	r4, #1
 8016490:	9305      	str	r3, [sp, #20]
 8016492:	4619      	mov	r1, r3
 8016494:	f04f 0c0a 	mov.w	ip, #10
 8016498:	4620      	mov	r0, r4
 801649a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801649e:	3a30      	subs	r2, #48	@ 0x30
 80164a0:	2a09      	cmp	r2, #9
 80164a2:	d903      	bls.n	80164ac <_vfiprintf_r+0x1cc>
 80164a4:	2b00      	cmp	r3, #0
 80164a6:	d0c6      	beq.n	8016436 <_vfiprintf_r+0x156>
 80164a8:	9105      	str	r1, [sp, #20]
 80164aa:	e7c4      	b.n	8016436 <_vfiprintf_r+0x156>
 80164ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80164b0:	4604      	mov	r4, r0
 80164b2:	2301      	movs	r3, #1
 80164b4:	e7f0      	b.n	8016498 <_vfiprintf_r+0x1b8>
 80164b6:	ab03      	add	r3, sp, #12
 80164b8:	9300      	str	r3, [sp, #0]
 80164ba:	462a      	mov	r2, r5
 80164bc:	4b12      	ldr	r3, [pc, #72]	@ (8016508 <_vfiprintf_r+0x228>)
 80164be:	a904      	add	r1, sp, #16
 80164c0:	4630      	mov	r0, r6
 80164c2:	f7fd fc2d 	bl	8013d20 <_printf_float>
 80164c6:	4607      	mov	r7, r0
 80164c8:	1c78      	adds	r0, r7, #1
 80164ca:	d1d6      	bne.n	801647a <_vfiprintf_r+0x19a>
 80164cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80164ce:	07d9      	lsls	r1, r3, #31
 80164d0:	d405      	bmi.n	80164de <_vfiprintf_r+0x1fe>
 80164d2:	89ab      	ldrh	r3, [r5, #12]
 80164d4:	059a      	lsls	r2, r3, #22
 80164d6:	d402      	bmi.n	80164de <_vfiprintf_r+0x1fe>
 80164d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80164da:	f7fe fa9b 	bl	8014a14 <__retarget_lock_release_recursive>
 80164de:	89ab      	ldrh	r3, [r5, #12]
 80164e0:	065b      	lsls	r3, r3, #25
 80164e2:	f53f af1f 	bmi.w	8016324 <_vfiprintf_r+0x44>
 80164e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80164e8:	e71e      	b.n	8016328 <_vfiprintf_r+0x48>
 80164ea:	ab03      	add	r3, sp, #12
 80164ec:	9300      	str	r3, [sp, #0]
 80164ee:	462a      	mov	r2, r5
 80164f0:	4b05      	ldr	r3, [pc, #20]	@ (8016508 <_vfiprintf_r+0x228>)
 80164f2:	a904      	add	r1, sp, #16
 80164f4:	4630      	mov	r0, r6
 80164f6:	f7fd feab 	bl	8014250 <_printf_i>
 80164fa:	e7e4      	b.n	80164c6 <_vfiprintf_r+0x1e6>
 80164fc:	08017942 	.word	0x08017942
 8016500:	0801794c 	.word	0x0801794c
 8016504:	08013d21 	.word	0x08013d21
 8016508:	080162bb 	.word	0x080162bb
 801650c:	08017948 	.word	0x08017948

08016510 <__sflush_r>:
 8016510:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016518:	0716      	lsls	r6, r2, #28
 801651a:	4605      	mov	r5, r0
 801651c:	460c      	mov	r4, r1
 801651e:	d454      	bmi.n	80165ca <__sflush_r+0xba>
 8016520:	684b      	ldr	r3, [r1, #4]
 8016522:	2b00      	cmp	r3, #0
 8016524:	dc02      	bgt.n	801652c <__sflush_r+0x1c>
 8016526:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8016528:	2b00      	cmp	r3, #0
 801652a:	dd48      	ble.n	80165be <__sflush_r+0xae>
 801652c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801652e:	2e00      	cmp	r6, #0
 8016530:	d045      	beq.n	80165be <__sflush_r+0xae>
 8016532:	2300      	movs	r3, #0
 8016534:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8016538:	682f      	ldr	r7, [r5, #0]
 801653a:	6a21      	ldr	r1, [r4, #32]
 801653c:	602b      	str	r3, [r5, #0]
 801653e:	d030      	beq.n	80165a2 <__sflush_r+0x92>
 8016540:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8016542:	89a3      	ldrh	r3, [r4, #12]
 8016544:	0759      	lsls	r1, r3, #29
 8016546:	d505      	bpl.n	8016554 <__sflush_r+0x44>
 8016548:	6863      	ldr	r3, [r4, #4]
 801654a:	1ad2      	subs	r2, r2, r3
 801654c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801654e:	b10b      	cbz	r3, 8016554 <__sflush_r+0x44>
 8016550:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8016552:	1ad2      	subs	r2, r2, r3
 8016554:	2300      	movs	r3, #0
 8016556:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016558:	6a21      	ldr	r1, [r4, #32]
 801655a:	4628      	mov	r0, r5
 801655c:	47b0      	blx	r6
 801655e:	1c43      	adds	r3, r0, #1
 8016560:	89a3      	ldrh	r3, [r4, #12]
 8016562:	d106      	bne.n	8016572 <__sflush_r+0x62>
 8016564:	6829      	ldr	r1, [r5, #0]
 8016566:	291d      	cmp	r1, #29
 8016568:	d82b      	bhi.n	80165c2 <__sflush_r+0xb2>
 801656a:	4a2a      	ldr	r2, [pc, #168]	@ (8016614 <__sflush_r+0x104>)
 801656c:	40ca      	lsrs	r2, r1
 801656e:	07d6      	lsls	r6, r2, #31
 8016570:	d527      	bpl.n	80165c2 <__sflush_r+0xb2>
 8016572:	2200      	movs	r2, #0
 8016574:	6062      	str	r2, [r4, #4]
 8016576:	04d9      	lsls	r1, r3, #19
 8016578:	6922      	ldr	r2, [r4, #16]
 801657a:	6022      	str	r2, [r4, #0]
 801657c:	d504      	bpl.n	8016588 <__sflush_r+0x78>
 801657e:	1c42      	adds	r2, r0, #1
 8016580:	d101      	bne.n	8016586 <__sflush_r+0x76>
 8016582:	682b      	ldr	r3, [r5, #0]
 8016584:	b903      	cbnz	r3, 8016588 <__sflush_r+0x78>
 8016586:	6560      	str	r0, [r4, #84]	@ 0x54
 8016588:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801658a:	602f      	str	r7, [r5, #0]
 801658c:	b1b9      	cbz	r1, 80165be <__sflush_r+0xae>
 801658e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016592:	4299      	cmp	r1, r3
 8016594:	d002      	beq.n	801659c <__sflush_r+0x8c>
 8016596:	4628      	mov	r0, r5
 8016598:	f7ff f8a6 	bl	80156e8 <_free_r>
 801659c:	2300      	movs	r3, #0
 801659e:	6363      	str	r3, [r4, #52]	@ 0x34
 80165a0:	e00d      	b.n	80165be <__sflush_r+0xae>
 80165a2:	2301      	movs	r3, #1
 80165a4:	4628      	mov	r0, r5
 80165a6:	47b0      	blx	r6
 80165a8:	4602      	mov	r2, r0
 80165aa:	1c50      	adds	r0, r2, #1
 80165ac:	d1c9      	bne.n	8016542 <__sflush_r+0x32>
 80165ae:	682b      	ldr	r3, [r5, #0]
 80165b0:	2b00      	cmp	r3, #0
 80165b2:	d0c6      	beq.n	8016542 <__sflush_r+0x32>
 80165b4:	2b1d      	cmp	r3, #29
 80165b6:	d001      	beq.n	80165bc <__sflush_r+0xac>
 80165b8:	2b16      	cmp	r3, #22
 80165ba:	d11e      	bne.n	80165fa <__sflush_r+0xea>
 80165bc:	602f      	str	r7, [r5, #0]
 80165be:	2000      	movs	r0, #0
 80165c0:	e022      	b.n	8016608 <__sflush_r+0xf8>
 80165c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80165c6:	b21b      	sxth	r3, r3
 80165c8:	e01b      	b.n	8016602 <__sflush_r+0xf2>
 80165ca:	690f      	ldr	r7, [r1, #16]
 80165cc:	2f00      	cmp	r7, #0
 80165ce:	d0f6      	beq.n	80165be <__sflush_r+0xae>
 80165d0:	0793      	lsls	r3, r2, #30
 80165d2:	680e      	ldr	r6, [r1, #0]
 80165d4:	bf08      	it	eq
 80165d6:	694b      	ldreq	r3, [r1, #20]
 80165d8:	600f      	str	r7, [r1, #0]
 80165da:	bf18      	it	ne
 80165dc:	2300      	movne	r3, #0
 80165de:	eba6 0807 	sub.w	r8, r6, r7
 80165e2:	608b      	str	r3, [r1, #8]
 80165e4:	f1b8 0f00 	cmp.w	r8, #0
 80165e8:	dde9      	ble.n	80165be <__sflush_r+0xae>
 80165ea:	6a21      	ldr	r1, [r4, #32]
 80165ec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80165ee:	4643      	mov	r3, r8
 80165f0:	463a      	mov	r2, r7
 80165f2:	4628      	mov	r0, r5
 80165f4:	47b0      	blx	r6
 80165f6:	2800      	cmp	r0, #0
 80165f8:	dc08      	bgt.n	801660c <__sflush_r+0xfc>
 80165fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80165fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016602:	81a3      	strh	r3, [r4, #12]
 8016604:	f04f 30ff 	mov.w	r0, #4294967295
 8016608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801660c:	4407      	add	r7, r0
 801660e:	eba8 0800 	sub.w	r8, r8, r0
 8016612:	e7e7      	b.n	80165e4 <__sflush_r+0xd4>
 8016614:	20400001 	.word	0x20400001

08016618 <_fflush_r>:
 8016618:	b538      	push	{r3, r4, r5, lr}
 801661a:	690b      	ldr	r3, [r1, #16]
 801661c:	4605      	mov	r5, r0
 801661e:	460c      	mov	r4, r1
 8016620:	b913      	cbnz	r3, 8016628 <_fflush_r+0x10>
 8016622:	2500      	movs	r5, #0
 8016624:	4628      	mov	r0, r5
 8016626:	bd38      	pop	{r3, r4, r5, pc}
 8016628:	b118      	cbz	r0, 8016632 <_fflush_r+0x1a>
 801662a:	6a03      	ldr	r3, [r0, #32]
 801662c:	b90b      	cbnz	r3, 8016632 <_fflush_r+0x1a>
 801662e:	f7fd ffb9 	bl	80145a4 <__sinit>
 8016632:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016636:	2b00      	cmp	r3, #0
 8016638:	d0f3      	beq.n	8016622 <_fflush_r+0xa>
 801663a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801663c:	07d0      	lsls	r0, r2, #31
 801663e:	d404      	bmi.n	801664a <_fflush_r+0x32>
 8016640:	0599      	lsls	r1, r3, #22
 8016642:	d402      	bmi.n	801664a <_fflush_r+0x32>
 8016644:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016646:	f7fe f9e4 	bl	8014a12 <__retarget_lock_acquire_recursive>
 801664a:	4628      	mov	r0, r5
 801664c:	4621      	mov	r1, r4
 801664e:	f7ff ff5f 	bl	8016510 <__sflush_r>
 8016652:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016654:	07da      	lsls	r2, r3, #31
 8016656:	4605      	mov	r5, r0
 8016658:	d4e4      	bmi.n	8016624 <_fflush_r+0xc>
 801665a:	89a3      	ldrh	r3, [r4, #12]
 801665c:	059b      	lsls	r3, r3, #22
 801665e:	d4e1      	bmi.n	8016624 <_fflush_r+0xc>
 8016660:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016662:	f7fe f9d7 	bl	8014a14 <__retarget_lock_release_recursive>
 8016666:	e7dd      	b.n	8016624 <_fflush_r+0xc>

08016668 <__swhatbuf_r>:
 8016668:	b570      	push	{r4, r5, r6, lr}
 801666a:	460c      	mov	r4, r1
 801666c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016670:	2900      	cmp	r1, #0
 8016672:	b096      	sub	sp, #88	@ 0x58
 8016674:	4615      	mov	r5, r2
 8016676:	461e      	mov	r6, r3
 8016678:	da0d      	bge.n	8016696 <__swhatbuf_r+0x2e>
 801667a:	89a3      	ldrh	r3, [r4, #12]
 801667c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8016680:	f04f 0100 	mov.w	r1, #0
 8016684:	bf14      	ite	ne
 8016686:	2340      	movne	r3, #64	@ 0x40
 8016688:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801668c:	2000      	movs	r0, #0
 801668e:	6031      	str	r1, [r6, #0]
 8016690:	602b      	str	r3, [r5, #0]
 8016692:	b016      	add	sp, #88	@ 0x58
 8016694:	bd70      	pop	{r4, r5, r6, pc}
 8016696:	466a      	mov	r2, sp
 8016698:	f000 f848 	bl	801672c <_fstat_r>
 801669c:	2800      	cmp	r0, #0
 801669e:	dbec      	blt.n	801667a <__swhatbuf_r+0x12>
 80166a0:	9901      	ldr	r1, [sp, #4]
 80166a2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80166a6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80166aa:	4259      	negs	r1, r3
 80166ac:	4159      	adcs	r1, r3
 80166ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80166b2:	e7eb      	b.n	801668c <__swhatbuf_r+0x24>

080166b4 <__smakebuf_r>:
 80166b4:	898b      	ldrh	r3, [r1, #12]
 80166b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80166b8:	079d      	lsls	r5, r3, #30
 80166ba:	4606      	mov	r6, r0
 80166bc:	460c      	mov	r4, r1
 80166be:	d507      	bpl.n	80166d0 <__smakebuf_r+0x1c>
 80166c0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80166c4:	6023      	str	r3, [r4, #0]
 80166c6:	6123      	str	r3, [r4, #16]
 80166c8:	2301      	movs	r3, #1
 80166ca:	6163      	str	r3, [r4, #20]
 80166cc:	b003      	add	sp, #12
 80166ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80166d0:	ab01      	add	r3, sp, #4
 80166d2:	466a      	mov	r2, sp
 80166d4:	f7ff ffc8 	bl	8016668 <__swhatbuf_r>
 80166d8:	9f00      	ldr	r7, [sp, #0]
 80166da:	4605      	mov	r5, r0
 80166dc:	4639      	mov	r1, r7
 80166de:	4630      	mov	r0, r6
 80166e0:	f7ff f876 	bl	80157d0 <_malloc_r>
 80166e4:	b948      	cbnz	r0, 80166fa <__smakebuf_r+0x46>
 80166e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80166ea:	059a      	lsls	r2, r3, #22
 80166ec:	d4ee      	bmi.n	80166cc <__smakebuf_r+0x18>
 80166ee:	f023 0303 	bic.w	r3, r3, #3
 80166f2:	f043 0302 	orr.w	r3, r3, #2
 80166f6:	81a3      	strh	r3, [r4, #12]
 80166f8:	e7e2      	b.n	80166c0 <__smakebuf_r+0xc>
 80166fa:	89a3      	ldrh	r3, [r4, #12]
 80166fc:	6020      	str	r0, [r4, #0]
 80166fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016702:	81a3      	strh	r3, [r4, #12]
 8016704:	9b01      	ldr	r3, [sp, #4]
 8016706:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801670a:	b15b      	cbz	r3, 8016724 <__smakebuf_r+0x70>
 801670c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016710:	4630      	mov	r0, r6
 8016712:	f000 f81d 	bl	8016750 <_isatty_r>
 8016716:	b128      	cbz	r0, 8016724 <__smakebuf_r+0x70>
 8016718:	89a3      	ldrh	r3, [r4, #12]
 801671a:	f023 0303 	bic.w	r3, r3, #3
 801671e:	f043 0301 	orr.w	r3, r3, #1
 8016722:	81a3      	strh	r3, [r4, #12]
 8016724:	89a3      	ldrh	r3, [r4, #12]
 8016726:	431d      	orrs	r5, r3
 8016728:	81a5      	strh	r5, [r4, #12]
 801672a:	e7cf      	b.n	80166cc <__smakebuf_r+0x18>

0801672c <_fstat_r>:
 801672c:	b538      	push	{r3, r4, r5, lr}
 801672e:	4d07      	ldr	r5, [pc, #28]	@ (801674c <_fstat_r+0x20>)
 8016730:	2300      	movs	r3, #0
 8016732:	4604      	mov	r4, r0
 8016734:	4608      	mov	r0, r1
 8016736:	4611      	mov	r1, r2
 8016738:	602b      	str	r3, [r5, #0]
 801673a:	f7f4 f989 	bl	800aa50 <_fstat>
 801673e:	1c43      	adds	r3, r0, #1
 8016740:	d102      	bne.n	8016748 <_fstat_r+0x1c>
 8016742:	682b      	ldr	r3, [r5, #0]
 8016744:	b103      	cbz	r3, 8016748 <_fstat_r+0x1c>
 8016746:	6023      	str	r3, [r4, #0]
 8016748:	bd38      	pop	{r3, r4, r5, pc}
 801674a:	bf00      	nop
 801674c:	20001448 	.word	0x20001448

08016750 <_isatty_r>:
 8016750:	b538      	push	{r3, r4, r5, lr}
 8016752:	4d06      	ldr	r5, [pc, #24]	@ (801676c <_isatty_r+0x1c>)
 8016754:	2300      	movs	r3, #0
 8016756:	4604      	mov	r4, r0
 8016758:	4608      	mov	r0, r1
 801675a:	602b      	str	r3, [r5, #0]
 801675c:	f7f4 f988 	bl	800aa70 <_isatty>
 8016760:	1c43      	adds	r3, r0, #1
 8016762:	d102      	bne.n	801676a <_isatty_r+0x1a>
 8016764:	682b      	ldr	r3, [r5, #0]
 8016766:	b103      	cbz	r3, 801676a <_isatty_r+0x1a>
 8016768:	6023      	str	r3, [r4, #0]
 801676a:	bd38      	pop	{r3, r4, r5, pc}
 801676c:	20001448 	.word	0x20001448

08016770 <_sbrk_r>:
 8016770:	b538      	push	{r3, r4, r5, lr}
 8016772:	4d06      	ldr	r5, [pc, #24]	@ (801678c <_sbrk_r+0x1c>)
 8016774:	2300      	movs	r3, #0
 8016776:	4604      	mov	r4, r0
 8016778:	4608      	mov	r0, r1
 801677a:	602b      	str	r3, [r5, #0]
 801677c:	f7f4 f990 	bl	800aaa0 <_sbrk>
 8016780:	1c43      	adds	r3, r0, #1
 8016782:	d102      	bne.n	801678a <_sbrk_r+0x1a>
 8016784:	682b      	ldr	r3, [r5, #0]
 8016786:	b103      	cbz	r3, 801678a <_sbrk_r+0x1a>
 8016788:	6023      	str	r3, [r4, #0]
 801678a:	bd38      	pop	{r3, r4, r5, pc}
 801678c:	20001448 	.word	0x20001448

08016790 <__assert_func>:
 8016790:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016792:	4614      	mov	r4, r2
 8016794:	461a      	mov	r2, r3
 8016796:	4b09      	ldr	r3, [pc, #36]	@ (80167bc <__assert_func+0x2c>)
 8016798:	681b      	ldr	r3, [r3, #0]
 801679a:	4605      	mov	r5, r0
 801679c:	68d8      	ldr	r0, [r3, #12]
 801679e:	b14c      	cbz	r4, 80167b4 <__assert_func+0x24>
 80167a0:	4b07      	ldr	r3, [pc, #28]	@ (80167c0 <__assert_func+0x30>)
 80167a2:	9100      	str	r1, [sp, #0]
 80167a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80167a8:	4906      	ldr	r1, [pc, #24]	@ (80167c4 <__assert_func+0x34>)
 80167aa:	462b      	mov	r3, r5
 80167ac:	f000 f870 	bl	8016890 <fiprintf>
 80167b0:	f000 f880 	bl	80168b4 <abort>
 80167b4:	4b04      	ldr	r3, [pc, #16]	@ (80167c8 <__assert_func+0x38>)
 80167b6:	461c      	mov	r4, r3
 80167b8:	e7f3      	b.n	80167a2 <__assert_func+0x12>
 80167ba:	bf00      	nop
 80167bc:	20000134 	.word	0x20000134
 80167c0:	0801795d 	.word	0x0801795d
 80167c4:	0801796a 	.word	0x0801796a
 80167c8:	08017998 	.word	0x08017998

080167cc <_calloc_r>:
 80167cc:	b570      	push	{r4, r5, r6, lr}
 80167ce:	fba1 5402 	umull	r5, r4, r1, r2
 80167d2:	b934      	cbnz	r4, 80167e2 <_calloc_r+0x16>
 80167d4:	4629      	mov	r1, r5
 80167d6:	f7fe fffb 	bl	80157d0 <_malloc_r>
 80167da:	4606      	mov	r6, r0
 80167dc:	b928      	cbnz	r0, 80167ea <_calloc_r+0x1e>
 80167de:	4630      	mov	r0, r6
 80167e0:	bd70      	pop	{r4, r5, r6, pc}
 80167e2:	220c      	movs	r2, #12
 80167e4:	6002      	str	r2, [r0, #0]
 80167e6:	2600      	movs	r6, #0
 80167e8:	e7f9      	b.n	80167de <_calloc_r+0x12>
 80167ea:	462a      	mov	r2, r5
 80167ec:	4621      	mov	r1, r4
 80167ee:	f7fe f893 	bl	8014918 <memset>
 80167f2:	e7f4      	b.n	80167de <_calloc_r+0x12>

080167f4 <__ascii_mbtowc>:
 80167f4:	b082      	sub	sp, #8
 80167f6:	b901      	cbnz	r1, 80167fa <__ascii_mbtowc+0x6>
 80167f8:	a901      	add	r1, sp, #4
 80167fa:	b142      	cbz	r2, 801680e <__ascii_mbtowc+0x1a>
 80167fc:	b14b      	cbz	r3, 8016812 <__ascii_mbtowc+0x1e>
 80167fe:	7813      	ldrb	r3, [r2, #0]
 8016800:	600b      	str	r3, [r1, #0]
 8016802:	7812      	ldrb	r2, [r2, #0]
 8016804:	1e10      	subs	r0, r2, #0
 8016806:	bf18      	it	ne
 8016808:	2001      	movne	r0, #1
 801680a:	b002      	add	sp, #8
 801680c:	4770      	bx	lr
 801680e:	4610      	mov	r0, r2
 8016810:	e7fb      	b.n	801680a <__ascii_mbtowc+0x16>
 8016812:	f06f 0001 	mvn.w	r0, #1
 8016816:	e7f8      	b.n	801680a <__ascii_mbtowc+0x16>

08016818 <_realloc_r>:
 8016818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801681c:	4607      	mov	r7, r0
 801681e:	4614      	mov	r4, r2
 8016820:	460d      	mov	r5, r1
 8016822:	b921      	cbnz	r1, 801682e <_realloc_r+0x16>
 8016824:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016828:	4611      	mov	r1, r2
 801682a:	f7fe bfd1 	b.w	80157d0 <_malloc_r>
 801682e:	b92a      	cbnz	r2, 801683c <_realloc_r+0x24>
 8016830:	f7fe ff5a 	bl	80156e8 <_free_r>
 8016834:	4625      	mov	r5, r4
 8016836:	4628      	mov	r0, r5
 8016838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801683c:	f000 f841 	bl	80168c2 <_malloc_usable_size_r>
 8016840:	4284      	cmp	r4, r0
 8016842:	4606      	mov	r6, r0
 8016844:	d802      	bhi.n	801684c <_realloc_r+0x34>
 8016846:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801684a:	d8f4      	bhi.n	8016836 <_realloc_r+0x1e>
 801684c:	4621      	mov	r1, r4
 801684e:	4638      	mov	r0, r7
 8016850:	f7fe ffbe 	bl	80157d0 <_malloc_r>
 8016854:	4680      	mov	r8, r0
 8016856:	b908      	cbnz	r0, 801685c <_realloc_r+0x44>
 8016858:	4645      	mov	r5, r8
 801685a:	e7ec      	b.n	8016836 <_realloc_r+0x1e>
 801685c:	42b4      	cmp	r4, r6
 801685e:	4622      	mov	r2, r4
 8016860:	4629      	mov	r1, r5
 8016862:	bf28      	it	cs
 8016864:	4632      	movcs	r2, r6
 8016866:	f7fe f8d6 	bl	8014a16 <memcpy>
 801686a:	4629      	mov	r1, r5
 801686c:	4638      	mov	r0, r7
 801686e:	f7fe ff3b 	bl	80156e8 <_free_r>
 8016872:	e7f1      	b.n	8016858 <_realloc_r+0x40>

08016874 <__ascii_wctomb>:
 8016874:	4603      	mov	r3, r0
 8016876:	4608      	mov	r0, r1
 8016878:	b141      	cbz	r1, 801688c <__ascii_wctomb+0x18>
 801687a:	2aff      	cmp	r2, #255	@ 0xff
 801687c:	d904      	bls.n	8016888 <__ascii_wctomb+0x14>
 801687e:	228a      	movs	r2, #138	@ 0x8a
 8016880:	601a      	str	r2, [r3, #0]
 8016882:	f04f 30ff 	mov.w	r0, #4294967295
 8016886:	4770      	bx	lr
 8016888:	700a      	strb	r2, [r1, #0]
 801688a:	2001      	movs	r0, #1
 801688c:	4770      	bx	lr
	...

08016890 <fiprintf>:
 8016890:	b40e      	push	{r1, r2, r3}
 8016892:	b503      	push	{r0, r1, lr}
 8016894:	4601      	mov	r1, r0
 8016896:	ab03      	add	r3, sp, #12
 8016898:	4805      	ldr	r0, [pc, #20]	@ (80168b0 <fiprintf+0x20>)
 801689a:	f853 2b04 	ldr.w	r2, [r3], #4
 801689e:	6800      	ldr	r0, [r0, #0]
 80168a0:	9301      	str	r3, [sp, #4]
 80168a2:	f7ff fd1d 	bl	80162e0 <_vfiprintf_r>
 80168a6:	b002      	add	sp, #8
 80168a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80168ac:	b003      	add	sp, #12
 80168ae:	4770      	bx	lr
 80168b0:	20000134 	.word	0x20000134

080168b4 <abort>:
 80168b4:	b508      	push	{r3, lr}
 80168b6:	2006      	movs	r0, #6
 80168b8:	f000 f834 	bl	8016924 <raise>
 80168bc:	2001      	movs	r0, #1
 80168be:	f7f4 f893 	bl	800a9e8 <_exit>

080168c2 <_malloc_usable_size_r>:
 80168c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80168c6:	1f18      	subs	r0, r3, #4
 80168c8:	2b00      	cmp	r3, #0
 80168ca:	bfbc      	itt	lt
 80168cc:	580b      	ldrlt	r3, [r1, r0]
 80168ce:	18c0      	addlt	r0, r0, r3
 80168d0:	4770      	bx	lr

080168d2 <_raise_r>:
 80168d2:	291f      	cmp	r1, #31
 80168d4:	b538      	push	{r3, r4, r5, lr}
 80168d6:	4605      	mov	r5, r0
 80168d8:	460c      	mov	r4, r1
 80168da:	d904      	bls.n	80168e6 <_raise_r+0x14>
 80168dc:	2316      	movs	r3, #22
 80168de:	6003      	str	r3, [r0, #0]
 80168e0:	f04f 30ff 	mov.w	r0, #4294967295
 80168e4:	bd38      	pop	{r3, r4, r5, pc}
 80168e6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80168e8:	b112      	cbz	r2, 80168f0 <_raise_r+0x1e>
 80168ea:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80168ee:	b94b      	cbnz	r3, 8016904 <_raise_r+0x32>
 80168f0:	4628      	mov	r0, r5
 80168f2:	f000 f831 	bl	8016958 <_getpid_r>
 80168f6:	4622      	mov	r2, r4
 80168f8:	4601      	mov	r1, r0
 80168fa:	4628      	mov	r0, r5
 80168fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016900:	f000 b818 	b.w	8016934 <_kill_r>
 8016904:	2b01      	cmp	r3, #1
 8016906:	d00a      	beq.n	801691e <_raise_r+0x4c>
 8016908:	1c59      	adds	r1, r3, #1
 801690a:	d103      	bne.n	8016914 <_raise_r+0x42>
 801690c:	2316      	movs	r3, #22
 801690e:	6003      	str	r3, [r0, #0]
 8016910:	2001      	movs	r0, #1
 8016912:	e7e7      	b.n	80168e4 <_raise_r+0x12>
 8016914:	2100      	movs	r1, #0
 8016916:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801691a:	4620      	mov	r0, r4
 801691c:	4798      	blx	r3
 801691e:	2000      	movs	r0, #0
 8016920:	e7e0      	b.n	80168e4 <_raise_r+0x12>
	...

08016924 <raise>:
 8016924:	4b02      	ldr	r3, [pc, #8]	@ (8016930 <raise+0xc>)
 8016926:	4601      	mov	r1, r0
 8016928:	6818      	ldr	r0, [r3, #0]
 801692a:	f7ff bfd2 	b.w	80168d2 <_raise_r>
 801692e:	bf00      	nop
 8016930:	20000134 	.word	0x20000134

08016934 <_kill_r>:
 8016934:	b538      	push	{r3, r4, r5, lr}
 8016936:	4d07      	ldr	r5, [pc, #28]	@ (8016954 <_kill_r+0x20>)
 8016938:	2300      	movs	r3, #0
 801693a:	4604      	mov	r4, r0
 801693c:	4608      	mov	r0, r1
 801693e:	4611      	mov	r1, r2
 8016940:	602b      	str	r3, [r5, #0]
 8016942:	f7f4 f841 	bl	800a9c8 <_kill>
 8016946:	1c43      	adds	r3, r0, #1
 8016948:	d102      	bne.n	8016950 <_kill_r+0x1c>
 801694a:	682b      	ldr	r3, [r5, #0]
 801694c:	b103      	cbz	r3, 8016950 <_kill_r+0x1c>
 801694e:	6023      	str	r3, [r4, #0]
 8016950:	bd38      	pop	{r3, r4, r5, pc}
 8016952:	bf00      	nop
 8016954:	20001448 	.word	0x20001448

08016958 <_getpid_r>:
 8016958:	f7f4 b82e 	b.w	800a9b8 <_getpid>

0801695c <sqrtf>:
 801695c:	b508      	push	{r3, lr}
 801695e:	ed2d 8b02 	vpush	{d8}
 8016962:	eeb0 8a40 	vmov.f32	s16, s0
 8016966:	f000 f817 	bl	8016998 <__ieee754_sqrtf>
 801696a:	eeb4 8a48 	vcmp.f32	s16, s16
 801696e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016972:	d60c      	bvs.n	801698e <sqrtf+0x32>
 8016974:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8016994 <sqrtf+0x38>
 8016978:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801697c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016980:	d505      	bpl.n	801698e <sqrtf+0x32>
 8016982:	f7fe f81b 	bl	80149bc <__errno>
 8016986:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801698a:	2321      	movs	r3, #33	@ 0x21
 801698c:	6003      	str	r3, [r0, #0]
 801698e:	ecbd 8b02 	vpop	{d8}
 8016992:	bd08      	pop	{r3, pc}
 8016994:	00000000 	.word	0x00000000

08016998 <__ieee754_sqrtf>:
 8016998:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801699c:	4770      	bx	lr
	...

080169a0 <_init>:
 80169a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80169a2:	bf00      	nop
 80169a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80169a6:	bc08      	pop	{r3}
 80169a8:	469e      	mov	lr, r3
 80169aa:	4770      	bx	lr

080169ac <_fini>:
 80169ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80169ae:	bf00      	nop
 80169b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80169b2:	bc08      	pop	{r3}
 80169b4:	469e      	mov	lr, r3
 80169b6:	4770      	bx	lr
